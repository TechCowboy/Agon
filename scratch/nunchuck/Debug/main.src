; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optsize -noreduceopt -nopadbranch -debug
; -peephole -globalopt -localcse -const=ROM 
	FILE	"..\main.c"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "fmt_type",19
.DEFINE "status"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flags"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "size"
.VALUE 2
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "chr"
.VALUE 3
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "type"
.VALUE 4
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "field_width"
.VALUE 5
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "precision"
.VALUE 6
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "set_begin"
.VALUE 7
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "set_end"
.VALUE 10
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "pad_whole"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_pre_fract"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_post_fract"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_at"
.VALUE 16
.CLASS 8
.TYPE 34
.ENDEF
.ENDREC "fmt_type"
.BEGREC "flt_info",12
.DEFINE "flags"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "digits"
.VALUE 2
.CLASS 8
.DIM 10
.TYPE 108
.ENDEF
.ENDREC "flt_info"
.BEGREC "NONAME0",51
.DEFINE "clock"
.VALUE 0
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "vpd_protocol_flags"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keyascii"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keymods"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "cursorX"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "cursorY"
.VALUE 8
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrchar"
.VALUE 9
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrpixel"
.VALUE 10
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "audioChannel"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "audioSuccess"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrwidth"
.VALUE 15
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "scrheight"
.VALUE 17
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "scrcols"
.VALUE 19
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrrows"
.VALUE 20
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrcolours"
.VALUE 21
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrpixelIndex"
.VALUE 22
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keycode"
.VALUE 23
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keydown"
.VALUE 24
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keycount"
.VALUE 25
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "rtc"
.VALUE 26
.CLASS 8
.DIM 6
.TYPE 108
.ENDEF
.DEFINE "rtc_spare"
.VALUE 32
.CLASS 8
.DIM 2
.TYPE 108
.ENDEF
.DEFINE "keydelay"
.VALUE 34
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "keyrate"
.VALUE 36
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "keyled"
.VALUE 38
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrmode"
.VALUE 39
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "rtc_enable"
.VALUE 40
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "mouseX"
.VALUE 41
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "mouseY"
.VALUE 43
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "mouseButtons"
.VALUE 45
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "mouseWheel"
.VALUE 46
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "mouseXDelta"
.VALUE 47
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "mouseYDelta"
.VALUE 49
.CLASS 8
.TYPE 13
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",8
.DEFINE "baudRate"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "dataBits"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stopBits"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "parity"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flowcontrol"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "eir"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "NONAME1"
.BEGREC "NONAME2",15
.DEFINE "fs"
.VALUE 0
.CLASS 8
.TYPE 46
.ENDEF
.DEFINE "id"
.VALUE 3
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "attr"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stat"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "sclust"
.VALUE 7
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "objsize"
.VALUE 11
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME2"
.BEGREC "NONAME3",36
.DEFINE "obj"
.VALUE 0
.CLASS 8
.TAG "NONAME2"
.TYPE 8
.ENDEF
.DEFINE "flag"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "err"
.VALUE 16
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "fptr"
.VALUE 17
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "clust"
.VALUE 21
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "sect"
.VALUE 25
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "dir_sect"
.VALUE 29
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "dir_ptr"
.VALUE 33
.CLASS 8
.TYPE 46
.ENDEF
.ENDREC "NONAME3"
	SEGMENT BSS
_zeroJoyX:
	DS	1
.DEFINE "zeroJoyX"
.ALIAS "_zeroJoyX"
.CLASS 83
.VALUE _zeroJoyX
.TYPE 12
.ENDEF
_zeroJoyY:
	DS	1
.DEFINE "zeroJoyY"
.ALIAS "_zeroJoyY"
.CLASS 83
.VALUE _zeroJoyY
.TYPE 12
.ENDEF
_lastJoyX:
	DS	3
.DEFINE "lastJoyX"
.ALIAS "_lastJoyX"
.CLASS 83
.VALUE _lastJoyX
.TYPE 4
.ENDEF
_lastJoyY:
	DS	3
.DEFINE "lastJoyY"
.ALIAS "_lastJoyY"
.CLASS 83
.VALUE _lastJoyY
.TYPE 4
.ENDEF
_joyX:
	DS	1
.DEFINE "joyX"
.ALIAS "_joyX"
.CLASS 83
.VALUE _joyX
.TYPE 12
.ENDEF
_joyY:
	DS	1
.DEFINE "joyY"
.ALIAS "_joyY"
.CLASS 83
.VALUE _joyY
.TYPE 12
.ENDEF
_buttonZ:
	DS	1
.DEFINE "buttonZ"
.ALIAS "_buttonZ"
.CLASS 83
.VALUE _buttonZ
.TYPE 12
.ENDEF
_buttonC:
	DS	1
.DEFINE "buttonC"
.ALIAS "_buttonC"
.CLASS 83
.VALUE _buttonC
.TYPE 12
.ENDEF
;    1	#include <stdio.h>
;    2	#include <ctype.h>
;    3	#include "mos-interface.h"
;    4	#include "vdp.h"
;    5	#include "agontimer.h"
;    6	
;    7	#define DEFAULT_ZERO_JOY_X 124
;    8	#define DEFAULT_ZERO_JOY_Y 132
;    9	uint8_t zeroJoyX;
;   10	uint8_t zeroJoyY;
;   11	int lastJoyX;
;   12	int lastJoyY;
;   13	uint8_t joyX;
;   14	uint8_t joyY;
;   15	bool buttonZ;
;   16	bool buttonC;
	SEGMENT CODE
;   17	
;   18	int readJoyX() {
_readJoyX:
.DEFINE "_readJoyX"

.VALUE _readJoyX

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "readJoyX",18,"_readJoyX"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   19		return (int) joyX;// - zeroJoyX;
.LINE 19

	LD	A,(_joyX)
	UEXT	HL
	LD	L,A
;   20	}
.LINE 20

	LD	SP,IX
	POP	IX
	RET	


;**************************** _readJoyX ***************************
;Name                         Addr/Register   Size   Type
;_joyX                               STATIC      1   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "readJoyX",20,"_readJoyX"
;   21	
;   22	int readJoyY() {
_readJoyY:
.DEFINE "_readJoyY"

.VALUE _readJoyY

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "readJoyY",22,"_readJoyY"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   23		return (int)joyY;// - zeroJoyY;
.LINE 23

	LD	A,(_joyY)
	UEXT	HL
	LD	L,A
;   24	}
.LINE 24

	LD	SP,IX
	POP	IX
	RET	


;**************************** _readJoyY ***************************
;Name                         Addr/Register   Size   Type
;_joyY                               STATIC      1   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "readJoyY",24,"_readJoyY"
;   25	
;   26	void nunchuck_update(void) {
_nunchuck_update:
.DEFINE "_nunchuck_update"

.VALUE _nunchuck_update

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "nunchuck_update",26,"_nunchuck_update"

.LINE 26

.DEFINE "zero"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "values"

.CLASS 65

.VALUE -16

.DIM 6

.TYPE 108

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFF0
	LD	SP,HL
;   27		unsigned char values[6];
;   28		unsigned char zero = 0;
.LINE 28

	LD	(IX+%FFFFFFFF),%0
;   29	
;   30		if(mos_i2c_read(0x52, 6, values) == 0)
.LINE 30

	PEA	IX+%FFFFFFF0
	LD	BC,6
	PUSH	BC
	LD	BC,82
	PUSH	BC
	CALL	_mos_i2c_read
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_11
;   31		{
;   32			lastJoyX = readJoyX();
.LINE 32

	CALL	_readJoyX
	LD	(_lastJoyX),HL
;   33			lastJoyY = readJoyY();
.LINE 33

	CALL	_readJoyY
	LD	(_lastJoyY),HL
;   34	
;   35			joyX = (values[0]);
.LINE 35

	LD	A,(IX+%FFFFFFF0)
	LD	(_joyX),A
;   36			joyY = (values[1]);
.LINE 36

	LEA	HL,IX+%FFFFFFF0
	INC	HL
	LD	A,(HL)
	LD	(_joyY),A
;   37	
;   38			buttonZ = !( values[5] & 0x01);
.LINE 38

	LEA	IY,IX+%FFFFFFF5
	LD	(IX+%FFFFFFF6),IY
	LD	HL,(IX+%FFFFFFF6)
	LD	A,(HL)
	AND	A,%1
	JR	NZ,L_3
	LD	BC,1
	LD	(IX+%FFFFFFFC),BC
	JR	L_4
L_3:
	LD	BC,0
	LD	(IX+%FFFFFFFC),BC
L_4:
	LD	A,(IX+%FFFFFFFC)
	LD	(_buttonZ),A
;   39			buttonC = !((values[5] & 0x02) >> 1);
.LINE 39

	LD	HL,(IX+%FFFFFFF6)
	LD	A,(HL)
	SRL	A
	AND	A,%1
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	NZ,L_7
	LD	BC,1
	LD	(IX+%FFFFFFF9),BC
	JR	L_8
L_7:
	LD	BC,0
	LD	(IX+%FFFFFFF9),BC
L_8:
	LD	A,(IX+%FFFFFFF9)
	LD	(_buttonC),A
;   40	
;   41			mos_i2c_write(0x52, 1, &zero);
.LINE 41

	PEA	IX+%FFFFFFFF
	LD	BC,1
	PUSH	BC
	LD	BC,82
	PUSH	BC
	CALL	_mos_i2c_write
	POP	BC
	POP	BC
	POP	BC
;   42		}
;   43		else {
.LINE 43

	JR	L_12
L_11:
;   44			printf("Error reading nunchuck\r\n");
.LINE 44

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__5
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;   45		}
;   46	}
L_12:
.LINE 46

	LD	SP,IX
	POP	IX
	RET	


;**************************** _nunchuck_update ***************************
;Name                         Addr/Register   Size   Type
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_mos_i2c_write                      IMPORT  -----   function
;_buttonC                            STATIC      1   variable
;_buttonZ                            STATIC      1   variable
;_joyY                               STATIC      1   variable
;_joyX                               STATIC      1   variable
;_lastJoyY                           STATIC      3   variable
;_lastJoyX                           STATIC      3   variable
;_mos_i2c_read                       IMPORT  -----   function
;values                               IX-16      6   variable
;G_0                                  IX-10      3   variable
;temp9                                 IX-7      3   variable
;temp5                                 IX-4      3   variable
;zero                                  IX-1      1   variable


; Stack Frame Size: 22 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "nunchuck_update",46,"_nunchuck_update"
	SEGMENT STRSECT
L__5:
	DB	"Error reading nunchuck"
	DB	13,10,0
	SEGMENT CODE
;   47	
;   48	void nunchuck_begin(void) {
_nunchuck_begin:
.DEFINE "_nunchuck_begin"

.VALUE _nunchuck_begin

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "nunchuck_begin",48,"_nunchuck_begin"

.LINE 48

.DEFINE "init1"

.CLASS 65

.VALUE -2

.DIM 2

.TYPE 108

.ENDEF

.DEFINE "init2"

.CLASS 65

.VALUE -4

.DIM 2

.TYPE 108

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	DEC	SP
;   49		uint8_t cnt;
;   50		unsigned char init1[] = {0xF0, 0x55};
.LINE 50

	LEA	DE,IX+%FFFFFFFE
	LD	HL,_0temp13
	LD	BC,2
	LDIR	
;   51		unsigned char init2[] = {0xFb, 0x00};
.LINE 51

	LEA	DE,IX+%FFFFFFFC
	LD	HL,_1temp14
	LD	BC,2
	LDIR	
;   52		cnt = 0;
;   53		//averagecounter = 0;
;   54		mos_i2c_open(3);
.LINE 54

	LD	BC,3
	PUSH	BC
	CALL	_mos_i2c_open
	POP	BC
;   55		mos_i2c_write(0x52, 2, init1);
.LINE 55

	PEA	IX+%FFFFFFFE
	LD	BC,2
	PUSH	BC
	LD	BC,82
	PUSH	BC
	CALL	_mos_i2c_write
	POP	BC
	POP	BC
	POP	BC
;   56		delayms(1);
.LINE 56

	LD	BC,1
	PUSH	BC
	CALL	_delayms
	POP	BC
;   57		mos_i2c_write(0x52, 2, init2);
.LINE 57

	PEA	IX+%FFFFFFFC
	LD	BC,2
	PUSH	BC
	LD	BC,82
	PUSH	BC
	CALL	_mos_i2c_write
	POP	BC
	POP	BC
	POP	BC
;   58		nunchuck_update();
.LINE 58

	CALL	_nunchuck_update
;   59	
;   60		//zeroJoyX = joyX;
;   61		//zeroJoyY = joyY;
;   62	}
.LINE 62

	LD	SP,IX
	POP	IX
	RET	


;**************************** _nunchuck_begin ***************************
;Name                         Addr/Register   Size   Type
;_delayms                            IMPORT  -----   function
;_mos_i2c_write                      IMPORT  -----   function
;_mos_i2c_open                       IMPORT  -----   function
;_1temp14                            STATIC      2   variable
;_0temp13                            STATIC      2   variable
;init2                                 IX-4      2   variable
;init1                                 IX-2      2   variable


; Stack Frame Size: 10 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "nunchuck_begin",62,"_nunchuck_begin"
	SEGMENT TEXT
_0temp13:
	DB	240
	DB	85
_1temp14:
	DB	251
	DB	0
	SEGMENT CODE
;   63	
;   64	int main(int argc, char * argv[]) {
_main:
.DEFINE "_main"

.VALUE _main

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "main",64,"_main"

.LINE 64

.DEFINE "argc"

.CLASS 65

.VALUE 6

.TYPE 4

.ENDEF

.DEFINE "argv"

.CLASS 65

.VALUE 9

.TYPE 290

.ENDEF

.DEFINE "x"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

.DEFINE "y"

.CLASS 65

.VALUE -6

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
;   65		int x, y;
;   66	
;   67		nunchuck_begin();
.LINE 67

	CALL	_nunchuck_begin
;   68	
;   69		while(1) {
L_28:
.LINE 69

;   70			delayms(100);
.LINE 70

	LD	BC,100
	PUSH	BC
	CALL	_delayms
	POP	BC
;   71	
;   72			nunchuck_update();
.LINE 72

	CALL	_nunchuck_update
;   73			x = readJoyX();
.LINE 73

	CALL	_readJoyX
	LD	(IX+%FFFFFFFD),HL
;   74			y = readJoyY();
.LINE 74

	CALL	_readJoyY
	LD	(IX+%FFFFFFFA),HL
;   75	
;   76			//printf("X: %d Y: %d               \r", readJoyX(), readJoyY());
;   77		
;   78			vdp_cls();
.LINE 78

	CALL	_vdp_cls
;   79			if(x < 100) printf("Left ");
.LINE 79

	LD	BC,100
	LD	HL,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JP	P,L_18
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__9
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
L_18:
;   80			if(x > 136) printf("Right ");
.LINE 80

	LD	BC,(IX+%FFFFFFFD)
	LD	HL,136
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_20
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__11
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
L_20:
;   81			if(y > 136) printf("Up ");
.LINE 81

	LD	BC,(IX+%FFFFFFFA)
	LD	HL,136
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_22
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__13
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
L_22:
;   82			if(y < 100) printf("Down ");
.LINE 82

	LD	BC,100
	LD	HL,(IX+%FFFFFFFA)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_24
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__15
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
L_24:
;   83			if(buttonC) printf("Button C ");
.LINE 83

	LD	A,(_buttonC)
	OR	A,A
	JR	Z,L_26
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__17
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
L_26:
;   84			if(buttonZ) printf("Button Z ");
.LINE 84

	LD	A,(_buttonZ)
	OR	A,A
	JR	Z,L_28
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__19
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;   85		}
.LINE 85

	JR	L_28
;   86		return 0;
;   87	}
.LINE 87

	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_buttonZ                            STATIC      1   variable
;_buttonC                            STATIC      1   variable
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_vdp_cls                            IMPORT  -----   function
;_delayms                            IMPORT  -----   function
;y                                     IX-6      3   variable
;x                                     IX-3      3   variable
;argv                                  IX+9      3   parameter
;argc                                  IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "main",87,"_main"
	SEGMENT STRSECT
L__9:
	DB	"Left "
	DB	0
L__11:
	DB	"Right "
	DB	0
L__13:
	DB	"Up "
	DB	0
L__15:
	DB	"Down "
	DB	0
L__17:
	DB	"Button C "
	DB	0
L__19:
	DB	"Button Z "
	DB	0
	XREF _delayms:ROM
	XREF _vdp_cls:ROM
	XREF _mos_i2c_read:ROM
	XREF _mos_i2c_write:ROM
	XREF _mos_i2c_open:ROM
	XREF ___print_sendstring:ROM
	XREF ___print_xputch:ROM
	XREF ___print_uputch:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XDEF _main
	XDEF _nunchuck_begin
	XDEF _nunchuck_update
	XDEF _readJoyY
	XDEF _readJoyX
	XDEF _buttonC
	XDEF _buttonZ
	XDEF _joyY
	XDEF _joyX
	XDEF _lastJoyY
	XDEF _lastJoyX
	XDEF _zeroJoyY
	XDEF _zeroJoyX
	END

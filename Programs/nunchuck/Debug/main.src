; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optsize -noreduceopt -nopadbranch -debug
; -peephole -globalopt -localcse -const=ROM 
	FILE	"..\main.c"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "fmt_type",19
.DEFINE "status"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flags"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "size"
.VALUE 2
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "chr"
.VALUE 3
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "type"
.VALUE 4
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "field_width"
.VALUE 5
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "precision"
.VALUE 6
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "set_begin"
.VALUE 7
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "set_end"
.VALUE 10
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "pad_whole"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_pre_fract"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_post_fract"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_at"
.VALUE 16
.CLASS 8
.TYPE 34
.ENDEF
.ENDREC "fmt_type"
.BEGREC "flt_info",12
.DEFINE "flags"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "digits"
.VALUE 2
.CLASS 8
.DIM 10
.TYPE 108
.ENDEF
.ENDREC "flt_info"
.BEGREC "NONAME0",51
.DEFINE "clock"
.VALUE 0
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "vpd_protocol_flags"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keyascii"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keymods"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "cursorX"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "cursorY"
.VALUE 8
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrchar"
.VALUE 9
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrpixel"
.VALUE 10
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "audioChannel"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "audioSuccess"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrwidth"
.VALUE 15
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "scrheight"
.VALUE 17
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "scrcols"
.VALUE 19
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrrows"
.VALUE 20
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrcolours"
.VALUE 21
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrpixelIndex"
.VALUE 22
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keycode"
.VALUE 23
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keydown"
.VALUE 24
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keycount"
.VALUE 25
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "rtc"
.VALUE 26
.CLASS 8
.DIM 6
.TYPE 108
.ENDEF
.DEFINE "rtc_spare"
.VALUE 32
.CLASS 8
.DIM 2
.TYPE 108
.ENDEF
.DEFINE "keydelay"
.VALUE 34
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "keyrate"
.VALUE 36
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "keyled"
.VALUE 38
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrmode"
.VALUE 39
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "rtc_enable"
.VALUE 40
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "mouseX"
.VALUE 41
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "mouseY"
.VALUE 43
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "mouseButtons"
.VALUE 45
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "mouseWheel"
.VALUE 46
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "mouseXDelta"
.VALUE 47
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "mouseYDelta"
.VALUE 49
.CLASS 8
.TYPE 13
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",8
.DEFINE "baudRate"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "dataBits"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stopBits"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "parity"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flowcontrol"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "eir"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "NONAME1"
.BEGREC "NONAME2",15
.DEFINE "fs"
.VALUE 0
.CLASS 8
.TYPE 46
.ENDEF
.DEFINE "id"
.VALUE 3
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "attr"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stat"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "sclust"
.VALUE 7
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "objsize"
.VALUE 11
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME2"
.BEGREC "NONAME3",36
.DEFINE "obj"
.VALUE 0
.CLASS 8
.TAG "NONAME2"
.TYPE 8
.ENDEF
.DEFINE "flag"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "err"
.VALUE 16
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "fptr"
.VALUE 17
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "clust"
.VALUE 21
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "sect"
.VALUE 25
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "dir_sect"
.VALUE 29
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "dir_ptr"
.VALUE 33
.CLASS 8
.TYPE 46
.ENDEF
.ENDREC "NONAME3"
	SEGMENT BSS
_joyX:
	DS	1
.DEFINE "joyX"
.ALIAS "_joyX"
.CLASS 83
.VALUE _joyX
.TYPE 12
.ENDEF
_joyY:
	DS	1
.DEFINE "joyY"
.ALIAS "_joyY"
.CLASS 83
.VALUE _joyY
.TYPE 12
.ENDEF
_buttonZ:
	DS	1
.DEFINE "buttonZ"
.ALIAS "_buttonZ"
.CLASS 83
.VALUE _buttonZ
.TYPE 12
.ENDEF
_buttonC:
	DS	1
.DEFINE "buttonC"
.ALIAS "_buttonC"
.CLASS 83
.VALUE _buttonC
.TYPE 12
.ENDEF
_angles:
	DS	9
.DEFINE "angles"
.ALIAS "_angles"
.CLASS 83
.VALUE _angles
.DIM 3
.TYPE 100
.ENDEF
_zero_angles:
	DS	9
.DEFINE "zero_angles"
.ALIAS "_zero_angles"
.CLASS 83
.VALUE _zero_angles
.DIM 3
.TYPE 100
.ENDEF
;    1	#include <stdio.h>
;    2	#include "mos-interface.h"
;    3	#include "vdp.h"
;    4	#include "agontimer.h"
;    5	
;    6	uint8_t joyX;
;    7	uint8_t joyY;
;    8	bool buttonZ;
;    9	bool buttonC;
;   10	int angles[3];
;   11	int zero_angles[3];
	SEGMENT CODE
;   12	
;   13	int readJoyX() {
_readJoyX:
.DEFINE "_readJoyX"

.VALUE _readJoyX

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "readJoyX",13,"_readJoyX"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   14		return joyX;
.LINE 14

	LD	A,(_joyX)
	UEXT	HL
	LD	L,A
;   15	}
.LINE 15

	LD	SP,IX
	POP	IX
	RET	


;**************************** _readJoyX ***************************
;Name                         Addr/Register   Size   Type
;_joyX                               STATIC      1   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "readJoyX",15,"_readJoyX"
;   16	
;   17	int readJoyY() {
_readJoyY:
.DEFINE "_readJoyY"

.VALUE _readJoyY

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "readJoyY",17,"_readJoyY"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   18		return joyY;
.LINE 18

	LD	A,(_joyY)
	UEXT	HL
	LD	L,A
;   19	}
.LINE 19

	LD	SP,IX
	POP	IX
	RET	


;**************************** _readJoyY ***************************
;Name                         Addr/Register   Size   Type
;_joyY                               STATIC      1   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "readJoyY",19,"_readJoyY"
;   20	
;   21	bool readButtonC() {
_readButtonC:
.DEFINE "_readButtonC"

.VALUE _readButtonC

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "readButtonC",21,"_readButtonC"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   22		return buttonC;
.LINE 22

	LD	A,(_buttonC)
;   23	}
.LINE 23

	LD	SP,IX
	POP	IX
	RET	


;**************************** _readButtonC ***************************
;Name                         Addr/Register   Size   Type
;_buttonC                            STATIC      1   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "readButtonC",23,"_readButtonC"
;   24	
;   25	bool readButtonZ() {
_readButtonZ:
.DEFINE "_readButtonZ"

.VALUE _readButtonZ

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "readButtonZ",25,"_readButtonZ"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   26		return buttonZ;
.LINE 26

	LD	A,(_buttonZ)
;   27	}
.LINE 27

	LD	SP,IX
	POP	IX
	RET	


;**************************** _readButtonZ ***************************
;Name                         Addr/Register   Size   Type
;_buttonZ                            STATIC      1   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "readButtonZ",27,"_readButtonZ"
;   28	
;   29	int readAngleX() {
_readAngleX:
.DEFINE "_readAngleX"

.VALUE _readAngleX

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "readAngleX",29,"_readAngleX"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   30		return angles[0] - zero_angles[0];
.LINE 30

	LD	HL,(_angles)
	LD	BC,(_zero_angles)
	OR	A,A
	SBC	HL,BC
;   31	}
.LINE 31

	LD	SP,IX
	POP	IX
	RET	


;**************************** _readAngleX ***************************
;Name                         Addr/Register   Size   Type
;_zero_angles                        STATIC      9   variable
;_angles                             STATIC      9   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "readAngleX",31,"_readAngleX"
;   32	int readAngleY() {
_readAngleY:
.DEFINE "_readAngleY"

.VALUE _readAngleY

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "readAngleY",32,"_readAngleY"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   33		return angles[1] - zero_angles[1];
.LINE 33

	LD	HL,_angles+3
	LD	IY,_zero_angles
	LD	HL,(HL)
	LD	BC,(IY+%3)
	OR	A,A
	SBC	HL,BC
;   34	}
.LINE 34

	LD	SP,IX
	POP	IX
	RET	


;**************************** _readAngleY ***************************
;Name                         Addr/Register   Size   Type
;_zero_angles                        STATIC      9   variable
;_angles                             STATIC      9   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "readAngleY",34,"_readAngleY"
;   35	int readAngleZ() {
_readAngleZ:
.DEFINE "_readAngleZ"

.VALUE _readAngleZ

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "readAngleZ",35,"_readAngleZ"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   36		return angles[2] - zero_angles[2];
.LINE 36

	LD	HL,_angles+6
	LD	IY,_zero_angles
	LD	HL,(HL)
	LD	BC,(IY+%6)
	OR	A,A
	SBC	HL,BC
;   37	}
.LINE 37

	LD	SP,IX
	POP	IX
	RET	


;**************************** _readAngleZ ***************************
;Name                         Addr/Register   Size   Type
;_zero_angles                        STATIC      9   variable
;_angles                             STATIC      9   variable


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "readAngleZ",37,"_readAngleZ"
;   38	
;   39	bool nunchuck_update(void) {
_nunchuck_update:
.DEFINE "_nunchuck_update"

.VALUE _nunchuck_update

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "nunchuck_update",39,"_nunchuck_update"

.LINE 39

.DEFINE "i"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

.DEFINE "zero"

.CLASS 65

.VALUE -4

.TYPE 12

.ENDEF

.DEFINE "values"

.CLASS 65

.VALUE -10

.DIM 6

.TYPE 108

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFDB
	LD	SP,HL
;   40		int i;
;   41		unsigned char values[6];
;   42		unsigned char zero = 0;
.LINE 42

	LD	(IX+%FFFFFFFC),%0
;   43	
;   44		if(mos_i2c_read(0x52, 6, values) != 0) return false;
.LINE 44

	PEA	IX+%FFFFFFF6
	LD	BC,6
	PUSH	BC
	LD	BC,82
	PUSH	BC
	CALL	_mos_i2c_read
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_8
	XOR	A,A
	JR	L_22
L_8:
;   45	
;   46		joyX = (values[0]);
.LINE 46

	LD	A,(IX+%FFFFFFF6)
	LD	(_joyX),A
;   47		joyY = (values[1]);
.LINE 47

	LEA	HL,IX+%FFFFFFF6
	INC	HL
	LD	A,(HL)
	LD	(_joyY),A
;   48		for (i = 0; i < 3; i++) {
.LINE 48

	LD	BC,0
	LD	(IX+%FFFFFFFD),BC
	JR	L_12
L_10:
;   49			angles[i] = (values[i+2] << 2) + ((values[5] & (3 << ((i+1)*2) ) >> ((i+1)*2))); 
.LINE 49

	LD	DE,(IX+%FFFFFFFD)
	INC	DE
	LD	HL,DE
	ADD	HL,HL
	LD	(IX+%FFFFFFEA),HL
	LD	BC,(IX+%FFFFFFFD)
	LEA	HL,IX+%FFFFFFF6
	ADD	HL,BC
	INC	HL
	INC	HL
	LD	A,(HL)
	UEXT	HL
	LD	L,A
	ADD	HL,HL
	ADD	HL,HL
	LD	(IX+%FFFFFFE7),HL
	LEA	IY,IX+%FFFFFFF6
	LD	HL,3
	LD	BC,(IX+%FFFFFFEA)
	CALL	__ishl
	LD	BC,(IX+%FFFFFFEA)
	CALL	__ishrs
	LD	A,(IY+%5)
	AND	A,L
	UEXT	HL
	LD	L,A
	LD	BC,HL
	LD	HL,(IX+%FFFFFFFD)
	LD	(IX+%FFFFFFE4),BC	; spill
	LD	(IX+%FFFFFFE1),HL	; spill
	LD	BC,(IX+%FFFFFFE4)	; unspill
	ADD	HL,HL
	LD	(IX+%FFFFFFE4),BC	; spill
	LD	BC,(IX+%FFFFFFE1)	; unspill
	ADD	HL,BC
	LD	BC,(IX+%FFFFFFE4)	; unspill
	LD	(IX+%FFFFFFDE),BC	; spill
	LD	BC,_angles
	LD	(IX+%FFFFFFDB),BC	; spill
	LD	BC,(IX+%FFFFFFDE)	; unspill
	LD	(IX+%FFFFFFDE),BC	; spill
	LD	BC,(IX+%FFFFFFDB)	; unspill
	ADD	HL,BC
	LD	BC,(IX+%FFFFFFDE)	; unspill
	LD	IY,HL
	LD	HL,(IX+%FFFFFFE7)
	ADD	HL,BC
	LD	(IY),HL
	LD	(IX+%FFFFFFFD),DE
;   50		}
L_12:
.LINE 50

	LD	BC,3
	LD	HL,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JP	M,L_10
;   51		buttonZ = !( values[5] & 0x01);
.LINE 51

	LEA	IY,IX+%FFFFFFFB
	LD	(IX+%FFFFFFED),IY
	LD	HL,(IX+%FFFFFFED)
	LD	A,(HL)
	AND	A,%1
	JR	NZ,L_14
	LD	BC,1
	LD	(IX+%FFFFFFF3),BC
	JR	L_15
L_14:
	LD	BC,0
	LD	(IX+%FFFFFFF3),BC
L_15:
	LD	A,(IX+%FFFFFFF3)
	LD	(_buttonZ),A
;   52		buttonC = !((values[5] & 0x02) >> 1);
.LINE 52

	LD	HL,(IX+%FFFFFFED)
	LD	A,(HL)
	SRL	A
	AND	A,%1
	UEXT	HL
	LD	L,A
	CALL	__icmpzero
	JR	NZ,L_19
	LD	BC,1
	LD	(IX+%FFFFFFF0),BC
	JR	L_20
L_19:
	LD	BC,0
	LD	(IX+%FFFFFFF0),BC
L_20:
	LD	A,(IX+%FFFFFFF0)
	LD	(_buttonC),A
;   53	
;   54		mos_i2c_write(0x52, 1, &zero);
.LINE 54

	PEA	IX+%FFFFFFFC
	LD	BC,1
	PUSH	BC
	LD	BC,82
	PUSH	BC
	CALL	_mos_i2c_write
	POP	BC
	POP	BC
	POP	BC
;   55		return true;
.LINE 55

	LD	A,%1
;   56	}
L_22:
.LINE 56

	LD	SP,IX
	POP	IX
	RET	


;**************************** _nunchuck_update ***************************
;Name                         Addr/Register   Size   Type
;_mos_i2c_write                      IMPORT  -----   function
;_buttonC                            STATIC      1   variable
;_buttonZ                            STATIC      1   variable
;_angles                             STATIC      9   variable
;_joyY                               STATIC      1   variable
;_joyX                               STATIC      1   variable
;_mos_i2c_read                       IMPORT  -----   function
;G_0                                  IX-19      3   variable
;temp21                               IX-16      3   variable
;temp16                               IX-13      3   variable
;values                               IX-10      6   variable
;zero                                  IX-4      1   variable
;i                                     IX-3      3   variable


; Stack Frame Size: 43 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "nunchuck_update",56,"_nunchuck_update"
;   57	
;   58	void calibrate_angles(void) {
_calibrate_angles:
.DEFINE "_calibrate_angles"

.VALUE _calibrate_angles

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "calibrate_angles",58,"_calibrate_angles"

.LINE 58

.DEFINE "i"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
;   59		int i;
;   60		
;   61		for(i = 0; i < 3; i++) {
.LINE 61

	LD	BC,0
	LD	(IX+%FFFFFFFD),BC
	JR	L_26
L_24:
;   62			zero_angles[i] = angles[i];
.LINE 62

	LD	HL,(IX+%FFFFFFFD)
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	DE,_angles
	LD	HL,BC
	ADD	HL,DE
	LD	IY,HL
	LD	DE,_zero_angles
	LD	HL,BC
	ADD	HL,DE
	LD	BC,(IY)
	LD	(HL),BC
	LD	BC,(IX+%FFFFFFFD)
	INC	BC
	LD	(IX+%FFFFFFFD),BC
;   63		}
L_26:
.LINE 63

	LD	BC,3
	LD	HL,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JP	M,L_24
;   64	}
.LINE 64

	LD	SP,IX
	POP	IX
	RET	


;**************************** _calibrate_angles ***************************
;Name                         Addr/Register   Size   Type
;_zero_angles                        STATIC      9   variable
;_angles                             STATIC      9   variable
;i                                     IX-3      3   variable


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "calibrate_angles",64,"_calibrate_angles"
;   65	
;   66	bool nunchuck_begin(void) {
_nunchuck_begin:
.DEFINE "_nunchuck_begin"

.VALUE _nunchuck_begin

.CLASS 2

.TYPE 76

.ENDEF

.BEGFUNC "nunchuck_begin",66,"_nunchuck_begin"

.LINE 66

.DEFINE "init1"

.CLASS 65

.VALUE -2

.DIM 2

.TYPE 108

.ENDEF

.DEFINE "init2"

.CLASS 65

.VALUE -4

.DIM 2

.TYPE 108

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	DEC	SP
;   67		uint8_t cnt;
;   68		unsigned char init1[] = {0xF0, 0x55};
.LINE 68

	LEA	DE,IX+%FFFFFFFE
	LD	HL,_0temp28
	LD	BC,2
	LDIR	
;   69		unsigned char init2[] = {0xFb, 0x00};
.LINE 69

	LEA	DE,IX+%FFFFFFFC
	LD	HL,_1temp29
	LD	BC,2
	LDIR	
;   70		cnt = 0;
;   71	
;   72		mos_i2c_open(3);
.LINE 72

	LD	BC,3
	PUSH	BC
	CALL	_mos_i2c_open
	POP	BC
;   73		if(mos_i2c_write(0x52, 2, init1) != 0) return false;
.LINE 73

	PEA	IX+%FFFFFFFE
	LD	BC,2
	PUSH	BC
	LD	BC,82
	PUSH	BC
	CALL	_mos_i2c_write
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_31
	XOR	A,A
	JR	L_36
L_31:
;   74		delayms(1);
.LINE 74

	LD	BC,1
	PUSH	BC
	CALL	_delayms
	POP	BC
;   75		if(mos_i2c_write(0x52, 2, init2) != 0) return false;
.LINE 75

	PEA	IX+%FFFFFFFC
	LD	BC,2
	PUSH	BC
	LD	BC,82
	PUSH	BC
	CALL	_mos_i2c_write
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_34
	XOR	A,A
	JR	L_36
L_34:
;   76		if(!nunchuck_update()) return false;
.LINE 76

	CALL	_nunchuck_update
	OR	A,A
	JR	NZ,L_35
	XOR	A,A
	JR	L_36
L_35:
;   77		return true;
.LINE 77

	LD	A,%1
;   78	}
L_36:
.LINE 78

	LD	SP,IX
	POP	IX
	RET	


;**************************** _nunchuck_begin ***************************
;Name                         Addr/Register   Size   Type
;_delayms                            IMPORT  -----   function
;_mos_i2c_write                      IMPORT  -----   function
;_mos_i2c_open                       IMPORT  -----   function
;_1temp29                            STATIC      2   variable
;_0temp28                            STATIC      2   variable
;init2                                 IX-4      2   variable
;init1                                 IX-2      2   variable


; Stack Frame Size: 10 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "nunchuck_begin",78,"_nunchuck_begin"
	SEGMENT TEXT
_0temp28:
	DB	240
	DB	85
_1temp29:
	DB	251
	DB	0
	SEGMENT CODE
;   79	
;   80	void commErrorMsg(void) {
_commErrorMsg:
.DEFINE "_commErrorMsg"

.VALUE _commErrorMsg

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "commErrorMsg",80,"_commErrorMsg"

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;   81		printf("Error connecting to Nunchuck\r\n");
.LINE 81

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__18
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;   82	}
.LINE 82

	LD	SP,IX
	POP	IX
	RET	


;**************************** _commErrorMsg ***************************
;Name                         Addr/Register   Size   Type
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function


; Stack Frame Size: 6 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "commErrorMsg",82,"_commErrorMsg"
	SEGMENT STRSECT
L__18:
	DB	"Error connecting to Nunchuck"
	DB	13,10,0
	SEGMENT CODE
;   83	
;   84	int main(int argc, char * argv[]) {
_main:
.DEFINE "_main"

.VALUE _main

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "main",84,"_main"

.LINE 84

.DEFINE "argc"

.CLASS 65

.VALUE 6

.TYPE 4

.ENDEF

.DEFINE "argv"

.CLASS 65

.VALUE 9

.TYPE 290

.ENDEF

.DEFINE "xpos"

.CLASS 65

.VALUE -3

.TYPE 4

.ENDEF

.DEFINE "ypos"

.CLASS 65

.VALUE -6

.TYPE 4

.ENDEF

.DEFINE "btnc"

.CLASS 65

.VALUE -9

.TYPE 4

.ENDEF

.DEFINE "btnz"

.CLASS 65

.VALUE -12

.TYPE 4

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFF4
	LD	SP,HL
;   85		int xpos, ypos, btnc, btnz;
;   86	
;   87		if(!nunchuck_begin()) {
.LINE 87

	CALL	_nunchuck_begin
	OR	A,A
	JR	NZ,L_39
;   88			commErrorMsg();
.LINE 88

	CALL	_commErrorMsg
;   89			return 0;
.LINE 89

	OR	A,A
	SBC	HL,HL
	JR	L_61
;   90		}
L_39:
.LINE 90

;   91		vdp_cls();
.LINE 91

	CALL	_vdp_cls
;   92		printf("Nunchuck buttons:\r\n");
.LINE 92

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__21
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;   93		printf("     Z - calibrate angles\r\n");
.LINE 93

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__22
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;   94		printf(" C & Z - exit program\r\n\r\n");
.LINE 94

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__23
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;   95		printf("Press any key to continue");
.LINE 95

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__24
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;   96		while(getch() == 0);
L_41:
.LINE 96

	CALL	_getch
	OR	A,A
	JR	Z,L_41
;   97	
;   98		while(1) {
L_58:
.LINE 98

;   99			delayms(100);
.LINE 99

	LD	BC,100
	PUSH	BC
	CALL	_delayms
	POP	BC
;  100	
;  101			if(!nunchuck_update()) {
.LINE 101

	CALL	_nunchuck_update
	OR	A,A
	JR	NZ,L_43
;  102				commErrorMsg();
.LINE 102

	CALL	_commErrorMsg
;  103				return 0;
.LINE 103

	OR	A,A
	SBC	HL,HL
	JR	L_61
;  104			}
L_43:
.LINE 104

;  105			xpos = readJoyX();
.LINE 105

	CALL	_readJoyX
	LD	(IX+%FFFFFFFD),HL
;  106			ypos = readJoyY();
.LINE 106

	CALL	_readJoyY
	LD	(IX+%FFFFFFFA),HL
;  107			btnc = readButtonC();
.LINE 107

	CALL	_readButtonC
	UEXT	HL
	LD	L,A
	LD	(IX+%FFFFFFF7),HL
;  108			btnz = readButtonZ();
.LINE 108

	CALL	_readButtonZ
	UEXT	HL
	LD	L,A
	LD	(IX+%FFFFFFF4),HL
;  109	
;  110			vdp_cls();
.LINE 110

	CALL	_vdp_cls
;  111			printf("Angle X:%d Y:%d Z:%d\r\n", readAngleX(), readAngleY(), readAngleZ());
.LINE 111

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__27
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	CALL	_readAngleX
	LD	BC,HL
	CALL	__itol
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
	LD	BC,L__28
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	CALL	_readAngleY
	LD	BC,HL
	CALL	__itol
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
	LD	BC,L__29
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	CALL	_readAngleZ
	LD	BC,HL
	CALL	__itol
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
	LD	BC,L__30
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  112			if(xpos < 100) printf("Left ");
.LINE 112

	LD	BC,100
	LD	HL,(IX+%FFFFFFFD)
	OR	A,A
	SBC	HL,BC
	JP	P,L_46
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__32
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
L_46:
;  113			if(xpos > 136) printf("Right ");
.LINE 113

	LD	BC,(IX+%FFFFFFFD)
	LD	HL,136
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_48
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__34
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
L_48:
;  114			if(ypos > 136) printf("Up ");
.LINE 114

	LD	BC,(IX+%FFFFFFFA)
	LD	HL,136
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_50
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__36
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
L_50:
;  115			if(ypos < 100) printf("Down ");
.LINE 115

	LD	BC,100
	LD	HL,(IX+%FFFFFFFA)
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	P,L_52
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__38
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
L_52:
;  116			if(btnc & btnz) break;
.LINE 116

	LD	HL,(IX+%FFFFFFF7)
	LD	BC,(IX+%FFFFFFF4)
	CALL	__iand
	CALL	__icmpzero
	JR	NZ,L_60
;  117			if(btnc) {
.LINE 117

	LD	HL,(IX+%FFFFFFF7)
	CALL	__icmpzero
	JR	Z,L_56
;  118				printf("Button C\r\n");
.LINE 118

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__41
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  119			}
L_56:
.LINE 119

;  120			if(btnz) {
.LINE 120

	LD	HL,(IX+%FFFFFFF4)
	CALL	__icmpzero
	JR	Z,L_58
;  121				printf("Button Z - calibrating angles");
.LINE 121

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__43
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;  122				calibrate_angles();
.LINE 122

	CALL	_calibrate_angles
;  123			}
;  124		}
.LINE 124

	JR	L_58
L_60:
;  125		return 0;
.LINE 125

	OR	A,A
	SBC	HL,HL
;  126	}
L_61:
.LINE 126

	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;__u_itoa                            IMPORT  -----   function
;_delayms                            IMPORT  -----   function
;_getch                              IMPORT  -----   function
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_vdp_cls                            IMPORT  -----   function
;btnz                                 IX-12      3   variable
;btnc                                  IX-9      3   variable
;ypos                                  IX-6      3   variable
;xpos                                  IX-3      3   variable
;argv                                  IX+9      3   parameter
;argc                                  IX+6      3   parameter


; Stack Frame Size: 24 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "main",126,"_main"
	SEGMENT STRSECT
L__21:
	DB	"Nunchuck buttons:"
	DB	13,10,0
L__22:
	DB	"     Z - calibrate angles"
	DB	13,10,0
L__23:
	DB	" C & Z - exit program"
	DB	13,10,13,10,0
L__24:
	DB	"Press any key to continue"
	DB	0
L__27:
	DB	"Angle X:"
	DB	0
L__28:
	DB	" Y:"
	DB	0
L__29:
	DB	" Z:"
	DB	0
L__30:
	DB	13,10,0
L__32:
	DB	"Left "
	DB	0
L__34:
	DB	"Right "
	DB	0
L__36:
	DB	"Up "
	DB	0
L__38:
	DB	"Down "
	DB	0
L__41:
	DB	"Button C"
	DB	13,10,0
L__43:
	DB	"Button Z - calibrating angles"
	DB	0
	XREF _delayms:ROM
	XREF _vdp_cls:ROM
	XREF _mos_i2c_read:ROM
	XREF _mos_i2c_write:ROM
	XREF _mos_i2c_open:ROM
	XREF _getch:ROM
	XREF __u_itoa:ROM
	XREF ___print_sendstring:ROM
	XREF ___print_xputch:ROM
	XREF ___print_uputch:ROM
	XREF __iand:ROM
	XREF __ishrs:ROM
	XREF __ishl:ROM
	XREF __itol:ROM
	XREF __setflag:ROM
	XREF __icmpzero:ROM
	XDEF _main
	XDEF _commErrorMsg
	XDEF _nunchuck_begin
	XDEF _calibrate_angles
	XDEF _nunchuck_update
	XDEF _readAngleZ
	XDEF _readAngleY
	XDEF _readAngleX
	XDEF _readButtonZ
	XDEF _readButtonC
	XDEF _readJoyY
	XDEF _readJoyX
	XDEF _zero_angles
	XDEF _angles
	XDEF _buttonC
	XDEF _buttonZ
	XDEF _joyY
	XDEF _joyX
	END

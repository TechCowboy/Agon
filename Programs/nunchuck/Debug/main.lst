Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED17-Nov-23     15:10:04     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optsize -noreduceopt -nopadbranch
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\main.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "fmt_type",19
                           A     9    .DEFINE "status"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "flags"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "size"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 2
                           A    23    .ENDEF
                           A    24    .DEFINE "chr"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 2
                           A    28    .ENDEF
                           A    29    .DEFINE "type"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 2
                           A    33    .ENDEF
                           A    34    .DEFINE "field_width"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 2
                           A    38    .ENDEF
                           A    39    .DEFINE "precision"
                           A    40    .VALUE 6
                           A    41    .CLASS 8
                           A    42    .TYPE 2
                           A    43    .ENDEF
                           A    44    .DEFINE "set_begin"
                           A    45    .VALUE 7
                           A    46    .CLASS 8
                           A    47    .TYPE 34
                           A    48    .ENDEF
                           A    49    .DEFINE "set_end"
                           A    50    .VALUE 10
                           A    51    .CLASS 8
                           A    52    .TYPE 34
                           A    53    .ENDEF
                           A    54    .DEFINE "pad_whole"
                           A    55    .VALUE 13
                           A    56    .CLASS 8
                           A    57    .TYPE 12
                           A    58    .ENDEF
                           A    59    .DEFINE "pad_pre_fract"
                           A    60    .VALUE 14
                           A    61    .CLASS 8
                           A    62    .TYPE 12
                           A    63    .ENDEF
                           A    64    .DEFINE "pad_post_fract"
                           A    65    .VALUE 15
                           A    66    .CLASS 8
                           A    67    .TYPE 12
                           A    68    .ENDEF
                           A    69    .DEFINE "pad_at"
                           A    70    .VALUE 16
                           A    71    .CLASS 8
                           A    72    .TYPE 34
                           A    73    .ENDEF
                           A    74    .ENDREC "fmt_type"
                           A    75    .BEGREC "flt_info",12
                           A    76    .DEFINE "flags"
                           A    77    .VALUE 0
                           A    78    .CLASS 8
                           A    79    .TYPE 12
                           A    80    .ENDEF
                           A    81    .DEFINE "exp"
                           A    82    .VALUE 1
                           A    83    .CLASS 8
                           A    84    .TYPE 2
                           A    85    .ENDEF
                           A    86    .DEFINE "digits"
                           A    87    .VALUE 2
                           A    88    .CLASS 8
                           A    89    .DIM 10
                           A    90    .TYPE 108
                           A    91    .ENDEF
                           A    92    .ENDREC "flt_info"
                           A    93    .BEGREC "NONAME0",51
                           A    94    .DEFINE "clock"
                           A    95    .VALUE 0
                           A    96    .CLASS 8
                           A    97    .TYPE 15
                           A    98    .ENDEF
                           A    99    .DEFINE "vpd_protocol_flags"
                           A   100    .VALUE 4
                           A   101    .CLASS 8
                           A   102    .TYPE 12
                           A   103    .ENDEF
                           A   104    .DEFINE "keyascii"
                           A   105    .VALUE 5
                           A   106    .CLASS 8
                           A   107    .TYPE 12
                           A   108    .ENDEF
                           A   109    .DEFINE "keymods"
                           A   110    .VALUE 6
                           A   111    .CLASS 8
                           A   112    .TYPE 12
                           A   113    .ENDEF
                           A   114    .DEFINE "cursorX"
                           A   115    .VALUE 7
                           A   116    .CLASS 8
                           A   117    .TYPE 12
                           A   118    .ENDEF
                           A   119    .DEFINE "cursorY"
                           A   120    .VALUE 8
                           A   121    .CLASS 8
                           A   122    .TYPE 12
                           A   123    .ENDEF
                           A   124    .DEFINE "scrchar"
                           A   125    .VALUE 9
                           A   126    .CLASS 8
                           A   127    .TYPE 12
                           A   128    .ENDEF
                           A   129    .DEFINE "scrpixel"
                           A   130    .VALUE 10
                           A   131    .CLASS 8
                           A   132    .TYPE 14
                           A   133    .ENDEF
                           A   134    .DEFINE "audioChannel"
                           A   135    .VALUE 13
                           A   136    .CLASS 8
                           A   137    .TYPE 12
                           A   138    .ENDEF
                           A   139    .DEFINE "audioSuccess"
                           A   140    .VALUE 14
                           A   141    .CLASS 8
                           A   142    .TYPE 12
                           A   143    .ENDEF
                           A   144    .DEFINE "scrwidth"
                           A   145    .VALUE 15
                           A   146    .CLASS 8
                           A   147    .TYPE 13
                           A   148    .ENDEF
                           A   149    .DEFINE "scrheight"
                           A   150    .VALUE 17
                           A   151    .CLASS 8
                           A   152    .TYPE 13
                           A   153    .ENDEF
                           A   154    .DEFINE "scrcols"
                           A   155    .VALUE 19
                           A   156    .CLASS 8
                           A   157    .TYPE 12
                           A   158    .ENDEF
                           A   159    .DEFINE "scrrows"
                           A   160    .VALUE 20
                           A   161    .CLASS 8
                           A   162    .TYPE 12
                           A   163    .ENDEF
                           A   164    .DEFINE "scrcolours"
                           A   165    .VALUE 21
                           A   166    .CLASS 8
                           A   167    .TYPE 12
                           A   168    .ENDEF
                           A   169    .DEFINE "scrpixelIndex"
                           A   170    .VALUE 22
                           A   171    .CLASS 8
                           A   172    .TYPE 12
                           A   173    .ENDEF
                           A   174    .DEFINE "keycode"
                           A   175    .VALUE 23
                           A   176    .CLASS 8
                           A   177    .TYPE 12
                           A   178    .ENDEF
                           A   179    .DEFINE "keydown"
                           A   180    .VALUE 24
                           A   181    .CLASS 8
                           A   182    .TYPE 12
                           A   183    .ENDEF
                           A   184    .DEFINE "keycount"
                           A   185    .VALUE 25
                           A   186    .CLASS 8
                           A   187    .TYPE 12
                           A   188    .ENDEF
                           A   189    .DEFINE "rtc"
                           A   190    .VALUE 26
                           A   191    .CLASS 8
                           A   192    .DIM 6
                           A   193    .TYPE 108
                           A   194    .ENDEF
                           A   195    .DEFINE "rtc_spare"
                           A   196    .VALUE 32
                           A   197    .CLASS 8
                           A   198    .DIM 2
                           A   199    .TYPE 108
                           A   200    .ENDEF
                           A   201    .DEFINE "keydelay"
                           A   202    .VALUE 34
                           A   203    .CLASS 8
                           A   204    .TYPE 13
                           A   205    .ENDEF
                           A   206    .DEFINE "keyrate"
                           A   207    .VALUE 36
                           A   208    .CLASS 8
                           A   209    .TYPE 13
                           A   210    .ENDEF
                           A   211    .DEFINE "keyled"
                           A   212    .VALUE 38
                           A   213    .CLASS 8
                           A   214    .TYPE 12
                           A   215    .ENDEF
                           A   216    .DEFINE "scrmode"
                           A   217    .VALUE 39
                           A   218    .CLASS 8
                           A   219    .TYPE 12
                           A   220    .ENDEF
                           A   221    .DEFINE "rtc_enable"
                           A   222    .VALUE 40
                           A   223    .CLASS 8
                           A   224    .TYPE 12
                           A   225    .ENDEF
                           A   226    .DEFINE "mouseX"
                           A   227    .VALUE 41
                           A   228    .CLASS 8
                           A   229    .TYPE 13
                           A   230    .ENDEF
                           A   231    .DEFINE "mouseY"
                           A   232    .VALUE 43
                           A   233    .CLASS 8
                           A   234    .TYPE 13
                           A   235    .ENDEF
                           A   236    .DEFINE "mouseButtons"
                           A   237    .VALUE 45
                           A   238    .CLASS 8
                           A   239    .TYPE 12
                           A   240    .ENDEF
                           A   241    .DEFINE "mouseWheel"
                           A   242    .VALUE 46
                           A   243    .CLASS 8
                           A   244    .TYPE 12
                           A   245    .ENDEF
                           A   246    .DEFINE "mouseXDelta"
                           A   247    .VALUE 47
                           A   248    .CLASS 8
                           A   249    .TYPE 13
                           A   250    .ENDEF
                           A   251    .DEFINE "mouseYDelta"
                           A   252    .VALUE 49
                           A   253    .CLASS 8
                           A   254    .TYPE 13
                           A   255    .ENDEF
                           A   256    .ENDREC "NONAME0"
                           A   257    .BEGREC "NONAME1",8
                           A   258    .DEFINE "baudRate"
                           A   259    .VALUE 0
                           A   260    .CLASS 8
                           A   261    .TYPE 4
                           A   262    .ENDEF
                           A   263    .DEFINE "dataBits"
                           A   264    .VALUE 3
                           A   265    .CLASS 8
                           A   266    .TYPE 12
                           A   267    .ENDEF
                           A   268    .DEFINE "stopBits"
                           A   269    .VALUE 4
                           A   270    .CLASS 8
                           A   271    .TYPE 12
                           A   272    .ENDEF
                           A   273    .DEFINE "parity"
                           A   274    .VALUE 5
                           A   275    .CLASS 8
                           A   276    .TYPE 12
                           A   277    .ENDEF
                           A   278    .DEFINE "flowcontrol"
                           A   279    .VALUE 6
                           A   280    .CLASS 8
                           A   281    .TYPE 12
                           A   282    .ENDEF
                           A   283    .DEFINE "eir"
                           A   284    .VALUE 7
                           A   285    .CLASS 8
                           A   286    .TYPE 12
                           A   287    .ENDEF
                           A   288    .ENDREC "NONAME1"
                           A   289    .BEGREC "NONAME2",15
                           A   290    .DEFINE "fs"
                           A   291    .VALUE 0
                           A   292    .CLASS 8
                           A   293    .TYPE 46
                           A   294    .ENDEF
                           A   295    .DEFINE "id"
                           A   296    .VALUE 3
                           A   297    .CLASS 8
                           A   298    .TYPE 13
                           A   299    .ENDEF
                           A   300    .DEFINE "attr"
                           A   301    .VALUE 5
                           A   302    .CLASS 8
                           A   303    .TYPE 12
                           A   304    .ENDEF
                           A   305    .DEFINE "stat"
                           A   306    .VALUE 6
                           A   307    .CLASS 8
                           A   308    .TYPE 12
                           A   309    .ENDEF
                           A   310    .DEFINE "sclust"
                           A   311    .VALUE 7
                           A   312    .CLASS 8
                           A   313    .TYPE 15
                           A   314    .ENDEF
                           A   315    .DEFINE "objsize"
                           A   316    .VALUE 11
                           A   317    .CLASS 8
                           A   318    .TYPE 15
                           A   319    .ENDEF
                           A   320    .ENDREC "NONAME2"
                           A   321    .BEGREC "NONAME3",36
                           A   322    .DEFINE "obj"
                           A   323    .VALUE 0
                           A   324    .CLASS 8
                           A   325    .TAG "NONAME2"
                           A   326    .TYPE 8
                           A   327    .ENDEF
                           A   328    .DEFINE "flag"
                           A   329    .VALUE 15
                           A   330    .CLASS 8
                           A   331    .TYPE 12
                           A   332    .ENDEF
                           A   333    .DEFINE "err"
                           A   334    .VALUE 16
                           A   335    .CLASS 8
                           A   336    .TYPE 12
                           A   337    .ENDEF
                           A   338    .DEFINE "fptr"
                           A   339    .VALUE 17
                           A   340    .CLASS 8
                           A   341    .TYPE 15
                           A   342    .ENDEF
                           A   343    .DEFINE "clust"
                           A   344    .VALUE 21
                           A   345    .CLASS 8
                           A   346    .TYPE 15
                           A   347    .ENDEF
                           A   348    .DEFINE "sect"
                           A   349    .VALUE 25
                           A   350    .CLASS 8
                           A   351    .TYPE 15
                           A   352    .ENDEF
                           A   353    .DEFINE "dir_sect"
                           A   354    .VALUE 29
                           A   355    .CLASS 8
                           A   356    .TYPE 15
                           A   357    .ENDEF
                           A   358    .DEFINE "dir_ptr"
                           A   359    .VALUE 33
                           A   360    .CLASS 8
                           A   361    .TYPE 46
                           A   362    .ENDEF
                           A   363    .ENDREC "NONAME3"
                           A   364    	SEGMENT BSS
041FFF                     A   365    _joyX:
041FFF                     A   366    	DS	1
                           A   367    .DEFINE "joyX"
                           A   368    .ALIAS "_joyX"
                           A   369    .CLASS 83
                           A   370    .VALUE _joyX
                           A   371    .TYPE 12
                           A   372    .ENDEF
042000                     A   373    _joyY:
042000                     A   374    	DS	1
                           A   375    .DEFINE "joyY"
                           A   376    .ALIAS "_joyY"
                           A   377    .CLASS 83
                           A   378    .VALUE _joyY
                           A   379    .TYPE 12
                           A   380    .ENDEF
042001                     A   381    _buttonZ:
042001                     A   382    	DS	1
                           A   383    .DEFINE "buttonZ"
                           A   384    .ALIAS "_buttonZ"
                           A   385    .CLASS 83
                           A   386    .VALUE _buttonZ
                           A   387    .TYPE 12
                           A   388    .ENDEF
042002                     A   389    _buttonC:
042002                     A   390    	DS	1
                           A   391    .DEFINE "buttonC"
                           A   392    .ALIAS "_buttonC"
                           A   393    .CLASS 83
                           A   394    .VALUE _buttonC
                           A   395    .TYPE 12
                           A   396    .ENDEF
042003                     A   397    _angles:
042003                     A   398    	DS	9
                           A   399    .DEFINE "angles"
                           A   400    .ALIAS "_angles"
                           A   401    .CLASS 83
                           A   402    .VALUE _angles
                           A   403    .DIM 3
                           A   404    .TYPE 100
                           A   405    .ENDEF
04200C                     A   406    _zero_angles:
04200C                     A   407    	DS	9
                           A   408    .DEFINE "zero_angles"
                           A   409    .ALIAS "_zero_angles"
                           A   410    .CLASS 83
                           A   411    .VALUE _zero_angles
                           A   412    .DIM 3
                           A   413    .TYPE 100
                           A   414    .ENDEF
                           A   415    ;    1	#include <stdio.h>
                           A   416    ;    2	#include "mos-interface.h"
                           A   417    ;    3	#include "vdp.h"
                           A   418    ;    4	#include "agontimer.h"
                           A   419    ;    5	
                           A   420    ;    6	uint8_t joyX;
                           A   421    ;    7	uint8_t joyY;
                           A   422    ;    8	bool buttonZ;
                           A   423    ;    9	bool buttonC;
                           A   424    ;   10	int angles[3];
                           A   425    ;   11	int zero_angles[3];
                           A   426    	SEGMENT CODE
                           A   427    ;   12	
                           A   428    ;   13	int readJoyX() {
0400E5                     A   429    _readJoyX:
                           A   430    .DEFINE "_readJoyX"
                           A   431    
                           A   432    .VALUE _readJoyX
                           A   433    
                           A   434    .CLASS 2
                           A   435    
                           A   436    .TYPE 68
                           A   437    
                           A   438    .ENDEF
                           A   439    
                           A   440    .BEGFUNC "readJoyX",13,"_readJoyX"
                           A   441    
0400E5 DDE5                A   442    	PUSH	IX
0400E7 DD210000 00         A   443    	LD	IX,0
0400EC DD39                A   444    	ADD	IX,SP
                           A   445    ;   14		return joyX;
                           A   446    .LINE 14
                           A   447    
0400EE 3A FF 1F 04         A   448    	LD	A,(_joyX)
0400F2 B7ED62              A   449    	UEXT	HL
0400F5 6F                  A   450    	LD	L,A
                           A   451    ;   15	}
                           A   452    .LINE 15
                           A   453    
0400F6 DDF9                A   454    	LD	SP,IX
0400F8 DDE1                A   455    	POP	IX
0400FA C9                  A   456    	RET	
                           A   457    
                           A   458    
                           A   459    ;**************************** _readJoyX *******
                           A   460    ;Name                         Addr/Register   S
                           A   461    ;_joyX                               STATIC    
                           A   462    
                           A   463    
                           A   464    ; Stack Frame Size: 6 (bytes)
                           A   465    ;       Spill Code: 0 (instruction)
                           A   466    
                           A   467    
                           A   468    .ENDFUNC "readJoyX",15,"_readJoyX"
                           A   469    ;   16	
                           A   470    ;   17	int readJoyY() {
0400FB                     A   471    _readJoyY:
                           A   472    .DEFINE "_readJoyY"
                           A   473    
                           A   474    .VALUE _readJoyY
                           A   475    
                           A   476    .CLASS 2
                           A   477    
                           A   478    .TYPE 68
                           A   479    
                           A   480    .ENDEF
                           A   481    
                           A   482    .BEGFUNC "readJoyY",17,"_readJoyY"
                           A   483    
0400FB DDE5                A   484    	PUSH	IX
0400FD DD210000 00         A   485    	LD	IX,0
040102 DD39                A   486    	ADD	IX,SP
                           A   487    ;   18		return joyY;
                           A   488    .LINE 18
                           A   489    
040104 3A 00 20 04         A   490    	LD	A,(_joyY)
040108 B7ED62              A   491    	UEXT	HL
04010B 6F                  A   492    	LD	L,A
                           A   493    ;   19	}
                           A   494    .LINE 19
                           A   495    
04010C DDF9                A   496    	LD	SP,IX
04010E DDE1                A   497    	POP	IX
040110 C9                  A   498    	RET	
                           A   499    
                           A   500    
                           A   501    ;**************************** _readJoyY *******
                           A   502    ;Name                         Addr/Register   S
                           A   503    ;_joyY                               STATIC    
                           A   504    
                           A   505    
                           A   506    ; Stack Frame Size: 6 (bytes)
                           A   507    ;       Spill Code: 0 (instruction)
                           A   508    
                           A   509    
                           A   510    .ENDFUNC "readJoyY",19,"_readJoyY"
                           A   511    ;   20	
                           A   512    ;   21	bool readButtonC() {
040111                     A   513    _readButtonC:
                           A   514    .DEFINE "_readButtonC"
                           A   515    
                           A   516    .VALUE _readButtonC
                           A   517    
                           A   518    .CLASS 2
                           A   519    
                           A   520    .TYPE 76
                           A   521    
                           A   522    .ENDEF
                           A   523    
                           A   524    .BEGFUNC "readButtonC",21,"_readButtonC"
                           A   525    
040111 DDE5                A   526    	PUSH	IX
040113 DD210000 00         A   527    	LD	IX,0
040118 DD39                A   528    	ADD	IX,SP
                           A   529    ;   22		return buttonC;
                           A   530    .LINE 22
                           A   531    
04011A 3A 02 20 04         A   532    	LD	A,(_buttonC)
                           A   533    ;   23	}
                           A   534    .LINE 23
                           A   535    
04011E DDF9                A   536    	LD	SP,IX
040120 DDE1                A   537    	POP	IX
040122 C9                  A   538    	RET	
                           A   539    
                           A   540    
                           A   541    ;**************************** _readButtonC ****
                           A   542    ;Name                         Addr/Register   S
                           A   543    ;_buttonC                            STATIC    
                           A   544    
                           A   545    
                           A   546    ; Stack Frame Size: 6 (bytes)
                           A   547    ;       Spill Code: 0 (instruction)
                           A   548    
                           A   549    
                           A   550    .ENDFUNC "readButtonC",23,"_readButtonC"
                           A   551    ;   24	
                           A   552    ;   25	bool readButtonZ() {
040123                     A   553    _readButtonZ:
                           A   554    .DEFINE "_readButtonZ"
                           A   555    
                           A   556    .VALUE _readButtonZ
                           A   557    
                           A   558    .CLASS 2
                           A   559    
                           A   560    .TYPE 76
                           A   561    
                           A   562    .ENDEF
                           A   563    
                           A   564    .BEGFUNC "readButtonZ",25,"_readButtonZ"
                           A   565    
040123 DDE5                A   566    	PUSH	IX
040125 DD210000 00         A   567    	LD	IX,0
04012A DD39                A   568    	ADD	IX,SP
                           A   569    ;   26		return buttonZ;
                           A   570    .LINE 26
                           A   571    
04012C 3A 01 20 04         A   572    	LD	A,(_buttonZ)
                           A   573    ;   27	}
                           A   574    .LINE 27
                           A   575    
040130 DDF9                A   576    	LD	SP,IX
040132 DDE1                A   577    	POP	IX
040134 C9                  A   578    	RET	
                           A   579    
                           A   580    
                           A   581    ;**************************** _readButtonZ ****
                           A   582    ;Name                         Addr/Register   S
                           A   583    ;_buttonZ                            STATIC    
                           A   584    
                           A   585    
                           A   586    ; Stack Frame Size: 6 (bytes)
                           A   587    ;       Spill Code: 0 (instruction)
                           A   588    
                           A   589    
                           A   590    .ENDFUNC "readButtonZ",27,"_readButtonZ"
                           A   591    ;   28	
                           A   592    ;   29	int readAngleX() {
040135                     A   593    _readAngleX:
                           A   594    .DEFINE "_readAngleX"
                           A   595    
                           A   596    .VALUE _readAngleX
                           A   597    
                           A   598    .CLASS 2
                           A   599    
                           A   600    .TYPE 68
                           A   601    
                           A   602    .ENDEF
                           A   603    
                           A   604    .BEGFUNC "readAngleX",29,"_readAngleX"
                           A   605    
040135 DDE5                A   606    	PUSH	IX
040137 DD210000 00         A   607    	LD	IX,0
04013C DD39                A   608    	ADD	IX,SP
                           A   609    ;   30		return angles[0] - zero_angles[0];
                           A   610    .LINE 30
                           A   611    
04013E 2A 03 20 04         A   612    	LD	HL,(_angles)
040142 ED4B 0C 20 04       A   613    	LD	BC,(_zero_angles)
040147 B7                  A   614    	OR	A,A
040148 ED42                A   615    	SBC	HL,BC
                           A   616    ;   31	}
                           A   617    .LINE 31
                           A   618    
04014A DDF9                A   619    	LD	SP,IX
04014C DDE1                A   620    	POP	IX
04014E C9                  A   621    	RET	
                           A   622    
                           A   623    
                           A   624    ;**************************** _readAngleX *****
                           A   625    ;Name                         Addr/Register   S
                           A   626    ;_zero_angles                        STATIC    
                           A   627    ;_angles                             STATIC    
                           A   628    
                           A   629    
                           A   630    ; Stack Frame Size: 6 (bytes)
                           A   631    ;       Spill Code: 0 (instruction)
                           A   632    
                           A   633    
                           A   634    .ENDFUNC "readAngleX",31,"_readAngleX"
                           A   635    ;   32	int readAngleY() {
04014F                     A   636    _readAngleY:
                           A   637    .DEFINE "_readAngleY"
                           A   638    
                           A   639    .VALUE _readAngleY
                           A   640    
                           A   641    .CLASS 2
                           A   642    
                           A   643    .TYPE 68
                           A   644    
                           A   645    .ENDEF
                           A   646    
                           A   647    .BEGFUNC "readAngleY",32,"_readAngleY"
                           A   648    
04014F DDE5                A   649    	PUSH	IX
040151 DD210000 00         A   650    	LD	IX,0
040156 DD39                A   651    	ADD	IX,SP
                           A   652    ;   33		return angles[1] - zero_angles[1];
                           A   653    .LINE 33
                           A   654    
040158 21 06 20 04         A   655    	LD	HL,_angles+3
04015C FD21 0C 20 04       A   656    	LD	IY,_zero_angles
040161 ED27                A   657    	LD	HL,(HL)
040163 FD0703              A   658    	LD	BC,(IY+%3)
040166 B7                  A   659    	OR	A,A
040167 ED42                A   660    	SBC	HL,BC
                           A   661    ;   34	}
                           A   662    .LINE 34
                           A   663    
040169 DDF9                A   664    	LD	SP,IX
04016B DDE1                A   665    	POP	IX
04016D C9                  A   666    	RET	
                           A   667    
                           A   668    
                           A   669    ;**************************** _readAngleY *****
                           A   670    ;Name                         Addr/Register   S
                           A   671    ;_zero_angles                        STATIC    
                           A   672    ;_angles                             STATIC    
                           A   673    
                           A   674    
                           A   675    ; Stack Frame Size: 6 (bytes)
                           A   676    ;       Spill Code: 0 (instruction)
                           A   677    
                           A   678    
                           A   679    .ENDFUNC "readAngleY",34,"_readAngleY"
                           A   680    ;   35	int readAngleZ() {
04016E                     A   681    _readAngleZ:
                           A   682    .DEFINE "_readAngleZ"
                           A   683    
                           A   684    .VALUE _readAngleZ
                           A   685    
                           A   686    .CLASS 2
                           A   687    
                           A   688    .TYPE 68
                           A   689    
                           A   690    .ENDEF
                           A   691    
                           A   692    .BEGFUNC "readAngleZ",35,"_readAngleZ"
                           A   693    
04016E DDE5                A   694    	PUSH	IX
040170 DD210000 00         A   695    	LD	IX,0
040175 DD39                A   696    	ADD	IX,SP
                           A   697    ;   36		return angles[2] - zero_angles[2];
                           A   698    .LINE 36
                           A   699    
040177 21 09 20 04         A   700    	LD	HL,_angles+6
04017B FD21 0C 20 04       A   701    	LD	IY,_zero_angles
040180 ED27                A   702    	LD	HL,(HL)
040182 FD0706              A   703    	LD	BC,(IY+%6)
040185 B7                  A   704    	OR	A,A
040186 ED42                A   705    	SBC	HL,BC
                           A   706    ;   37	}
                           A   707    .LINE 37
                           A   708    
040188 DDF9                A   709    	LD	SP,IX
04018A DDE1                A   710    	POP	IX
04018C C9                  A   711    	RET	
                           A   712    
                           A   713    
                           A   714    ;**************************** _readAngleZ *****
                           A   715    ;Name                         Addr/Register   S
                           A   716    ;_zero_angles                        STATIC    
                           A   717    ;_angles                             STATIC    
                           A   718    
                           A   719    
                           A   720    ; Stack Frame Size: 6 (bytes)
                           A   721    ;       Spill Code: 0 (instruction)
                           A   722    
                           A   723    
                           A   724    .ENDFUNC "readAngleZ",37,"_readAngleZ"
                           A   725    ;   38	
                           A   726    ;   39	bool nunchuck_update(void) {
04018D                     A   727    _nunchuck_update:
                           A   728    .DEFINE "_nunchuck_update"
                           A   729    
                           A   730    .VALUE _nunchuck_update
                           A   731    
                           A   732    .CLASS 2
                           A   733    
                           A   734    .TYPE 76
                           A   735    
                           A   736    .ENDEF
                           A   737    
                           A   738    .BEGFUNC "nunchuck_update",39,"_nunchuck_update
                           A   739    
                           A   740    .LINE 39
                           A   741    
                           A   742    .DEFINE "i"
                           A   743    
                           A   744    .CLASS 65
                           A   745    
                           A   746    .VALUE -3
                           A   747    
                           A   748    .TYPE 4
                           A   749    
                           A   750    .ENDEF
                           A   751    
                           A   752    .DEFINE "zero"
                           A   753    
                           A   754    .CLASS 65
                           A   755    
                           A   756    .VALUE -4
                           A   757    
                           A   758    .TYPE 12
                           A   759    
                           A   760    .ENDEF
                           A   761    
                           A   762    .DEFINE "values"
                           A   763    
                           A   764    .CLASS 65
                           A   765    
                           A   766    .VALUE -10
                           A   767    
                           A   768    .DIM 6
                           A   769    
                           A   770    .TYPE 108
                           A   771    
                           A   772    .ENDEF
                           A   773    
04018D DDE5                A   774    	PUSH	IX
04018F DD210000 00         A   775    	LD	IX,0
040194 DD39                A   776    	ADD	IX,SP
040196 ED22DB              A   777    	LEA	HL,IX+%FFFFFFDB
040199 F9                  A   778    	LD	SP,HL
                           A   779    ;   40		int i;
                           A   780    ;   41		unsigned char values[6];
                           A   781    ;   42		unsigned char zero = 0;
                           A   782    .LINE 42
                           A   783    
04019A DD36FC00            A   784    	LD	(IX+%FFFFFFFC),%0
                           A   785    ;   43	
                           A   786    ;   44		if(mos_i2c_read(0x52, 6, values) !=
                           A   787    .LINE 44
                           A   788    
04019E ED65F6              A   789    	PEA	IX+%FFFFFFF6
0401A1 01060000            A   790    	LD	BC,6
0401A5 C5                  A   791    	PUSH	BC
0401A6 01520000            A   792    	LD	BC,82
0401AA C5                  A   793    	PUSH	BC
0401AB CD 36 14 04         A   794    	CALL	_mos_i2c_read
0401AF C1                  A   795    	POP	BC
0401B0 C1                  A   796    	POP	BC
0401B1 C1                  A   797    	POP	BC
0401B2 B7                  A   798    	OR	A,A
0401B3 28 05               A   799    	JR	Z,L_8
0401B5 AF                  A   800    	XOR	A,A
0401B6 C3 BC 02 04         A   801    	JR	L_22
0401BA                     A   802    L_8:
                           A   803    ;   45	
                           A   804    ;   46		joyX = (values[0]);
                           A   805    .LINE 46
                           A   806    
0401BA DD7EF6              A   807    	LD	A,(IX+%FFFFFFF6)
0401BD 32 FF 1F 04         A   808    	LD	(_joyX),A
                           A   809    ;   47		joyY = (values[1]);
                           A   810    .LINE 47
                           A   811    
0401C1 ED22F6              A   812    	LEA	HL,IX+%FFFFFFF6
0401C4 23                  A   813    	INC	HL
0401C5 7E                  A   814    	LD	A,(HL)
0401C6 32 00 20 04         A   815    	LD	(_joyY),A
                           A   816    ;   48		for (i = 0; i < 3; i++) {
                           A   817    .LINE 48
                           A   818    
0401CA 01000000            A   819    	LD	BC,0
0401CE DD0FFD              A   820    	LD	(IX+%FFFFFFFD),BC
0401D1 18 77               A   821    	JR	L_12
0401D3                     A   822    L_10:
                           A   823    ;   49			angles[i] = (values[i+2] << 2) 
                           A   824    .LINE 49
                           A   825    
0401D3 DD17FD              A   826    	LD	DE,(IX+%FFFFFFFD)
0401D6 13                  A   827    	INC	DE
0401D7 D5E1                A   828    	LD	HL,DE
0401D9 29                  A   829    	ADD	HL,HL
0401DA DD2FEA              A   830    	LD	(IX+%FFFFFFEA),HL
0401DD DD07FD              A   831    	LD	BC,(IX+%FFFFFFFD)
0401E0 ED22F6              A   832    	LEA	HL,IX+%FFFFFFF6
0401E3 09                  A   833    	ADD	HL,BC
0401E4 23                  A   834    	INC	HL
0401E5 23                  A   835    	INC	HL
0401E6 7E                  A   836    	LD	A,(HL)
0401E7 B7ED62              A   837    	UEXT	HL
0401EA 6F                  A   838    	LD	L,A
0401EB 29                  A   839    	ADD	HL,HL
0401EC 29                  A   840    	ADD	HL,HL
0401ED DD2FE7              A   841    	LD	(IX+%FFFFFFE7),HL
0401F0 ED55F6              A   842    	LEA	IY,IX+%FFFFFFF6
0401F3 21030000            A   843    	LD	HL,3
0401F7 DD07EA              A   844    	LD	BC,(IX+%FFFFFFEA)
0401FA CD 23 1E 04         A   845    	CALL	__ishl
0401FE DD07EA              A   846    	LD	BC,(IX+%FFFFFFEA)
040201 CD 79 15 04         A   847    	CALL	__ishrs
040205 FD7E05              A   848    	LD	A,(IY+%5)
040208 A5                  A   849    	AND	A,L
040209 B7ED62              A   850    	UEXT	HL
04020C 6F                  A   851    	LD	L,A
04020D E5C1                A   852    	LD	BC,HL
04020F DD27FD              A   853    	LD	HL,(IX+%FFFFFFFD)
040212 DD0FE4              A   854    	LD	(IX+%FFFFFFE4),BC	; spill
040215 DD2FE1              A   855    	LD	(IX+%FFFFFFE1),HL	; spill
040218 DD07E4              A   856    	LD	BC,(IX+%FFFFFFE4)	; unspill
04021B 29                  A   857    	ADD	HL,HL
04021C DD0FE4              A   858    	LD	(IX+%FFFFFFE4),BC	; spill
04021F DD07E1              A   859    	LD	BC,(IX+%FFFFFFE1)	; unspill
040222 09                  A   860    	ADD	HL,BC
040223 DD07E4              A   861    	LD	BC,(IX+%FFFFFFE4)	; unspill
040226 DD0FDE              A   862    	LD	(IX+%FFFFFFDE),BC	; spill
040229 01 03 20 04         A   863    	LD	BC,_angles
04022D DD0FDB              A   864    	LD	(IX+%FFFFFFDB),BC	; spill
040230 DD07DE              A   865    	LD	BC,(IX+%FFFFFFDE)	; unspill
040233 DD0FDE              A   866    	LD	(IX+%FFFFFFDE),BC	; spill
040236 DD07DB              A   867    	LD	BC,(IX+%FFFFFFDB)	; unspill
040239 09                  A   868    	ADD	HL,BC
04023A DD07DE              A   869    	LD	BC,(IX+%FFFFFFDE)	; unspill
04023D E5FDE1              A   870    	LD	IY,HL
040240 DD27E7              A   871    	LD	HL,(IX+%FFFFFFE7)
040243 09                  A   872    	ADD	HL,BC
040244 FD2F00              A   873    	LD	(IY),HL
040247 DD1FFD              A   874    	LD	(IX+%FFFFFFFD),DE
                           A   875    ;   50		}
04024A                     A   876    L_12:
                           A   877    .LINE 50
                           A   878    
04024A 01030000            A   879    	LD	BC,3
04024E DD27FD              A   880    	LD	HL,(IX+%FFFFFFFD)
040251 B7                  A   881    	OR	A,A
040252 ED42                A   882    	SBC	HL,BC
040254 FA D3 01 04         A   883    	JP	M,L_10
                           A   884    ;   51		buttonZ = !( values[5] & 0x01);
                           A   885    .LINE 51
                           A   886    
040258 ED55FB              A   887    	LEA	IY,IX+%FFFFFFFB
04025B DD3EED              A   888    	LD	(IX+%FFFFFFED),IY
04025E DD27ED              A   889    	LD	HL,(IX+%FFFFFFED)
040261 7E                  A   890    	LD	A,(HL)
040262 E601                A   891    	AND	A,%1
040264 20 09               A   892    	JR	NZ,L_14
040266 01010000            A   893    	LD	BC,1
04026A DD0FF3              A   894    	LD	(IX+%FFFFFFF3),BC
04026D 18 07               A   895    	JR	L_15
04026F                     A   896    L_14:
04026F 01000000            A   897    	LD	BC,0
040273 DD0FF3              A   898    	LD	(IX+%FFFFFFF3),BC
040276                     A   899    L_15:
040276 DD7EF3              A   900    	LD	A,(IX+%FFFFFFF3)
040279 32 01 20 04         A   901    	LD	(_buttonZ),A
                           A   902    ;   52		buttonC = !((values[5] & 0x02) >> 1
                           A   903    .LINE 52
                           A   904    
04027D DD27ED              A   905    	LD	HL,(IX+%FFFFFFED)
040280 7E                  A   906    	LD	A,(HL)
040281 CB3F                A   907    	SRL	A
040283 E601                A   908    	AND	A,%1
040285 B7ED62              A   909    	UEXT	HL
040288 6F                  A   910    	LD	L,A
040289 CD 06 1B 04         A   911    	CALL	__icmpzero
04028D 20 09               A   912    	JR	NZ,L_19
04028F 01010000            A   913    	LD	BC,1
040293 DD0FF0              A   914    	LD	(IX+%FFFFFFF0),BC
040296 18 07               A   915    	JR	L_20
040298                     A   916    L_19:
040298 01000000            A   917    	LD	BC,0
04029C DD0FF0              A   918    	LD	(IX+%FFFFFFF0),BC
04029F                     A   919    L_20:
04029F DD7EF0              A   920    	LD	A,(IX+%FFFFFFF0)
0402A2 32 02 20 04         A   921    	LD	(_buttonC),A
                           A   922    ;   53	
                           A   923    ;   54		mos_i2c_write(0x52, 1, &zero);
                           A   924    .LINE 54
                           A   925    
0402A6 ED65FC              A   926    	PEA	IX+%FFFFFFFC
0402A9 01010000            A   927    	LD	BC,1
0402AD C5                  A   928    	PUSH	BC
0402AE 01520000            A   929    	LD	BC,82
0402B2 C5                  A   930    	PUSH	BC
0402B3 CD 1B 14 04         A   931    	CALL	_mos_i2c_write
0402B7 C1                  A   932    	POP	BC
0402B8 C1                  A   933    	POP	BC
0402B9 C1                  A   934    	POP	BC
                           A   935    ;   55		return true;
                           A   936    .LINE 55
                           A   937    
0402BA 3E01                A   938    	LD	A,%1
                           A   939    ;   56	}
0402BC                     A   940    L_22:
                           A   941    .LINE 56
                           A   942    
0402BC DDF9                A   943    	LD	SP,IX
0402BE DDE1                A   944    	POP	IX
0402C0 C9                  A   945    	RET	
                           A   946    
                           A   947    
                           A   948    ;**************************** _nunchuck_update 
                           A   949    ;Name                         Addr/Register   S
                           A   950    ;_mos_i2c_write                      IMPORT  --
                           A   951    ;_buttonC                            STATIC    
                           A   952    ;_buttonZ                            STATIC    
                           A   953    ;_angles                             STATIC    
                           A   954    ;_joyY                               STATIC    
                           A   955    ;_joyX                               STATIC    
                           A   956    ;_mos_i2c_read                       IMPORT  --
                           A   957    ;G_0                                  IX-19    
                           A   958    ;temp21                               IX-16    
                           A   959    ;temp16                               IX-13    
                           A   960    ;values                               IX-10    
                           A   961    ;zero                                  IX-4    
                           A   962    ;i                                     IX-3    
                           A   963    
                           A   964    
                           A   965    ; Stack Frame Size: 43 (bytes)
                           A   966    ;       Spill Code: 0 (instruction)
                           A   967    
                           A   968    
                           A   969    .ENDFUNC "nunchuck_update",56,"_nunchuck_update
                           A   970    ;   57	
                           A   971    ;   58	void calibrate_angles(void) {
0402C1                     A   972    _calibrate_angles:
                           A   973    .DEFINE "_calibrate_angles"
                           A   974    
                           A   975    .VALUE _calibrate_angles
                           A   976    
                           A   977    .CLASS 2
                           A   978    
                           A   979    .TYPE 65
                           A   980    
                           A   981    .ENDEF
                           A   982    
                           A   983    .BEGFUNC "calibrate_angles",58,"_calibrate_angl
                           A   984    
                           A   985    .LINE 58
                           A   986    
                           A   987    .DEFINE "i"
                           A   988    
                           A   989    .CLASS 65
                           A   990    
                           A   991    .VALUE -3
                           A   992    
                           A   993    .TYPE 4
                           A   994    
                           A   995    .ENDEF
                           A   996    
0402C1 DDE5                A   997    	PUSH	IX
0402C3 DD210000 00         A   998    	LD	IX,0
0402C8 DD39                A   999    	ADD	IX,SP
0402CA C5                  A  1000    	PUSH	BC
                           A  1001    ;   59		int i;
                           A  1002    ;   60		
                           A  1003    ;   61		for(i = 0; i < 3; i++) {
                           A  1004    .LINE 61
                           A  1005    
0402CB 01000000            A  1006    	LD	BC,0
0402CF DD0FFD              A  1007    	LD	(IX+%FFFFFFFD),BC
0402D2 18 26               A  1008    	JR	L_26
0402D4                     A  1009    L_24:
                           A  1010    ;   62			zero_angles[i] = angles[i];
                           A  1011    .LINE 62
                           A  1012    
0402D4 DD27FD              A  1013    	LD	HL,(IX+%FFFFFFFD)
0402D7 E5C1                A  1014    	LD	BC,HL
0402D9 29                  A  1015    	ADD	HL,HL
0402DA 09                  A  1016    	ADD	HL,BC
0402DB E5C1                A  1017    	LD	BC,HL
0402DD 11 03 20 04         A  1018    	LD	DE,_angles
0402E1 C5E1                A  1019    	LD	HL,BC
0402E3 19                  A  1020    	ADD	HL,DE
0402E4 E5FDE1              A  1021    	LD	IY,HL
0402E7 11 0C 20 04         A  1022    	LD	DE,_zero_angles
0402EB C5E1                A  1023    	LD	HL,BC
0402ED 19                  A  1024    	ADD	HL,DE
0402EE FD0700              A  1025    	LD	BC,(IY)
0402F1 ED0F                A  1026    	LD	(HL),BC
0402F3 DD07FD              A  1027    	LD	BC,(IX+%FFFFFFFD)
0402F6 03                  A  1028    	INC	BC
0402F7 DD0FFD              A  1029    	LD	(IX+%FFFFFFFD),BC
                           A  1030    ;   63		}
0402FA                     A  1031    L_26:
                           A  1032    .LINE 63
                           A  1033    
0402FA 01030000            A  1034    	LD	BC,3
0402FE DD27FD              A  1035    	LD	HL,(IX+%FFFFFFFD)
040301 B7                  A  1036    	OR	A,A
040302 ED42                A  1037    	SBC	HL,BC
040304 FA D4 02 04         A  1038    	JP	M,L_24
                           A  1039    ;   64	}
                           A  1040    .LINE 64
                           A  1041    
040308 DDF9                A  1042    	LD	SP,IX
04030A DDE1                A  1043    	POP	IX
04030C C9                  A  1044    	RET	
                           A  1045    
                           A  1046    
                           A  1047    ;**************************** _calibrate_angles
                           A  1048    ;Name                         Addr/Register   S
                           A  1049    ;_zero_angles                        STATIC    
                           A  1050    ;_angles                             STATIC    
                           A  1051    ;i                                     IX-3    
                           A  1052    
                           A  1053    
                           A  1054    ; Stack Frame Size: 9 (bytes)
                           A  1055    ;       Spill Code: 0 (instruction)
                           A  1056    
                           A  1057    
                           A  1058    .ENDFUNC "calibrate_angles",64,"_calibrate_angl
                           A  1059    ;   65	
                           A  1060    ;   66	bool nunchuck_begin(void) {
04030D                     A  1061    _nunchuck_begin:
                           A  1062    .DEFINE "_nunchuck_begin"
                           A  1063    
                           A  1064    .VALUE _nunchuck_begin
                           A  1065    
                           A  1066    .CLASS 2
                           A  1067    
                           A  1068    .TYPE 76
                           A  1069    
                           A  1070    .ENDEF
                           A  1071    
                           A  1072    .BEGFUNC "nunchuck_begin",66,"_nunchuck_begin"
                           A  1073    
                           A  1074    .LINE 66
                           A  1075    
                           A  1076    .DEFINE "init1"
                           A  1077    
                           A  1078    .CLASS 65
                           A  1079    
                           A  1080    .VALUE -2
                           A  1081    
                           A  1082    .DIM 2
                           A  1083    
                           A  1084    .TYPE 108
                           A  1085    
                           A  1086    .ENDEF
                           A  1087    
                           A  1088    .DEFINE "init2"
                           A  1089    
                           A  1090    .CLASS 65
                           A  1091    
                           A  1092    .VALUE -4
                           A  1093    
                           A  1094    .DIM 2
                           A  1095    
                           A  1096    .TYPE 108
                           A  1097    
                           A  1098    .ENDEF
                           A  1099    
04030D DDE5                A  1100    	PUSH	IX
04030F DD210000 00         A  1101    	LD	IX,0
040314 DD39                A  1102    	ADD	IX,SP
040316 C5                  A  1103    	PUSH	BC
040317 3B                  A  1104    	DEC	SP
                           A  1105    ;   67		uint8_t cnt;
                           A  1106    ;   68		unsigned char init1[] = {0xF0, 0x55
                           A  1107    .LINE 68
                           A  1108    
040318 ED12FE              A  1109    	LEA	DE,IX+%FFFFFFFE
04031B 21 24 1F 04         A  1110    	LD	HL,_0temp28
04031F 01020000            A  1111    	LD	BC,2
040323 EDB0                A  1112    	LDIR	
                           A  1113    ;   69		unsigned char init2[] = {0xFb, 0x00
                           A  1114    .LINE 69
                           A  1115    
040325 ED12FC              A  1116    	LEA	DE,IX+%FFFFFFFC
040328 21 26 1F 04         A  1117    	LD	HL,_1temp29
04032C 01020000            A  1118    	LD	BC,2
040330 EDB0                A  1119    	LDIR	
                           A  1120    ;   70		cnt = 0;
                           A  1121    ;   71	
                           A  1122    ;   72		mos_i2c_open(3);
                           A  1123    .LINE 72
                           A  1124    
040332 01030000            A  1125    	LD	BC,3
040336 C5                  A  1126    	PUSH	BC
040337 CD F4 13 04         A  1127    	CALL	_mos_i2c_open
04033B C1                  A  1128    	POP	BC
                           A  1129    ;   73		if(mos_i2c_write(0x52, 2, init1) !=
                           A  1130    .LINE 73
                           A  1131    
04033C ED65FE              A  1132    	PEA	IX+%FFFFFFFE
04033F 01020000            A  1133    	LD	BC,2
040343 C5                  A  1134    	PUSH	BC
040344 01520000            A  1135    	LD	BC,82
040348 C5                  A  1136    	PUSH	BC
040349 CD 1B 14 04         A  1137    	CALL	_mos_i2c_write
04034D C1                  A  1138    	POP	BC
04034E C1                  A  1139    	POP	BC
04034F C1                  A  1140    	POP	BC
040350 B7                  A  1141    	OR	A,A
040351 28 03               A  1142    	JR	Z,L_31
040353 AF                  A  1143    	XOR	A,A
040354 18 30               A  1144    	JR	L_36
040356                     A  1145    L_31:
                           A  1146    ;   74		delayms(1);
                           A  1147    .LINE 74
                           A  1148    
040356 01010000            A  1149    	LD	BC,1
04035A C5                  A  1150    	PUSH	BC
04035B CD E8 14 04         A  1151    	CALL	_delayms
04035F C1                  A  1152    	POP	BC
                           A  1153    ;   75		if(mos_i2c_write(0x52, 2, init2) !=
                           A  1154    .LINE 75
                           A  1155    
040360 ED65FC              A  1156    	PEA	IX+%FFFFFFFC
040363 01020000            A  1157    	LD	BC,2
040367 C5                  A  1158    	PUSH	BC
040368 01520000            A  1159    	LD	BC,82
04036C C5                  A  1160    	PUSH	BC
04036D CD 1B 14 04         A  1161    	CALL	_mos_i2c_write
040371 C1                  A  1162    	POP	BC
040372 C1                  A  1163    	POP	BC
040373 C1                  A  1164    	POP	BC
040374 B7                  A  1165    	OR	A,A
040375 28 03               A  1166    	JR	Z,L_34
040377 AF                  A  1167    	XOR	A,A
040378 18 0C               A  1168    	JR	L_36
04037A                     A  1169    L_34:
                           A  1170    ;   76		if(!nunchuck_update()) return false
                           A  1171    .LINE 76
                           A  1172    
04037A CD 8D 01 04         A  1173    	CALL	_nunchuck_update
04037E B7                  A  1174    	OR	A,A
04037F 20 03               A  1175    	JR	NZ,L_35
040381 AF                  A  1176    	XOR	A,A
040382 18 02               A  1177    	JR	L_36
040384                     A  1178    L_35:
                           A  1179    ;   77		return true;
                           A  1180    .LINE 77
                           A  1181    
040384 3E01                A  1182    	LD	A,%1
                           A  1183    ;   78	}
040386                     A  1184    L_36:
                           A  1185    .LINE 78
                           A  1186    
040386 DDF9                A  1187    	LD	SP,IX
040388 DDE1                A  1188    	POP	IX
04038A C9                  A  1189    	RET	
                           A  1190    
                           A  1191    
                           A  1192    ;**************************** _nunchuck_begin *
                           A  1193    ;Name                         Addr/Register   S
                           A  1194    ;_delayms                            IMPORT  --
                           A  1195    ;_mos_i2c_write                      IMPORT  --
                           A  1196    ;_mos_i2c_open                       IMPORT  --
                           A  1197    ;_1temp29                            STATIC    
                           A  1198    ;_0temp28                            STATIC    
                           A  1199    ;init2                                 IX-4    
                           A  1200    ;init1                                 IX-2    
                           A  1201    
                           A  1202    
                           A  1203    ; Stack Frame Size: 10 (bytes)
                           A  1204    ;       Spill Code: 0 (instruction)
                           A  1205    
                           A  1206    
                           A  1207    .ENDFUNC "nunchuck_begin",78,"_nunchuck_begin"
                           A  1208    	SEGMENT TEXT
041F24                     A  1209    _0temp28:
041F24 F0                  A  1210    	DB	240
041F25 55                  A  1211    	DB	85
041F26                     A  1212    _1temp29:
041F26 FB                  A  1213    	DB	251
041F27 00                  A  1214    	DB	0
                           A  1215    	SEGMENT CODE
                           A  1216    ;   79	
                           A  1217    ;   80	void commErrorMsg(void) {
04038B                     A  1218    _commErrorMsg:
                           A  1219    .DEFINE "_commErrorMsg"
                           A  1220    
                           A  1221    .VALUE _commErrorMsg
                           A  1222    
                           A  1223    .CLASS 2
                           A  1224    
                           A  1225    .TYPE 65
                           A  1226    
                           A  1227    .ENDEF
                           A  1228    
                           A  1229    .BEGFUNC "commErrorMsg",80,"_commErrorMsg"
                           A  1230    
04038B DDE5                A  1231    	PUSH	IX
04038D DD210000 00         A  1232    	LD	IX,0
040392 DD39                A  1233    	ADD	IX,SP
                           A  1234    ;   81		printf("Error connecting to Nunchuc
                           A  1235    .LINE 81
                           A  1236    
040394 01 22 17 04         A  1237    	LD	BC,___print_uputch
040398 ED43 21 1F 04       A  1238    	LD	(___print_xputch),BC
04039D 01 28 1F 04         A  1239    	LD	BC,L__18
0403A1 C5                  A  1240    	PUSH	BC
0403A2 CD 96 15 04         A  1241    	CALL	___print_sendstring
0403A6 C1                  A  1242    	POP	BC
                           A  1243    ;   82	}
                           A  1244    .LINE 82
                           A  1245    
0403A7 DDF9                A  1246    	LD	SP,IX
0403A9 DDE1                A  1247    	POP	IX
0403AB C9                  A  1248    	RET	
                           A  1249    
                           A  1250    
                           A  1251    ;**************************** _commErrorMsg ***
                           A  1252    ;Name                         Addr/Register   S
                           A  1253    ;___print_sendstring                 IMPORT  --
                           A  1254    ;___print_xputch                     IMPORT    
                           A  1255    ;___print_uputch                     IMPORT  --
                           A  1256    
                           A  1257    
                           A  1258    ; Stack Frame Size: 6 (bytes)
                           A  1259    ;       Spill Code: 0 (instruction)
                           A  1260    
                           A  1261    
                           A  1262    .ENDFUNC "commErrorMsg",82,"_commErrorMsg"
                           A  1263    	SEGMENT STRSECT
041F28                     A  1264    L__18:
041F28 4572726F 7220636F   A  1265    	DB	"Error connecting to Nunchuck"
041F30 6E6E6563 74696E67 
041F38 20746F20 4E756E63 
041F40 6875636B 
041F44 0D0A00              A  1266    	DB	13,10,0
                           A  1267    	SEGMENT CODE
                           A  1268    ;   83	
                           A  1269    ;   84	int main(int argc, char * argv[]) {
0403AC                     A  1270    _main:
                           A  1271    .DEFINE "_main"
                           A  1272    
                           A  1273    .VALUE _main
                           A  1274    
                           A  1275    .CLASS 2
                           A  1276    
                           A  1277    .TYPE 68
                           A  1278    
                           A  1279    .ENDEF
                           A  1280    
                           A  1281    .BEGFUNC "main",84,"_main"
                           A  1282    
                           A  1283    .LINE 84
                           A  1284    
                           A  1285    .DEFINE "argc"
                           A  1286    
                           A  1287    .CLASS 65
                           A  1288    
                           A  1289    .VALUE 6
                           A  1290    
                           A  1291    .TYPE 4
                           A  1292    
                           A  1293    .ENDEF
                           A  1294    
                           A  1295    .DEFINE "argv"
                           A  1296    
                           A  1297    .CLASS 65
                           A  1298    
                           A  1299    .VALUE 9
                           A  1300    
                           A  1301    .TYPE 290
                           A  1302    
                           A  1303    .ENDEF
                           A  1304    
                           A  1305    .DEFINE "xpos"
                           A  1306    
                           A  1307    .CLASS 65
                           A  1308    
                           A  1309    .VALUE -3
                           A  1310    
                           A  1311    .TYPE 4
                           A  1312    
                           A  1313    .ENDEF
                           A  1314    
                           A  1315    .DEFINE "ypos"
                           A  1316    
                           A  1317    .CLASS 65
                           A  1318    
                           A  1319    .VALUE -6
                           A  1320    
                           A  1321    .TYPE 4
                           A  1322    
                           A  1323    .ENDEF
                           A  1324    
                           A  1325    .DEFINE "btnc"
                           A  1326    
                           A  1327    .CLASS 65
                           A  1328    
                           A  1329    .VALUE -9
                           A  1330    
                           A  1331    .TYPE 4
                           A  1332    
                           A  1333    .ENDEF
                           A  1334    
                           A  1335    .DEFINE "btnz"
                           A  1336    
                           A  1337    .CLASS 65
                           A  1338    
                           A  1339    .VALUE -12
                           A  1340    
                           A  1341    .TYPE 4
                           A  1342    
                           A  1343    .ENDEF
                           A  1344    
0403AC DDE5                A  1345    	PUSH	IX
0403AE DD210000 00         A  1346    	LD	IX,0
0403B3 DD39                A  1347    	ADD	IX,SP
0403B5 ED22F4              A  1348    	LEA	HL,IX+%FFFFFFF4
0403B8 F9                  A  1349    	LD	SP,HL
                           A  1350    ;   85		int xpos, ypos, btnc, btnz;
                           A  1351    ;   86	
                           A  1352    ;   87		if(!nunchuck_begin()) {
                           A  1353    .LINE 87
                           A  1354    
0403B9 CD 0D 03 04         A  1355    	CALL	_nunchuck_begin
0403BD B7                  A  1356    	OR	A,A
0403BE 20 0B               A  1357    	JR	NZ,L_39
                           A  1358    ;   88			commErrorMsg();
                           A  1359    .LINE 88
                           A  1360    
0403C0 CD 8B 03 04         A  1361    	CALL	_commErrorMsg
                           A  1362    ;   89			return 0;
                           A  1363    .LINE 89
                           A  1364    
0403C4 B7                  A  1365    	OR	A,A
0403C5 ED62                A  1366    	SBC	HL,HL
0403C7 C3 C1 05 04         A  1367    	JR	L_61
                           A  1368    ;   90		}
0403CB                     A  1369    L_39:
                           A  1370    .LINE 90
                           A  1371    
                           A  1372    ;   91		vdp_cls();
                           A  1373    .LINE 91
                           A  1374    
0403CB CD 1E 07 04         A  1375    	CALL	_vdp_cls
                           A  1376    ;   92		printf("Nunchuck buttons:\r\n");
                           A  1377    .LINE 92
                           A  1378    
0403CF 01 22 17 04         A  1379    	LD	BC,___print_uputch
0403D3 ED43 21 1F 04       A  1380    	LD	(___print_xputch),BC
0403D8 01 47 1F 04         A  1381    	LD	BC,L__21
0403DC C5                  A  1382    	PUSH	BC
0403DD CD 96 15 04         A  1383    	CALL	___print_sendstring
0403E1 C1                  A  1384    	POP	BC
                           A  1385    ;   93		printf("     Z - calibrate angles\r
                           A  1386    .LINE 93
                           A  1387    
0403E2 01 22 17 04         A  1388    	LD	BC,___print_uputch
0403E6 ED43 21 1F 04       A  1389    	LD	(___print_xputch),BC
0403EB 01 5B 1F 04         A  1390    	LD	BC,L__22
0403EF C5                  A  1391    	PUSH	BC
0403F0 CD 96 15 04         A  1392    	CALL	___print_sendstring
0403F4 C1                  A  1393    	POP	BC
                           A  1394    ;   94		printf(" C & Z - exit program\r\n\r
                           A  1395    .LINE 94
                           A  1396    
0403F5 01 22 17 04         A  1397    	LD	BC,___print_uputch
0403F9 ED43 21 1F 04       A  1398    	LD	(___print_xputch),BC
0403FE 01 77 1F 04         A  1399    	LD	BC,L__23
040402 C5                  A  1400    	PUSH	BC
040403 CD 96 15 04         A  1401    	CALL	___print_sendstring
040407 C1                  A  1402    	POP	BC
                           A  1403    ;   95		printf("Press any key to continue")
                           A  1404    .LINE 95
                           A  1405    
040408 01 22 17 04         A  1406    	LD	BC,___print_uputch
04040C ED43 21 1F 04       A  1407    	LD	(___print_xputch),BC
040411 01 91 1F 04         A  1408    	LD	BC,L__24
040415 C5                  A  1409    	PUSH	BC
040416 CD 96 15 04         A  1410    	CALL	___print_sendstring
04041A C1                  A  1411    	POP	BC
                           A  1412    ;   96		while(getch() == 0);
04041B                     A  1413    L_41:
                           A  1414    .LINE 96
                           A  1415    
04041B CD 50 11 04         A  1416    	CALL	_getch
04041F B7                  A  1417    	OR	A,A
040420 28 F9               A  1418    	JR	Z,L_41
                           A  1419    ;   97	
                           A  1420    ;   98		while(1) {
040422                     A  1421    L_58:
                           A  1422    .LINE 98
                           A  1423    
                           A  1424    ;   99			delayms(100);
                           A  1425    .LINE 99
                           A  1426    
040422 01640000            A  1427    	LD	BC,100
040426 C5                  A  1428    	PUSH	BC
040427 CD E8 14 04         A  1429    	CALL	_delayms
04042B C1                  A  1430    	POP	BC
                           A  1431    ;  100	
                           A  1432    ;  101			if(!nunchuck_update()) {
                           A  1433    .LINE 101
                           A  1434    
04042C CD 8D 01 04         A  1435    	CALL	_nunchuck_update
040430 B7                  A  1436    	OR	A,A
040431 20 0B               A  1437    	JR	NZ,L_43
                           A  1438    ;  102				commErrorMsg();
                           A  1439    .LINE 102
                           A  1440    
040433 CD 8B 03 04         A  1441    	CALL	_commErrorMsg
                           A  1442    ;  103				return 0;
                           A  1443    .LINE 103
                           A  1444    
040437 B7                  A  1445    	OR	A,A
040438 ED62                A  1446    	SBC	HL,HL
04043A C3 C1 05 04         A  1447    	JR	L_61
                           A  1448    ;  104			}
04043E                     A  1449    L_43:
                           A  1450    .LINE 104
                           A  1451    
                           A  1452    ;  105			xpos = readJoyX();
                           A  1453    .LINE 105
                           A  1454    
04043E CD E5 00 04         A  1455    	CALL	_readJoyX
040442 DD2FFD              A  1456    	LD	(IX+%FFFFFFFD),HL
                           A  1457    ;  106			ypos = readJoyY();
                           A  1458    .LINE 106
                           A  1459    
040445 CD FB 00 04         A  1460    	CALL	_readJoyY
040449 DD2FFA              A  1461    	LD	(IX+%FFFFFFFA),HL
                           A  1462    ;  107			btnc = readButtonC();
                           A  1463    .LINE 107
                           A  1464    
04044C CD 11 01 04         A  1465    	CALL	_readButtonC
040450 B7ED62              A  1466    	UEXT	HL
040453 6F                  A  1467    	LD	L,A
040454 DD2FF7              A  1468    	LD	(IX+%FFFFFFF7),HL
                           A  1469    ;  108			btnz = readButtonZ();
                           A  1470    .LINE 108
                           A  1471    
040457 CD 23 01 04         A  1472    	CALL	_readButtonZ
04045B B7ED62              A  1473    	UEXT	HL
04045E 6F                  A  1474    	LD	L,A
04045F DD2FF4              A  1475    	LD	(IX+%FFFFFFF4),HL
                           A  1476    ;  109	
                           A  1477    ;  110			vdp_cls();
                           A  1478    .LINE 110
                           A  1479    
040462 CD 1E 07 04         A  1480    	CALL	_vdp_cls
                           A  1481    ;  111			printf("Angle X:%d Y:%d Z:%d\r\
                           A  1482    .LINE 111
                           A  1483    
040466 01 22 17 04         A  1484    	LD	BC,___print_uputch
04046A ED43 21 1F 04       A  1485    	LD	(___print_xputch),BC
04046F 01 AB 1F 04         A  1486    	LD	BC,L__27
040473 C5                  A  1487    	PUSH	BC
040474 CD 96 15 04         A  1488    	CALL	___print_sendstring
040478 C1                  A  1489    	POP	BC
040479 CD 35 01 04         A  1490    	CALL	_readAngleX
04047D E5C1                A  1491    	LD	BC,HL
04047F CD AE 1D 04         A  1492    	CALL	__itol
040483 C5D1                A  1493    	LD	DE,BC
040485 4F                  A  1494    	LD	C,A
040486 0600                A  1495    	LD	B,%0
040488 C5                  A  1496    	PUSH	BC
040489 D5                  A  1497    	PUSH	DE
04048A CD 1A 18 04         A  1498    	CALL	__u_itoa
04048E C1                  A  1499    	POP	BC
04048F C1                  A  1500    	POP	BC
040490 01 B4 1F 04         A  1501    	LD	BC,L__28
040494 C5                  A  1502    	PUSH	BC
040495 CD 96 15 04         A  1503    	CALL	___print_sendstring
040499 C1                  A  1504    	POP	BC
04049A CD 4F 01 04         A  1505    	CALL	_readAngleY
04049E E5C1                A  1506    	LD	BC,HL
0404A0 CD AE 1D 04         A  1507    	CALL	__itol
0404A4 C5D1                A  1508    	LD	DE,BC
0404A6 4F                  A  1509    	LD	C,A
0404A7 0600                A  1510    	LD	B,%0
0404A9 C5                  A  1511    	PUSH	BC
0404AA D5                  A  1512    	PUSH	DE
0404AB CD 1A 18 04         A  1513    	CALL	__u_itoa
0404AF C1                  A  1514    	POP	BC
0404B0 C1                  A  1515    	POP	BC
0404B1 01 B8 1F 04         A  1516    	LD	BC,L__29
0404B5 C5                  A  1517    	PUSH	BC
0404B6 CD 96 15 04         A  1518    	CALL	___print_sendstring
0404BA C1                  A  1519    	POP	BC
0404BB CD 6E 01 04         A  1520    	CALL	_readAngleZ
0404BF E5C1                A  1521    	LD	BC,HL
0404C1 CD AE 1D 04         A  1522    	CALL	__itol
0404C5 C5D1                A  1523    	LD	DE,BC
0404C7 4F                  A  1524    	LD	C,A
0404C8 0600                A  1525    	LD	B,%0
0404CA C5                  A  1526    	PUSH	BC
0404CB D5                  A  1527    	PUSH	DE
0404CC CD 1A 18 04         A  1528    	CALL	__u_itoa
0404D0 C1                  A  1529    	POP	BC
0404D1 C1                  A  1530    	POP	BC
0404D2 01 BC 1F 04         A  1531    	LD	BC,L__30
0404D6 C5                  A  1532    	PUSH	BC
0404D7 CD 96 15 04         A  1533    	CALL	___print_sendstring
0404DB C1                  A  1534    	POP	BC
                           A  1535    ;  112			if(xpos < 100) printf("Left ");
                           A  1536    .LINE 112
                           A  1537    
0404DC 01640000            A  1538    	LD	BC,100
0404E0 DD27FD              A  1539    	LD	HL,(IX+%FFFFFFFD)
0404E3 B7                  A  1540    	OR	A,A
0404E4 ED42                A  1541    	SBC	HL,BC
0404E6 F2 FD 04 04         A  1542    	JP	P,L_46
0404EA 01 22 17 04         A  1543    	LD	BC,___print_uputch
0404EE ED43 21 1F 04       A  1544    	LD	(___print_xputch),BC
0404F3 01 BF 1F 04         A  1545    	LD	BC,L__32
0404F7 C5                  A  1546    	PUSH	BC
0404F8 CD 96 15 04         A  1547    	CALL	___print_sendstring
0404FC C1                  A  1548    	POP	BC
0404FD                     A  1549    L_46:
                           A  1550    ;  113			if(xpos > 136) printf("Right ")
                           A  1551    .LINE 113
                           A  1552    
0404FD DD07FD              A  1553    	LD	BC,(IX+%FFFFFFFD)
040500 21880000            A  1554    	LD	HL,136
040504 B7                  A  1555    	OR	A,A
040505 ED42                A  1556    	SBC	HL,BC
040507 CD 62 15 04         A  1557    	CALL	__setflag
04050B F2 22 05 04         A  1558    	JP	P,L_48
04050F 01 22 17 04         A  1559    	LD	BC,___print_uputch
040513 ED43 21 1F 04       A  1560    	LD	(___print_xputch),BC
040518 01 C5 1F 04         A  1561    	LD	BC,L__34
04051C C5                  A  1562    	PUSH	BC
04051D CD 96 15 04         A  1563    	CALL	___print_sendstring
040521 C1                  A  1564    	POP	BC
040522                     A  1565    L_48:
                           A  1566    ;  114			if(ypos > 136) printf("Up ");
                           A  1567    .LINE 114
                           A  1568    
040522 DD07FA              A  1569    	LD	BC,(IX+%FFFFFFFA)
040525 21880000            A  1570    	LD	HL,136
040529 B7                  A  1571    	OR	A,A
04052A ED42                A  1572    	SBC	HL,BC
04052C CD 62 15 04         A  1573    	CALL	__setflag
040530 F2 47 05 04         A  1574    	JP	P,L_50
040534 01 22 17 04         A  1575    	LD	BC,___print_uputch
040538 ED43 21 1F 04       A  1576    	LD	(___print_xputch),BC
04053D 01 CC 1F 04         A  1577    	LD	BC,L__36
040541 C5                  A  1578    	PUSH	BC
040542 CD 96 15 04         A  1579    	CALL	___print_sendstring
040546 C1                  A  1580    	POP	BC
040547                     A  1581    L_50:
                           A  1582    ;  115			if(ypos < 100) printf("Down ");
                           A  1583    .LINE 115
                           A  1584    
040547 01640000            A  1585    	LD	BC,100
04054B DD27FA              A  1586    	LD	HL,(IX+%FFFFFFFA)
04054E B7                  A  1587    	OR	A,A
04054F ED42                A  1588    	SBC	HL,BC
040551 CD 62 15 04         A  1589    	CALL	__setflag
040555 F2 6C 05 04         A  1590    	JP	P,L_52
040559 01 22 17 04         A  1591    	LD	BC,___print_uputch
04055D ED43 21 1F 04       A  1592    	LD	(___print_xputch),BC
040562 01 D0 1F 04         A  1593    	LD	BC,L__38
040566 C5                  A  1594    	PUSH	BC
040567 CD 96 15 04         A  1595    	CALL	___print_sendstring
04056B C1                  A  1596    	POP	BC
04056C                     A  1597    L_52:
                           A  1598    ;  116			if(btnc & btnz) break;
                           A  1599    .LINE 116
                           A  1600    
04056C DD27F7              A  1601    	LD	HL,(IX+%FFFFFFF7)
04056F DD07F4              A  1602    	LD	BC,(IX+%FFFFFFF4)
040572 CD 2D 1E 04         A  1603    	CALL	__iand
040576 CD 06 1B 04         A  1604    	CALL	__icmpzero
04057A 20 42               A  1605    	JR	NZ,L_60
                           A  1606    ;  117			if(btnc) {
                           A  1607    .LINE 117
                           A  1608    
04057C DD27F7              A  1609    	LD	HL,(IX+%FFFFFFF7)
04057F CD 06 1B 04         A  1610    	CALL	__icmpzero
040583 28 13               A  1611    	JR	Z,L_56
                           A  1612    ;  118				printf("Button C\r\n");
                           A  1613    .LINE 118
                           A  1614    
040585 01 22 17 04         A  1615    	LD	BC,___print_uputch
040589 ED43 21 1F 04       A  1616    	LD	(___print_xputch),BC
04058E 01 D6 1F 04         A  1617    	LD	BC,L__41
040592 C5                  A  1618    	PUSH	BC
040593 CD 96 15 04         A  1619    	CALL	___print_sendstring
040597 C1                  A  1620    	POP	BC
                           A  1621    ;  119			}
040598                     A  1622    L_56:
                           A  1623    .LINE 119
                           A  1624    
                           A  1625    ;  120			if(btnz) {
                           A  1626    .LINE 120
                           A  1627    
040598 DD27F4              A  1628    	LD	HL,(IX+%FFFFFFF4)
04059B CD 06 1B 04         A  1629    	CALL	__icmpzero
04059F CA 22 04 04         A  1630    	JR	Z,L_58
                           A  1631    ;  121				printf("Button Z - calibrat
                           A  1632    .LINE 121
                           A  1633    
0405A3 01 22 17 04         A  1634    	LD	BC,___print_uputch
0405A7 ED43 21 1F 04       A  1635    	LD	(___print_xputch),BC
0405AC 01 E1 1F 04         A  1636    	LD	BC,L__43
0405B0 C5                  A  1637    	PUSH	BC
0405B1 CD 96 15 04         A  1638    	CALL	___print_sendstring
0405B5 C1                  A  1639    	POP	BC
                           A  1640    ;  122				calibrate_angles();
                           A  1641    .LINE 122
                           A  1642    
0405B6 CD C1 02 04         A  1643    	CALL	_calibrate_angles
                           A  1644    ;  123			}
                           A  1645    ;  124		}
                           A  1646    .LINE 124
                           A  1647    
0405BA C3 22 04 04         A  1648    	JR	L_58
0405BE                     A  1649    L_60:
                           A  1650    ;  125		return 0;
                           A  1651    .LINE 125
                           A  1652    
0405BE B7                  A  1653    	OR	A,A
0405BF ED62                A  1654    	SBC	HL,HL
                           A  1655    ;  126	}
0405C1                     A  1656    L_61:
                           A  1657    .LINE 126
                           A  1658    
0405C1 DDF9                A  1659    	LD	SP,IX
0405C3 DDE1                A  1660    	POP	IX
0405C5 C9                  A  1661    	RET	
                           A  1662    
                           A  1663    
                           A  1664    ;**************************** _main ***********
                           A  1665    ;Name                         Addr/Register   S
                           A  1666    ;__u_itoa                            IMPORT  --
                           A  1667    ;_delayms                            IMPORT  --
                           A  1668    ;_getch                              IMPORT  --
                           A  1669    ;___print_sendstring                 IMPORT  --
                           A  1670    ;___print_xputch                     IMPORT    
                           A  1671    ;___print_uputch                     IMPORT  --
                           A  1672    ;_vdp_cls                            IMPORT  --
                           A  1673    ;btnz                                 IX-12    
                           A  1674    ;btnc                                  IX-9    
                           A  1675    ;ypos                                  IX-6    
                           A  1676    ;xpos                                  IX-3    
                           A  1677    ;argv                                  IX+9    
                           A  1678    ;argc                                  IX+6    
                           A  1679    
                           A  1680    
                           A  1681    ; Stack Frame Size: 24 (bytes)
                           A  1682    ;       Spill Code: 0 (instruction)
                           A  1683    
                           A  1684    
                           A  1685    .ENDFUNC "main",126,"_main"
                           A  1686    	SEGMENT STRSECT
041F47                     A  1687    L__21:
041F47 4E756E63 6875636B   A  1688    	DB	"Nunchuck buttons:"
041F4F 20627574 746F6E73 
041F57 3A 
041F58 0D0A00              A  1689    	DB	13,10,0
041F5B                     A  1690    L__22:
041F5B 20202020 205A202D   A  1691    	DB	"     Z - calibrate angles"
041F63 2063616C 69627261 
041F6B 74652061 6E676C65 
041F73 73 
041F74 0D0A00              A  1692    	DB	13,10,0
041F77                     A  1693    L__23:
041F77 20432026 205A202D   A  1694    	DB	" C & Z - exit program"
041F7F 20657869 74207072 
041F87 6F677261 6D 
041F8C 0D0A0D0A 00         A  1695    	DB	13,10,13,10,0
041F91                     A  1696    L__24:
041F91 50726573 7320616E   A  1697    	DB	"Press any key to continue"
041F99 79206B65 7920746F 
041FA1 20636F6E 74696E75 
041FA9 65 
041FAA 00                  A  1698    	DB	0
041FAB                     A  1699    L__27:
041FAB 416E676C 6520583A   A  1700    	DB	"Angle X:"
041FB3 00                  A  1701    	DB	0
041FB4                     A  1702    L__28:
041FB4 20593A              A  1703    	DB	" Y:"
041FB7 00                  A  1704    	DB	0
041FB8                     A  1705    L__29:
041FB8 205A3A              A  1706    	DB	" Z:"
041FBB 00                  A  1707    	DB	0
041FBC                     A  1708    L__30:
041FBC 0D0A00              A  1709    	DB	13,10,0
041FBF                     A  1710    L__32:
041FBF 4C656674 20         A  1711    	DB	"Left "
041FC4 00                  A  1712    	DB	0
041FC5                     A  1713    L__34:
041FC5 52696768 7420       A  1714    	DB	"Right "
041FCB 00                  A  1715    	DB	0
041FCC                     A  1716    L__36:
041FCC 557020              A  1717    	DB	"Up "
041FCF 00                  A  1718    	DB	0
041FD0                     A  1719    L__38:
041FD0 446F776E 20         A  1720    	DB	"Down "
041FD5 00                  A  1721    	DB	0
041FD6                     A  1722    L__41:
041FD6 42757474 6F6E2043   A  1723    	DB	"Button C"
041FDE 0D0A00              A  1724    	DB	13,10,0
041FE1                     A  1725    L__43:
041FE1 42757474 6F6E205A   A  1726    	DB	"Button Z - calibrating angles"
041FE9 202D2063 616C6962 
041FF1 72617469 6E672061 
041FF9 6E676C65 73 
041FFE 00                  A  1727    	DB	0
                           A  1728    	XREF _delayms:ROM
                           A  1729    	XREF _vdp_cls:ROM
                           A  1730    	XREF _mos_i2c_read:ROM
                           A  1731    	XREF _mos_i2c_write:ROM
                           A  1732    	XREF _mos_i2c_open:ROM
                           A  1733    	XREF _getch:ROM
                           A  1734    	XREF __u_itoa:ROM
                           A  1735    	XREF ___print_sendstring:ROM
                           A  1736    	XREF ___print_xputch:ROM
                           A  1737    	XREF ___print_uputch:ROM
                           A  1738    	XREF __iand:ROM
                           A  1739    	XREF __ishrs:ROM
                           A  1740    	XREF __ishl:ROM
                           A  1741    	XREF __itol:ROM
                           A  1742    	XREF __setflag:ROM
                           A  1743    	XREF __icmpzero:ROM
                           A  1744    	XDEF _main
                           A  1745    	XDEF _commErrorMsg
                           A  1746    	XDEF _nunchuck_begin
                           A  1747    	XDEF _calibrate_angles
                           A  1748    	XDEF _nunchuck_update
                           A  1749    	XDEF _readAngleZ
                           A  1750    	XDEF _readAngleY
                           A  1751    	XDEF _readAngleX
                           A  1752    	XDEF _readButtonZ
                           A  1753    	XDEF _readButtonC
                           A  1754    	XDEF _readJoyY
                           A  1755    	XDEF _readJoyX
                           A  1756    	XDEF _zero_angles
                           A  1757    	XDEF _angles
                           A  1758    	XDEF _buttonC
                           A  1759    	XDEF _buttonZ
                           A  1760    	XDEF _joyY
                           A  1761    	XDEF _joyX
                           A  1762    	END


Errors: 0
Warnings: 0
Lines Assembled: 1763

Zilog eZ80 Macro Assembler Version 4.3 (19073001)19-Jul-22     21:22:34     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optsize -noreduceopt -nopadbranch
                           A     3    ; -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\src\spi.c"
                           A     5    	.assume ADL=1
                           A     6    	SEGMENT CODE
                           A     7    ;    1	/*
                           A     8    ;    2	 * Title:			AGON MOS - SPI
                           A     9    ;    3	 * Author:			Cocoacrumbs
                           A    10    ;    4	 * Modified by:		Dean Belfield
                           A    11    ;    5	 * Created:			19/06/2022
                           A    12    ;    6	 * Last Updated:	11/07/2022
                           A    13    ;    7	 * 
                           A    14    ;    8	 * Thank you to @CoCoaCrumbs fo this co
                           A    15    ;    9	 *
                           A    16    ;   10	 * Modinfo:
                           A    17    ;   11	 * 11/07/2022:		Now includes define
                           A    18    ;   12	 */
                           A    19    ;   13	
                           A    20    ;   14	#include <ez80.h>
                           A    21    ;   15	#include <defines.h>
                           A    22    ;   16	
                           A    23    ;   17	#include "spi.h"
                           A    24    ;   18	#include "timer.h"
                           A    25    ;   19	
                           A    26    ;   20	// Delays, SPI and SD card retry consta
                           A    27    ;   21	//
                           A    28    ;   22	#define WAIT4RESET  8000
                           A    29    ;   23	#define SPIRETRY    1000
                           A    30    ;   24	
                           A    31    ;   25	#define SD_CS       4	// PB4, was PB0
                           A    32    ;   26	
                           A    33    ;   27	#define SPI_MOSI    7   // PB7
                           A    34    ;   28	#define SPI_MISO    6   // PB6
                           A    35    ;   29	#define SPI_CLK     3   // PB3
                           A    36    ;   30	
                           A    37    ;   31	
                           A    38    ;   32	// Clear, set bits in registers
                           A    39    ;   33	//
                           A    40    ;   34	#define BIT(n)              (1 << n)
                           A    41    ;   35	#define CLEAR_BIT(reg, n)   (reg &= ~(1
                           A    42    ;   36	#define SET_BIT(reg, n)     (reg |=  (1
                           A    43    ;   37	
                           A    44    ;   38	void SD_CS_enable() {
000000                     A    45    _SD_CS_enable:
                           A    46    ;   39	     PB_DR &= ~BIT(SD_CS);
000000 ED389A              A    47    	IN0	A,(154)
000003 CBA7                A    48    	RES	%4,A
000005 ED399A              A    49    	OUT0	(154),A
                           A    50    ;   40	} 
000008 C9                  A    51    	RET	
                           A    52    
                           A    53    
                           A    54    ;**************************** _SD_CS_enable ***
                           A    55    ;Name                         Addr/Register   S
                           A    56    
                           A    57    
                           A    58    ; Stack Frame Size: 6 (bytes)
                           A    59    ;       Spill Code: 0 (instruction)
                           A    60    
                           A    61    
                           A    62    ;   41	
                           A    63    ;   42	void SD_CS_disable() {
000009                     A    64    _SD_CS_disable:
                           A    65    ;   43	     PB_DR |= BIT(SD_CS); 
000009 ED389A              A    66    	IN0	A,(154)
00000C CBE7                A    67    	SET	%4,A
00000E ED399A              A    68    	OUT0	(154),A
                           A    69    ;   44	} 
000011 C9                  A    70    	RET	
                           A    71    
                           A    72    
                           A    73    ;**************************** _SD_CS_disable **
                           A    74    ;Name                         Addr/Register   S
                           A    75    
                           A    76    
                           A    77    ; Stack Frame Size: 6 (bytes)
                           A    78    ;       Spill Code: 0 (instruction)
                           A    79    
                           A    80    
                           A    81    ;   45	
                           A    82    ;   46	BYTE spi_transfer(BYTE d) {
000012                     A    83    _spi_transfer:
000012 21FDFFFF            A    84    	LD	HL,-3
000016 CD 00 00 00         A    85    	CALL	__frameset
                           A    86    ;   47	    int i = 0;
00001A 01000000            A    87    	LD	BC,0
00001E DD0FFD              A    88    	LD	(IX+%FFFFFFFD),BC
                           A    89    ;   48	
                           A    90    ;   49	    // Write the data to exchange 
                           A    91    ;   50		//
                           A    92    ;   51	    SPI_TSR = d;
000021 DD7E06              A    93    	LD	A,(IX+%6)
000024 ED39BC              A    94    	OUT0	(188),A
                           A    95    ;   52	    do {
000027                     A    96    L_5:
                           A    97    ;   53	        if (SPI_SR & (1 << 7))  {
000027 ED38BB              A    98    	IN0	A,(187)
00002A E680                A    99    	AND	A,%80
00002C 20 15               A   100    	JR	NZ,L_7
                           A   101    ;   54	            break;
                           A   102    ;   55	        } 
                           A   103    ;   56	        i++;
00002E DD07FD              A   104    	LD	BC,(IX+%FFFFFFFD)
000031 03                  A   105    	INC	BC
000032 DD0FFD              A   106    	LD	(IX+%FFFFFFFD),BC
                           A   107    ;   57	    } while (i < SPIRETRY);
000035 01E80300            A   108    	LD	BC,1000
000039 DD27FD              A   109    	LD	HL,(IX+%FFFFFFFD)
00003C B7                  A   110    	OR	A,A
00003D ED42                A   111    	SBC	HL,BC
00003F FA 27 00 00         A   112    	JP	M,L_5
000043                     A   113    L_7:
                           A   114    ;   58	    return SPI_RBR;
000043 ED38BC              A   115    	IN0	A,(188)
                           A   116    ;   59	} 
000046 DDF9                A   117    	LD	SP,IX
000048 DDE1                A   118    	POP	IX
00004A C9                  A   119    	RET	
                           A   120    
                           A   121    
                           A   122    ;**************************** _spi_transfer ***
                           A   123    ;Name                         Addr/Register   S
                           A   124    ;i                                     IX-3    
                           A   125    ;d                                     IX+6    
                           A   126    
                           A   127    
                           A   128    ; Stack Frame Size: 12 (bytes)
                           A   129    ;       Spill Code: 0 (instruction)
                           A   130    
                           A   131    
                           A   132    ;   60	
                           A   133    ;   61	
                           A   134    ;   62	// Reset system devices
                           A   135    ;   63	void init_spi() {
00004B                     A   136    _init_spi:
00004B 21FCFFFF            A   137    	LD	HL,-4
00004F CD 00 00 00         A   138    	CALL	__frameset
                           A   139    ;   64	    long i;
                           A   140    ;   65	
                           A   141    ;   66	    // SS must remain high for SPI to w
                           A   142    ;   67		//
                           A   143    ;   68	    PB_DR   |=  BIT(2);
000053 ED389A              A   144    	IN0	A,(154)
000056 CBD7                A   145    	SET	%2,A
000058 ED399A              A   146    	OUT0	(154),A
                           A   147    ;   69	    PB_ALT1 &= ~BIT(2);
00005B ED389C              A   148    	IN0	A,(156)
00005E CB97                A   149    	RES	%2,A
000060 ED399C              A   150    	OUT0	(156),A
                           A   151    ;   70	    PB_ALT2 &= ~BIT(2);
000063 ED389D              A   152    	IN0	A,(157)
000066 CB97                A   153    	RES	%2,A
000068 ED399D              A   154    	OUT0	(157),A
                           A   155    ;   71	    PB_DDR  &= ~BIT(2);
00006B ED389B              A   156    	IN0	A,(155)
00006E CB97                A   157    	RES	%2,A
000070 ED399B              A   158    	OUT0	(155),A
                           A   159    ;   72	
                           A   160    ;   73	    // Enable the chip select outputs a
                           A   161    ;   74		//
                           A   162    ;   75	    PB_DR   |=  BIT(SD_CS);
000073 ED389A              A   163    	IN0	A,(154)
000076 CBE7                A   164    	SET	%4,A
000078 ED399A              A   165    	OUT0	(154),A
                           A   166    ;   76	    PB_ALT1 &= ~BIT(SD_CS);
00007B ED389C              A   167    	IN0	A,(156)
00007E CBA7                A   168    	RES	%4,A
000080 ED399C              A   169    	OUT0	(156),A
                           A   170    ;   77	    PB_ALT2 &= ~BIT(SD_CS);
000083 ED389D              A   171    	IN0	A,(157)
000086 CBA7                A   172    	RES	%4,A
000088 ED399D              A   173    	OUT0	(157),A
                           A   174    ;   78	    PB_DDR  &= ~BIT(SD_CS);
00008B ED389B              A   175    	IN0	A,(155)
00008E CBA7                A   176    	RES	%4,A
000090 ED399B              A   177    	OUT0	(155),A
                           A   178    ;   79		
                           A   179    ;   80	    // Set port B pins 7 (MOSI), 6 (MIS
                           A   180    ;   81		//
                           A   181    ;   82	    PB_ALT1 &= ~(BIT(SPI_MOSI) | BIT(SP
000093 ED389C              A   182    	IN0	A,(156)
000096 E637                A   183    	AND	A,%37
000098 ED399C              A   184    	OUT0	(156),A
                           A   185    ;   83	    PB_ALT2 |=  (BIT(SPI_MOSI) | BIT(SP
00009B ED389D              A   186    	IN0	A,(157)
00009E F6C8                A   187    	OR	A,%C8
0000A0 ED399D              A   188    	OUT0	(157),A
                           A   189    ;   84		
                           A   190    ;   85	    mode_spi(4);
0000A3 01040000            A   191    	LD	BC,4
0000A7 C5                  A   192    	PUSH	BC
0000A8 CD E8 00 00         A   193    	CALL	_mode_spi
0000AC C1                  A   194    	POP	BC
                           A   195    ;   86	
                           A   196    ;   87	    i = 0;
0000AD 01000000            A   197    	LD	BC,0
0000B1 AF                  A   198    	XOR	A,A
0000B2 DD0FFC              A   199    	LD	(IX+%FFFFFFFC),BC
0000B5 DD77FF              A   200    	LD	(IX+%FFFFFFFF),A
                           A   201    ;   88	    while (i < WAIT4RESET)
0000B8 18 12               A   202    	JR	L_10
0000BA                     A   203    L_11:
                           A   204    ;   89	        i++;
0000BA DD27FC              A   205    	LD	HL,(IX+%FFFFFFFC)
0000BD DD5EFF              A   206    	LD	E,(IX+%FFFFFFFF)
0000C0 3E01                A   207    	LD	A,%1
0000C2 CD 00 00 00         A   208    	CALL	__ladd_b
0000C6 DD2FFC              A   209    	LD	(IX+%FFFFFFFC),HL
0000C9 DD73FF              A   210    	LD	(IX+%FFFFFFFF),E
0000CC                     A   211    L_10:
0000CC DD27FC              A   212    	LD	HL,(IX+%FFFFFFFC)
0000CF DD5EFF              A   213    	LD	E,(IX+%FFFFFFFF)
0000D2 01401F00            A   214    	LD	BC,8000
0000D6 AF                  A   215    	XOR	A,A
0000D7 CD 00 00 00         A   216    	CALL	__lcmps
0000DB CD 00 00 00         A   217    	CALL	__setflag
0000DF FA BA 00 00         A   218    	JP	M,L_11
                           A   219    ;   90	} 
0000E3 DDF9                A   220    	LD	SP,IX
0000E5 DDE1                A   221    	POP	IX
0000E7 C9                  A   222    	RET	
                           A   223    
                           A   224    
                           A   225    ;**************************** _init_spi *******
                           A   226    ;Name                         Addr/Register   S
                           A   227    ;_mode_spi                           IMPORT  --
                           A   228    ;i                                     IX-4    
                           A   229    
                           A   230    
                           A   231    ; Stack Frame Size: 10 (bytes)
                           A   232    ;       Spill Code: 0 (instruction)
                           A   233    
                           A   234    
                           A   235    ;   91	
                           A   236    ;   92	
                           A   237    ;   93	void mode_spi(int d) {
0000E8                     A   238    _mode_spi:
0000E8 CD 00 00 00         A   239    	CALL	__frameset0
                           A   240    ;   94	    // Disable SPI
                           A   241    ;   95		//
                           A   242    ;   96	    SPI_CTL = 0;
0000EC AF                  A   243    	XOR	A,A
0000ED ED39BA              A   244    	OUT0	(186),A
                           A   245    ;   97	
                           A   246    ;   98	    // SPI Data Rate (bps) = System Clo
                           A   247    ;   99		//
                           A   248    ;  100	    SPI_BRG_H = d / 256;
0000F0 01000100            A   249    	LD	BC,256
0000F4 DD2706              A   250    	LD	HL,(IX+%6)
0000F7 CD 00 00 00         A   251    	CALL	__idivs
0000FB 7D                  A   252    	LD	A,L
0000FC ED39B9              A   253    	OUT0	(185),A
                           A   254    ;  101	    SPI_BRG_L = d % 256;
0000FF 01000100            A   255    	LD	BC,256
000103 DD2706              A   256    	LD	HL,(IX+%6)
000106 CD 00 00 00         A   257    	CALL	__irems
00010A 7D                  A   258    	LD	A,L
00010B ED39B8              A   259    	OUT0	(184),A
                           A   260    ;  102	
                           A   261    ;  103	    // Enable SPI
                           A   262    ;  104		//
                           A   263    ;  105	    SPI_CTL = 0x30;         // [5] SPI 
00010E 3E30                A   264    	LD	A,%30
000110 ED39BA              A   265    	OUT0	(186),A
                           A   266    ;  106	                            // [4] When
                           A   267    ;  107	} 
000113 DDF9                A   268    	LD	SP,IX
000115 DDE1                A   269    	POP	IX
000117 C9                  A   270    	RET	
                           A   271    
                           A   272    
                           A   273    ;**************************** _mode_spi *******
                           A   274    ;Name                         Addr/Register   S
                           A   275    ;d                                     IX+6    
                           A   276    
                           A   277    
                           A   278    ; Stack Frame Size: 9 (bytes)
                           A   279    ;       Spill Code: 0 (instruction)
                           A   280    
                           A   281    
                           A   282    	XREF __lcmps:ROM
                           A   283    	XREF __idivs:ROM
                           A   284    	XREF __irems:ROM
                           A   285    	XREF __frameset0:ROM
                           A   286    	XREF __frameset:ROM
                           A   287    	XREF __setflag:ROM
                           A   288    	XREF __ladd_b:ROM
                           A   289    	XDEF _mode_spi
                           A   290    	XDEF _init_spi
                           A   291    	XDEF _spi_transfer
                           A   292    	XDEF _SD_CS_disable
                           A   293    	XDEF _SD_CS_enable
                           A   294    	END


Errors: 0
Warnings: 0
Lines Assembled: 295

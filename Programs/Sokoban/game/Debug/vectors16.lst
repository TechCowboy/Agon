Zilog eZ80 Macro Assembler Version 4.3 (19073001)06-Aug-22     11:47:42     page:   1


PC     Object              I  Line    Source 
                           A     1    ;
                           A     2    ; Title:	AGON MOS - C Startup Code
                           A     3    ; Author:	Copyright (C) 2005 by ZiLOG, Inc.  
                           A     4    ; Modified By:	Dean Belfield
                           A     5    ; Created:	10/07/2022
                           A     6    ; Last Updated:	15/07/2022
                           A     7    ;
                           A     8    ; Modinfo:
                           A     9    ; 11/07/2022:	Added RST_10 code - TX
                           A    10    ; 15/07/2022:	Added __vertical_blank_handler
                           A    11    
                           B     0    			INCLUDE	"../src/macros.inc"
                           B     1    ;
                           B     2    ; Title:	AGON MOS - Useful Macros
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	15/07/2022
                           B     5    ; Last Updated:	15/07/2022
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    
                           B     9    ADD8U_HL:		MACRO 
                           B    10    			ADD	A, L 
                           B    11    			LD	L, A 
                           B    12    			ADC	A, H
                           B    13    			SUB	L
                           B    14    			LD	H, A 
                           B    15    			ENDMACRO 
                           B    16    
                           B    17    SET_GPIO:		MACRO	REG, VAL
                           B    18    			IN0	A,(REG)
                           B    19    			OR	VAL
                           B    20    			OUT0	(REG),A
                           B    21    			ENDMACRO
                           B    22    				
                           B    23    RES_GPIO:		MACRO	REG, VAL
                           B    24    			PUSH	BC
                           B    25    			LD	A, VAL
                           B    26    			CPL
                           B    27    			LD	C, A
                           B    28    			IN0	A,(REG)
                           B    29    			AND	C
                           B    30    			OUT0	(REG),A
                           B    31    			POP	BC
                           B    32    			ENDMACRO
                           B    33    			
                           B     0    			INCLUDE	"../src/equs.inc"
                           B     1    ;
                           B     2    ; Title:	AGON MOS - Equs
                           B     3    ; Author:	Dean Belfield
                           B     4    ; Created:	15/07/2022
                           B     5    ; Last Updated:	15/07/2022
                           B     6    ;
                           B     7    ; Modinfo:
                           B     8    
                           B     9    ; For GPIO
                           B    10    ; PA not available on eZ80F92
                           B    11    ;
       00000096            B    12    PA_DR:			EQU		96h
       00000097            B    13    PA_DDR:			EQU		97h
       00000098            B    14    PA_ALT1:		EQU		98h
       00000099            B    15    PA_ALT2:		EQU		99h
       0000009A            B    16    PB_DR:          	EQU		9Ah
       0000009B            B    17    PB_DDR:        	 	EQU		9Bh
       0000009C            B    18    PB_ALT1:        	EQU		9Ch
       0000009D            B    19    PB_ALT2:        	EQU		9Dh
       0000009E            B    20    PC_DR:          	EQU		9Eh
       0000009F            B    21    PC_DDR:         	EQU		9Fh
       000000A0            B    22    PC_ALT1:        	EQU		A0h
       000000A1            B    23    PC_ALT2:        	EQU		A1h
       000000A2            B    24    PD_DR:          	EQU		A2h
       000000A3            B    25    PD_DDR:			EQU		A3h
       000000A4            B    26    PD_ALT1:		EQU		A4h
       000000A5            B    27    PD_ALT2:		EQU		A5h
                           B    28    	
       00000000            B    29    GPIOMODE_OUT:		EQU		0	; Output
       00000001            B    30    GPIOMODE_IN:		EQU		1	; Input
       00000002            B    31    GPIOMODE_DIO:		EQU		2	; Open Drain IO
       00000003            B    32    GPIOMODE_SIO:		EQU		3	; Open Source I
       00000004            B    33    GPIOMODE_INTD:		EQU		4	; Interrupt, Du
       00000005            B    34    GPIOMODE_ALTF:		EQU		5;	; Alt Function
       00000006            B    35    GPIOMODE_INTAL:		EQU		6	; Interrupt, Ac
       00000007            B    36    GPIOMODE_INTAH:		EQU		7	; Interrupt, Ac
       00000008            B    37    GPIOMODE_INTFE:		EQU		8	; Interrupt, Fa
       00000009            B    38    GPIOMODE_INTRE:		EQU		9	; Interrupt, Ri
                           B    39    	
                           B    40    ; For interrupts.asm
                           B    41    ;
                           B    42    
                           B    43    ;UARTs
                           B    44    ;
       00000018            B    45    UART0_IVECT		EQU	18h
       0000001A            B    46    UART1_IVECT		EQU	1Ah
                           B    47    
                           B    48    ;Ports
                           B    49    ;
       00000030            B    50    PB0_IVECT   		EQU   	30h	; AGON ITRP Int
       00000032            B    51    PB1_IVECT  	  	EQU  	32h	; AGON VBLANK Inter
       00000034            B    52    PB2_IVECT  	  	EQU   	34h
       00000036            B    53    PB3_IVECT  	  	EQU   	36h
       00000038            B    54    PB4_IVECT    		EQU   	38h
       0000003A            B    55    PB5_IVECT    		EQU   	3Ah
       0000003C            B    56    PB6_IVECT    		EQU   	3Ch
       0000003E            B    57    PB7_IVECT    		EQU   	3Eh
                           B    58                           
       00000040            B    59    PC0_IVECT    		EQU   	40h
       00000042            B    60    PC1_IVECT    		EQU   	42h
       00000044            B    61    PC2_IVECT    		EQU   	44h
       00000046            B    62    PC3_IVECT    		EQU   	46h
       00000048            B    63    PC4_IVECT    		EQU   	48h
       0000004A            B    64    PC5_IVECT    		EQU   	4Ah
       0000004C            B    65    PC6_IVECT    		EQU   	4Ch
       0000004E            B    66    PC7_IVECT    		EQU   	4Eh
                           B    67                           
       00000050            B    68    PD0_IVECT    		EQU   	50h
       00000052            B    69    PD1_IVECT    		EQU   	52h
       00000054            B    70    PD2_IVECT    		EQU   	54h
       00000056            B    71    PD3_IVECT    		EQU   	56h
       00000058            B    72    PD4_IVECT    		EQU   	58h
       0000005A            B    73    PD5_IVECT    		EQU   	5Ah
       0000005C            B    74    PD6_IVECT    		EQU   	5Ch
       0000005E            B    75    PD7_IVECT    		EQU   	5Eh
                           A    14    
                           A    15    			XREF 	__init
                           A    16    			XREF 	__low_rom
                           A    17    			
                           A    18    			XDEF 	_reset
                           A    19    			XDEF 	__default_nmi_handler
                           A    20    			XDEF 	__default_mi_handler
                           A    21    			XDEF 	__nvectors
                           A    22    			XDEF 	_init_default_vectors
                           A    23    			XDEF 	__init_default_vectors
                           A    24    			XDEF 	_set_vector
                           A    25    			XDEF	__set_vector
                           A    26    			XDEF	__2nd_jump_table
                           A    27    			XDEF	__1st_jump_table
                           A    28    			XDEF	__vector_table
                           A    29    
                           A    30    			XDEF	_vblank_handler
                           A    31    			
                           A    32    			XREF	_keycode
                           A    33    			XREF	serial_TX
                           A    34    			XREF	serial_RX
                           A    35    
       00000030            A    36    NVECTORS 		EQU 48			; Number of int
                           A    37    
                           A    38    ; Save Interrupt State
                           A    39    ;
                           A    40    SAVEIMASK		MACRO
                           A    41    			LD	A, I		; Sets parity bit t
                           A    42    			PUSH	AF
                           A    43    			DI			; Disable interrupts wh
                           A    44    			MACEND
                           A    45    
                           A    46    ; Restore Interrupt State
                           A    47    ;
                           A    48    RESTOREIMASK		MACRO
                           A    49    			POP	AF
                           A    50    			JP	PO, $+5		; Parity bit is IEF
                           A    51    			EI
                           A    52    			MACEND
                           A    53    
                           A    54    ; Reset and all RST nn's
                           A    55    ;
                           A    56    			DEFINE .RESET, SPACE = ROM
                           A    57    			SEGMENT .RESET
                           A    58    
000000                     A    59    _reset:	
000000 F3                  A    60    _rst0:			DI
000001 ED7E                A    61    			RSMIX
000003 5BC3 00 00 00       A    62    			JP.LIL	__init
                           A    63    		
000008 C9                  A    64    _rst8:			RET
000009                     A    65    			DS	7
                           A    66    		
000010 5BC3 00 00 00       A    67    _rst10:			JP.LIL	serial_TX
000015                     A    68    			DS	3
                           A    69    
000018 C9                  A    70    _rst18:			RET
000019                     A    71    			DS	7
                           A    72    		
000020 C9                  A    73    _rst20:			RET
000021                     A    74    			DS	7
                           A    75    		
000028 C9                  A    76    _rst28:			RET
000029                     A    77    			DS	7
                           A    78    
000030 C9                  A    79    _rst30:			RET
000031                     A    80    			DS	7
                           A    81    
000038 C9                  A    82    _rst38:			RET
000039                     A    83    			DS 	%2D
                           A    84    		
000066 5BC3 02 00 00       A    85    _nmi:			JP.LIL	__default_nmi_handler
                           A    86    
                           A    87    ;
                           A    88    ; Startup code
                           A    89    ;
                           A    90    			DEFINE .STARTUP, SPACE = ROM
                           A    91    			SEGMENT .STARTUP
                           A    92    
                           A    93    			.ASSUME ADL=1
                           A    94    
                           A    95    ; Number of vectors supported
                           A    96    ;
000000 3000                A    97    __nvectors:		DW NVECTORS            ; extern
                           A    98    
                           A    99    ; Default Non-Maskable Interrupt handler
                           A   100    ;
000002 ED45                A   101    __default_nmi_handler:	RETN
                           A   102    
                           A   103    ; Default Maskable Interrupt handler
                           A   104    ;
000004 FB                  A   105    __default_mi_handler:	EI
000005 ED4D                A   106    			RETI
                           A   107    		
                           A   108    ; AGON Vertical Blank Interrupt handler
                           A   109    ;
000007 F3                  A   110    _vblank_handler:	DI
000008 F5                  A   111    			PUSH		AF
                           A   112    			SET_GPIO 	PB_DR, 1	; Need to s
000011 C5                  A   113    			PUSH		BC
000012 D5                  A   114    			PUSH		DE
000013 E5                  A   115    			PUSH		HL
000014 CD 00 00 00         A   116    			CALL		serial_RX
000018 30 04               A   117    			JR		NC, _vblank_handler1
00001A 32 00 00 00         A   118    			LD		(_keycode), A
00001E E1                  A   119    _vblank_handler1:	POP		HL
00001F D1                  A   120    			POP		DE
000020 C1                  A   121    			POP		BC
000021 F1                  A   122    			POP		AF
000022 FB                  A   123    			EI	
000023 ED4D                A   124    			RETI
                           A   125    
                           A   126    ; Initialize all potential interrupt vector loc
                           A   127    ; default handler.
                           A   128    ;
                           A   129    ; void _init_default_vectors(void);
                           A   130    ;
000025                     A   131    __init_default_vectors:
000025 F5                  A   132    _init_default_vectors:	push af
                           A   133    			SAVEIMASK
00002A 21 04 00 00         A   134    			ld hl, __default_mi_handler
00002E 3EC3                A   135    			ld a, %C3
000030 32 00 00 00         A   136    			ld (__2nd_jump_table), a       ; pl
000034 22 01 00 00         A   137    			ld (__2nd_jump_table + 1), hl  ; __
000038 21 00 00 00         A   138    			ld hl, __2nd_jump_table
00003C 11 04 00 00         A   139    			ld de, __2nd_jump_table + 4
000040 01BC0000            A   140    			ld bc, NVECTORS * 4 - 4
000044 EDB0                A   141    			ldir
000046 ED5E                A   142    			im 2                       ; Interr
000048 3E 00               A   143    			ld a, __vector_table >> 8
00004A ED47                A   144    			ld i, a                    ; Load i
                           A   145    			RESTOREIMASK
000052 F1                  A   146    			pop af
000053 C9                  A   147    			ret
                           A   148    
                           A   149    ; Installs a user interrupt handler in the 2nd 
                           A   150    ;
                           A   151    ; void * _set_vector(unsigned int vector, void(
                           A   152    ;
000054                     A   153    __set_vector:
000054 FDE5                A   154    _set_vector:		push iy
000056 FD210000 00         A   155    			ld iy, 0
00005B FD39                A   156    			add iy, sp                 ; Standa
00005D F5                  A   157    			push af
                           A   158    			SAVEIMASK
000062 01000000            A   159    			ld bc, 0                   ; clear 
000066 0602                A   160    			ld b, 2                    ; calcul
000068 FD4E06              A   161    			ld c, (iy+6)               ; vector
00006B ED4C                A   162    			mlt bc                     ; bc is 
00006D 21 00 00 00         A   163    			ld hl, __2nd_jump_table
000071 09                  A   164    			add hl, bc                 ; hl is 
000072 36C3                A   165    			ld (hl), %C3               ; place 
000074 23                  A   166    			inc hl                     ; hl is 
000075 FD0709              A   167    			ld bc, (iy+9)              ; bc is 
000078 ED17                A   168    			ld de, (hl)                ; save p
00007A ED0F                A   169    			ld (hl), bc                ; store 
00007C D5                  A   170    			push de
00007D E1                  A   171    			pop hl                     ; return
                           A   172    			RESTOREIMASK
000084 F1                  A   173    			pop af
000085 FDF9                A   174    			ld sp, iy                  ; standa
000087 FDE1                A   175    			pop iy
000089 C9                  A   176    			ret
                           A   177    
                           A   178    			DEFINE IVJMPTBL, SPACE = RAM
                           A   179    			SEGMENT IVJMPTBL
                           A   180    
                           A   181    ; 2nd Interrupt Vector Jump Table
                           A   182    ;  - this table must reside in RAM anywhere in 
                           A   183    ;  - each 4-byte entry is a jump to an interrup
                           A   184    ;
000000                     A   185    __2nd_jump_table:	DS NVECTORS * 4
                           A   186    
                           A   187    
                           A   188    ; Interrupt Vector Table
                           A   189    ;  - this segment must be aligned on a 256 byte
                           A   190    ;    the 64K byte boundry
                           A   191    ;  - each 2-byte entry is a 2-byte vector addre
                           A   192    ;
                           A   193    			DEFINE .IVECTS, SPACE = ROM, ALIGN 
                           A   194    			SEGMENT .IVECTS
                           A   195    
000000 6000                A   196    __vector_table:		dw __1st_jump_table + %00
000002 6400                A   197    			dw __1st_jump_table + %04
000004 6800                A   198    			dw __1st_jump_table + %08
000006 6C00                A   199    			dw __1st_jump_table + %0c
000008 7000                A   200    			dw __1st_jump_table + %10
00000A 7400                A   201    			dw __1st_jump_table + %14
00000C 7800                A   202    			dw __1st_jump_table + %18
00000E 7C00                A   203    			dw __1st_jump_table + %1c
000010 8000                A   204    			dw __1st_jump_table + %20
000012 8400                A   205    			dw __1st_jump_table + %24
000014 8800                A   206    			dw __1st_jump_table + %28
000016 8C00                A   207    			dw __1st_jump_table + %2c
000018 9000                A   208    			dw __1st_jump_table + %30
00001A 9400                A   209    			dw __1st_jump_table + %34
00001C 9800                A   210    			dw __1st_jump_table + %38
00001E 9C00                A   211    			dw __1st_jump_table + %3c
000020 A000                A   212    			dw __1st_jump_table + %40
000022 A400                A   213    			dw __1st_jump_table + %44
000024 A800                A   214    			dw __1st_jump_table + %48
000026 AC00                A   215    			dw __1st_jump_table + %4c
000028 B000                A   216    			dw __1st_jump_table + %50
00002A B400                A   217    			dw __1st_jump_table + %54
00002C B800                A   218    			dw __1st_jump_table + %58
00002E BC00                A   219    			dw __1st_jump_table + %5c
000030 C000                A   220    			dw __1st_jump_table + %60
000032 C400                A   221    			dw __1st_jump_table + %64
000034 C800                A   222    			dw __1st_jump_table + %68
000036 CC00                A   223    			dw __1st_jump_table + %6c
000038 D000                A   224    			dw __1st_jump_table + %70
00003A D400                A   225    			dw __1st_jump_table + %74
00003C D800                A   226    			dw __1st_jump_table + %78
00003E DC00                A   227    			dw __1st_jump_table + %7c
000040 E000                A   228    			dw __1st_jump_table + %80
000042 E400                A   229    			dw __1st_jump_table + %84
000044 E800                A   230    			dw __1st_jump_table + %88
000046 EC00                A   231    			dw __1st_jump_table + %8c
000048 F000                A   232    			dw __1st_jump_table + %90
00004A F400                A   233    			dw __1st_jump_table + %94
00004C F800                A   234    			dw __1st_jump_table + %98
00004E FC00                A   235    			dw __1st_jump_table + %9c
000050 0001                A   236    			dw __1st_jump_table + %a0
000052 0401                A   237    			dw __1st_jump_table + %a4
000054 0801                A   238    			dw __1st_jump_table + %a8
000056 0C01                A   239    			dw __1st_jump_table + %ac
000058 1001                A   240    			dw __1st_jump_table + %b0
00005A 1401                A   241    			dw __1st_jump_table + %b4
00005C 1801                A   242    			dw __1st_jump_table + %b8
00005E 1C01                A   243    			dw __1st_jump_table + %bc
                           A   244    
                           A   245    ; 1st Interrupt Vector Jump Table
                           A   246    ;  - this table must reside in the first 64K by
                           A   247    ;  - each 4-byte entry is a jump to the 2nd jum
                           A   248    ;
000060 C3 00 00 00         A   249    __1st_jump_table:	jp __2nd_jump_table + %00
000064 C3 04 00 00         A   250    			jp __2nd_jump_table + %04
000068 C3 08 00 00         A   251    			jp __2nd_jump_table + %08
00006C C3 0C 00 00         A   252    			jp __2nd_jump_table + %0c
000070 C3 10 00 00         A   253    			jp __2nd_jump_table + %10
000074 C3 14 00 00         A   254    			jp __2nd_jump_table + %14
000078 C3 18 00 00         A   255    			jp __2nd_jump_table + %18
00007C C3 1C 00 00         A   256    			jp __2nd_jump_table + %1c
000080 C3 20 00 00         A   257    			jp __2nd_jump_table + %20
000084 C3 24 00 00         A   258    			jp __2nd_jump_table + %24
000088 C3 28 00 00         A   259    			jp __2nd_jump_table + %28
00008C C3 2C 00 00         A   260    			jp __2nd_jump_table + %2c
000090 C3 30 00 00         A   261    			jp __2nd_jump_table + %30
000094 C3 34 00 00         A   262    			jp __2nd_jump_table + %34
000098 C3 38 00 00         A   263    			jp __2nd_jump_table + %38
00009C C3 3C 00 00         A   264    			jp __2nd_jump_table + %3c
0000A0 C3 40 00 00         A   265    			jp __2nd_jump_table + %40
0000A4 C3 44 00 00         A   266    			jp __2nd_jump_table + %44
0000A8 C3 48 00 00         A   267    			jp __2nd_jump_table + %48
0000AC C3 4C 00 00         A   268    			jp __2nd_jump_table + %4c
0000B0 C3 50 00 00         A   269    			jp __2nd_jump_table + %50
0000B4 C3 54 00 00         A   270    			jp __2nd_jump_table + %54
0000B8 C3 58 00 00         A   271    			jp __2nd_jump_table + %58
0000BC C3 5C 00 00         A   272    			jp __2nd_jump_table + %5c
0000C0 C3 60 00 00         A   273    			jp __2nd_jump_table + %60
0000C4 C3 64 00 00         A   274    			jp __2nd_jump_table + %64
0000C8 C3 68 00 00         A   275    			jp __2nd_jump_table + %68
0000CC C3 6C 00 00         A   276    			jp __2nd_jump_table + %6c
0000D0 C3 70 00 00         A   277    			jp __2nd_jump_table + %70
0000D4 C3 74 00 00         A   278    			jp __2nd_jump_table + %74
0000D8 C3 78 00 00         A   279    			jp __2nd_jump_table + %78
0000DC C3 7C 00 00         A   280    			jp __2nd_jump_table + %7c
0000E0 C3 80 00 00         A   281    			jp __2nd_jump_table + %80
0000E4 C3 84 00 00         A   282    			jp __2nd_jump_table + %84
0000E8 C3 88 00 00         A   283    			jp __2nd_jump_table + %88
0000EC C3 8C 00 00         A   284    			jp __2nd_jump_table + %8c
0000F0 C3 90 00 00         A   285    			jp __2nd_jump_table + %90
0000F4 C3 94 00 00         A   286    			jp __2nd_jump_table + %94
0000F8 C3 98 00 00         A   287    			jp __2nd_jump_table + %98
0000FC C3 9C 00 00         A   288    			jp __2nd_jump_table + %9c
000100 C3 A0 00 00         A   289    			jp __2nd_jump_table + %a0
000104 C3 A4 00 00         A   290    			jp __2nd_jump_table + %a4
000108 C3 A8 00 00         A   291    			jp __2nd_jump_table + %a8
00010C C3 AC 00 00         A   292    			jp __2nd_jump_table + %ac
000110 C3 B0 00 00         A   293    			jp __2nd_jump_table + %b0
000114 C3 B4 00 00         A   294    			jp __2nd_jump_table + %b4
000118 C3 B8 00 00         A   295    			jp __2nd_jump_table + %b8
00011C C3 BC 00 00         A   296    			jp __2nd_jump_table + %bc
                           A   297    
                           A   298    			END


Errors: 0
Warnings: 0
Lines Assembled: 427

Zilog eZ80 Macro Assembler Version 4.3 (19073001)05-Aug-22     21:36:42     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optspeed -noreduceopt -nopadbranc
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\src_fatfs\ff.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "NONAME0",562
                           A     9    .DEFINE "fs_type"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "pdrv"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "n_fats"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 12
                           A    23    .ENDEF
                           A    24    .DEFINE "wflag"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 12
                           A    28    .ENDEF
                           A    29    .DEFINE "fsi_flag"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 12
                           A    33    .ENDEF
                           A    34    .DEFINE "id"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 13
                           A    38    .ENDEF
                           A    39    .DEFINE "n_rootdir"
                           A    40    .VALUE 7
                           A    41    .CLASS 8
                           A    42    .TYPE 13
                           A    43    .ENDEF
                           A    44    .DEFINE "csize"
                           A    45    .VALUE 9
                           A    46    .CLASS 8
                           A    47    .TYPE 13
                           A    48    .ENDEF
                           A    49    .DEFINE "lfnbuf"
                           A    50    .VALUE 11
                           A    51    .CLASS 8
                           A    52    .TYPE 45
                           A    53    .ENDEF
                           A    54    .DEFINE "last_clst"
                           A    55    .VALUE 14
                           A    56    .CLASS 8
                           A    57    .TYPE 15
                           A    58    .ENDEF
                           A    59    .DEFINE "free_clst"
                           A    60    .VALUE 18
                           A    61    .CLASS 8
                           A    62    .TYPE 15
                           A    63    .ENDEF
                           A    64    .DEFINE "n_fatent"
                           A    65    .VALUE 22
                           A    66    .CLASS 8
                           A    67    .TYPE 15
                           A    68    .ENDEF
                           A    69    .DEFINE "fsize"
                           A    70    .VALUE 26
                           A    71    .CLASS 8
                           A    72    .TYPE 15
                           A    73    .ENDEF
                           A    74    .DEFINE "volbase"
                           A    75    .VALUE 30
                           A    76    .CLASS 8
                           A    77    .TYPE 15
                           A    78    .ENDEF
                           A    79    .DEFINE "fatbase"
                           A    80    .VALUE 34
                           A    81    .CLASS 8
                           A    82    .TYPE 15
                           A    83    .ENDEF
                           A    84    .DEFINE "dirbase"
                           A    85    .VALUE 38
                           A    86    .CLASS 8
                           A    87    .TYPE 15
                           A    88    .ENDEF
                           A    89    .DEFINE "database"
                           A    90    .VALUE 42
                           A    91    .CLASS 8
                           A    92    .TYPE 15
                           A    93    .ENDEF
                           A    94    .DEFINE "winsect"
                           A    95    .VALUE 46
                           A    96    .CLASS 8
                           A    97    .TYPE 15
                           A    98    .ENDEF
                           A    99    .DEFINE "win"
                           A   100    .VALUE 50
                           A   101    .CLASS 8
                           A   102    .DIM 512
                           A   103    .TYPE 108
                           A   104    .ENDEF
                           A   105    .ENDREC "NONAME0"
                           A   106    .BEGREC "NONAME1",15
                           A   107    .DEFINE "fs"
                           A   108    .VALUE 0
                           A   109    .CLASS 8
                           A   110    .TAG "NONAME0"
                           A   111    .TYPE 40
                           A   112    .ENDEF
                           A   113    .DEFINE "id"
                           A   114    .VALUE 3
                           A   115    .CLASS 8
                           A   116    .TYPE 13
                           A   117    .ENDEF
                           A   118    .DEFINE "attr"
                           A   119    .VALUE 5
                           A   120    .CLASS 8
                           A   121    .TYPE 12
                           A   122    .ENDEF
                           A   123    .DEFINE "stat"
                           A   124    .VALUE 6
                           A   125    .CLASS 8
                           A   126    .TYPE 12
                           A   127    .ENDEF
                           A   128    .DEFINE "sclust"
                           A   129    .VALUE 7
                           A   130    .CLASS 8
                           A   131    .TYPE 15
                           A   132    .ENDEF
                           A   133    .DEFINE "objsize"
                           A   134    .VALUE 11
                           A   135    .CLASS 8
                           A   136    .TYPE 15
                           A   137    .ENDEF
                           A   138    .ENDREC "NONAME1"
                           A   139    .BEGREC "NONAME2",548
                           A   140    .DEFINE "obj"
                           A   141    .VALUE 0
                           A   142    .CLASS 8
                           A   143    .TAG "NONAME1"
                           A   144    .TYPE 8
                           A   145    .ENDEF
                           A   146    .DEFINE "flag"
                           A   147    .VALUE 15
                           A   148    .CLASS 8
                           A   149    .TYPE 12
                           A   150    .ENDEF
                           A   151    .DEFINE "err"
                           A   152    .VALUE 16
                           A   153    .CLASS 8
                           A   154    .TYPE 12
                           A   155    .ENDEF
                           A   156    .DEFINE "fptr"
                           A   157    .VALUE 17
                           A   158    .CLASS 8
                           A   159    .TYPE 15
                           A   160    .ENDEF
                           A   161    .DEFINE "clust"
                           A   162    .VALUE 21
                           A   163    .CLASS 8
                           A   164    .TYPE 15
                           A   165    .ENDEF
                           A   166    .DEFINE "sect"
                           A   167    .VALUE 25
                           A   168    .CLASS 8
                           A   169    .TYPE 15
                           A   170    .ENDEF
                           A   171    .DEFINE "dir_sect"
                           A   172    .VALUE 29
                           A   173    .CLASS 8
                           A   174    .TYPE 15
                           A   175    .ENDEF
                           A   176    .DEFINE "dir_ptr"
                           A   177    .VALUE 33
                           A   178    .CLASS 8
                           A   179    .TYPE 44
                           A   180    .ENDEF
                           A   181    .DEFINE "buf"
                           A   182    .VALUE 36
                           A   183    .CLASS 8
                           A   184    .DIM 512
                           A   185    .TYPE 108
                           A   186    .ENDEF
                           A   187    .ENDREC "NONAME2"
                           A   188    .BEGREC "NONAME3",46
                           A   189    .DEFINE "obj"
                           A   190    .VALUE 0
                           A   191    .CLASS 8
                           A   192    .TAG "NONAME1"
                           A   193    .TYPE 8
                           A   194    .ENDEF
                           A   195    .DEFINE "dptr"
                           A   196    .VALUE 15
                           A   197    .CLASS 8
                           A   198    .TYPE 15
                           A   199    .ENDEF
                           A   200    .DEFINE "clust"
                           A   201    .VALUE 19
                           A   202    .CLASS 8
                           A   203    .TYPE 15
                           A   204    .ENDEF
                           A   205    .DEFINE "sect"
                           A   206    .VALUE 23
                           A   207    .CLASS 8
                           A   208    .TYPE 15
                           A   209    .ENDEF
                           A   210    .DEFINE "dir"
                           A   211    .VALUE 27
                           A   212    .CLASS 8
                           A   213    .TYPE 44
                           A   214    .ENDEF
                           A   215    .DEFINE "fn"
                           A   216    .VALUE 30
                           A   217    .CLASS 8
                           A   218    .DIM 12
                           A   219    .TYPE 108
                           A   220    .ENDEF
                           A   221    .DEFINE "blk_ofs"
                           A   222    .VALUE 42
                           A   223    .CLASS 8
                           A   224    .TYPE 15
                           A   225    .ENDEF
                           A   226    .ENDREC "NONAME3"
                           A   227    .BEGREC "NONAME4",278
                           A   228    .DEFINE "fsize"
                           A   229    .VALUE 0
                           A   230    .CLASS 8
                           A   231    .TYPE 15
                           A   232    .ENDEF
                           A   233    .DEFINE "fdate"
                           A   234    .VALUE 4
                           A   235    .CLASS 8
                           A   236    .TYPE 13
                           A   237    .ENDEF
                           A   238    .DEFINE "ftime"
                           A   239    .VALUE 6
                           A   240    .CLASS 8
                           A   241    .TYPE 13
                           A   242    .ENDEF
                           A   243    .DEFINE "fattrib"
                           A   244    .VALUE 8
                           A   245    .CLASS 8
                           A   246    .TYPE 12
                           A   247    .ENDEF
                           A   248    .DEFINE "altname"
                           A   249    .VALUE 9
                           A   250    .CLASS 8
                           A   251    .DIM 13
                           A   252    .TYPE 98
                           A   253    .ENDEF
                           A   254    .DEFINE "fname"
                           A   255    .VALUE 22
                           A   256    .CLASS 8
                           A   257    .DIM 256
                           A   258    .TYPE 98
                           A   259    .ENDEF
                           A   260    .ENDREC "NONAME4"
                           A   261    .BEGREC "NONAME5",12
                           A   262    .DEFINE "fmt"
                           A   263    .VALUE 0
                           A   264    .CLASS 8
                           A   265    .TYPE 12
                           A   266    .ENDEF
                           A   267    .DEFINE "n_fat"
                           A   268    .VALUE 1
                           A   269    .CLASS 8
                           A   270    .TYPE 12
                           A   271    .ENDEF
                           A   272    .DEFINE "align"
                           A   273    .VALUE 2
                           A   274    .CLASS 8
                           A   275    .TYPE 14
                           A   276    .ENDEF
                           A   277    .DEFINE "n_root"
                           A   278    .VALUE 5
                           A   279    .CLASS 8
                           A   280    .TYPE 14
                           A   281    .ENDEF
                           A   282    .DEFINE "au_size"
                           A   283    .VALUE 8
                           A   284    .CLASS 8
                           A   285    .TYPE 15
                           A   286    .ENDEF
                           A   287    .ENDREC "NONAME5"
                           A   288    	SEGMENT BSS
000000                     A   289    _FatFs:
000000                     A   290    	DS	3
                           A   291    .DEFINE "FatFs"
                           A   292    .ALIAS "_FatFs"
                           A   293    .CLASS 83
                           A   294    .VALUE _FatFs
                           A   295    .DIM 1
                           A   296    .TAG "NONAME0"
                           A   297    .TYPE 360
                           A   298    .ENDEF
000003                     A   299    _Fsid:
000003                     A   300    	DS	2*1
                           A   301    .DEFINE "Fsid"
                           A   302    .ALIAS "_Fsid"
                           A   303    .CLASS 83
                           A   304    .VALUE _Fsid
                           A   305    .TYPE 13
                           A   306    .ENDEF
                           A   307    	SEGMENT TEXT
000000                     A   308    _LfnOfs:
000000 01                  A   309    	DB	1
000001 03                  A   310    	DB	3
000002 05                  A   311    	DB	5
000003 07                  A   312    	DB	7
000004 09                  A   313    	DB	9
000005 0E                  A   314    	DB	14
000006 10                  A   315    	DB	16
000007 12                  A   316    	DB	18
000008 14                  A   317    	DB	20
000009 16                  A   318    	DB	22
00000A 18                  A   319    	DB	24
00000B 1C                  A   320    	DB	28
00000C 1E                  A   321    	DB	30
                           A   322    .DEFINE "LfnOfs"
                           A   323    .ALIAS "_LfnOfs"
                           A   324    .CLASS 84
                           A   325    .VALUE _LfnOfs
                           A   326    .DIM 13
                           A   327    .TYPE 108
                           A   328    .ENDEF
00000D                     A   329    _ExCvt:
00000D 80                  A   330    	DB	128
00000E 9A                  A   331    	DB	154
00000F 45                  A   332    	DB	69
000010 41                  A   333    	DB	65
000011 8E                  A   334    	DB	142
000012 41                  A   335    	DB	65
000013 8F                  A   336    	DB	143
000014 80                  A   337    	DB	128
000015 45                  A   338    	DB	69
000016 45                  A   339    	DB	69
000017 45                  A   340    	DB	69
000018 49                  A   341    	DB	73
000019 49                  A   342    	DB	73
00001A 49                  A   343    	DB	73
00001B 8E                  A   344    	DB	142
00001C 8F                  A   345    	DB	143
00001D 90                  A   346    	DB	144
00001E 92                  A   347    	DB	146
00001F 92                  A   348    	DB	146
000020 4F                  A   349    	DB	79
000021 99                  A   350    	DB	153
000022 4F                  A   351    	DB	79
000023 55                  A   352    	DB	85
000024 55                  A   353    	DB	85
000025 59                  A   354    	DB	89
000026 99                  A   355    	DB	153
000027 9A                  A   356    	DB	154
000028 9B                  A   357    	DB	155
000029 9C                  A   358    	DB	156
00002A 9D                  A   359    	DB	157
00002B 9E                  A   360    	DB	158
00002C 9F                  A   361    	DB	159
00002D 41                  A   362    	DB	65
00002E 49                  A   363    	DB	73
00002F 4F                  A   364    	DB	79
000030 55                  A   365    	DB	85
000031 A5                  A   366    	DB	165
000032 A5                  A   367    	DB	165
000033 A6                  A   368    	DB	166
000034 A7                  A   369    	DB	167
000035 A8                  A   370    	DB	168
000036 A9                  A   371    	DB	169
000037 AA                  A   372    	DB	170
000038 AB                  A   373    	DB	171
000039 AC                  A   374    	DB	172
00003A AD                  A   375    	DB	173
00003B AE                  A   376    	DB	174
00003C AF                  A   377    	DB	175
00003D B0                  A   378    	DB	176
00003E B1                  A   379    	DB	177
00003F B2                  A   380    	DB	178
000040 B3                  A   381    	DB	179
000041 B4                  A   382    	DB	180
000042 B5                  A   383    	DB	181
000043 B6                  A   384    	DB	182
000044 B7                  A   385    	DB	183
000045 B8                  A   386    	DB	184
000046 B9                  A   387    	DB	185
000047 BA                  A   388    	DB	186
000048 BB                  A   389    	DB	187
000049 BC                  A   390    	DB	188
00004A BD                  A   391    	DB	189
00004B BE                  A   392    	DB	190
00004C BF                  A   393    	DB	191
00004D C0                  A   394    	DB	192
00004E C1                  A   395    	DB	193
00004F C2                  A   396    	DB	194
000050 C3                  A   397    	DB	195
000051 C4                  A   398    	DB	196
000052 C5                  A   399    	DB	197
000053 C6                  A   400    	DB	198
000054 C7                  A   401    	DB	199
000055 C8                  A   402    	DB	200
000056 C9                  A   403    	DB	201
000057 CA                  A   404    	DB	202
000058 CB                  A   405    	DB	203
000059 CC                  A   406    	DB	204
00005A CD                  A   407    	DB	205
00005B CE                  A   408    	DB	206
00005C CF                  A   409    	DB	207
00005D D0                  A   410    	DB	208
00005E D1                  A   411    	DB	209
00005F D2                  A   412    	DB	210
000060 D3                  A   413    	DB	211
000061 D4                  A   414    	DB	212
000062 D5                  A   415    	DB	213
000063 D6                  A   416    	DB	214
000064 D7                  A   417    	DB	215
000065 D8                  A   418    	DB	216
000066 D9                  A   419    	DB	217
000067 DA                  A   420    	DB	218
000068 DB                  A   421    	DB	219
000069 DC                  A   422    	DB	220
00006A DD                  A   423    	DB	221
00006B DE                  A   424    	DB	222
00006C DF                  A   425    	DB	223
00006D E0                  A   426    	DB	224
00006E E1                  A   427    	DB	225
00006F E2                  A   428    	DB	226
000070 E3                  A   429    	DB	227
000071 E4                  A   430    	DB	228
000072 E5                  A   431    	DB	229
000073 E6                  A   432    	DB	230
000074 E7                  A   433    	DB	231
000075 E8                  A   434    	DB	232
000076 E9                  A   435    	DB	233
000077 EA                  A   436    	DB	234
000078 EB                  A   437    	DB	235
000079 EC                  A   438    	DB	236
00007A ED                  A   439    	DB	237
00007B EE                  A   440    	DB	238
00007C EF                  A   441    	DB	239
00007D F0                  A   442    	DB	240
00007E F1                  A   443    	DB	241
00007F F2                  A   444    	DB	242
000080 F3                  A   445    	DB	243
000081 F4                  A   446    	DB	244
000082 F5                  A   447    	DB	245
000083 F6                  A   448    	DB	246
000084 F7                  A   449    	DB	247
000085 F8                  A   450    	DB	248
000086 F9                  A   451    	DB	249
000087 FA                  A   452    	DB	250
000088 FB                  A   453    	DB	251
000089 FC                  A   454    	DB	252
00008A FD                  A   455    	DB	253
00008B FE                  A   456    	DB	254
00008C FF                  A   457    	DB	255
                           A   458    .DEFINE "ExCvt"
                           A   459    .ALIAS "_ExCvt"
                           A   460    .CLASS 84
                           A   461    .VALUE _ExCvt
                           A   462    .DIM 128
                           A   463    .TYPE 108
                           A   464    .ENDEF
                           A   465    ;    1	/*-------------------------------------
                           A   466    ;    2	/  FatFs - Generic FAT Filesystem Modul
                           A   467    ;    3	/--------------------------------------
                           A   468    ;    4	/
                           A   469    ;    5	/ Copyright (C) 2021, ChaN, all right r
                           A   470    ;    6	/
                           A   471    ;    7	/ FatFs module is an open source softwa
                           A   472    ;    8	/ source and binary forms, with or with
                           A   473    ;    9	/ that the following condition is met:
                           A   474    ;   10	/
                           A   475    ;   11	/ 1. Redistributions of source code mus
                           A   476    ;   12	/    this condition and the following d
                           A   477    ;   13	/
                           A   478    ;   14	/ This software is provided by the copy
                           A   479    ;   15	/ and any warranties related to this so
                           A   480    ;   16	/ The copyright owner or contributors b
                           A   481    ;   17	/ by use of this software.
                           A   482    ;   18	/
                           A   483    ;   19	/--------------------------------------
                           A   484    ;   20	
                           A   485    ;   21	#include <string.h>
                           A   486    ;   22	
                           A   487    ;   23	#include "ff.h"			/* Declarations
                           A   488    ;   24	#include "diskio.h"		/* Declarations
                           A   489    ;   25	
                           A   490    ;   26	
                           A   491    ;   27	/*-------------------------------------
                           A   492    ;   28	
                           A   493    ;   29	   Module Private Definitions
                           A   494    ;   30	
                           A   495    ;   31	---------------------------------------
                           A   496    ;   32	
                           A   497    ;   33	#if FF_DEFINED != 86631	/* Revision ID 
                           A   498    ;   34	#error Wrong include file (ff.h).
                           A   499    ;   35	#endif
                           A   500    ;   36	
                           A   501    ;   37	
                           A   502    ;   38	/* Limits and boundaries */
                           A   503    ;   39	#define MAX_DIR		0x200000		/* 
                           A   504    ;   40	#define MAX_DIR_EX	0x10000000		/* 
                           A   505    ;   41	#define MAX_FAT12	0xFF5			/* 
                           A   506    ;   42	#define MAX_FAT16	0xFFF5			/* 
                           A   507    ;   43	#define MAX_FAT32	0x0FFFFFF5		/* 
                           A   508    ;   44	#define MAX_EXFAT	0x7FFFFFFD		/* 
                           A   509    ;   45	
                           A   510    ;   46	
                           A   511    ;   47	/* Character code support macros */
                           A   512    ;   48	#define IsUpper(c)		((c) >= 'A' && 
                           A   513    ;   49	#define IsLower(c)		((c) >= 'a' && 
                           A   514    ;   50	#define IsDigit(c)		((c) >= '0' && 
                           A   515    ;   51	#define IsSeparator(c)	((c) == '/' || 
                           A   516    ;   52	#define IsTerminator(c)	((UINT)(c) < (F
                           A   517    ;   53	#define IsSurrogate(c)	((c) >= 0xD800 
                           A   518    ;   54	#define IsSurrogateH(c)	((c) >= 0xD800 
                           A   519    ;   55	#define IsSurrogateL(c)	((c) >= 0xDC00 
                           A   520    ;   56	
                           A   521    ;   57	
                           A   522    ;   58	/* Additional file access control and f
                           A   523    ;   59	#define FA_SEEKEND	0x20	/* Seek to 
                           A   524    ;   60	#define FA_MODIFIED	0x40	/* File has
                           A   525    ;   61	#define FA_DIRTY	0x80	/* FIL.buf[
                           A   526    ;   62	
                           A   527    ;   63	
                           A   528    ;   64	/* Additional file attribute bits for i
                           A   529    ;   65	#define AM_VOL		0x08	/* Volume l
                           A   530    ;   66	#define AM_LFN		0x0F	/* LFN entr
                           A   531    ;   67	#define AM_MASK		0x3F	/* Mask of 
                           A   532    ;   68	#define AM_MASKX	0x37	/* Mask of 
                           A   533    ;   69	
                           A   534    ;   70	
                           A   535    ;   71	/* Name status flags in fn[11] */
                           A   536    ;   72	#define NSFLAG		11		/* Index of
                           A   537    ;   73	#define NS_LOSS		0x01	/* Out of 8
                           A   538    ;   74	#define NS_LFN		0x02	/* Force to
                           A   539    ;   75	#define NS_LAST		0x04	/* Last seg
                           A   540    ;   76	#define NS_BODY		0x08	/* Lower ca
                           A   541    ;   77	#define NS_EXT		0x10	/* Lower ca
                           A   542    ;   78	#define NS_DOT		0x20	/* Dot entr
                           A   543    ;   79	#define NS_NOLFN	0x40	/* Do not f
                           A   544    ;   80	#define NS_NONAME	0x80	/* Not foll
                           A   545    ;   81	
                           A   546    ;   82	
                           A   547    ;   83	/* exFAT directory entry types */
                           A   548    ;   84	#define	ET_BITMAP	0x81	/* Allocati
                           A   549    ;   85	#define	ET_UPCASE	0x82	/* Up-case 
                           A   550    ;   86	#define	ET_VLABEL	0x83	/* Volume l
                           A   551    ;   87	#define	ET_FILEDIR	0x85	/* File and
                           A   552    ;   88	#define	ET_STREAM	0xC0	/* Stream e
                           A   553    ;   89	#define	ET_FILENAME	0xC1	/* Name ext
                           A   554    ;   90	
                           A   555    ;   91	
                           A   556    ;   92	/* FatFs refers the FAT structure as si
                           A   557    ;   93	/ because the C structure is not binary
                           A   558    ;   94	
                           A   559    ;   95	#define BS_JmpBoot			0		/* 
                           A   560    ;   96	#define BS_OEMName			3		/* 
                           A   561    ;   97	#define BPB_BytsPerSec		11		/* 
                           A   562    ;   98	#define BPB_SecPerClus		13		/* 
                           A   563    ;   99	#define BPB_RsvdSecCnt		14		/* 
                           A   564    ;  100	#define BPB_NumFATs			16		/* 
                           A   565    ;  101	#define BPB_RootEntCnt		17		/* 
                           A   566    ;  102	#define BPB_TotSec16		19		/* 
                           A   567    ;  103	#define BPB_Media			21		/* 
                           A   568    ;  104	#define BPB_FATSz16			22		/* 
                           A   569    ;  105	#define BPB_SecPerTrk		24		/* 
                           A   570    ;  106	#define BPB_NumHeads		26		/* 
                           A   571    ;  107	#define BPB_HiddSec			28		/* 
                           A   572    ;  108	#define BPB_TotSec32		32		/* 
                           A   573    ;  109	#define BS_DrvNum			36		/* 
                           A   574    ;  110	#define BS_NTres			37		/* 
                           A   575    ;  111	#define BS_BootSig			38		/* 
                           A   576    ;  112	#define BS_VolID			39		/* 
                           A   577    ;  113	#define BS_VolLab			43		/* 
                           A   578    ;  114	#define BS_FilSysType		54		/* 
                           A   579    ;  115	#define BS_BootCode			62		/* 
                           A   580    ;  116	#define BS_55AA				510		/* 
                           A   581    ;  117	
                           A   582    ;  118	#define BPB_FATSz32			36		/* 
                           A   583    ;  119	#define BPB_ExtFlags32		40		/* 
                           A   584    ;  120	#define BPB_FSVer32			42		/* 
                           A   585    ;  121	#define BPB_RootClus32		44		/* 
                           A   586    ;  122	#define BPB_FSInfo32		48		/* 
                           A   587    ;  123	#define BPB_BkBootSec32		50		/* 
                           A   588    ;  124	#define BS_DrvNum32			64		/* 
                           A   589    ;  125	#define BS_NTres32			65		/* 
                           A   590    ;  126	#define BS_BootSig32		66		/* 
                           A   591    ;  127	#define BS_VolID32			67		/* 
                           A   592    ;  128	#define BS_VolLab32			71		/* 
                           A   593    ;  129	#define BS_FilSysType32		82		/* 
                           A   594    ;  130	#define BS_BootCode32		90		/* 
                           A   595    ;  131	
                           A   596    ;  132	#define BPB_ZeroedEx		11		/* 
                           A   597    ;  133	#define BPB_VolOfsEx		64		/* 
                           A   598    ;  134	#define BPB_TotSecEx		72		/* 
                           A   599    ;  135	#define BPB_FatOfsEx		80		/* 
                           A   600    ;  136	#define BPB_FatSzEx			84		/* 
                           A   601    ;  137	#define BPB_DataOfsEx		88		/* 
                           A   602    ;  138	#define BPB_NumClusEx		92		/* 
                           A   603    ;  139	#define BPB_RootClusEx		96		/* 
                           A   604    ;  140	#define BPB_VolIDEx			100		/* 
                           A   605    ;  141	#define BPB_FSVerEx			104		/* 
                           A   606    ;  142	#define BPB_VolFlagEx		106		/* 
                           A   607    ;  143	#define BPB_BytsPerSecEx	108		/* 
                           A   608    ;  144	#define BPB_SecPerClusEx	109		/* 
                           A   609    ;  145	#define BPB_NumFATsEx		110		/* 
                           A   610    ;  146	#define BPB_DrvNumEx		111		/* 
                           A   611    ;  147	#define BPB_PercInUseEx		112		/* 
                           A   612    ;  148	#define BPB_RsvdEx			113		/* 
                           A   613    ;  149	#define BS_BootCodeEx		120		/* 
                           A   614    ;  150	
                           A   615    ;  151	#define DIR_Name			0		/* 
                           A   616    ;  152	#define DIR_Attr			11		/* 
                           A   617    ;  153	#define DIR_NTres			12		/* 
                           A   618    ;  154	#define DIR_CrtTime10		13		/* 
                           A   619    ;  155	#define DIR_CrtTime			14		/* 
                           A   620    ;  156	#define DIR_LstAccDate		18		/* 
                           A   621    ;  157	#define DIR_FstClusHI		20		/* 
                           A   622    ;  158	#define DIR_ModTime			22		/* 
                           A   623    ;  159	#define DIR_FstClusLO		26		/* 
                           A   624    ;  160	#define DIR_FileSize		28		/* 
                           A   625    ;  161	#define LDIR_Ord			0		/* 
                           A   626    ;  162	#define LDIR_Attr			11		/* 
                           A   627    ;  163	#define LDIR_Type			12		/* 
                           A   628    ;  164	#define LDIR_Chksum			13		/* 
                           A   629    ;  165	#define LDIR_FstClusLO		26		/* 
                           A   630    ;  166	#define XDIR_Type			0		/* 
                           A   631    ;  167	#define XDIR_NumLabel		1		/* 
                           A   632    ;  168	#define XDIR_Label			2		/* 
                           A   633    ;  169	#define XDIR_CaseSum		4		/* 
                           A   634    ;  170	#define XDIR_NumSec			1		/* 
                           A   635    ;  171	#define XDIR_SetSum			2		/* 
                           A   636    ;  172	#define XDIR_Attr			4		/* 
                           A   637    ;  173	#define XDIR_CrtTime		8		/* 
                           A   638    ;  174	#define XDIR_ModTime		12		/* 
                           A   639    ;  175	#define XDIR_AccTime		16		/* 
                           A   640    ;  176	#define XDIR_CrtTime10		20		/* 
                           A   641    ;  177	#define XDIR_ModTime10		21		/* 
                           A   642    ;  178	#define XDIR_CrtTZ			22		/* 
                           A   643    ;  179	#define XDIR_ModTZ			23		/* 
                           A   644    ;  180	#define XDIR_AccTZ			24		/* 
                           A   645    ;  181	#define XDIR_GenFlags		33		/* 
                           A   646    ;  182	#define XDIR_NumName		35		/* 
                           A   647    ;  183	#define XDIR_NameHash		36		/* 
                           A   648    ;  184	#define XDIR_ValidFileSize	40		/* 
                           A   649    ;  185	#define XDIR_FstClus		52		/* 
                           A   650    ;  186	#define XDIR_FileSize		56		/* 
                           A   651    ;  187	
                           A   652    ;  188	#define SZDIRE				32		/* 
                           A   653    ;  189	#define DDEM				0xE5	/* 
                           A   654    ;  190	#define RDDEM				0x05	/* 
                           A   655    ;  191	#define LLEF				0x40	/* 
                           A   656    ;  192	
                           A   657    ;  193	#define FSI_LeadSig			0		/* 
                           A   658    ;  194	#define FSI_StrucSig		484		/* 
                           A   659    ;  195	#define FSI_Free_Count		488		/* 
                           A   660    ;  196	#define FSI_Nxt_Free		492		/* 
                           A   661    ;  197	
                           A   662    ;  198	#define MBR_Table			446		/* 
                           A   663    ;  199	#define SZ_PTE				16		/* 
                           A   664    ;  200	#define PTE_Boot			0		/* 
                           A   665    ;  201	#define PTE_StHead			1		/* 
                           A   666    ;  202	#define PTE_StSec			2		/* 
                           A   667    ;  203	#define PTE_StCyl			3		/* 
                           A   668    ;  204	#define PTE_System			4		/* 
                           A   669    ;  205	#define PTE_EdHead			5		/* 
                           A   670    ;  206	#define PTE_EdSec			6		/* 
                           A   671    ;  207	#define PTE_EdCyl			7		/* 
                           A   672    ;  208	#define PTE_StLba			8		/* 
                           A   673    ;  209	#define PTE_SizLba			12		/* 
                           A   674    ;  210	
                           A   675    ;  211	#define GPTH_Sign			0		/* 
                           A   676    ;  212	#define GPTH_Rev			8		/* 
                           A   677    ;  213	#define GPTH_Size			12		/* 
                           A   678    ;  214	#define GPTH_Bcc			16		/* 
                           A   679    ;  215	#define GPTH_CurLba			24		/* 
                           A   680    ;  216	#define GPTH_BakLba			32		/* 
                           A   681    ;  217	#define GPTH_FstLba			40		/* 
                           A   682    ;  218	#define GPTH_LstLba			48		/* 
                           A   683    ;  219	#define GPTH_DskGuid		56		/* 
                           A   684    ;  220	#define GPTH_PtOfs			72		/* 
                           A   685    ;  221	#define GPTH_PtNum			80		/* 
                           A   686    ;  222	#define GPTH_PteSize		84		/* 
                           A   687    ;  223	#define GPTH_PtBcc			88		/* 
                           A   688    ;  224	#define SZ_GPTE				128		/* 
                           A   689    ;  225	#define GPTE_PtGuid			0		/* 
                           A   690    ;  226	#define GPTE_UpGuid			16		/* 
                           A   691    ;  227	#define GPTE_FstLba			32		/* 
                           A   692    ;  228	#define GPTE_LstLba			40		/* 
                           A   693    ;  229	#define GPTE_Flags			48		/* 
                           A   694    ;  230	#define GPTE_Name			56		/* 
                           A   695    ;  231	
                           A   696    ;  232	
                           A   697    ;  233	/* Post process on fatal error in the f
                           A   698    ;  234	#define ABORT(fs, res)		{ fp->err =
                           A   699    ;  235	
                           A   700    ;  236	
                           A   701    ;  237	/* Re-entrancy related */
                           A   702    ;  238	#if FF_FS_REENTRANT
                           A   703    ;  239	#if FF_USE_LFN == 1
                           A   704    ;  240	#error Static LFN work area cannot be u
                           A   705    ;  241	#endif
                           A   706    ;  242	#define LEAVE_FF(fs, res)	{ unlock_fs
                           A   707    ;  243	#else
                           A   708    ;  244	#define LEAVE_FF(fs, res)	return res
                           A   709    ;  245	#endif
                           A   710    ;  246	
                           A   711    ;  247	
                           A   712    ;  248	/* Definitions of logical drive - physi
                           A   713    ;  249	#if FF_MULTI_PARTITION
                           A   714    ;  250	#define LD2PD(vol) VolToPart[vol].pd	
                           A   715    ;  251	#define LD2PT(vol) VolToPart[vol].pt	
                           A   716    ;  252	#else
                           A   717    ;  253	#define LD2PD(vol) (BYTE)(vol)	/* Each
                           A   718    ;  254	#define LD2PT(vol) 0			/* Auto
                           A   719    ;  255	#endif
                           A   720    ;  256	
                           A   721    ;  257	
                           A   722    ;  258	/* Definitions of sector size */
                           A   723    ;  259	#if (FF_MAX_SS < FF_MIN_SS) || (FF_MAX_
                           A   724    ;  260	#error Wrong sector size configuration
                           A   725    ;  261	#endif
                           A   726    ;  262	#if FF_MAX_SS == FF_MIN_SS
                           A   727    ;  263	#define SS(fs)	((UINT)FF_MAX_SS)	/* 
                           A   728    ;  264	#else
                           A   729    ;  265	#define SS(fs)	((fs)->ssize)	/* Vari
                           A   730    ;  266	#endif
                           A   731    ;  267	
                           A   732    ;  268	
                           A   733    ;  269	/* Timestamp */
                           A   734    ;  270	#if FF_FS_NORTC == 1
                           A   735    ;  271	#if FF_NORTC_YEAR < 1980 || FF_NORTC_YE
                           A   736    ;  272	#error Invalid FF_FS_NORTC settings
                           A   737    ;  273	#endif
                           A   738    ;  274	#define GET_FATTIME()	((DWORD)(FF_NOR
                           A   739    ;  275	#else
                           A   740    ;  276	#define GET_FATTIME()	get_fattime()
                           A   741    ;  277	#endif
                           A   742    ;  278	
                           A   743    ;  279	
                           A   744    ;  280	/* File lock controls */
                           A   745    ;  281	#if FF_FS_LOCK != 0
                           A   746    ;  282	#if FF_FS_READONLY
                           A   747    ;  283	#error FF_FS_LOCK must be 0 at read-onl
                           A   748    ;  284	#endif
                           A   749    ;  285	typedef struct {
                           A   750    ;  286		FATFS *fs;		/* Object ID 1, vol
                           A   751    ;  287		DWORD clu;		/* Object ID 2, con
                           A   752    ;  288		DWORD ofs;		/* Object ID 3, off
                           A   753    ;  289		WORD ctr;		/* Object open coun
                           A   754    ;  290	} FILESEM;
                           A   755    ;  291	#endif
                           A   756    ;  292	
                           A   757    ;  293	
                           A   758    ;  294	/* SBCS up-case tables (\x80-\xFF) */
                           A   759    ;  295	#define TBL_CT437  {0x80,0x9A,0x45,0x41
                           A   760    ;  296						0x90,0x92,0x92,0x4F
                           A   761    ;  297						0x41,0x49,0x4F,0x55
                           A   762    ;  298						0xB0,0xB1,0xB2,0xB3
                           A   763    ;  299						0xC0,0xC1,0xC2,0xC3
                           A   764    ;  300						0xD0,0xD1,0xD2,0xD3
                           A   765    ;  301						0xE0,0xE1,0xE2,0xE3
                           A   766    ;  302						0xF0,0xF1,0xF2,0xF3
                           A   767    ;  303	#define TBL_CT720  {0x80,0x81,0x82,0x83
                           A   768    ;  304						0x90,0x91,0x92,0x93
                           A   769    ;  305						0xA0,0xA1,0xA2,0xA3
                           A   770    ;  306						0xB0,0xB1,0xB2,0xB3
                           A   771    ;  307						0xC0,0xC1,0xC2,0xC3
                           A   772    ;  308						0xD0,0xD1,0xD2,0xD3
                           A   773    ;  309						0xE0,0xE1,0xE2,0xE3
                           A   774    ;  310						0xF0,0xF1,0xF2,0xF3
                           A   775    ;  311	#define TBL_CT737  {0x80,0x81,0x82,0x83
                           A   776    ;  312						0x90,0x92,0x92,0x93
                           A   777    ;  313						0x88,0x89,0x8A,0x8B
                           A   778    ;  314						0xB0,0xB1,0xB2,0xB3
                           A   779    ;  315						0xC0,0xC1,0xC2,0xC3
                           A   780    ;  316						0xD0,0xD1,0xD2,0xD3
                           A   781    ;  317						0x97,0xEA,0xEB,0xEC
                           A   782    ;  318						0xF0,0xF1,0xF2,0xF3
                           A   783    ;  319	#define TBL_CT771  {0x80,0x81,0x82,0x83
                           A   784    ;  320						0x90,0x91,0x92,0x93
                           A   785    ;  321						0x80,0x81,0x82,0x83
                           A   786    ;  322						0xB0,0xB1,0xB2,0xB3
                           A   787    ;  323						0xC0,0xC1,0xC2,0xC3
                           A   788    ;  324						0xD0,0xD1,0xD2,0xD3
                           A   789    ;  325						0x90,0x91,0x92,0x93
                           A   790    ;  326						0xF0,0xF0,0xF2,0xF2
                           A   791    ;  327	#define TBL_CT775  {0x80,0x9A,0x91,0xA0
                           A   792    ;  328						0x90,0x92,0x92,0xE2
                           A   793    ;  329						0xA0,0xA1,0xE0,0xA3
                           A   794    ;  330						0xB0,0xB1,0xB2,0xB3
                           A   795    ;  331						0xC0,0xC1,0xC2,0xC3
                           A   796    ;  332						0xB5,0xB6,0xB7,0xB8
                           A   797    ;  333						0xE0,0xE1,0xE2,0xE3
                           A   798    ;  334						0xF0,0xF1,0xF2,0xF3
                           A   799    ;  335	#define TBL_CT850  {0x43,0x55,0x45,0x41
                           A   800    ;  336						0x45,0x92,0x92,0x4F
                           A   801    ;  337						0x41,0x49,0x4F,0x55
                           A   802    ;  338						0xB0,0xB1,0xB2,0xB3
                           A   803    ;  339						0xC0,0xC1,0xC2,0xC3
                           A   804    ;  340						0xD1,0xD1,0x45,0x45
                           A   805    ;  341						0x4F,0xE1,0x4F,0x4F
                           A   806    ;  342						0xF0,0xF1,0xF2,0xF3
                           A   807    ;  343	#define TBL_CT852  {0x80,0x9A,0x90,0xB6
                           A   808    ;  344						0x90,0x91,0x91,0xE2
                           A   809    ;  345						0xB5,0xD6,0xE0,0xE9
                           A   810    ;  346						0xB0,0xB1,0xB2,0xB3
                           A   811    ;  347						0xC0,0xC1,0xC2,0xC3
                           A   812    ;  348						0xD1,0xD1,0xD2,0xD3
                           A   813    ;  349						0xE0,0xE1,0xE2,0xE3
                           A   814    ;  350						0xF0,0xF1,0xF2,0xF3
                           A   815    ;  351	#define TBL_CT855  {0x81,0x81,0x83,0x83
                           A   816    ;  352						0x91,0x91,0x93,0x93
                           A   817    ;  353						0xA1,0xA1,0xA3,0xA3
                           A   818    ;  354						0xB0,0xB1,0xB2,0xB3
                           A   819    ;  355						0xC0,0xC1,0xC2,0xC3
                           A   820    ;  356						0xD1,0xD1,0xD3,0xD3
                           A   821    ;  357						0xE0,0xE2,0xE2,0xE4
                           A   822    ;  358						0xF0,0xF2,0xF2,0xF4
                           A   823    ;  359	#define TBL_CT857  {0x80,0x9A,0x90,0xB6
                           A   824    ;  360						0x90,0x92,0x92,0xE2
                           A   825    ;  361						0xB5,0xD6,0xE0,0xE9
                           A   826    ;  362						0xB0,0xB1,0xB2,0xB3
                           A   827    ;  363						0xC0,0xC1,0xC2,0xC3
                           A   828    ;  364						0xD0,0xD1,0xD2,0xD3
                           A   829    ;  365						0xE0,0xE1,0xE2,0xE3
                           A   830    ;  366						0xF0,0xF1,0xF2,0xF3
                           A   831    ;  367	#define TBL_CT860  {0x80,0x9A,0x90,0x8F
                           A   832    ;  368						0x90,0x91,0x92,0x8C
                           A   833    ;  369						0x86,0x8B,0x9F,0x96
                           A   834    ;  370						0xB0,0xB1,0xB2,0xB3
                           A   835    ;  371						0xC0,0xC1,0xC2,0xC3
                           A   836    ;  372						0xD0,0xD1,0xD2,0xD3
                           A   837    ;  373						0xE0,0xE1,0xE2,0xE3
                           A   838    ;  374						0xF0,0xF1,0xF2,0xF3
                           A   839    ;  375	#define TBL_CT861  {0x80,0x9A,0x90,0x41
                           A   840    ;  376						0x90,0x92,0x92,0x4F
                           A   841    ;  377						0xA4,0xA5,0xA6,0xA7
                           A   842    ;  378						0xB0,0xB1,0xB2,0xB3
                           A   843    ;  379						0xC0,0xC1,0xC2,0xC3
                           A   844    ;  380						0xD0,0xD1,0xD2,0xD3
                           A   845    ;  381						0xE0,0xE1,0xE2,0xE3
                           A   846    ;  382						0xF0,0xF1,0xF2,0xF3
                           A   847    ;  383	#define TBL_CT862  {0x80,0x81,0x82,0x83
                           A   848    ;  384						0x90,0x91,0x92,0x93
                           A   849    ;  385						0x41,0x49,0x4F,0x55
                           A   850    ;  386						0xB0,0xB1,0xB2,0xB3
                           A   851    ;  387						0xC0,0xC1,0xC2,0xC3
                           A   852    ;  388						0xD0,0xD1,0xD2,0xD3
                           A   853    ;  389						0xE0,0xE1,0xE2,0xE3
                           A   854    ;  390						0xF0,0xF1,0xF2,0xF3
                           A   855    ;  391	#define TBL_CT863  {0x43,0x55,0x45,0x41
                           A   856    ;  392						0x45,0x45,0x45,0x4F
                           A   857    ;  393						0xA0,0xA1,0x4F,0x55
                           A   858    ;  394						0xB0,0xB1,0xB2,0xB3
                           A   859    ;  395						0xC0,0xC1,0xC2,0xC3
                           A   860    ;  396						0xD0,0xD1,0xD2,0xD3
                           A   861    ;  397						0xE0,0xE1,0xE2,0xE3
                           A   862    ;  398						0xF0,0xF1,0xF2,0xF3
                           A   863    ;  399	#define TBL_CT864  {0x80,0x9A,0x45,0x41
                           A   864    ;  400						0x90,0x92,0x92,0x4F
                           A   865    ;  401						0x41,0x49,0x4F,0x55
                           A   866    ;  402						0xB0,0xB1,0xB2,0xB3
                           A   867    ;  403						0xC0,0xC1,0xC2,0xC3
                           A   868    ;  404						0xD0,0xD1,0xD2,0xD3
                           A   869    ;  405						0xE0,0xE1,0xE2,0xE3
                           A   870    ;  406						0xF0,0xF1,0xF2,0xF3
                           A   871    ;  407	#define TBL_CT865  {0x80,0x9A,0x90,0x41
                           A   872    ;  408						0x90,0x92,0x92,0x4F
                           A   873    ;  409						0x41,0x49,0x4F,0x55
                           A   874    ;  410						0xB0,0xB1,0xB2,0xB3
                           A   875    ;  411						0xC0,0xC1,0xC2,0xC3
                           A   876    ;  412						0xD0,0xD1,0xD2,0xD3
                           A   877    ;  413						0xE0,0xE1,0xE2,0xE3
                           A   878    ;  414						0xF0,0xF1,0xF2,0xF3
                           A   879    ;  415	#define TBL_CT866  {0x80,0x81,0x82,0x83
                           A   880    ;  416						0x90,0x91,0x92,0x93
                           A   881    ;  417						0x80,0x81,0x82,0x83
                           A   882    ;  418						0xB0,0xB1,0xB2,0xB3
                           A   883    ;  419						0xC0,0xC1,0xC2,0xC3
                           A   884    ;  420						0xD0,0xD1,0xD2,0xD3
                           A   885    ;  421						0x90,0x91,0x92,0x93
                           A   886    ;  422						0xF0,0xF0,0xF2,0xF2
                           A   887    ;  423	#define TBL_CT869  {0x80,0x81,0x82,0x83
                           A   888    ;  424						0x90,0x91,0x92,0x93
                           A   889    ;  425						0x91,0x90,0x92,0x95
                           A   890    ;  426						0xB0,0xB1,0xB2,0xB3
                           A   891    ;  427						0xC0,0xC1,0xC2,0xC3
                           A   892    ;  428						0xD0,0xD1,0xD2,0xD3
                           A   893    ;  429						0xA9,0xAA,0xAC,0xAD
                           A   894    ;  430						0xF0,0xF1,0xD1,0xD2
                           A   895    ;  431	
                           A   896    ;  432	
                           A   897    ;  433	/* DBCS code range |----- 1st byte ----
                           A   898    ;  434	/*                  <------>    <------
                           A   899    ;  435	#define TBL_DC932 {0x81, 0x9F, 0xE0, 0x
                           A   900    ;  436	#define TBL_DC936 {0x81, 0xFE, 0x00, 0x
                           A   901    ;  437	#define TBL_DC949 {0x81, 0xFE, 0x00, 0x
                           A   902    ;  438	#define TBL_DC950 {0x81, 0xFE, 0x00, 0x
                           A   903    ;  439	
                           A   904    ;  440	
                           A   905    ;  441	/* Macros for table definitions */
                           A   906    ;  442	#define MERGE_2STR(a, b) a ## b
                           A   907    ;  443	#define MKCVTBL(hd, cp) MERGE_2STR(hd, 
                           A   908    ;  444	
                           A   909    ;  445	
                           A   910    ;  446	
                           A   911    ;  447	
                           A   912    ;  448	/*-------------------------------------
                           A   913    ;  449	
                           A   914    ;  450	   Module Private Work Area
                           A   915    ;  451	
                           A   916    ;  452	---------------------------------------
                           A   917    ;  453	/* Remark: Variables defined here witho
                           A   918    ;  454	/  zero/null at start-up. If not, the l
                           A   919    ;  455	/  not compliance with C standard. */
                           A   920    ;  456	
                           A   921    ;  457	/*--------------------------------*/
                           A   922    ;  458	/* File/Volume controls           */
                           A   923    ;  459	/*--------------------------------*/
                           A   924    ;  460	
                           A   925    ;  461	#if FF_VOLUMES < 1 || FF_VOLUMES > 10
                           A   926    ;  462	#error Wrong FF_VOLUMES setting
                           A   927    ;  463	#endif
                           A   928    ;  464	static FATFS* FatFs[FF_VOLUMES];	/* 
                           A   929    ;  465	static WORD Fsid;					/* 
                           A   930    ;  466	
                           A   931    ;  467	#if FF_FS_RPATH != 0
                           A   932    ;  468	static BYTE CurrVol;				/* 
                           A   933    ;  469	#endif
                           A   934    ;  470	
                           A   935    ;  471	#if FF_FS_LOCK != 0
                           A   936    ;  472	static FILESEM Files[FF_FS_LOCK];	/* 
                           A   937    ;  473	#endif
                           A   938    ;  474	
                           A   939    ;  475	#if FF_STR_VOLUME_ID
                           A   940    ;  476	#ifdef FF_VOLUME_STRS
                           A   941    ;  477	static const char* const VolumeStr[FF_V
                           A   942    ;  478	#endif
                           A   943    ;  479	#endif
                           A   944    ;  480	
                           A   945    ;  481	#if FF_LBA64
                           A   946    ;  482	#if FF_MIN_GPT > 0x100000000
                           A   947    ;  483	#error Wrong FF_MIN_GPT setting
                           A   948    ;  484	#endif
                           A   949    ;  485	static const BYTE GUID_MS_Basic[16] = {
                           A   950    ;  486	#endif
                           A   951    ;  487	
                           A   952    ;  488	
                           A   953    ;  489	
                           A   954    ;  490	/*--------------------------------*/
                           A   955    ;  491	/* LFN/Directory working buffer   */
                           A   956    ;  492	/*--------------------------------*/
                           A   957    ;  493	
                           A   958    ;  494	#if FF_USE_LFN == 0		/* Non-LFN conf
                           A   959    ;  495	#if FF_FS_EXFAT
                           A   960    ;  496	#error LFN must be enabled when enable 
                           A   961    ;  497	#endif
                           A   962    ;  498	#define DEF_NAMBUF
                           A   963    ;  499	#define INIT_NAMBUF(fs)
                           A   964    ;  500	#define FREE_NAMBUF()
                           A   965    ;  501	#define LEAVE_MKFS(res)	return res
                           A   966    ;  502	
                           A   967    ;  503	#else					/* LFN configur
                           A   968    ;  504	#if FF_MAX_LFN < 12 || FF_MAX_LFN > 255
                           A   969    ;  505	#error Wrong setting of FF_MAX_LFN
                           A   970    ;  506	#endif
                           A   971    ;  507	#if FF_LFN_BUF < FF_SFN_BUF || FF_SFN_B
                           A   972    ;  508	#error Wrong setting of FF_LFN_BUF or F
                           A   973    ;  509	#endif
                           A   974    ;  510	#if FF_LFN_UNICODE < 0 || FF_LFN_UNICOD
                           A   975    ;  511	#error Wrong setting of FF_LFN_UNICODE
                           A   976    ;  512	#endif
                           A   977    ;  513	static const BYTE LfnOfs[] = {1,3,5,7,9
                           A   978    ;  514	#define MAXDIRB(nc)	((nc + 44U) / 15 * 
                           A   979    ;  515	
                           A   980    ;  516	#if FF_USE_LFN == 1		/* LFN enabled 
                           A   981    ;  517	#if FF_FS_EXFAT
                           A   982    ;  518	static BYTE	DirBuf[MAXDIRB(FF_MAX_LFN)]
                           A   983    ;  519	#endif
                           A   984    ;  520	static WCHAR LfnBuf[FF_MAX_LFN + 1];	
                           A   985    ;  521	#define DEF_NAMBUF
                           A   986    ;  522	#define INIT_NAMBUF(fs)
                           A   987    ;  523	#define FREE_NAMBUF()
                           A   988    ;  524	#define LEAVE_MKFS(res)	return res
                           A   989    ;  525	
                           A   990    ;  526	#elif FF_USE_LFN == 2 	/* LFN enabled 
                           A   991    ;  527	#if FF_FS_EXFAT
                           A   992    ;  528	#define DEF_NAMBUF		WCHAR lbuf[FF_M
                           A   993    ;  529	#define INIT_NAMBUF(fs)	{ (fs)->lfnbuf 
                           A   994    ;  530	#define FREE_NAMBUF()
                           A   995    ;  531	#else
                           A   996    ;  532	#define DEF_NAMBUF		WCHAR lbuf[FF_M
                           A   997    ;  533	#define INIT_NAMBUF(fs)	{ (fs)->lfnbuf 
                           A   998    ;  534	#define FREE_NAMBUF()
                           A   999    ;  535	#endif
                           A  1000    ;  536	#define LEAVE_MKFS(res)	return res
                           A  1001    ;  537	
                           A  1002    ;  538	#elif FF_USE_LFN == 3 	/* LFN enabled 
                           A  1003    ;  539	#if FF_FS_EXFAT
                           A  1004    ;  540	#define DEF_NAMBUF		WCHAR *lfn;	/* 
                           A  1005    ;  541	#define INIT_NAMBUF(fs)	{ lfn = ff_mema
                           A  1006    ;  542	#define FREE_NAMBUF()	ff_memfree(lfn)
                           A  1007    ;  543	#else
                           A  1008    ;  544	#define DEF_NAMBUF		WCHAR *lfn;	/* 
                           A  1009    ;  545	#define INIT_NAMBUF(fs)	{ lfn = ff_mema
                           A  1010    ;  546	#define FREE_NAMBUF()	ff_memfree(lfn)
                           A  1011    ;  547	#endif
                           A  1012    ;  548	#define LEAVE_MKFS(res)	{ if (!work) ff
                           A  1013    ;  549	#define MAX_MALLOC	0x8000	/* Must be 
                           A  1014    ;  550	
                           A  1015    ;  551	#else
                           A  1016    ;  552	#error Wrong setting of FF_USE_LFN
                           A  1017    ;  553	
                           A  1018    ;  554	#endif	/* FF_USE_LFN == 1 */
                           A  1019    ;  555	#endif	/* FF_USE_LFN == 0 */
                           A  1020    ;  556	
                           A  1021    ;  557	
                           A  1022    ;  558	
                           A  1023    ;  559	/*--------------------------------*/
                           A  1024    ;  560	/* Code conversion tables         */
                           A  1025    ;  561	/*--------------------------------*/
                           A  1026    ;  562	
                           A  1027    ;  563	#if FF_CODE_PAGE == 0	/* Run-time cod
                           A  1028    ;  564	#define CODEPAGE CodePage
                           A  1029    ;  565	static WORD CodePage;	/* Current code
                           A  1030    ;  566	static const BYTE *ExCvt, *DbcTbl;	/* 
                           A  1031    ;  567	
                           A  1032    ;  568	static const BYTE Ct437[] = TBL_CT437;
                           A  1033    ;  569	static const BYTE Ct720[] = TBL_CT720;
                           A  1034    ;  570	static const BYTE Ct737[] = TBL_CT737;
                           A  1035    ;  571	static const BYTE Ct771[] = TBL_CT771;
                           A  1036    ;  572	static const BYTE Ct775[] = TBL_CT775;
                           A  1037    ;  573	static const BYTE Ct850[] = TBL_CT850;
                           A  1038    ;  574	static const BYTE Ct852[] = TBL_CT852;
                           A  1039    ;  575	static const BYTE Ct855[] = TBL_CT855;
                           A  1040    ;  576	static const BYTE Ct857[] = TBL_CT857;
                           A  1041    ;  577	static const BYTE Ct860[] = TBL_CT860;
                           A  1042    ;  578	static const BYTE Ct861[] = TBL_CT861;
                           A  1043    ;  579	static const BYTE Ct862[] = TBL_CT862;
                           A  1044    ;  580	static const BYTE Ct863[] = TBL_CT863;
                           A  1045    ;  581	static const BYTE Ct864[] = TBL_CT864;
                           A  1046    ;  582	static const BYTE Ct865[] = TBL_CT865;
                           A  1047    ;  583	static const BYTE Ct866[] = TBL_CT866;
                           A  1048    ;  584	static const BYTE Ct869[] = TBL_CT869;
                           A  1049    ;  585	static const BYTE Dc932[] = TBL_DC932;
                           A  1050    ;  586	static const BYTE Dc936[] = TBL_DC936;
                           A  1051    ;  587	static const BYTE Dc949[] = TBL_DC949;
                           A  1052    ;  588	static const BYTE Dc950[] = TBL_DC950;
                           A  1053    ;  589	
                           A  1054    ;  590	#elif FF_CODE_PAGE < 900	/* Static c
                           A  1055    ;  591	#define CODEPAGE FF_CODE_PAGE
                           A  1056    ;  592	static const BYTE ExCvt[] = MKCVTBL(TBL
                           A  1057    	SEGMENT CODE
                           A  1058    ;  593	
                           A  1059    ;  594	#else					/* Static code 
                           A  1060    ;  595	#define CODEPAGE FF_CODE_PAGE
                           A  1061    ;  596	static const BYTE DbcTbl[] = MKCVTBL(TB
                           A  1062    ;  597	
                           A  1063    ;  598	#endif
                           A  1064    ;  599	
                           A  1065    ;  600	
                           A  1066    ;  601	
                           A  1067    ;  602	
                           A  1068    ;  603	/*-------------------------------------
                           A  1069    ;  604	
                           A  1070    ;  605	   Module Private Functions
                           A  1071    ;  606	
                           A  1072    ;  607	---------------------------------------
                           A  1073    ;  608	
                           A  1074    ;  609	
                           A  1075    ;  610	/*-------------------------------------
                           A  1076    ;  611	/* Load/Store multi-byte word in the FA
                           A  1077    ;  612	/*-------------------------------------
                           A  1078    ;  613	
                           A  1079    ;  614	static WORD ld_word (const BYTE* ptr)	
                           A  1080    ;  615	{
000000                     A  1081    _ld_word:
                           A  1082    .DEFINE "_ld_word"
                           A  1083    
                           A  1084    .VALUE _ld_word
                           A  1085    
                           A  1086    .CLASS 3
                           A  1087    
                           A  1088    .TYPE 77
                           A  1089    
                           A  1090    .ENDEF
                           A  1091    
                           A  1092    .BEGFUNC "ld_word",615,"_ld_word"
                           A  1093    
                           A  1094    .LINE 615
                           A  1095    
                           A  1096    .DEFINE "ptr"
                           A  1097    
                           A  1098    .CLASS 65
                           A  1099    
                           A  1100    .VALUE 6
                           A  1101    
                           A  1102    .TYPE 204
                           A  1103    
                           A  1104    .ENDEF
                           A  1105    
                           A  1106    .DEFINE "rv"
                           A  1107    
                           A  1108    .CLASS 65
                           A  1109    
                           A  1110    .VALUE -2
                           A  1111    
                           A  1112    .TYPE 13
                           A  1113    
                           A  1114    .ENDEF
                           A  1115    
000000 DDE5                A  1116    	PUSH	IX
000002 DD210000 00         A  1117    	LD	IX,0
000007 DD39                A  1118    	ADD	IX,SP
000009 3B                  A  1119    	DEC	SP
00000A 3B                  A  1120    	DEC	SP
                           A  1121    ;  616		WORD rv;
                           A  1122    ;  617	
                           A  1123    ;  618		rv = ptr[1];
                           A  1124    .LINE 618
                           A  1125    
00000B DD2706              A  1126    	LD	HL,(IX+%6)
00000E 23                  A  1127    	INC	HL
00000F 4E                  A  1128    	LD	C,(HL)
000010 0600                A  1129    	LD	B,%0
000012 C5E1                A  1130    	LD	HL,BC
000014 DD75FE              A  1131    	LD	(IX+%FFFFFFFE),L
000017 DD74FF              A  1132    	LD	(IX+%FFFFFFFF),H
                           A  1133    ;  619		rv = rv << 8 | ptr[0];
                           A  1134    .LINE 619
                           A  1135    
00001A DD2706              A  1136    	LD	HL,(IX+%6)
00001D 4E                  A  1137    	LD	C,(HL)
00001E C5D1                A  1138    	LD	DE,BC
000020 DD27FE              A  1139    	LD	HL,(IX+%FFFFFFFE)
000023 65                  A  1140    	LD	H,L
000024 2E00                A  1141    	LD	L,%0
000026 E5C1                A  1142    	LD	BC,HL
000028 D5E1                A  1143    	LD	HL,DE
00002A CD 00 00 00         A  1144    	CALL	__sor
00002E DD75FE              A  1145    	LD	(IX+%FFFFFFFE),L
000031 DD74FF              A  1146    	LD	(IX+%FFFFFFFF),H
                           A  1147    ;  620		return rv;
                           A  1148    .LINE 620
                           A  1149    
000034 DD27FE              A  1150    	LD	HL,(IX+%FFFFFFFE)
                           A  1151    ;  621	}
                           A  1152    .LINE 621
                           A  1153    
000037 DDF9                A  1154    	LD	SP,IX
000039 DDE1                A  1155    	POP	IX
00003B C9                  A  1156    	RET	
                           A  1157    
                           A  1158    
                           A  1159    ;**************************** _ld_word ********
                           A  1160    ;Name                         Addr/Register   S
                           A  1161    ;rv                                    IX-2    
                           A  1162    ;ptr                                   IX+6    
                           A  1163    
                           A  1164    
                           A  1165    ; Stack Frame Size: 11 (bytes)
                           A  1166    ;       Spill Code: 0 (instruction)
                           A  1167    
                           A  1168    
                           A  1169    .ENDFUNC "ld_word",621,"_ld_word"
                           A  1170    ;  622	
                           A  1171    ;  623	static DWORD ld_dword (const BYTE* ptr)
                           A  1172    ;  624	{
00003C                     A  1173    _ld_dword:
                           A  1174    .DEFINE "_ld_dword"
                           A  1175    
                           A  1176    .VALUE _ld_dword
                           A  1177    
                           A  1178    .CLASS 3
                           A  1179    
                           A  1180    .TYPE 79
                           A  1181    
                           A  1182    .ENDEF
                           A  1183    
                           A  1184    .BEGFUNC "ld_dword",624,"_ld_dword"
                           A  1185    
                           A  1186    .LINE 624
                           A  1187    
                           A  1188    .DEFINE "ptr"
                           A  1189    
                           A  1190    .CLASS 65
                           A  1191    
                           A  1192    .VALUE 6
                           A  1193    
                           A  1194    .TYPE 204
                           A  1195    
                           A  1196    .ENDEF
                           A  1197    
                           A  1198    .DEFINE "rv"
                           A  1199    
                           A  1200    .CLASS 65
                           A  1201    
                           A  1202    .VALUE -4
                           A  1203    
                           A  1204    .TYPE 15
                           A  1205    
                           A  1206    .ENDEF
                           A  1207    
00003C DDE5                A  1208    	PUSH	IX
00003E DD210000 00         A  1209    	LD	IX,0
000043 DD39                A  1210    	ADD	IX,SP
000045 ED22EB              A  1211    	LEA	HL,IX+%FFFFFFEB
000048 F9                  A  1212    	LD	SP,HL
                           A  1213    ;  625		DWORD rv;
                           A  1214    ;  626	
                           A  1215    ;  627		rv = ptr[3];
                           A  1216    .LINE 627
                           A  1217    
000049 DD3106              A  1218    	LD	IY,(IX+%6)
00004C B7ED62              A  1219    	UEXT	HL
00004F FD6E03              A  1220    	LD	L,(IY+%3)
000052 DD2FFC              A  1221    	LD	(IX+%FFFFFFFC),HL
000055 DD74FF              A  1222    	LD	(IX+%FFFFFFFF),H
                           A  1223    ;  628		rv = rv << 8 | ptr[2];
                           A  1224    .LINE 628
                           A  1225    
000058 B7ED62              A  1226    	UEXT	HL
00005B FD6E02              A  1227    	LD	L,(IY+%2)
00005E DD2FF9              A  1228    	LD	(IX+%FFFFFFF9),HL
000061 5C                  A  1229    	LD	E,H
000062 DD07FC              A  1230    	LD	BC,(IX+%FFFFFFFC)
000065 C5                  A  1231    	PUSH	BC
000066 C5                  A  1232    	PUSH	BC
000067 B7ED62              A  1233    	UEXT	HL
00006A E5                  A  1234    	PUSH	HL
00006B 33                  A  1235    	INC	SP
00006C 33                  A  1236    	INC	SP
00006D C1                  A  1237    	POP	BC
00006E DD73F8              A  1238    	LD	(IX+%FFFFFFF8),E	; spill
000071 D1                  A  1239    	POP	DE
000072 DD73F7              A  1240    	LD	(IX+%FFFFFFF7),E	; spill
000075 DD5EF8              A  1241    	LD	E,(IX+%FFFFFFF8)	; unspill
000078 33                  A  1242    	INC	SP
000079 DD27F9              A  1243    	LD	HL,(IX+%FFFFFFF9)
00007C DD73F8              A  1244    	LD	(IX+%FFFFFFF8),E	; spill
00007F DD5EF7              A  1245    	LD	E,(IX+%FFFFFFF7)	; unspill
000082 7B                  A  1246    	LD	A,E
000083 DD5EF8              A  1247    	LD	E,(IX+%FFFFFFF8)	; unspill
000086 CD 00 00 00         A  1248    	CALL	__lor
00008A DD2FFC              A  1249    	LD	(IX+%FFFFFFFC),HL
00008D DD73FF              A  1250    	LD	(IX+%FFFFFFFF),E
                           A  1251    ;  629		rv = rv << 8 | ptr[1];
                           A  1252    .LINE 629
                           A  1253    
000090 B7ED62              A  1254    	UEXT	HL
000093 FD6E01              A  1255    	LD	L,(IY+%1)
000096 DD2FF4              A  1256    	LD	(IX+%FFFFFFF4),HL
000099 5C                  A  1257    	LD	E,H
00009A DD07FC              A  1258    	LD	BC,(IX+%FFFFFFFC)
00009D C5                  A  1259    	PUSH	BC
00009E C5                  A  1260    	PUSH	BC
00009F B7ED62              A  1261    	UEXT	HL
0000A2 E5                  A  1262    	PUSH	HL
0000A3 33                  A  1263    	INC	SP
0000A4 33                  A  1264    	INC	SP
0000A5 C1                  A  1265    	POP	BC
0000A6 DD73F8              A  1266    	LD	(IX+%FFFFFFF8),E	; spill
0000A9 D1                  A  1267    	POP	DE
0000AA DD73F3              A  1268    	LD	(IX+%FFFFFFF3),E	; spill
0000AD DD5EF8              A  1269    	LD	E,(IX+%FFFFFFF8)	; unspill
0000B0 33                  A  1270    	INC	SP
0000B1 DD27F4              A  1271    	LD	HL,(IX+%FFFFFFF4)
0000B4 DD73F8              A  1272    	LD	(IX+%FFFFFFF8),E	; spill
0000B7 DD5EF3              A  1273    	LD	E,(IX+%FFFFFFF3)	; unspill
0000BA 7B                  A  1274    	LD	A,E
0000BB DD5EF8              A  1275    	LD	E,(IX+%FFFFFFF8)	; unspill
0000BE CD 00 00 00         A  1276    	CALL	__lor
0000C2 DD2FFC              A  1277    	LD	(IX+%FFFFFFFC),HL
0000C5 DD73FF              A  1278    	LD	(IX+%FFFFFFFF),E
                           A  1279    ;  630		rv = rv << 8 | ptr[0];
                           A  1280    .LINE 630
                           A  1281    
0000C8 E5C1                A  1282    	LD	BC,HL
0000CA C5                  A  1283    	PUSH	BC
0000CB C5                  A  1284    	PUSH	BC
0000CC B7ED62              A  1285    	UEXT	HL
0000CF E5                  A  1286    	PUSH	HL
0000D0 33                  A  1287    	INC	SP
0000D1 33                  A  1288    	INC	SP
0000D2 D1                  A  1289    	POP	DE
0000D3 DD1FED              A  1290    	LD	(IX+%FFFFFFED),DE	; spill
0000D6 E1                  A  1291    	POP	HL
0000D7 DD75EB              A  1292    	LD	(IX+%FFFFFFEB),L	; spill
0000DA 33                  A  1293    	INC	SP
0000DB B7ED62              A  1294    	UEXT	HL
0000DE FD6E00              A  1295    	LD	L,(IY)
0000E1 E5C1                A  1296    	LD	BC,HL
0000E3 7C                  A  1297    	LD	A,H
0000E4 DD6EEB              A  1298    	LD	L,(IX+%FFFFFFEB)	; unspill
0000E7 5D                  A  1299    	LD	E,L
0000E8 DD1FF0              A  1300    	LD	(IX+%FFFFFFF0),DE	; spill
0000EB DD27ED              A  1301    	LD	HL,(IX+%FFFFFFED)
0000EE DD17F0              A  1302    	LD	DE,(IX+%FFFFFFF0)	; unspill
0000F1 CD 00 00 00         A  1303    	CALL	__lor
0000F5 DD2FFC              A  1304    	LD	(IX+%FFFFFFFC),HL
0000F8 DD73FF              A  1305    	LD	(IX+%FFFFFFFF),E
                           A  1306    ;  631		return rv;
                           A  1307    .LINE 631
                           A  1308    
0000FB DD27FC              A  1309    	LD	HL,(IX+%FFFFFFFC)
0000FE DD5EFF              A  1310    	LD	E,(IX+%FFFFFFFF)
                           A  1311    ;  632	}
                           A  1312    .LINE 632
                           A  1313    
000101 DDF9                A  1314    	LD	SP,IX
000103 DDE1                A  1315    	POP	IX
000105 C9                  A  1316    	RET	
                           A  1317    
                           A  1318    
                           A  1319    ;**************************** _ld_dword *******
                           A  1320    ;Name                         Addr/Register   S
                           A  1321    ;rv                                    IX-4    
                           A  1322    ;ptr                                   IX+6    
                           A  1323    
                           A  1324    
                           A  1325    ; Stack Frame Size: 30 (bytes)
                           A  1326    ;       Spill Code: -1 (instruction)
                           A  1327    
                           A  1328    
                           A  1329    .ENDFUNC "ld_dword",632,"_ld_dword"
                           A  1330    ;  633	
                           A  1331    ;  634	#if FF_FS_EXFAT
                           A  1332    ;  635	static QWORD ld_qword (const BYTE* ptr)
                           A  1333    ;  636	{
                           A  1334    ;  637		QWORD rv;
                           A  1335    ;  638	
                           A  1336    ;  639		rv = ptr[7];
                           A  1337    ;  640		rv = rv << 8 | ptr[6];
                           A  1338    ;  641		rv = rv << 8 | ptr[5];
                           A  1339    ;  642		rv = rv << 8 | ptr[4];
                           A  1340    ;  643		rv = rv << 8 | ptr[3];
                           A  1341    ;  644		rv = rv << 8 | ptr[2];
                           A  1342    ;  645		rv = rv << 8 | ptr[1];
                           A  1343    ;  646		rv = rv << 8 | ptr[0];
                           A  1344    ;  647		return rv;
                           A  1345    ;  648	}
                           A  1346    ;  649	#endif
                           A  1347    ;  650	
                           A  1348    ;  651	#if !FF_FS_READONLY
                           A  1349    ;  652	static void st_word (BYTE* ptr, WORD va
                           A  1350    ;  653	{
000106                     A  1351    _st_word:
                           A  1352    .DEFINE "_st_word"
                           A  1353    
                           A  1354    .VALUE _st_word
                           A  1355    
                           A  1356    .CLASS 3
                           A  1357    
                           A  1358    .TYPE 65
                           A  1359    
                           A  1360    .ENDEF
                           A  1361    
                           A  1362    .BEGFUNC "st_word",653,"_st_word"
                           A  1363    
                           A  1364    .LINE 653
                           A  1365    
                           A  1366    .DEFINE "ptr"
                           A  1367    
                           A  1368    .CLASS 65
                           A  1369    
                           A  1370    .VALUE 6
                           A  1371    
                           A  1372    .TYPE 44
                           A  1373    
                           A  1374    .ENDEF
                           A  1375    
                           A  1376    .DEFINE "val"
                           A  1377    
                           A  1378    .CLASS 65
                           A  1379    
                           A  1380    .VALUE 9
                           A  1381    
                           A  1382    .TYPE 13
                           A  1383    
                           A  1384    .ENDEF
                           A  1385    
000106 DDE5                A  1386    	PUSH	IX
000108 DD210000 00         A  1387    	LD	IX,0
00010D DD39                A  1388    	ADD	IX,SP
                           A  1389    ;  654		*ptr++ = (BYTE)val; val >>= 8;
                           A  1390    .LINE 654
                           A  1391    
00010F DD7E09              A  1392    	LD	A,(IX+%9)
000112 DD2706              A  1393    	LD	HL,(IX+%6)
000115 77                  A  1394    	LD	(HL),A
000116 DD0706              A  1395    	LD	BC,(IX+%6)
000119 03                  A  1396    	INC	BC
00011A DD0F06              A  1397    	LD	(IX+%6),BC
00011D DD0709              A  1398    	LD	BC,(IX+%9)
000120 CD 00 00 00         A  1399    	CALL	__stoiu
000124 E5C1                A  1400    	LD	BC,HL
000126 3B                  A  1401    	DEC	SP
000127 C5                  A  1402    	PUSH	BC
000128 33                  A  1403    	INC	SP
000129 F1                  A  1404    	POP	AF
00012A 17ED62              A  1405    	SEXT	HL
00012D E5                  A  1406    	PUSH	HL
00012E C5                  A  1407    	PUSH	BC
00012F 33                  A  1408    	INC	SP
000130 E1                  A  1409    	POP	HL
000131 33                  A  1410    	INC	SP
000132 33                  A  1411    	INC	SP
000133 DD7509              A  1412    	LD	(IX+%9),L
000136 DD740A              A  1413    	LD	(IX+%A),H
                           A  1414    ;  655		*ptr++ = (BYTE)val;
                           A  1415    .LINE 655
                           A  1416    
000139 DD7E09              A  1417    	LD	A,(IX+%9)
00013C DD2706              A  1418    	LD	HL,(IX+%6)
00013F 77                  A  1419    	LD	(HL),A
                           A  1420    ;  656	}
                           A  1421    .LINE 656
                           A  1422    
000140 DDF9                A  1423    	LD	SP,IX
000142 DDE1                A  1424    	POP	IX
000144 C9                  A  1425    	RET	
                           A  1426    
                           A  1427    
                           A  1428    ;**************************** _st_word ********
                           A  1429    ;Name                         Addr/Register   S
                           A  1430    ;val                                   IX+9    
                           A  1431    ;ptr                                   IX+6    
                           A  1432    
                           A  1433    
                           A  1434    ; Stack Frame Size: 12 (bytes)
                           A  1435    ;       Spill Code: -1 (instruction)
                           A  1436    
                           A  1437    
                           A  1438    .ENDFUNC "st_word",656,"_st_word"
                           A  1439    ;  657	
                           A  1440    ;  658	static void st_dword (BYTE* ptr, DWORD 
                           A  1441    ;  659	{
000145                     A  1442    _st_dword:
                           A  1443    .DEFINE "_st_dword"
                           A  1444    
                           A  1445    .VALUE _st_dword
                           A  1446    
                           A  1447    .CLASS 3
                           A  1448    
                           A  1449    .TYPE 65
                           A  1450    
                           A  1451    .ENDEF
                           A  1452    
                           A  1453    .BEGFUNC "st_dword",659,"_st_dword"
                           A  1454    
                           A  1455    .LINE 659
                           A  1456    
                           A  1457    .DEFINE "ptr"
                           A  1458    
                           A  1459    .CLASS 65
                           A  1460    
                           A  1461    .VALUE 6
                           A  1462    
                           A  1463    .TYPE 44
                           A  1464    
                           A  1465    .ENDEF
                           A  1466    
                           A  1467    .DEFINE "val"
                           A  1468    
                           A  1469    .CLASS 65
                           A  1470    
                           A  1471    .VALUE 9
                           A  1472    
                           A  1473    .TYPE 15
                           A  1474    
                           A  1475    .ENDEF
                           A  1476    
000145 DDE5                A  1477    	PUSH	IX
000147 DD210000 00         A  1478    	LD	IX,0
00014C DD39                A  1479    	ADD	IX,SP
                           A  1480    ;  660		*ptr++ = (BYTE)val; val >>= 8;
                           A  1481    .LINE 660
                           A  1482    
00014E DD7E09              A  1483    	LD	A,(IX+%9)
000151 DD2706              A  1484    	LD	HL,(IX+%6)
000154 77                  A  1485    	LD	(HL),A
000155 DD0706              A  1486    	LD	BC,(IX+%6)
000158 03                  A  1487    	INC	BC
000159 DD0F06              A  1488    	LD	(IX+%6),BC
00015C DD070A              A  1489    	LD	BC,(IX+%A)
00015F AF                  A  1490    	XOR	A,A
000160 DD0F09              A  1491    	LD	(IX+%9),BC
000163 DD770C              A  1492    	LD	(IX+%C),A
                           A  1493    ;  661		*ptr++ = (BYTE)val; val >>= 8;
                           A  1494    .LINE 661
                           A  1495    
000166 DD7E09              A  1496    	LD	A,(IX+%9)
000169 DD2706              A  1497    	LD	HL,(IX+%6)
00016C 77                  A  1498    	LD	(HL),A
00016D DD0706              A  1499    	LD	BC,(IX+%6)
000170 03                  A  1500    	INC	BC
000171 DD0F06              A  1501    	LD	(IX+%6),BC
000174 DD070A              A  1502    	LD	BC,(IX+%A)
000177 AF                  A  1503    	XOR	A,A
000178 DD0F09              A  1504    	LD	(IX+%9),BC
00017B DD770C              A  1505    	LD	(IX+%C),A
                           A  1506    ;  662		*ptr++ = (BYTE)val; val >>= 8;
                           A  1507    .LINE 662
                           A  1508    
00017E DD7E09              A  1509    	LD	A,(IX+%9)
000181 DD2706              A  1510    	LD	HL,(IX+%6)
000184 77                  A  1511    	LD	(HL),A
000185 DD0706              A  1512    	LD	BC,(IX+%6)
000188 03                  A  1513    	INC	BC
000189 DD0F06              A  1514    	LD	(IX+%6),BC
00018C DD070A              A  1515    	LD	BC,(IX+%A)
00018F AF                  A  1516    	XOR	A,A
000190 DD0F09              A  1517    	LD	(IX+%9),BC
000193 DD770C              A  1518    	LD	(IX+%C),A
                           A  1519    ;  663		*ptr++ = (BYTE)val;
                           A  1520    .LINE 663
                           A  1521    
000196 DD7E09              A  1522    	LD	A,(IX+%9)
000199 DD2706              A  1523    	LD	HL,(IX+%6)
00019C 77                  A  1524    	LD	(HL),A
                           A  1525    ;  664	}
                           A  1526    .LINE 664
                           A  1527    
00019D DDF9                A  1528    	LD	SP,IX
00019F DDE1                A  1529    	POP	IX
0001A1 C9                  A  1530    	RET	
                           A  1531    
                           A  1532    
                           A  1533    ;**************************** _st_dword *******
                           A  1534    ;Name                         Addr/Register   S
                           A  1535    ;val                                   IX+9    
                           A  1536    ;ptr                                   IX+6    
                           A  1537    
                           A  1538    
                           A  1539    ; Stack Frame Size: 15 (bytes)
                           A  1540    ;       Spill Code: -1 (instruction)
                           A  1541    
                           A  1542    
                           A  1543    .ENDFUNC "st_dword",664,"_st_dword"
                           A  1544    ;  665	
                           A  1545    ;  666	#if FF_FS_EXFAT
                           A  1546    ;  667	static void st_qword (BYTE* ptr, QWORD 
                           A  1547    ;  668	{
                           A  1548    ;  669		*ptr++ = (BYTE)val; val >>= 8;
                           A  1549    ;  670		*ptr++ = (BYTE)val; val >>= 8;
                           A  1550    ;  671		*ptr++ = (BYTE)val; val >>= 8;
                           A  1551    ;  672		*ptr++ = (BYTE)val; val >>= 8;
                           A  1552    ;  673		*ptr++ = (BYTE)val; val >>= 8;
                           A  1553    ;  674		*ptr++ = (BYTE)val; val >>= 8;
                           A  1554    ;  675		*ptr++ = (BYTE)val; val >>= 8;
                           A  1555    ;  676		*ptr++ = (BYTE)val;
                           A  1556    ;  677	}
                           A  1557    ;  678	#endif
                           A  1558    ;  679	#endif	/* !FF_FS_READONLY */
                           A  1559    ;  680	
                           A  1560    ;  681	
                           A  1561    ;  682	
                           A  1562    ;  683	/*-------------------------------------
                           A  1563    ;  684	/* String functions                    
                           A  1564    ;  685	/*-------------------------------------
                           A  1565    ;  686	
                           A  1566    ;  687	/* Test if the byte is DBC 1st byte */
                           A  1567    ;  688	static int dbc_1st (BYTE c)
                           A  1568    ;  689	{
0001A2                     A  1569    _dbc_1st:
                           A  1570    .DEFINE "_dbc_1st"
                           A  1571    
                           A  1572    .VALUE _dbc_1st
                           A  1573    
                           A  1574    .CLASS 3
                           A  1575    
                           A  1576    .TYPE 68
                           A  1577    
                           A  1578    .ENDEF
                           A  1579    
                           A  1580    .BEGFUNC "dbc_1st",689,"_dbc_1st"
                           A  1581    
                           A  1582    .LINE 689
                           A  1583    
                           A  1584    .DEFINE "c"
                           A  1585    
                           A  1586    .CLASS 65
                           A  1587    
                           A  1588    .VALUE 6
                           A  1589    
                           A  1590    .TYPE 12
                           A  1591    
                           A  1592    .ENDEF
                           A  1593    
0001A2 DDE5                A  1594    	PUSH	IX
0001A4 DD210000 00         A  1595    	LD	IX,0
0001A9 DD39                A  1596    	ADD	IX,SP
                           A  1597    ;  690	#if FF_CODE_PAGE == 0		/* Variable
                           A  1598    ;  691		if (DbcTbl && c >= DbcTbl[0]) {
                           A  1599    ;  692			if (c <= DbcTbl[1]) return 1;	
                           A  1600    ;  693			if (c >= DbcTbl[2] && c <= DbcT
                           A  1601    ;  694		}
                           A  1602    ;  695	#elif FF_CODE_PAGE >= 900	/* DBCS fix
                           A  1603    ;  696		if (c >= DbcTbl[0]) {
                           A  1604    ;  697			if (c <= DbcTbl[1]) return 1;
                           A  1605    ;  698			if (c >= DbcTbl[2] && c <= DbcT
                           A  1606    ;  699		}
                           A  1607    ;  700	#else						/* SBCS fix
                           A  1608    ;  701		if (c != 0) return 0;	/* Always f
                           A  1609    .LINE 701
                           A  1610    
0001AB DD7E06              A  1611    	LD	A,(IX+%6)
0001AE B7                  A  1612    	OR	A,A
0001AF 28 05               A  1613    	JR	Z,L_11
0001B1 B7                  A  1614    	OR	A,A
0001B2 ED62                A  1615    	SBC	HL,HL
0001B4 18 03               A  1616    	JR	L_12
0001B6                     A  1617    L_11:
                           A  1618    ;  702	#endif
                           A  1619    ;  703		return 0;
                           A  1620    .LINE 703
                           A  1621    
0001B6 B7                  A  1622    	OR	A,A
0001B7 ED62                A  1623    	SBC	HL,HL
                           A  1624    ;  704	}
0001B9                     A  1625    L_12:
                           A  1626    .LINE 704
                           A  1627    
0001B9 DDF9                A  1628    	LD	SP,IX
0001BB DDE1                A  1629    	POP	IX
0001BD C9                  A  1630    	RET	
                           A  1631    
                           A  1632    
                           A  1633    ;**************************** _dbc_1st ********
                           A  1634    ;Name                         Addr/Register   S
                           A  1635    ;c                                     IX+6    
                           A  1636    
                           A  1637    
                           A  1638    ; Stack Frame Size: 9 (bytes)
                           A  1639    ;       Spill Code: -1 (instruction)
                           A  1640    
                           A  1641    
                           A  1642    .ENDFUNC "dbc_1st",704,"_dbc_1st"
                           A  1643    ;  705	
                           A  1644    ;  706	
                           A  1645    ;  707	/* Test if the byte is DBC 2nd byte */
                           A  1646    ;  708	static int dbc_2nd (BYTE c)
                           A  1647    ;  709	{
0001BE                     A  1648    _dbc_2nd:
                           A  1649    .DEFINE "_dbc_2nd"
                           A  1650    
                           A  1651    .VALUE _dbc_2nd
                           A  1652    
                           A  1653    .CLASS 3
                           A  1654    
                           A  1655    .TYPE 68
                           A  1656    
                           A  1657    .ENDEF
                           A  1658    
                           A  1659    .BEGFUNC "dbc_2nd",709,"_dbc_2nd"
                           A  1660    
                           A  1661    .LINE 709
                           A  1662    
                           A  1663    .DEFINE "c"
                           A  1664    
                           A  1665    .CLASS 65
                           A  1666    
                           A  1667    .VALUE 6
                           A  1668    
                           A  1669    .TYPE 12
                           A  1670    
                           A  1671    .ENDEF
                           A  1672    
0001BE DDE5                A  1673    	PUSH	IX
0001C0 DD210000 00         A  1674    	LD	IX,0
0001C5 DD39                A  1675    	ADD	IX,SP
                           A  1676    ;  710	#if FF_CODE_PAGE == 0		/* Variable
                           A  1677    ;  711		if (DbcTbl && c >= DbcTbl[4]) {
                           A  1678    ;  712			if (c <= DbcTbl[5]) return 1;	
                           A  1679    ;  713			if (c >= DbcTbl[6] && c <= DbcT
                           A  1680    ;  714			if (c >= DbcTbl[8] && c <= DbcT
                           A  1681    ;  715		}
                           A  1682    ;  716	#elif FF_CODE_PAGE >= 900	/* DBCS fix
                           A  1683    ;  717		if (c >= DbcTbl[4]) {
                           A  1684    ;  718			if (c <= DbcTbl[5]) return 1;
                           A  1685    ;  719			if (c >= DbcTbl[6] && c <= DbcT
                           A  1686    ;  720			if (c >= DbcTbl[8] && c <= DbcT
                           A  1687    ;  721		}
                           A  1688    ;  722	#else						/* SBCS fix
                           A  1689    ;  723		if (c != 0) return 0;	/* Always f
                           A  1690    .LINE 723
                           A  1691    
0001C7 DD7E06              A  1692    	LD	A,(IX+%6)
0001CA B7                  A  1693    	OR	A,A
0001CB 28 05               A  1694    	JR	Z,L_14
0001CD B7                  A  1695    	OR	A,A
0001CE ED62                A  1696    	SBC	HL,HL
0001D0 18 03               A  1697    	JR	L_15
0001D2                     A  1698    L_14:
                           A  1699    ;  724	#endif
                           A  1700    ;  725		return 0;
                           A  1701    .LINE 725
                           A  1702    
0001D2 B7                  A  1703    	OR	A,A
0001D3 ED62                A  1704    	SBC	HL,HL
                           A  1705    ;  726	}
0001D5                     A  1706    L_15:
                           A  1707    .LINE 726
                           A  1708    
0001D5 DDF9                A  1709    	LD	SP,IX
0001D7 DDE1                A  1710    	POP	IX
0001D9 C9                  A  1711    	RET	
                           A  1712    
                           A  1713    
                           A  1714    ;**************************** _dbc_2nd ********
                           A  1715    ;Name                         Addr/Register   S
                           A  1716    ;c                                     IX+6    
                           A  1717    
                           A  1718    
                           A  1719    ; Stack Frame Size: 9 (bytes)
                           A  1720    ;       Spill Code: -1 (instruction)
                           A  1721    
                           A  1722    
                           A  1723    .ENDFUNC "dbc_2nd",726,"_dbc_2nd"
                           A  1724    ;  727	
                           A  1725    ;  728	
                           A  1726    ;  729	#if FF_USE_LFN
                           A  1727    ;  730	
                           A  1728    ;  731	/* Get a Unicode code point from the TC
                           A  1729    ;  732	static DWORD tchar2uni (	/* Returns 
                           A  1730    ;  733		const TCHAR** str		/* Pointer 
                           A  1731    ;  734	)
                           A  1732    ;  735	{
0001DA                     A  1733    _tchar2uni:
                           A  1734    .DEFINE "_tchar2uni"
                           A  1735    
                           A  1736    .VALUE _tchar2uni
                           A  1737    
                           A  1738    .CLASS 3
                           A  1739    
                           A  1740    .TYPE 79
                           A  1741    
                           A  1742    .ENDEF
                           A  1743    
                           A  1744    .BEGFUNC "tchar2uni",735,"_tchar2uni"
                           A  1745    
                           A  1746    .LINE 735
                           A  1747    
                           A  1748    .DEFINE "str"
                           A  1749    
                           A  1750    .CLASS 65
                           A  1751    
                           A  1752    .VALUE 6
                           A  1753    
                           A  1754    .TYPE 1570
                           A  1755    
                           A  1756    .ENDEF
                           A  1757    
                           A  1758    .DEFINE "p"
                           A  1759    
                           A  1760    .CLASS 65
                           A  1761    
                           A  1762    .VALUE -3
                           A  1763    
                           A  1764    .TYPE 194
                           A  1765    
                           A  1766    .ENDEF
                           A  1767    
                           A  1768    .DEFINE "wc"
                           A  1769    
                           A  1770    .CLASS 65
                           A  1771    
                           A  1772    .VALUE -5
                           A  1773    
                           A  1774    .TYPE 13
                           A  1775    
                           A  1776    .ENDEF
                           A  1777    
                           A  1778    .DEFINE "b"
                           A  1779    
                           A  1780    .CLASS 65
                           A  1781    
                           A  1782    .VALUE -6
                           A  1783    
                           A  1784    .TYPE 12
                           A  1785    
                           A  1786    .ENDEF
                           A  1787    
                           A  1788    .DEFINE "uc"
                           A  1789    
                           A  1790    .CLASS 65
                           A  1791    
                           A  1792    .VALUE -10
                           A  1793    
                           A  1794    .TYPE 15
                           A  1795    
                           A  1796    .ENDEF
                           A  1797    
0001DA DDE5                A  1798    	PUSH	IX
0001DC DD210000 00         A  1799    	LD	IX,0
0001E1 DD39                A  1800    	ADD	IX,SP
0001E3 C5                  A  1801    	PUSH	BC
0001E4 C5                  A  1802    	PUSH	BC
0001E5 C5                  A  1803    	PUSH	BC
0001E6 3B                  A  1804    	DEC	SP
                           A  1805    ;  736		DWORD uc;
                           A  1806    ;  737		const TCHAR *p = *str;
                           A  1807    .LINE 737
                           A  1808    
0001E7 DD2706              A  1809    	LD	HL,(IX+%6)
0001EA ED07                A  1810    	LD	BC,(HL)
0001EC DD0FFD              A  1811    	LD	(IX+%FFFFFFFD),BC
                           A  1812    ;  738	
                           A  1813    ;  739	#if FF_LFN_UNICODE == 1		/* UTF-16 i
                           A  1814    ;  740		WCHAR wc;
                           A  1815    ;  741	
                           A  1816    ;  742		uc = *p++;	/* Get a unit */
                           A  1817    ;  743		if (IsSurrogate(uc)) {	/* Surrogat
                           A  1818    ;  744			wc = *p++;		/* Get low surr
                           A  1819    ;  745			if (!IsSurrogateH(uc) || !IsSur
                           A  1820    ;  746			uc = uc << 16 | wc;
                           A  1821    ;  747		}
                           A  1822    ;  748	
                           A  1823    ;  749	#elif FF_LFN_UNICODE == 2	/* UTF-8 in
                           A  1824    ;  750		BYTE b;
                           A  1825    ;  751		int nf;
                           A  1826    ;  752	
                           A  1827    ;  753		uc = (BYTE)*p++;	/* Get an encod
                           A  1828    ;  754		if (uc & 0x80) {	/* Multiple byt
                           A  1829    ;  755			if        ((uc & 0xE0) == 0xC0)
                           A  1830    ;  756				uc &= 0x1F; nf = 1;
                           A  1831    ;  757			} else if ((uc & 0xF0) == 0xE0)
                           A  1832    ;  758				uc &= 0x0F; nf = 2;
                           A  1833    ;  759			} else if ((uc & 0xF8) == 0xF0)
                           A  1834    ;  760				uc &= 0x07; nf = 3;
                           A  1835    ;  761			} else {						
                           A  1836    ;  762				return 0xFFFFFFFF;
                           A  1837    ;  763			}
                           A  1838    ;  764			do {	/* Get trailing bytes *
                           A  1839    ;  765				b = (BYTE)*p++;
                           A  1840    ;  766				if ((b & 0xC0) != 0x80) ret
                           A  1841    ;  767				uc = uc << 6 | (b & 0x3F);
                           A  1842    ;  768			} while (--nf != 0);
                           A  1843    ;  769			if (uc < 0x80 || IsSurrogate(uc
                           A  1844    ;  770			if (uc >= 0x010000) uc = 0xD800
                           A  1845    ;  771		}
                           A  1846    ;  772	
                           A  1847    ;  773	#elif FF_LFN_UNICODE == 3	/* UTF-32 i
                           A  1848    ;  774		uc = (TCHAR)*p++;	/* Get a unit *
                           A  1849    ;  775		if (uc >= 0x110000 || IsSurrogate(u
                           A  1850    ;  776		if (uc >= 0x010000) uc = 0xD800DC00
                           A  1851    ;  777	
                           A  1852    ;  778	#else		/* ANSI/OEM input */
                           A  1853    ;  779		BYTE b;
                           A  1854    ;  780		WCHAR wc;
                           A  1855    ;  781	
                           A  1856    ;  782		wc = (BYTE)*p++;			/* Get 
                           A  1857    .LINE 782
                           A  1858    
0001EF C5E1                A  1859    	LD	HL,BC
0001F1 4E                  A  1860    	LD	C,(HL)
0001F2 0600                A  1861    	LD	B,%0
0001F4 C5E1                A  1862    	LD	HL,BC
0001F6 DD75FB              A  1863    	LD	(IX+%FFFFFFFB),L
0001F9 DD74FC              A  1864    	LD	(IX+%FFFFFFFC),H
0001FC DD07FD              A  1865    	LD	BC,(IX+%FFFFFFFD)
0001FF 03                  A  1866    	INC	BC
000200 DD0FFD              A  1867    	LD	(IX+%FFFFFFFD),BC
                           A  1868    ;  783		if (dbc_1st((BYTE)wc)) {	/* Is i
                           A  1869    .LINE 783
                           A  1870    
000203 DD4EFB              A  1871    	LD	C,(IX+%FFFFFFFB)
000206 0600                A  1872    	LD	B,%0
000208 C5                  A  1873    	PUSH	BC
000209 CD A2 01 00         A  1874    	CALL	_dbc_1st
00020D C1                  A  1875    	POP	BC
00020E 01000000            A  1876    	LD	BC,0
000212 B7                  A  1877    	OR	A,A
000213 ED42                A  1878    	SBC	HL,BC
000215 28 3D               A  1879    	JR	Z,L_23
                           A  1880    ;  784			b = (BYTE)*p++;			/* Get 
                           A  1881    .LINE 784
                           A  1882    
000217 DD27FD              A  1883    	LD	HL,(IX+%FFFFFFFD)
00021A 7E                  A  1884    	LD	A,(HL)
00021B DD77FA              A  1885    	LD	(IX+%FFFFFFFA),A
00021E DD07FD              A  1886    	LD	BC,(IX+%FFFFFFFD)
000221 03                  A  1887    	INC	BC
000222 DD0FFD              A  1888    	LD	(IX+%FFFFFFFD),BC
                           A  1889    ;  785			if (!dbc_2nd(b)) return 0xFFFFF
                           A  1890    .LINE 785
                           A  1891    
000225 DD4EFA              A  1892    	LD	C,(IX+%FFFFFFFA)
000228 0600                A  1893    	LD	B,%0
00022A C5                  A  1894    	PUSH	BC
00022B CD BE 01 00         A  1895    	CALL	_dbc_2nd
00022F C1                  A  1896    	POP	BC
000230 01000000            A  1897    	LD	BC,0
000234 B7                  A  1898    	OR	A,A
000235 ED42                A  1899    	SBC	HL,BC
000237 20 08               A  1900    	JR	NZ,L_19
000239 21FFFFFF            A  1901    	LD	HL,16777215
00023D 1EFF                A  1902    	LD	E,%FF
00023F 18 66               A  1903    	JR	L_25
000241                     A  1904    L_19:
                           A  1905    ;  786			wc = (wc << 8) + b;		/* Make
                           A  1906    .LINE 786
                           A  1907    
000241 DD27FB              A  1908    	LD	HL,(IX+%FFFFFFFB)
000244 65                  A  1909    	LD	H,L
000245 2E00                A  1910    	LD	L,%0
000247 DD4EFA              A  1911    	LD	C,(IX+%FFFFFFFA)
00024A 0600                A  1912    	LD	B,%0
00024C 4009                A  1913    	ADD.SIS	HL,BC
00024E DD75FB              A  1914    	LD	(IX+%FFFFFFFB),L
000251 DD74FC              A  1915    	LD	(IX+%FFFFFFFC),H
                           A  1916    ;  787		}
000254                     A  1917    L_23:
                           A  1918    .LINE 787
                           A  1919    
                           A  1920    ;  788		if (wc != 0) {
                           A  1921    .LINE 788
                           A  1922    
000254 49010000            A  1923    	LD.LIS	BC,0
000258 DD27FB              A  1924    	LD	HL,(IX+%FFFFFFFB)
00025B B7                  A  1925    	OR	A,A
00025C 40ED42              A  1926    	SBC.SIS	HL,BC
00025F 28 2A               A  1927    	JR	Z,L_24
                           A  1928    ;  789			wc = ff_oem2uni(wc, CODEPAGE);	
                           A  1929    .LINE 789
                           A  1930    
000261 01B50100            A  1931    	LD	BC,437
000265 C5                  A  1932    	PUSH	BC
000266 DD07FB              A  1933    	LD	BC,(IX+%FFFFFFFB)
000269 C5                  A  1934    	PUSH	BC
00026A CD 00 00 00         A  1935    	CALL	_ff_oem2uni
00026E C1                  A  1936    	POP	BC
00026F C1                  A  1937    	POP	BC
000270 DD75FB              A  1938    	LD	(IX+%FFFFFFFB),L
000273 DD74FC              A  1939    	LD	(IX+%FFFFFFFC),H
                           A  1940    ;  790			if (wc == 0) return 0xFFFFFFFF;
                           A  1941    .LINE 790
                           A  1942    
000276 49010000            A  1943    	LD.LIS	BC,0
00027A DD27FB              A  1944    	LD	HL,(IX+%FFFFFFFB)
00027D B7                  A  1945    	OR	A,A
00027E 40ED42              A  1946    	SBC.SIS	HL,BC
000281 20 08               A  1947    	JR	NZ,L_24
000283 21FFFFFF            A  1948    	LD	HL,16777215
000287 1EFF                A  1949    	LD	E,%FF
000289 18 1C               A  1950    	JR	L_25
                           A  1951    ;  791		}
00028B                     A  1952    L_24:
                           A  1953    .LINE 791
                           A  1954    
                           A  1955    ;  792		uc = wc;
                           A  1956    .LINE 792
                           A  1957    
00028B DD07FB              A  1958    	LD	BC,(IX+%FFFFFFFB)
00028E CD 00 00 00         A  1959    	CALL	__stoiu
000292 AF                  A  1960    	XOR	A,A
000293 DD2FF6              A  1961    	LD	(IX+%FFFFFFF6),HL
000296 DD77F9              A  1962    	LD	(IX+%FFFFFFF9),A
                           A  1963    ;  793	
                           A  1964    ;  794	#endif
                           A  1965    ;  795		*str = p;	/* Next read pointer */
                           A  1966    .LINE 795
                           A  1967    
000299 DD2706              A  1968    	LD	HL,(IX+%6)
00029C DD07FD              A  1969    	LD	BC,(IX+%FFFFFFFD)
00029F ED0F                A  1970    	LD	(HL),BC
                           A  1971    ;  796		return uc;
                           A  1972    .LINE 796
                           A  1973    
0002A1 DD27F6              A  1974    	LD	HL,(IX+%FFFFFFF6)
0002A4 DD5EF9              A  1975    	LD	E,(IX+%FFFFFFF9)
                           A  1976    ;  797	}
0002A7                     A  1977    L_25:
                           A  1978    .LINE 797
                           A  1979    
0002A7 DDF9                A  1980    	LD	SP,IX
0002A9 DDE1                A  1981    	POP	IX
0002AB C9                  A  1982    	RET	
                           A  1983    
                           A  1984    
                           A  1985    ;**************************** _tchar2uni ******
                           A  1986    ;Name                         Addr/Register   S
                           A  1987    ;_ff_oem2uni                         IMPORT  --
                           A  1988    ;uc                                   IX-10    
                           A  1989    ;b                                     IX-6    
                           A  1990    ;wc                                    IX-5    
                           A  1991    ;p                                     IX-3    
                           A  1992    ;str                                   IX+6    
                           A  1993    
                           A  1994    
                           A  1995    ; Stack Frame Size: 19 (bytes)
                           A  1996    ;       Spill Code: -1 (instruction)
                           A  1997    
                           A  1998    
                           A  1999    .ENDFUNC "tchar2uni",797,"_tchar2uni"
                           A  2000    ;  798	
                           A  2001    ;  799	
                           A  2002    ;  800	/* Store a Unicode char in defined API 
                           A  2003    ;  801	static UINT put_utf (	/* Returns numb
                           A  2004    ;  802		DWORD chr,	/* UTF-16 encoded chara
                           A  2005    ;  803		TCHAR* buf,	/* Output buffer */
                           A  2006    ;  804		UINT szb	/* Size of the buffer *
                           A  2007    ;  805	)
                           A  2008    ;  806	{
0002AC                     A  2009    _put_utf:
                           A  2010    .DEFINE "_put_utf"
                           A  2011    
                           A  2012    .VALUE _put_utf
                           A  2013    
                           A  2014    .CLASS 3
                           A  2015    
                           A  2016    .TYPE 78
                           A  2017    
                           A  2018    .ENDEF
                           A  2019    
                           A  2020    .BEGFUNC "put_utf",806,"_put_utf"
                           A  2021    
                           A  2022    .LINE 806
                           A  2023    
                           A  2024    .DEFINE "chr"
                           A  2025    
                           A  2026    .CLASS 65
                           A  2027    
                           A  2028    .VALUE 6
                           A  2029    
                           A  2030    .TYPE 15
                           A  2031    
                           A  2032    .ENDEF
                           A  2033    
                           A  2034    .DEFINE "buf"
                           A  2035    
                           A  2036    .CLASS 65
                           A  2037    
                           A  2038    .VALUE 12
                           A  2039    
                           A  2040    .TYPE 34
                           A  2041    
                           A  2042    .ENDEF
                           A  2043    
                           A  2044    .DEFINE "szb"
                           A  2045    
                           A  2046    .CLASS 65
                           A  2047    
                           A  2048    .VALUE 15
                           A  2049    
                           A  2050    .TYPE 14
                           A  2051    
                           A  2052    .ENDEF
                           A  2053    
                           A  2054    .DEFINE "wc"
                           A  2055    
                           A  2056    .CLASS 65
                           A  2057    
                           A  2058    .VALUE -2
                           A  2059    
                           A  2060    .TYPE 13
                           A  2061    
                           A  2062    .ENDEF
                           A  2063    
0002AC DDE5                A  2064    	PUSH	IX
0002AE DD210000 00         A  2065    	LD	IX,0
0002B3 DD39                A  2066    	ADD	IX,SP
0002B5 3B                  A  2067    	DEC	SP
0002B6 3B                  A  2068    	DEC	SP
                           A  2069    ;  807	#if FF_LFN_UNICODE == 1	/* UTF-16 outpu
                           A  2070    ;  808		WCHAR hs, wc;
                           A  2071    ;  809	
                           A  2072    ;  810		hs = (WCHAR)(chr >> 16);
                           A  2073    ;  811		wc = (WCHAR)chr;
                           A  2074    ;  812		if (hs == 0) {	/* Single encoding 
                           A  2075    ;  813			if (szb < 1 || IsSurrogate(wc))
                           A  2076    ;  814			*buf = wc;
                           A  2077    ;  815			return 1;
                           A  2078    ;  816		}
                           A  2079    ;  817		if (szb < 2 || !IsSurrogateH(hs) ||
                           A  2080    ;  818		*buf++ = hs;
                           A  2081    ;  819		*buf++ = wc;
                           A  2082    ;  820		return 2;
                           A  2083    ;  821	
                           A  2084    ;  822	#elif FF_LFN_UNICODE == 2	/* UTF-8 ou
                           A  2085    ;  823		DWORD hc;
                           A  2086    ;  824	
                           A  2087    ;  825		if (chr < 0x80) {	/* Single byte 
                           A  2088    ;  826			if (szb < 1) return 0;	/* Buff
                           A  2089    ;  827			*buf = (TCHAR)chr;
                           A  2090    ;  828			return 1;
                           A  2091    ;  829		}
                           A  2092    ;  830		if (chr < 0x800) {	/* 2-byte seque
                           A  2093    ;  831			if (szb < 2) return 0;	/* Buff
                           A  2094    ;  832			*buf++ = (TCHAR)(0xC0 | (chr >>
                           A  2095    ;  833			*buf++ = (TCHAR)(0x80 | (chr >>
                           A  2096    ;  834			return 2;
                           A  2097    ;  835		}
                           A  2098    ;  836		if (chr < 0x10000) {	/* 3-byte s
                           A  2099    ;  837			if (szb < 3 || IsSurrogate(chr)
                           A  2100    ;  838			*buf++ = (TCHAR)(0xE0 | (chr >>
                           A  2101    ;  839			*buf++ = (TCHAR)(0x80 | (chr >>
                           A  2102    ;  840			*buf++ = (TCHAR)(0x80 | (chr >>
                           A  2103    ;  841			return 3;
                           A  2104    ;  842		}
                           A  2105    ;  843		/* 4-byte sequence */
                           A  2106    ;  844		if (szb < 4) return 0;	/* Buffer o
                           A  2107    ;  845		hc = ((chr & 0xFFFF0000) - 0xD80000
                           A  2108    ;  846		chr = (chr & 0xFFFF) - 0xDC00;		
                           A  2109    ;  847		if (hc >= 0x100000 || chr >= 0x400)
                           A  2110    ;  848		chr = (hc | chr) + 0x10000;
                           A  2111    ;  849		*buf++ = (TCHAR)(0xF0 | (chr >> 18 
                           A  2112    ;  850		*buf++ = (TCHAR)(0x80 | (chr >> 12 
                           A  2113    ;  851		*buf++ = (TCHAR)(0x80 | (chr >> 6 &
                           A  2114    ;  852		*buf++ = (TCHAR)(0x80 | (chr >> 0 &
                           A  2115    ;  853		return 4;
                           A  2116    ;  854	
                           A  2117    ;  855	#elif FF_LFN_UNICODE == 3	/* UTF-32 o
                           A  2118    ;  856		DWORD hc;
                           A  2119    ;  857	
                           A  2120    ;  858		if (szb < 1) return 0;	/* Buffer o
                           A  2121    ;  859		if (chr >= 0x10000) {	/* Out of B
                           A  2122    ;  860			hc = ((chr & 0xFFFF0000) - 0xD8
                           A  2123    ;  861			chr = (chr & 0xFFFF) - 0xDC00;	
                           A  2124    ;  862			if (hc >= 0x100000 || chr >= 0x
                           A  2125    ;  863			chr = (hc | chr) + 0x10000;
                           A  2126    ;  864		}
                           A  2127    ;  865		*buf++ = (TCHAR)chr;
                           A  2128    ;  866		return 1;
                           A  2129    ;  867	
                           A  2130    ;  868	#else						/* ANSI/OEM
                           A  2131    ;  869		WCHAR wc;
                           A  2132    ;  870	
                           A  2133    ;  871		wc = ff_uni2oem(chr, CODEPAGE);
                           A  2134    .LINE 871
                           A  2135    
0002B7 01B50100            A  2136    	LD	BC,437
0002BB C5                  A  2137    	PUSH	BC
0002BC DD4E09              A  2138    	LD	C,(IX+%9)
0002BF 0600                A  2139    	LD	B,%0
0002C1 C5                  A  2140    	PUSH	BC
0002C2 DD0706              A  2141    	LD	BC,(IX+%6)
0002C5 C5                  A  2142    	PUSH	BC
0002C6 CD 00 00 00         A  2143    	CALL	_ff_uni2oem
0002CA C1                  A  2144    	POP	BC
0002CB C1                  A  2145    	POP	BC
0002CC C1                  A  2146    	POP	BC
0002CD DD75FE              A  2147    	LD	(IX+%FFFFFFFE),L
0002D0 DD74FF              A  2148    	LD	(IX+%FFFFFFFF),H
                           A  2149    ;  872		if (wc >= 0x100) {	/* Is this a DB
                           A  2150    .LINE 872
                           A  2151    
0002D3 49010001            A  2152    	LD.LIS	BC,256
0002D7 DD27FE              A  2153    	LD	HL,(IX+%FFFFFFFE)
0002DA B7                  A  2154    	OR	A,A
0002DB 40ED42              A  2155    	SBC.SIS	HL,BC
0002DE 38 40               A  2156    	JR	C,L_33
                           A  2157    ;  873			if (szb < 2) return 0;
                           A  2158    .LINE 873
                           A  2159    
0002E0 01020000            A  2160    	LD	BC,2
0002E4 DD270F              A  2161    	LD	HL,(IX+%F)
0002E7 B7                  A  2162    	OR	A,A
0002E8 ED42                A  2163    	SBC	HL,BC
0002EA 30 05               A  2164    	JR	NC,L_28
0002EC B7                  A  2165    	OR	A,A
0002ED ED62                A  2166    	SBC	HL,HL
0002EF 18 58               A  2167    	JR	L_36
0002F1                     A  2168    L_28:
                           A  2169    ;  874			*buf++ = (char)(wc >> 8);	/* 
                           A  2170    .LINE 874
                           A  2171    
0002F1 DD07FE              A  2172    	LD	BC,(IX+%FFFFFFFE)
0002F4 CD 00 00 00         A  2173    	CALL	__stoiu
0002F8 E5C1                A  2174    	LD	BC,HL
0002FA 3B                  A  2175    	DEC	SP
0002FB C5                  A  2176    	PUSH	BC
0002FC 33                  A  2177    	INC	SP
0002FD F1                  A  2178    	POP	AF
0002FE 17ED62              A  2179    	SEXT	HL
000301 E5                  A  2180    	PUSH	HL
000302 C5                  A  2181    	PUSH	BC
000303 33                  A  2182    	INC	SP
000304 E1                  A  2183    	POP	HL
000305 33                  A  2184    	INC	SP
000306 33                  A  2185    	INC	SP
000307 DD310C              A  2186    	LD	IY,(IX+%C)
00030A FD7500              A  2187    	LD	(IY),L
00030D DD070C              A  2188    	LD	BC,(IX+%C)
000310 03                  A  2189    	INC	BC
000311 DD0F0C              A  2190    	LD	(IX+%C),BC
                           A  2191    ;  875			*buf++ = (TCHAR)wc;			/* 
                           A  2192    .LINE 875
                           A  2193    
000314 DD7EFE              A  2194    	LD	A,(IX+%FFFFFFFE)
000317 C5E1                A  2195    	LD	HL,BC
000319 77                  A  2196    	LD	(HL),A
                           A  2197    ;  876			return 2;
                           A  2198    .LINE 876
                           A  2199    
00031A 21020000            A  2200    	LD	HL,2
00031E 18 29               A  2201    	JR	L_36
                           A  2202    ;  877		}
000320                     A  2203    L_33:
                           A  2204    .LINE 877
                           A  2205    
                           A  2206    ;  878		if (wc == 0 || szb < 1) return 0;	
                           A  2207    .LINE 878
                           A  2208    
000320 49010000            A  2209    	LD.LIS	BC,0
000324 DD27FE              A  2210    	LD	HL,(IX+%FFFFFFFE)
000327 B7                  A  2211    	OR	A,A
000328 40ED42              A  2212    	SBC.SIS	HL,BC
00032B 28 0C               A  2213    	JR	Z,L_32
00032D 01010000            A  2214    	LD	BC,1
000331 DD270F              A  2215    	LD	HL,(IX+%F)
000334 B7                  A  2216    	OR	A,A
000335 ED42                A  2217    	SBC	HL,BC
000337 30 05               A  2218    	JR	NC,L_35
000339                     A  2219    L_32:
000339 B7                  A  2220    	OR	A,A
00033A ED62                A  2221    	SBC	HL,HL
00033C 18 0B               A  2222    	JR	L_36
00033E                     A  2223    L_35:
                           A  2224    ;  879		*buf++ = (TCHAR)wc;					
                           A  2225    .LINE 879
                           A  2226    
00033E DD7EFE              A  2227    	LD	A,(IX+%FFFFFFFE)
000341 DD270C              A  2228    	LD	HL,(IX+%C)
000344 77                  A  2229    	LD	(HL),A
                           A  2230    ;  880		return 1;
                           A  2231    .LINE 880
                           A  2232    
000345 21010000            A  2233    	LD	HL,1
                           A  2234    ;  881	#endif
                           A  2235    ;  882	}
000349                     A  2236    L_36:
                           A  2237    .LINE 882
                           A  2238    
000349 DDF9                A  2239    	LD	SP,IX
00034B DDE1                A  2240    	POP	IX
00034D C9                  A  2241    	RET	
                           A  2242    
                           A  2243    
                           A  2244    ;**************************** _put_utf ********
                           A  2245    ;Name                         Addr/Register   S
                           A  2246    ;_ff_uni2oem                         IMPORT  --
                           A  2247    ;wc                                    IX-2    
                           A  2248    ;szb                                  IX+15    
                           A  2249    ;buf                                  IX+12    
                           A  2250    ;chr                                   IX+6    
                           A  2251    
                           A  2252    
                           A  2253    ; Stack Frame Size: 20 (bytes)
                           A  2254    ;       Spill Code: -1 (instruction)
                           A  2255    
                           A  2256    
                           A  2257    .ENDFUNC "put_utf",882,"_put_utf"
                           A  2258    ;  883	#endif	/* FF_USE_LFN */
                           A  2259    ;  884	
                           A  2260    ;  885	
                           A  2261    ;  886	#if FF_FS_REENTRANT
                           A  2262    ;  887	/*-------------------------------------
                           A  2263    ;  888	/* Request/Release grant to access the 
                           A  2264    ;  889	/*-------------------------------------
                           A  2265    ;  890	static int lock_fs (		/* 1:Ok, 0:
                           A  2266    ;  891		FATFS* fs		/* Filesystem objec
                           A  2267    ;  892	)
                           A  2268    ;  893	{
                           A  2269    ;  894		return ff_req_grant(fs->sobj);
                           A  2270    ;  895	}
                           A  2271    ;  896	
                           A  2272    ;  897	
                           A  2273    ;  898	static void unlock_fs (
                           A  2274    ;  899		FATFS* fs,		/* Filesystem objec
                           A  2275    ;  900		FRESULT res		/* Result code to b
                           A  2276    ;  901	)
                           A  2277    ;  902	{
                           A  2278    ;  903		if (fs && res != FR_NOT_ENABLED && 
                           A  2279    ;  904			ff_rel_grant(fs->sobj);
                           A  2280    ;  905		}
                           A  2281    ;  906	}
                           A  2282    ;  907	
                           A  2283    ;  908	#endif
                           A  2284    ;  909	
                           A  2285    ;  910	
                           A  2286    ;  911	
                           A  2287    ;  912	#if FF_FS_LOCK != 0
                           A  2288    ;  913	/*-------------------------------------
                           A  2289    ;  914	/* File lock control functions         
                           A  2290    ;  915	/*-------------------------------------
                           A  2291    ;  916	
                           A  2292    ;  917	static FRESULT chk_lock (	/* Check if
                           A  2293    ;  918		DIR* dp,		/* Directory object
                           A  2294    ;  919		int acc			/* Desired access t
                           A  2295    ;  920	)
                           A  2296    ;  921	{
                           A  2297    ;  922		UINT i, be;
                           A  2298    ;  923	
                           A  2299    ;  924		/* Search open object table for the
                           A  2300    ;  925		be = 0;
                           A  2301    ;  926		for (i = 0; i < FF_FS_LOCK; i++) {
                           A  2302    ;  927			if (Files[i].fs) {	/* Existing
                           A  2303    ;  928				if (Files[i].fs == dp->obj.
                           A  2304    ;  929					Files[i].clu == dp->obj
                           A  2305    ;  930					Files[i].ofs == dp->dpt
                           A  2306    ;  931			} else {			/* Blank en
                           A  2307    ;  932				be = 1;
                           A  2308    ;  933			}
                           A  2309    ;  934		}
                           A  2310    ;  935		if (i == FF_FS_LOCK) {	/* The obje
                           A  2311    ;  936			return (!be && acc != 2) ? FR_T
                           A  2312    ;  937		}
                           A  2313    ;  938	
                           A  2314    ;  939		/* The object was opened. Reject an
                           A  2315    ;  940		return (acc != 0 || Files[i].ctr ==
                           A  2316    ;  941	}
                           A  2317    ;  942	
                           A  2318    ;  943	
                           A  2319    ;  944	static int enq_lock (void)	/* Check if
                           A  2320    ;  945	{
                           A  2321    ;  946		UINT i;
                           A  2322    ;  947	
                           A  2323    ;  948		for (i = 0; i < FF_FS_LOCK && Files
                           A  2324    ;  949		return (i == FF_FS_LOCK) ? 0 : 1;
                           A  2325    ;  950	}
                           A  2326    ;  951	
                           A  2327    ;  952	
                           A  2328    ;  953	static UINT inc_lock (	/* Increment ob
                           A  2329    ;  954		DIR* dp,	/* Directory object poi
                           A  2330    ;  955		int acc		/* Desired access (0:Re
                           A  2331    ;  956	)
                           A  2332    ;  957	{
                           A  2333    ;  958		UINT i;
                           A  2334    ;  959	
                           A  2335    ;  960	
                           A  2336    ;  961		for (i = 0; i < FF_FS_LOCK; i++) {	
                           A  2337    ;  962			if (Files[i].fs == dp->obj.fs
                           A  2338    ;  963			 && Files[i].clu == dp->obj.scl
                           A  2339    ;  964			 && Files[i].ofs == dp->dptr) b
                           A  2340    ;  965		}
                           A  2341    ;  966	
                           A  2342    ;  967		if (i == FF_FS_LOCK) {			/* 
                           A  2343    ;  968			for (i = 0; i < FF_FS_LOCK && F
                           A  2344    ;  969			if (i == FF_FS_LOCK) return 0;	
                           A  2345    ;  970			Files[i].fs = dp->obj.fs;
                           A  2346    ;  971			Files[i].clu = dp->obj.sclust;
                           A  2347    ;  972			Files[i].ofs = dp->dptr;
                           A  2348    ;  973			Files[i].ctr = 0;
                           A  2349    ;  974		}
                           A  2350    ;  975	
                           A  2351    ;  976		if (acc >= 1 && Files[i].ctr) retur
                           A  2352    ;  977	
                           A  2353    ;  978		Files[i].ctr = acc ? 0x100 : Files[
                           A  2354    ;  979	
                           A  2355    ;  980		return i + 1;	/* Index number ori
                           A  2356    ;  981	}
                           A  2357    ;  982	
                           A  2358    ;  983	
                           A  2359    ;  984	static FRESULT dec_lock (	/* Decremen
                           A  2360    ;  985		UINT i			/* Semaphore index 
                           A  2361    ;  986	)
                           A  2362    ;  987	{
                           A  2363    ;  988		WORD n;
                           A  2364    ;  989		FRESULT res;
                           A  2365    ;  990	
                           A  2366    ;  991	
                           A  2367    ;  992		if (--i < FF_FS_LOCK) {	/* Index nu
                           A  2368    ;  993			n = Files[i].ctr;
                           A  2369    ;  994			if (n == 0x100) n = 0;	/* If w
                           A  2370    ;  995			if (n > 0) n--;			/* Decr
                           A  2371    ;  996			Files[i].ctr = n;
                           A  2372    ;  997			if (n == 0) Files[i].fs = 0;	
                           A  2373    ;  998			res = FR_OK;
                           A  2374    ;  999		} else {
                           A  2375    ; 1000			res = FR_INT_ERR;		/* Inva
                           A  2376    ; 1001		}
                           A  2377    ; 1002		return res;
                           A  2378    ; 1003	}
                           A  2379    ; 1004	
                           A  2380    ; 1005	
                           A  2381    ; 1006	static void clear_lock (	/* Clear lo
                           A  2382    ; 1007		FATFS *fs
                           A  2383    ; 1008	)
                           A  2384    ; 1009	{
                           A  2385    ; 1010		UINT i;
                           A  2386    ; 1011	
                           A  2387    ; 1012		for (i = 0; i < FF_FS_LOCK; i++) {
                           A  2388    ; 1013			if (Files[i].fs == fs) Files[i]
                           A  2389    ; 1014		}
                           A  2390    ; 1015	}
                           A  2391    ; 1016	
                           A  2392    ; 1017	#endif	/* FF_FS_LOCK != 0 */
                           A  2393    ; 1018	
                           A  2394    ; 1019	
                           A  2395    ; 1020	
                           A  2396    ; 1021	/*-------------------------------------
                           A  2397    ; 1022	/* Move/Flush disk access window in the
                           A  2398    ; 1023	/*-------------------------------------
                           A  2399    ; 1024	#if !FF_FS_READONLY
                           A  2400    ; 1025	static FRESULT sync_window (	/* Retu
                           A  2401    ; 1026		FATFS* fs			/* Filesystem o
                           A  2402    ; 1027	)
                           A  2403    ; 1028	{
00034E                     A  2404    _sync_window:
                           A  2405    .DEFINE "_sync_window"
                           A  2406    
                           A  2407    .VALUE _sync_window
                           A  2408    
                           A  2409    .CLASS 3
                           A  2410    
                           A  2411    .TYPE 68
                           A  2412    
                           A  2413    .ENDEF
                           A  2414    
                           A  2415    .BEGFUNC "sync_window",1028,"_sync_window"
                           A  2416    
                           A  2417    .LINE 1028
                           A  2418    
                           A  2419    .DEFINE "fs"
                           A  2420    
                           A  2421    .CLASS 65
                           A  2422    
                           A  2423    .VALUE 6
                           A  2424    
                           A  2425    .TAG "NONAME0"
                           A  2426    
                           A  2427    .TYPE 40
                           A  2428    
                           A  2429    .ENDEF
                           A  2430    
                           A  2431    .DEFINE "res"
                           A  2432    
                           A  2433    .CLASS 65
                           A  2434    
                           A  2435    .VALUE -3
                           A  2436    
                           A  2437    .TYPE 4
                           A  2438    
                           A  2439    .ENDEF
                           A  2440    
00034E DDE5                A  2441    	PUSH	IX
000350 DD210000 00         A  2442    	LD	IX,0
000355 DD39                A  2443    	ADD	IX,SP
000357 ED22F5              A  2444    	LEA	HL,IX+%FFFFFFF5
00035A F9                  A  2445    	LD	SP,HL
                           A  2446    ; 1029		FRESULT res = FR_OK;
                           A  2447    .LINE 1029
                           A  2448    
00035B 01000000            A  2449    	LD	BC,0
00035F DD0FFD              A  2450    	LD	(IX+%FFFFFFFD),BC
                           A  2451    ; 1030	
                           A  2452    ; 1031	
                           A  2453    ; 1032		if (fs->wflag) {	/* Is the disk 
                           A  2454    .LINE 1032
                           A  2455    
000362 DD3106              A  2456    	LD	IY,(IX+%6)
000365 FD7E03              A  2457    	LD	A,(IY+%3)
000368 B7                  A  2458    	OR	A,A
000369 CA 16 04 00         A  2459    	JR	Z,L_42
                           A  2460    ; 1033			if (disk_write(fs->pdrv, fs->wi
                           A  2461    .LINE 1033
                           A  2462    
00036D 01010000            A  2463    	LD	BC,1
000371 C5                  A  2464    	PUSH	BC
000372 DD3106              A  2465    	LD	IY,(IX+%6)
000375 FD072E              A  2466    	LD	BC,(IY+%2E)
000378 FD7E31              A  2467    	LD	A,(IY+%31)
00037B 2600                A  2468    	LD	H,%0
00037D 6F                  A  2469    	LD	L,A
00037E E5                  A  2470    	PUSH	HL
00037F C5                  A  2471    	PUSH	BC
000380 ED6632              A  2472    	PEA	IY+%32
000383 FD4E01              A  2473    	LD	C,(IY+%1)
000386 0600                A  2474    	LD	B,%0
000388 C5                  A  2475    	PUSH	BC
000389 CD 00 00 00         A  2476    	CALL	_disk_write
00038D C1                  A  2477    	POP	BC
00038E C1                  A  2478    	POP	BC
00038F C1                  A  2479    	POP	BC
000390 C1                  A  2480    	POP	BC
000391 C1                  A  2481    	POP	BC
000392 01000000            A  2482    	LD	BC,0
000396 B7                  A  2483    	OR	A,A
000397 ED42                A  2484    	SBC	HL,BC
000399 20 74               A  2485    	JR	NZ,L_40
                           A  2486    ; 1034				fs->wflag = 0;	/* Clear wi
                           A  2487    .LINE 1034
                           A  2488    
00039B DD3106              A  2489    	LD	IY,(IX+%6)
00039E FD360300            A  2490    	LD	(IY+%3),%0
                           A  2491    ; 1035				if (fs->winsect - fs->fatba
                           A  2492    .LINE 1035
                           A  2493    
0003A2 FD072E              A  2494    	LD	BC,(IY+%2E)
0003A5 FD7E31              A  2495    	LD	A,(IY+%31)
0003A8 DD0FF5              A  2496    	LD	(IX+%FFFFFFF5),BC
0003AB DD77F8              A  2497    	LD	(IX+%FFFFFFF8),A
0003AE FD071A              A  2498    	LD	BC,(IY+%1A)
0003B1 FD7E1D              A  2499    	LD	A,(IY+%1D)
0003B4 DD0FF9              A  2500    	LD	(IX+%FFFFFFF9),BC
0003B7 DD77FC              A  2501    	LD	(IX+%FFFFFFFC),A
0003BA DD27F5              A  2502    	LD	HL,(IX+%FFFFFFF5)
0003BD DD5EF8              A  2503    	LD	E,(IX+%FFFFFFF8)
0003C0 FD0722              A  2504    	LD	BC,(IY+%22)
0003C3 FD7E25              A  2505    	LD	A,(IY+%25)
0003C6 CD 00 00 00         A  2506    	CALL	__lsub
0003CA DD07F9              A  2507    	LD	BC,(IX+%FFFFFFF9)
0003CD DD7EFC              A  2508    	LD	A,(IX+%FFFFFFFC)
0003D0 CD 00 00 00         A  2509    	CALL	__lcmpu
0003D4 30 40               A  2510    	JR	NC,L_42
                           A  2511    ; 1036					if (fs->n_fats == 2) di
                           A  2512    .LINE 1036
                           A  2513    
0003D6 DD3106              A  2514    	LD	IY,(IX+%6)
0003D9 FD7E02              A  2515    	LD	A,(IY+%2)
0003DC FE02                A  2516    	CP	A,%2
0003DE 20 36               A  2517    	JR	NZ,L_42
0003E0 01010000            A  2518    	LD	BC,1
0003E4 C5                  A  2519    	PUSH	BC
0003E5 DD27F9              A  2520    	LD	HL,(IX+%FFFFFFF9)
0003E8 DD5EFC              A  2521    	LD	E,(IX+%FFFFFFFC)
0003EB DD07F5              A  2522    	LD	BC,(IX+%FFFFFFF5)
0003EE DD7EF8              A  2523    	LD	A,(IX+%FFFFFFF8)
0003F1 CD 00 00 00         A  2524    	CALL	__ladd
0003F5 4B                  A  2525    	LD	C,E
0003F6 0600                A  2526    	LD	B,%0
0003F8 C5                  A  2527    	PUSH	BC
0003F9 E5                  A  2528    	PUSH	HL
0003FA DD3106              A  2529    	LD	IY,(IX+%6)
0003FD ED6632              A  2530    	PEA	IY+%32
000400 FD4E01              A  2531    	LD	C,(IY+%1)
000403 C5                  A  2532    	PUSH	BC
000404 CD 00 00 00         A  2533    	CALL	_disk_write
000408 C1                  A  2534    	POP	BC
000409 C1                  A  2535    	POP	BC
00040A C1                  A  2536    	POP	BC
00040B C1                  A  2537    	POP	BC
00040C C1                  A  2538    	POP	BC
                           A  2539    ; 1037				}
                           A  2540    ; 1038			} else {
                           A  2541    .LINE 1038
                           A  2542    
00040D 18 07               A  2543    	JR	L_42
00040F                     A  2544    L_40:
                           A  2545    ; 1039				res = FR_DISK_ERR;
                           A  2546    .LINE 1039
                           A  2547    
00040F 01010000            A  2548    	LD	BC,1
000413 DD0FFD              A  2549    	LD	(IX+%FFFFFFFD),BC
                           A  2550    ; 1040			}
                           A  2551    ; 1041		}
000416                     A  2552    L_42:
                           A  2553    .LINE 1041
                           A  2554    
                           A  2555    ; 1042		return res;
                           A  2556    .LINE 1042
                           A  2557    
000416 DD27FD              A  2558    	LD	HL,(IX+%FFFFFFFD)
                           A  2559    ; 1043	}
                           A  2560    .LINE 1043
                           A  2561    
000419 DDF9                A  2562    	LD	SP,IX
00041B DDE1                A  2563    	POP	IX
00041D C9                  A  2564    	RET	
                           A  2565    
                           A  2566    
                           A  2567    ;**************************** _sync_window ****
                           A  2568    ;Name                         Addr/Register   S
                           A  2569    ;_disk_write                         IMPORT  --
                           A  2570    ;G_0                                  IX-11    
                           A  2571    ;G_1                                   IX-7    
                           A  2572    ;res                                   IX-3    
                           A  2573    ;fs                                    IX+6    
                           A  2574    
                           A  2575    
                           A  2576    ; Stack Frame Size: 20 (bytes)
                           A  2577    ;       Spill Code: -1 (instruction)
                           A  2578    
                           A  2579    
                           A  2580    .ENDFUNC "sync_window",1043,"_sync_window"
                           A  2581    ; 1044	#endif
                           A  2582    ; 1045	
                           A  2583    ; 1046	
                           A  2584    ; 1047	static FRESULT move_window (	/* Retu
                           A  2585    ; 1048		FATFS* fs,		/* Filesystem objec
                           A  2586    ; 1049		LBA_t sect		/* Sector LBA to ma
                           A  2587    ; 1050	)
                           A  2588    ; 1051	{
00041E                     A  2589    _move_window:
                           A  2590    .DEFINE "_move_window"
                           A  2591    
                           A  2592    .VALUE _move_window
                           A  2593    
                           A  2594    .CLASS 3
                           A  2595    
                           A  2596    .TYPE 68
                           A  2597    
                           A  2598    .ENDEF
                           A  2599    
                           A  2600    .BEGFUNC "move_window",1051,"_move_window"
                           A  2601    
                           A  2602    .LINE 1051
                           A  2603    
                           A  2604    .DEFINE "fs"
                           A  2605    
                           A  2606    .CLASS 65
                           A  2607    
                           A  2608    .VALUE 6
                           A  2609    
                           A  2610    .TAG "NONAME0"
                           A  2611    
                           A  2612    .TYPE 40
                           A  2613    
                           A  2614    .ENDEF
                           A  2615    
                           A  2616    .DEFINE "sect"
                           A  2617    
                           A  2618    .CLASS 65
                           A  2619    
                           A  2620    .VALUE 9
                           A  2621    
                           A  2622    .TYPE 15
                           A  2623    
                           A  2624    .ENDEF
                           A  2625    
                           A  2626    .DEFINE "res"
                           A  2627    
                           A  2628    .CLASS 65
                           A  2629    
                           A  2630    .VALUE -3
                           A  2631    
                           A  2632    .TYPE 4
                           A  2633    
                           A  2634    .ENDEF
                           A  2635    
00041E DDE5                A  2636    	PUSH	IX
000420 DD210000 00         A  2637    	LD	IX,0
000425 DD39                A  2638    	ADD	IX,SP
000427 C5                  A  2639    	PUSH	BC
                           A  2640    ; 1052		FRESULT res = FR_OK;
                           A  2641    .LINE 1052
                           A  2642    
000428 01000000            A  2643    	LD	BC,0
00042C DD0FFD              A  2644    	LD	(IX+%FFFFFFFD),BC
                           A  2645    ; 1053	
                           A  2646    ; 1054	
                           A  2647    ; 1055		if (sect != fs->winsect) {	/* Wind
                           A  2648    .LINE 1055
                           A  2649    
00042F DD3106              A  2650    	LD	IY,(IX+%6)
000432 FD272E              A  2651    	LD	HL,(IY+%2E)
000435 FD5E31              A  2652    	LD	E,(IY+%31)
000438 DD0709              A  2653    	LD	BC,(IX+%9)
00043B DD7E0C              A  2654    	LD	A,(IX+%C)
00043E CD 00 00 00         A  2655    	CALL	__lcmpu
000442 28 67               A  2656    	JR	Z,L_48
                           A  2657    ; 1056	#if !FF_FS_READONLY
                           A  2658    ; 1057			res = sync_window(fs);		/* 
                           A  2659    .LINE 1057
                           A  2660    
000444 DD0706              A  2661    	LD	BC,(IX+%6)
000447 C5                  A  2662    	PUSH	BC
000448 CD 4E 03 00         A  2663    	CALL	_sync_window
00044C C1                  A  2664    	POP	BC
00044D DD2FFD              A  2665    	LD	(IX+%FFFFFFFD),HL
                           A  2666    ; 1058	#endif
                           A  2667    ; 1059			if (res == FR_OK) {			/* 
                           A  2668    .LINE 1059
                           A  2669    
000450 01000000            A  2670    	LD	BC,0
000454 DD27FD              A  2671    	LD	HL,(IX+%FFFFFFFD)
000457 B7                  A  2672    	OR	A,A
000458 ED42                A  2673    	SBC	HL,BC
00045A 20 4F               A  2674    	JR	NZ,L_48
                           A  2675    ; 1060				if (disk_read(fs->pdrv, fs-
                           A  2676    .LINE 1060
                           A  2677    
00045C 01010000            A  2678    	LD	BC,1
000460 C5                  A  2679    	PUSH	BC
000461 DD4E0C              A  2680    	LD	C,(IX+%C)
000464 0600                A  2681    	LD	B,%0
000466 C5                  A  2682    	PUSH	BC
000467 DD0709              A  2683    	LD	BC,(IX+%9)
00046A C5                  A  2684    	PUSH	BC
00046B DD3106              A  2685    	LD	IY,(IX+%6)
00046E ED6632              A  2686    	PEA	IY+%32
000471 FD4E01              A  2687    	LD	C,(IY+%1)
000474 0600                A  2688    	LD	B,%0
000476 C5                  A  2689    	PUSH	BC
000477 CD 00 00 00         A  2690    	CALL	_disk_read
00047B C1                  A  2691    	POP	BC
00047C C1                  A  2692    	POP	BC
00047D C1                  A  2693    	POP	BC
00047E C1                  A  2694    	POP	BC
00047F C1                  A  2695    	POP	BC
000480 01000000            A  2696    	LD	BC,0
000484 B7                  A  2697    	OR	A,A
000485 ED42                A  2698    	SBC	HL,BC
000487 28 13               A  2699    	JR	Z,L_45
                           A  2700    ; 1061					sect = (LBA_t)0 - 1;	
                           A  2701    .LINE 1061
                           A  2702    
000489 01FFFFFF            A  2703    	LD	BC,16777215
00048D 3EFF                A  2704    	LD	A,%FF
00048F DD0F09              A  2705    	LD	(IX+%9),BC
000492 DD770C              A  2706    	LD	(IX+%C),A
                           A  2707    ; 1062					res = FR_DISK_ERR;
                           A  2708    .LINE 1062
                           A  2709    
000495 01010000            A  2710    	LD	BC,1
000499 DD0FFD              A  2711    	LD	(IX+%FFFFFFFD),BC
                           A  2712    ; 1063				}
00049C                     A  2713    L_45:
                           A  2714    .LINE 1063
                           A  2715    
                           A  2716    ; 1064				fs->winsect = sect;
                           A  2717    .LINE 1064
                           A  2718    
00049C DD0709              A  2719    	LD	BC,(IX+%9)
00049F DD7E0C              A  2720    	LD	A,(IX+%C)
0004A2 DD3106              A  2721    	LD	IY,(IX+%6)
0004A5 FD0F2E              A  2722    	LD	(IY+%2E),BC
0004A8 FD7731              A  2723    	LD	(IY+%31),A
                           A  2724    ; 1065			}
                           A  2725    ; 1066		}
0004AB                     A  2726    L_48:
                           A  2727    .LINE 1066
                           A  2728    
                           A  2729    ; 1067		return res;
                           A  2730    .LINE 1067
                           A  2731    
0004AB DD27FD              A  2732    	LD	HL,(IX+%FFFFFFFD)
                           A  2733    ; 1068	}
                           A  2734    .LINE 1068
                           A  2735    
0004AE DDF9                A  2736    	LD	SP,IX
0004B0 DDE1                A  2737    	POP	IX
0004B2 C9                  A  2738    	RET	
                           A  2739    
                           A  2740    
                           A  2741    ;**************************** _move_window ****
                           A  2742    ;Name                         Addr/Register   S
                           A  2743    ;_disk_read                          IMPORT  --
                           A  2744    ;res                                   IX-3    
                           A  2745    ;sect                                  IX+9    
                           A  2746    ;fs                                    IX+6    
                           A  2747    
                           A  2748    
                           A  2749    ; Stack Frame Size: 18 (bytes)
                           A  2750    ;       Spill Code: -1 (instruction)
                           A  2751    
                           A  2752    
                           A  2753    .ENDFUNC "move_window",1068,"_move_window"
                           A  2754    ; 1069	
                           A  2755    ; 1070	
                           A  2756    ; 1071	
                           A  2757    ; 1072	
                           A  2758    ; 1073	#if !FF_FS_READONLY
                           A  2759    ; 1074	/*-------------------------------------
                           A  2760    ; 1075	/* Synchronize filesystem and data on t
                           A  2761    ; 1076	/*-------------------------------------
                           A  2762    ; 1077	
                           A  2763    ; 1078	static FRESULT sync_fs (	/* Returns 
                           A  2764    ; 1079		FATFS* fs		/* Filesystem objec
                           A  2765    ; 1080	)
                           A  2766    ; 1081	{
0004B3                     A  2767    _sync_fs:
                           A  2768    .DEFINE "_sync_fs"
                           A  2769    
                           A  2770    .VALUE _sync_fs
                           A  2771    
                           A  2772    .CLASS 3
                           A  2773    
                           A  2774    .TYPE 68
                           A  2775    
                           A  2776    .ENDEF
                           A  2777    
                           A  2778    .BEGFUNC "sync_fs",1081,"_sync_fs"
                           A  2779    
                           A  2780    .LINE 1081
                           A  2781    
                           A  2782    .DEFINE "fs"
                           A  2783    
                           A  2784    .CLASS 65
                           A  2785    
                           A  2786    .VALUE 6
                           A  2787    
                           A  2788    .TAG "NONAME0"
                           A  2789    
                           A  2790    .TYPE 40
                           A  2791    
                           A  2792    .ENDEF
                           A  2793    
                           A  2794    .DEFINE "res"
                           A  2795    
                           A  2796    .CLASS 65
                           A  2797    
                           A  2798    .VALUE -3
                           A  2799    
                           A  2800    .TYPE 4
                           A  2801    
                           A  2802    .ENDEF
                           A  2803    
0004B3 DDE5                A  2804    	PUSH	IX
0004B5 DD210000 00         A  2805    	LD	IX,0
0004BA DD39                A  2806    	ADD	IX,SP
0004BC C5                  A  2807    	PUSH	BC
                           A  2808    ; 1082		FRESULT res;
                           A  2809    ; 1083	
                           A  2810    ; 1084	
                           A  2811    ; 1085		res = sync_window(fs);
                           A  2812    .LINE 1085
                           A  2813    
0004BD DD0706              A  2814    	LD	BC,(IX+%6)
0004C0 C5                  A  2815    	PUSH	BC
0004C1 CD 4E 03 00         A  2816    	CALL	_sync_window
0004C5 C1                  A  2817    	POP	BC
0004C6 DD2FFD              A  2818    	LD	(IX+%FFFFFFFD),HL
                           A  2819    ; 1086		if (res == FR_OK) {
                           A  2820    .LINE 1086
                           A  2821    
0004C9 01000000            A  2822    	LD	BC,0
0004CD DD27FD              A  2823    	LD	HL,(IX+%FFFFFFFD)
0004D0 B7                  A  2824    	OR	A,A
0004D1 ED42                A  2825    	SBC	HL,BC
0004D3 C2 F1 05 00         A  2826    	JR	NZ,L_55
                           A  2827    ; 1087			if (fs->fs_type == FS_FAT32 && 
                           A  2828    .LINE 1087
                           A  2829    
0004D7 DD3106              A  2830    	LD	IY,(IX+%6)
0004DA FD7E00              A  2831    	LD	A,(IY+%0)
0004DD FE03                A  2832    	CP	A,%3
0004DF C2 CB 05 00         A  2833    	JR	NZ,L_53
0004E3 DD3106              A  2834    	LD	IY,(IX+%6)
0004E6 FD7E04              A  2835    	LD	A,(IY+%4)
0004E9 FE01                A  2836    	CP	A,%1
0004EB C2 CB 05 00         A  2837    	JR	NZ,L_53
                           A  2838    ; 1088				/* Create FSInfo structure 
                           A  2839    ; 1089				memset(fs->win, 0, sizeof f
                           A  2840    .LINE 1089
                           A  2841    
0004EF 01000200            A  2842    	LD	BC,512
0004F3 C5                  A  2843    	PUSH	BC
0004F4 01000000            A  2844    	LD	BC,0
0004F8 C5                  A  2845    	PUSH	BC
0004F9 DD3106              A  2846    	LD	IY,(IX+%6)
0004FC ED6632              A  2847    	PEA	IY+%32
0004FF CD 00 00 00         A  2848    	CALL	_memset
000503 C1                  A  2849    	POP	BC
000504 C1                  A  2850    	POP	BC
000505 C1                  A  2851    	POP	BC
                           A  2852    ; 1090				st_word(fs->win + BS_55AA, 
                           A  2853    .LINE 1090
                           A  2854    
000506 0155AA00            A  2855    	LD	BC,43605
00050A C5                  A  2856    	PUSH	BC
00050B 01FE0100            A  2857    	LD	BC,510
00050F DD3106              A  2858    	LD	IY,(IX+%6)
000512 ED2332              A  2859    	LEA	HL,IY+%32
000515 09                  A  2860    	ADD	HL,BC
000516 E5                  A  2861    	PUSH	HL
000517 CD 06 01 00         A  2862    	CALL	_st_word
00051B C1                  A  2863    	POP	BC
00051C C1                  A  2864    	POP	BC
                           A  2865    ; 1091				st_dword(fs->win + FSI_Lead
                           A  2866    .LINE 1091
                           A  2867    
00051D 01410000            A  2868    	LD	BC,65
000521 C5                  A  2869    	PUSH	BC
000522 01525261            A  2870    	LD	BC,6378066
000526 C5                  A  2871    	PUSH	BC
000527 DD3106              A  2872    	LD	IY,(IX+%6)
00052A ED6632              A  2873    	PEA	IY+%32
00052D CD 45 01 00         A  2874    	CALL	_st_dword
000531 C1                  A  2875    	POP	BC
000532 C1                  A  2876    	POP	BC
000533 C1                  A  2877    	POP	BC
                           A  2878    ; 1092				st_dword(fs->win + FSI_Stru
                           A  2879    .LINE 1092
                           A  2880    
000534 01610000            A  2881    	LD	BC,97
000538 C5                  A  2882    	PUSH	BC
000539 01727241            A  2883    	LD	BC,4289138
00053D C5                  A  2884    	PUSH	BC
00053E 01E40100            A  2885    	LD	BC,484
000542 DD3106              A  2886    	LD	IY,(IX+%6)
000545 ED2332              A  2887    	LEA	HL,IY+%32
000548 09                  A  2888    	ADD	HL,BC
000549 E5                  A  2889    	PUSH	HL
00054A CD 45 01 00         A  2890    	CALL	_st_dword
00054E C1                  A  2891    	POP	BC
00054F C1                  A  2892    	POP	BC
000550 C1                  A  2893    	POP	BC
                           A  2894    ; 1093				st_dword(fs->win + FSI_Free
                           A  2895    .LINE 1093
                           A  2896    
000551 DD3106              A  2897    	LD	IY,(IX+%6)
000554 FD0712              A  2898    	LD	BC,(IY+%12)
000557 FD7E15              A  2899    	LD	A,(IY+%15)
00055A 2600                A  2900    	LD	H,%0
00055C 6F                  A  2901    	LD	L,A
00055D E5                  A  2902    	PUSH	HL
00055E C5                  A  2903    	PUSH	BC
00055F 01E80100            A  2904    	LD	BC,488
000563 ED2332              A  2905    	LEA	HL,IY+%32
000566 09                  A  2906    	ADD	HL,BC
000567 E5                  A  2907    	PUSH	HL
000568 CD 45 01 00         A  2908    	CALL	_st_dword
00056C C1                  A  2909    	POP	BC
00056D C1                  A  2910    	POP	BC
00056E C1                  A  2911    	POP	BC
                           A  2912    ; 1094				st_dword(fs->win + FSI_Nxt_
                           A  2913    .LINE 1094
                           A  2914    
00056F DD3106              A  2915    	LD	IY,(IX+%6)
000572 FD070E              A  2916    	LD	BC,(IY+%E)
000575 FD7E11              A  2917    	LD	A,(IY+%11)
000578 2600                A  2918    	LD	H,%0
00057A 6F                  A  2919    	LD	L,A
00057B E5                  A  2920    	PUSH	HL
00057C C5                  A  2921    	PUSH	BC
00057D 01EC0100            A  2922    	LD	BC,492
000581 ED2332              A  2923    	LEA	HL,IY+%32
000584 09                  A  2924    	ADD	HL,BC
000585 E5                  A  2925    	PUSH	HL
000586 CD 45 01 00         A  2926    	CALL	_st_dword
00058A C1                  A  2927    	POP	BC
00058B C1                  A  2928    	POP	BC
00058C C1                  A  2929    	POP	BC
                           A  2930    ; 1095				fs->winsect = fs->volbase +
                           A  2931    .LINE 1095
                           A  2932    
00058D DD3106              A  2933    	LD	IY,(IX+%6)
000590 FD271E              A  2934    	LD	HL,(IY+%1E)
000593 FD5E21              A  2935    	LD	E,(IY+%21)
000596 3E01                A  2936    	LD	A,%1
000598 CD 00 00 00         A  2937    	CALL	__ladd_b
00059C FD2F2E              A  2938    	LD	(IY+%2E),HL
00059F FD7331              A  2939    	LD	(IY+%31),E
                           A  2940    ; 1096				disk_write(fs->pdrv, fs->wi
                           A  2941    .LINE 1096
                           A  2942    
0005A2 01010000            A  2943    	LD	BC,1
0005A6 C5                  A  2944    	PUSH	BC
0005A7 FD072E              A  2945    	LD	BC,(IY+%2E)
0005AA FD7E31              A  2946    	LD	A,(IY+%31)
0005AD 2600                A  2947    	LD	H,%0
0005AF 6F                  A  2948    	LD	L,A
0005B0 E5                  A  2949    	PUSH	HL
0005B1 C5                  A  2950    	PUSH	BC
0005B2 ED6632              A  2951    	PEA	IY+%32
0005B5 FD4E01              A  2952    	LD	C,(IY+%1)
0005B8 0600                A  2953    	LD	B,%0
0005BA C5                  A  2954    	PUSH	BC
0005BB CD 00 00 00         A  2955    	CALL	_disk_write
0005BF C1                  A  2956    	POP	BC
0005C0 C1                  A  2957    	POP	BC
0005C1 C1                  A  2958    	POP	BC
0005C2 C1                  A  2959    	POP	BC
0005C3 C1                  A  2960    	POP	BC
                           A  2961    ; 1097				fs->fsi_flag = 0;
                           A  2962    .LINE 1097
                           A  2963    
0005C4 DD3106              A  2964    	LD	IY,(IX+%6)
0005C7 FD360400            A  2965    	LD	(IY+%4),%0
                           A  2966    ; 1098			}
0005CB                     A  2967    L_53:
                           A  2968    .LINE 1098
                           A  2969    
                           A  2970    ; 1099			/* Make sure that no pending wr
                           A  2971    ; 1100			if (disk_ioctl(fs->pdrv, CTRL_S
                           A  2972    .LINE 1100
                           A  2973    
0005CB 01000000            A  2974    	LD	BC,0
0005CF C5                  A  2975    	PUSH	BC
0005D0 C5                  A  2976    	PUSH	BC
0005D1 DD3106              A  2977    	LD	IY,(IX+%6)
0005D4 FD4E01              A  2978    	LD	C,(IY+%1)
0005D7 0600                A  2979    	LD	B,%0
0005D9 C5                  A  2980    	PUSH	BC
0005DA CD 00 00 00         A  2981    	CALL	_disk_ioctl
0005DE C1                  A  2982    	POP	BC
0005DF C1                  A  2983    	POP	BC
0005E0 C1                  A  2984    	POP	BC
0005E1 01000000            A  2985    	LD	BC,0
0005E5 B7                  A  2986    	OR	A,A
0005E6 ED42                A  2987    	SBC	HL,BC
0005E8 28 07               A  2988    	JR	Z,L_55
0005EA 01010000            A  2989    	LD	BC,1
0005EE DD0FFD              A  2990    	LD	(IX+%FFFFFFFD),BC
                           A  2991    ; 1101		}
0005F1                     A  2992    L_55:
                           A  2993    .LINE 1101
                           A  2994    
                           A  2995    ; 1102	
                           A  2996    ; 1103		return res;
                           A  2997    .LINE 1103
                           A  2998    
0005F1 DD27FD              A  2999    	LD	HL,(IX+%FFFFFFFD)
                           A  3000    ; 1104	}
                           A  3001    .LINE 1104
                           A  3002    
0005F4 DDF9                A  3003    	LD	SP,IX
0005F6 DDE1                A  3004    	POP	IX
0005F8 C9                  A  3005    	RET	
                           A  3006    
                           A  3007    
                           A  3008    ;**************************** _sync_fs ********
                           A  3009    ;Name                         Addr/Register   S
                           A  3010    ;_disk_ioctl                         IMPORT  --
                           A  3011    ;_disk_write                         IMPORT  --
                           A  3012    ;_memset                             IMPORT  --
                           A  3013    ;res                                   IX-3    
                           A  3014    ;fs                                    IX+6    
                           A  3015    
                           A  3016    
                           A  3017    ; Stack Frame Size: 12 (bytes)
                           A  3018    ;       Spill Code: -1 (instruction)
                           A  3019    
                           A  3020    
                           A  3021    .ENDFUNC "sync_fs",1104,"_sync_fs"
                           A  3022    ; 1105	
                           A  3023    ; 1106	#endif
                           A  3024    ; 1107	
                           A  3025    ; 1108	
                           A  3026    ; 1109	
                           A  3027    ; 1110	/*-------------------------------------
                           A  3028    ; 1111	/* Get physical sector number from clus
                           A  3029    ; 1112	/*-------------------------------------
                           A  3030    ; 1113	
                           A  3031    ; 1114	static LBA_t clst2sect (	/* !=0:Sect
                           A  3032    ; 1115		FATFS* fs,		/* Filesystem objec
                           A  3033    ; 1116		DWORD clst		/* Cluster# to be c
                           A  3034    ; 1117	)
                           A  3035    ; 1118	{
0005F9                     A  3036    _clst2sect:
                           A  3037    .DEFINE "_clst2sect"
                           A  3038    
                           A  3039    .VALUE _clst2sect
                           A  3040    
                           A  3041    .CLASS 3
                           A  3042    
                           A  3043    .TYPE 79
                           A  3044    
                           A  3045    .ENDEF
                           A  3046    
                           A  3047    .BEGFUNC "clst2sect",1118,"_clst2sect"
                           A  3048    
                           A  3049    .LINE 1118
                           A  3050    
                           A  3051    .DEFINE "fs"
                           A  3052    
                           A  3053    .CLASS 65
                           A  3054    
                           A  3055    .VALUE 6
                           A  3056    
                           A  3057    .TAG "NONAME0"
                           A  3058    
                           A  3059    .TYPE 40
                           A  3060    
                           A  3061    .ENDEF
                           A  3062    
                           A  3063    .DEFINE "clst"
                           A  3064    
                           A  3065    .CLASS 65
                           A  3066    
                           A  3067    .VALUE 9
                           A  3068    
                           A  3069    .TYPE 15
                           A  3070    
                           A  3071    .ENDEF
                           A  3072    
0005F9 DDE5                A  3073    	PUSH	IX
0005FB DD210000 00         A  3074    	LD	IX,0
000600 DD39                A  3075    	ADD	IX,SP
                           A  3076    ; 1119		clst -= 2;		/* Cluster number i
                           A  3077    .LINE 1119
                           A  3078    
000602 DD2709              A  3079    	LD	HL,(IX+%9)
000605 DD5E0C              A  3080    	LD	E,(IX+%C)
000608 01020000            A  3081    	LD	BC,2
00060C AF                  A  3082    	XOR	A,A
00060D CD 00 00 00         A  3083    	CALL	__lsub
000611 DD2F09              A  3084    	LD	(IX+%9),HL
000614 DD730C              A  3085    	LD	(IX+%C),E
                           A  3086    ; 1120		if (clst >= fs->n_fatent - 2) retur
                           A  3087    .LINE 1120
                           A  3088    
000617 DD3106              A  3089    	LD	IY,(IX+%6)
00061A FD2716              A  3090    	LD	HL,(IY+%16)
00061D FD5E19              A  3091    	LD	E,(IY+%19)
000620 01020000            A  3092    	LD	BC,2
000624 AF                  A  3093    	XOR	A,A
000625 CD 00 00 00         A  3094    	CALL	__lsub
000629 7B                  A  3095    	LD	A,E
00062A E5C1                A  3096    	LD	BC,HL
00062C DD2709              A  3097    	LD	HL,(IX+%9)
00062F DD5E0C              A  3098    	LD	E,(IX+%C)
000632 CD 00 00 00         A  3099    	CALL	__lcmpu
000636 38 07               A  3100    	JR	C,L_58
000638 B7                  A  3101    	OR	A,A
000639 ED62                A  3102    	SBC	HL,HL
00063B 1E00                A  3103    	LD	E,%0
00063D 18 20               A  3104    	JR	L_59
00063F                     A  3105    L_58:
                           A  3106    ; 1121		return fs->database + (LBA_t)fs->cs
                           A  3107    .LINE 1121
                           A  3108    
00063F DD3106              A  3109    	LD	IY,(IX+%6)
000642 FD0709              A  3110    	LD	BC,(IY+%9)
000645 CD 00 00 00         A  3111    	CALL	__stoiu
000649 1E00                A  3112    	LD	E,%0
00064B DD0709              A  3113    	LD	BC,(IX+%9)
00064E DD7E0C              A  3114    	LD	A,(IX+%C)
000651 CD 00 00 00         A  3115    	CALL	__lmulu
000655 FD072A              A  3116    	LD	BC,(IY+%2A)
000658 FD7E2D              A  3117    	LD	A,(IY+%2D)
00065B CD 00 00 00         A  3118    	CALL	__ladd
                           A  3119    ; 1122	}
00065F                     A  3120    L_59:
                           A  3121    .LINE 1122
                           A  3122    
00065F DDF9                A  3123    	LD	SP,IX
000661 DDE1                A  3124    	POP	IX
000663 C9                  A  3125    	RET	
                           A  3126    
                           A  3127    
                           A  3128    ;**************************** _clst2sect ******
                           A  3129    ;Name                         Addr/Register   S
                           A  3130    ;clst                                  IX+9    
                           A  3131    ;fs                                    IX+6    
                           A  3132    
                           A  3133    
                           A  3134    ; Stack Frame Size: 15 (bytes)
                           A  3135    ;       Spill Code: -1 (instruction)
                           A  3136    
                           A  3137    
                           A  3138    .ENDFUNC "clst2sect",1122,"_clst2sect"
                           A  3139    ; 1123	
                           A  3140    ; 1124	
                           A  3141    ; 1125	
                           A  3142    ; 1126	
                           A  3143    ; 1127	/*-------------------------------------
                           A  3144    ; 1128	/* FAT access - Read value of an FAT en
                           A  3145    ; 1129	/*-------------------------------------
                           A  3146    ; 1130	
                           A  3147    ; 1131	static DWORD get_fat (		/* 0xFFFFFF
                           A  3148    ; 1132		FFOBJID* obj,	/* Corresponding ob
                           A  3149    ; 1133		DWORD clst		/* Cluster number t
                           A  3150    ; 1134	)
                           A  3151    ; 1135	{
000664                     A  3152    _get_fat:
                           A  3153    .DEFINE "_get_fat"
                           A  3154    
                           A  3155    .VALUE _get_fat
                           A  3156    
                           A  3157    .CLASS 3
                           A  3158    
                           A  3159    .TYPE 79
                           A  3160    
                           A  3161    .ENDEF
                           A  3162    
                           A  3163    .BEGFUNC "get_fat",1135,"_get_fat"
                           A  3164    
                           A  3165    .LINE 1135
                           A  3166    
                           A  3167    .DEFINE "obj"
                           A  3168    
                           A  3169    .CLASS 65
                           A  3170    
                           A  3171    .VALUE 6
                           A  3172    
                           A  3173    .TAG "NONAME1"
                           A  3174    
                           A  3175    .TYPE 40
                           A  3176    
                           A  3177    .ENDEF
                           A  3178    
                           A  3179    .DEFINE "clst"
                           A  3180    
                           A  3181    .CLASS 65
                           A  3182    
                           A  3183    .VALUE 9
                           A  3184    
                           A  3185    .TYPE 15
                           A  3186    
                           A  3187    .ENDEF
                           A  3188    
                           A  3189    .DEFINE "fs"
                           A  3190    
                           A  3191    .CLASS 65
                           A  3192    
                           A  3193    .VALUE -3
                           A  3194    
                           A  3195    .TAG "NONAME0"
                           A  3196    
                           A  3197    .TYPE 40
                           A  3198    
                           A  3199    .ENDEF
                           A  3200    
                           A  3201    .DEFINE "bc"
                           A  3202    
                           A  3203    .CLASS 65
                           A  3204    
                           A  3205    .VALUE -6
                           A  3206    
                           A  3207    .TYPE 14
                           A  3208    
                           A  3209    .ENDEF
                           A  3210    
                           A  3211    .DEFINE "val"
                           A  3212    
                           A  3213    .CLASS 65
                           A  3214    
                           A  3215    .VALUE -10
                           A  3216    
                           A  3217    .TYPE 15
                           A  3218    
                           A  3219    .ENDEF
                           A  3220    
                           A  3221    .DEFINE "wc"
                           A  3222    
                           A  3223    .CLASS 65
                           A  3224    
                           A  3225    .VALUE -13
                           A  3226    
                           A  3227    .TYPE 14
                           A  3228    
                           A  3229    .ENDEF
                           A  3230    
000664 DDE5                A  3231    	PUSH	IX
000666 DD210000 00         A  3232    	LD	IX,0
00066B DD39                A  3233    	ADD	IX,SP
00066D ED22F0              A  3234    	LEA	HL,IX+%FFFFFFF0
000670 F9                  A  3235    	LD	SP,HL
                           A  3236    ; 1136		UINT wc, bc;
                           A  3237    ; 1137		DWORD val;
                           A  3238    ; 1138		FATFS *fs = obj->fs;
                           A  3239    .LINE 1138
                           A  3240    
000671 DD3106              A  3241    	LD	IY,(IX+%6)
000674 FD0700              A  3242    	LD	BC,(IY+%0)
000677 DD0FFD              A  3243    	LD	(IX+%FFFFFFFD),BC
                           A  3244    ; 1139	
                           A  3245    ; 1140	
                           A  3246    ; 1141		if (clst < 2 || clst >= fs->n_faten
                           A  3247    .LINE 1141
                           A  3248    
00067A DD2709              A  3249    	LD	HL,(IX+%9)
00067D DD5E0C              A  3250    	LD	E,(IX+%C)
000680 01020000            A  3251    	LD	BC,2
000684 AF                  A  3252    	XOR	A,A
000685 CD 00 00 00         A  3253    	CALL	__lcmpu
000689 38 15               A  3254    	JR	C,L_78
00068B DD2709              A  3255    	LD	HL,(IX+%9)
00068E DD5E0C              A  3256    	LD	E,(IX+%C)
000691 DD31FD              A  3257    	LD	IY,(IX+%FFFFFFFD)
000694 FD0716              A  3258    	LD	BC,(IY+%16)
000697 FD7E19              A  3259    	LD	A,(IY+%19)
00069A CD 00 00 00         A  3260    	CALL	__lcmpu
00069E 38 0F               A  3261    	JR	C,L_79
0006A0                     A  3262    L_78:
                           A  3263    ; 1142			val = 1;	/* Internal error *
                           A  3264    .LINE 1142
                           A  3265    
0006A0 01010000            A  3266    	LD	BC,1
0006A4 AF                  A  3267    	XOR	A,A
0006A5 DD0FF6              A  3268    	LD	(IX+%FFFFFFF6),BC
0006A8 DD77F9              A  3269    	LD	(IX+%FFFFFFF9),A
                           A  3270    ; 1143	
                           A  3271    ; 1144		} else {
                           A  3272    .LINE 1144
                           A  3273    
0006AB C3 CB 08 00         A  3274    	JR	L_80
0006AF                     A  3275    L_79:
                           A  3276    ; 1145			val = 0xFFFFFFFF;	/* Default 
                           A  3277    .LINE 1145
                           A  3278    
0006AF 01FFFFFF            A  3279    	LD	BC,16777215
0006B3 3EFF                A  3280    	LD	A,%FF
0006B5 DD0FF6              A  3281    	LD	(IX+%FFFFFFF6),BC
0006B8 DD77F9              A  3282    	LD	(IX+%FFFFFFF9),A
                           A  3283    ; 1146	
                           A  3284    ; 1147			switch (fs->fs_type) {
                           A  3285    .LINE 1147
                           A  3286    
0006BB DD31FD              A  3287    	LD	IY,(IX+%FFFFFFFD)
0006BE FD7E00              A  3288    	LD	A,(IY+%0)
0006C1 B7ED62              A  3289    	UEXT	HL
0006C4 6F                  A  3290    	LD	L,A
0006C5 E5C1                A  3291    	LD	BC,HL
0006C7                     A  3292    L__37:
0006C7 11010000            A  3293    	LD	DE,1
0006CB B7                  A  3294    	OR	A,A
0006CC ED52                A  3295    	SBC	HL,DE
0006CE DA C0 08 00         A  3296    	JR	C,L_77
0006D2 21030000            A  3297    	LD	HL,3
0006D6 B7                  A  3298    	OR	A,A
0006D7 ED42                A  3299    	SBC	HL,BC
0006D9 DA C0 08 00         A  3300    	JR	C,L_77
0006DD C5E1                A  3301    	LD	HL,BC
0006DF E5C1                A  3302    	LD	BC,HL
0006E1 29                  A  3303    	ADD	HL,HL
0006E2 09                  A  3304    	ADD	HL,BC
0006E3 01 E8 06 00         A  3305    	LD	BC,L__36-3
0006E7 09                  A  3306    	ADD	HL,BC
0006E8 ED27                A  3307    	LD	HL,(HL)
0006EA E9                  A  3308    	JP	(HL)
0006EB                     A  3309    L__36:
0006EB F40600              A  3310    	DW24	L_61	
                           A  3311    
0006EE F30700              A  3312    	DW24	L_71	
                           A  3313    
0006F1 550800              A  3314    	DW24	L_74	
                           A  3315    
                           A  3316    ; 1148			case FS_FAT12 :
0006F4                     A  3317    L_61:
                           A  3318    .LINE 1148
                           A  3319    
                           A  3320    ; 1149				bc = (UINT)clst; bc += bc /
                           A  3321    .LINE 1149
                           A  3322    
0006F4 DD2709              A  3323    	LD	HL,(IX+%9)
0006F7 3E01                A  3324    	LD	A,%1
0006F9 CD 00 00 00         A  3325    	CALL	__ishru_b
0006FD DD0709              A  3326    	LD	BC,(IX+%9)
000700 09                  A  3327    	ADD	HL,BC
000701 DD2FFA              A  3328    	LD	(IX+%FFFFFFFA),HL
                           A  3329    ; 1150				if (move_window(fs, fs->fat
                           A  3330    .LINE 1150
                           A  3331    
000704 3E09                A  3332    	LD	A,%9
000706 CD 00 00 00         A  3333    	CALL	__ishru_b
00070A E5C1                A  3334    	LD	BC,HL
00070C AF                  A  3335    	XOR	A,A
00070D DD31FD              A  3336    	LD	IY,(IX+%FFFFFFFD)
000710 FD2722              A  3337    	LD	HL,(IY+%22)
000713 FD5E25              A  3338    	LD	E,(IY+%25)
000716 CD 00 00 00         A  3339    	CALL	__ladd
00071A 4B                  A  3340    	LD	C,E
00071B 0600                A  3341    	LD	B,%0
00071D C5                  A  3342    	PUSH	BC
00071E E5                  A  3343    	PUSH	HL
00071F DD07FD              A  3344    	LD	BC,(IX+%FFFFFFFD)
000722 C5                  A  3345    	PUSH	BC
000723 CD 1E 04 00         A  3346    	CALL	_move_window
000727 C1                  A  3347    	POP	BC
000728 C1                  A  3348    	POP	BC
000729 C1                  A  3349    	POP	BC
00072A 01000000            A  3350    	LD	BC,0
00072E B7                  A  3351    	OR	A,A
00072F ED42                A  3352    	SBC	HL,BC
000731 C2 CB 08 00         A  3353    	JR	NZ,L_80
                           A  3354    ; 1151				wc = fs->win[bc++ % SS(fs)]
                           A  3355    .LINE 1151
                           A  3356    
000735 01FF0100            A  3357    	LD	BC,511
000739 DD27FA              A  3358    	LD	HL,(IX+%FFFFFFFA)
00073C CD 00 00 00         A  3359    	CALL	__iand
000740 E5C1                A  3360    	LD	BC,HL
000742 DD31FD              A  3361    	LD	IY,(IX+%FFFFFFFD)
000745 ED2332              A  3362    	LEA	HL,IY+%32
000748 09                  A  3363    	ADD	HL,BC
000749 7E                  A  3364    	LD	A,(HL)
00074A B7ED62              A  3365    	UEXT	HL
00074D 6F                  A  3366    	LD	L,A
00074E DD2FF3              A  3367    	LD	(IX+%FFFFFFF3),HL
000751 DD07FA              A  3368    	LD	BC,(IX+%FFFFFFFA)
000754 03                  A  3369    	INC	BC
000755 DD0FFA              A  3370    	LD	(IX+%FFFFFFFA),BC
                           A  3371    ; 1152				if (move_window(fs, fs->fat
                           A  3372    .LINE 1152
                           A  3373    
000758 C5E1                A  3374    	LD	HL,BC
00075A 3E09                A  3375    	LD	A,%9
00075C CD 00 00 00         A  3376    	CALL	__ishru_b
000760 E5C1                A  3377    	LD	BC,HL
000762 AF                  A  3378    	XOR	A,A
000763 FD2722              A  3379    	LD	HL,(IY+%22)
000766 FD5E25              A  3380    	LD	E,(IY+%25)
000769 CD 00 00 00         A  3381    	CALL	__ladd
00076D 4B                  A  3382    	LD	C,E
00076E 0600                A  3383    	LD	B,%0
000770 C5                  A  3384    	PUSH	BC
000771 E5                  A  3385    	PUSH	HL
000772 DD07FD              A  3386    	LD	BC,(IX+%FFFFFFFD)
000775 C5                  A  3387    	PUSH	BC
000776 CD 1E 04 00         A  3388    	CALL	_move_window
00077A C1                  A  3389    	POP	BC
00077B C1                  A  3390    	POP	BC
00077C C1                  A  3391    	POP	BC
00077D 01000000            A  3392    	LD	BC,0
000781 B7                  A  3393    	OR	A,A
000782 ED42                A  3394    	SBC	HL,BC
000784 C2 CB 08 00         A  3395    	JR	NZ,L_80
                           A  3396    ; 1153				wc |= fs->win[bc % SS(fs)] 
                           A  3397    .LINE 1153
                           A  3398    
000788 01FF0100            A  3399    	LD	BC,511
00078C DD27FA              A  3400    	LD	HL,(IX+%FFFFFFFA)
00078F CD 00 00 00         A  3401    	CALL	__iand
000793 E5C1                A  3402    	LD	BC,HL
000795 DD31FD              A  3403    	LD	IY,(IX+%FFFFFFFD)
000798 ED2332              A  3404    	LEA	HL,IY+%32
00079B 09                  A  3405    	ADD	HL,BC
00079C 7E                  A  3406    	LD	A,(HL)
00079D B7ED62              A  3407    	UEXT	HL
0007A0 6F                  A  3408    	LD	L,A
0007A1 E5                  A  3409    	PUSH	HL
0007A2 B7ED62              A  3410    	UEXT	HL
0007A5 E5                  A  3411    	PUSH	HL
0007A6 33                  A  3412    	INC	SP
0007A7 33                  A  3413    	INC	SP
0007A8 E1                  A  3414    	POP	HL
0007A9 33                  A  3415    	INC	SP
0007AA DD07F3              A  3416    	LD	BC,(IX+%FFFFFFF3)
0007AD CD 00 00 00         A  3417    	CALL	__ior
0007B1 DD2FF3              A  3418    	LD	(IX+%FFFFFFF3),HL
                           A  3419    ; 1154				val = (clst & 1) ? (wc >> 4
                           A  3420    .LINE 1154
                           A  3421    
0007B4 DD7E09              A  3422    	LD	A,(IX+%9)
0007B7 E601                A  3423    	AND	A,%1
0007B9 B7ED62              A  3424    	UEXT	HL
0007BC 6F                  A  3425    	LD	L,A
0007BD 5C                  A  3426    	LD	E,H
0007BE 01000000            A  3427    	LD	BC,0
0007C2 AF                  A  3428    	XOR	A,A
0007C3 CD 00 00 00         A  3429    	CALL	__lcmpu
0007C7 28 0E               A  3430    	JR	Z,L_69
0007C9 DD27F3              A  3431    	LD	HL,(IX+%FFFFFFF3)
0007CC 3E04                A  3432    	LD	A,%4
0007CE CD 00 00 00         A  3433    	CALL	__ishru_b
0007D2 DD2FF0              A  3434    	LD	(IX+%FFFFFFF0),HL
0007D5 18 0E               A  3435    	JR	L_70
0007D7                     A  3436    L_69:
0007D7 01FF0F00            A  3437    	LD	BC,4095
0007DB DD27F3              A  3438    	LD	HL,(IX+%FFFFFFF3)
0007DE CD 00 00 00         A  3439    	CALL	__iand
0007E2 DD2FF0              A  3440    	LD	(IX+%FFFFFFF0),HL
0007E5                     A  3441    L_70:
0007E5 DD07F0              A  3442    	LD	BC,(IX+%FFFFFFF0)
0007E8 AF                  A  3443    	XOR	A,A
0007E9 DD0FF6              A  3444    	LD	(IX+%FFFFFFF6),BC
0007EC DD77F9              A  3445    	LD	(IX+%FFFFFFF9),A
                           A  3446    ; 1155				break;
                           A  3447    .LINE 1155
                           A  3448    
0007EF C3 CB 08 00         A  3449    	JR	L_80
                           A  3450    ; 1156	
                           A  3451    ; 1157			case FS_FAT16 :
0007F3                     A  3452    L_71:
                           A  3453    .LINE 1157
                           A  3454    
                           A  3455    ; 1158				if (move_window(fs, fs->fat
                           A  3456    .LINE 1158
                           A  3457    
0007F3 DD070A              A  3458    	LD	BC,(IX+%A)
0007F6 AF                  A  3459    	XOR	A,A
0007F7 DD31FD              A  3460    	LD	IY,(IX+%FFFFFFFD)
0007FA FD2722              A  3461    	LD	HL,(IY+%22)
0007FD FD5E25              A  3462    	LD	E,(IY+%25)
000800 CD 00 00 00         A  3463    	CALL	__ladd
000804 4B                  A  3464    	LD	C,E
000805 0600                A  3465    	LD	B,%0
000807 C5                  A  3466    	PUSH	BC
000808 E5                  A  3467    	PUSH	HL
000809 DD07FD              A  3468    	LD	BC,(IX+%FFFFFFFD)
00080C C5                  A  3469    	PUSH	BC
00080D CD 1E 04 00         A  3470    	CALL	_move_window
000811 C1                  A  3471    	POP	BC
000812 C1                  A  3472    	POP	BC
000813 C1                  A  3473    	POP	BC
000814 01000000            A  3474    	LD	BC,0
000818 B7                  A  3475    	OR	A,A
000819 ED42                A  3476    	SBC	HL,BC
00081B C2 CB 08 00         A  3477    	JR	NZ,L_80
                           A  3478    ; 1159				val = ld_word(fs->win + cls
                           A  3479    .LINE 1159
                           A  3480    
00081F DD2709              A  3481    	LD	HL,(IX+%9)
000822 DD5E0C              A  3482    	LD	E,(IX+%C)
000825 01020000            A  3483    	LD	BC,2
000829 AF                  A  3484    	XOR	A,A
00082A CD 00 00 00         A  3485    	CALL	__lmulu
00082E 01FF0100            A  3486    	LD	BC,511
000832 AF                  A  3487    	XOR	A,A
000833 CD 00 00 00         A  3488    	CALL	__land
000837 E5C1                A  3489    	LD	BC,HL
000839 DD31FD              A  3490    	LD	IY,(IX+%FFFFFFFD)
00083C ED2332              A  3491    	LEA	HL,IY+%32
00083F 09                  A  3492    	ADD	HL,BC
000840 E5                  A  3493    	PUSH	HL
000841 CD 00 00 00         A  3494    	CALL	_ld_word
000845 C1                  A  3495    	POP	BC
000846 E5C1                A  3496    	LD	BC,HL
000848 CD 00 00 00         A  3497    	CALL	__stoiu
00084C AF                  A  3498    	XOR	A,A
00084D DD2FF6              A  3499    	LD	(IX+%FFFFFFF6),HL
000850 DD77F9              A  3500    	LD	(IX+%FFFFFFF9),A
                           A  3501    ; 1160				break;
                           A  3502    .LINE 1160
                           A  3503    
000853 18 76               A  3504    	JR	L_80
                           A  3505    ; 1161	
                           A  3506    ; 1162			case FS_FAT32 :
000855                     A  3507    L_74:
                           A  3508    .LINE 1162
                           A  3509    
                           A  3510    ; 1163				if (move_window(fs, fs->fat
                           A  3511    .LINE 1163
                           A  3512    
000855 DD0709              A  3513    	LD	BC,(IX+%9)
000858 DD7E0C              A  3514    	LD	A,(IX+%C)
00085B 2E07                A  3515    	LD	L,%7
00085D CD 00 00 00         A  3516    	CALL	__lshru
000861 DD31FD              A  3517    	LD	IY,(IX+%FFFFFFFD)
000864 FD2722              A  3518    	LD	HL,(IY+%22)
000867 FD5E25              A  3519    	LD	E,(IY+%25)
00086A CD 00 00 00         A  3520    	CALL	__ladd
00086E 4B                  A  3521    	LD	C,E
00086F 0600                A  3522    	LD	B,%0
000871 C5                  A  3523    	PUSH	BC
000872 E5                  A  3524    	PUSH	HL
000873 DD07FD              A  3525    	LD	BC,(IX+%FFFFFFFD)
000876 C5                  A  3526    	PUSH	BC
000877 CD 1E 04 00         A  3527    	CALL	_move_window
00087B C1                  A  3528    	POP	BC
00087C C1                  A  3529    	POP	BC
00087D C1                  A  3530    	POP	BC
00087E 01000000            A  3531    	LD	BC,0
000882 B7                  A  3532    	OR	A,A
000883 ED42                A  3533    	SBC	HL,BC
000885 20 44               A  3534    	JR	NZ,L_80
                           A  3535    ; 1164				val = ld_dword(fs->win + cl
                           A  3536    .LINE 1164
                           A  3537    
000887 DD2709              A  3538    	LD	HL,(IX+%9)
00088A DD5E0C              A  3539    	LD	E,(IX+%C)
00088D 01040000            A  3540    	LD	BC,4
000891 AF                  A  3541    	XOR	A,A
000892 CD 00 00 00         A  3542    	CALL	__lmulu
000896 01FF0100            A  3543    	LD	BC,511
00089A AF                  A  3544    	XOR	A,A
00089B CD 00 00 00         A  3545    	CALL	__land
00089F E5C1                A  3546    	LD	BC,HL
0008A1 DD31FD              A  3547    	LD	IY,(IX+%FFFFFFFD)
0008A4 ED2332              A  3548    	LEA	HL,IY+%32
0008A7 09                  A  3549    	ADD	HL,BC
0008A8 E5                  A  3550    	PUSH	HL
0008A9 CD 3C 00 00         A  3551    	CALL	_ld_dword
0008AD C1                  A  3552    	POP	BC
0008AE 01FFFFFF            A  3553    	LD	BC,16777215
0008B2 3E0F                A  3554    	LD	A,%F
0008B4 CD 00 00 00         A  3555    	CALL	__land
0008B8 DD2FF6              A  3556    	LD	(IX+%FFFFFFF6),HL
0008BB DD73F9              A  3557    	LD	(IX+%FFFFFFF9),E
                           A  3558    ; 1165				break;
                           A  3559    .LINE 1165
                           A  3560    
0008BE 18 0B               A  3561    	JR	L_80
                           A  3562    ; 1166	#if FF_FS_EXFAT
                           A  3563    ; 1167			case FS_EXFAT :
                           A  3564    ; 1168				if ((obj->objsize != 0 && o
                           A  3565    ; 1169					DWORD cofs = clst - obj
                           A  3566    ; 1170					DWORD clen = (DWORD)((L
                           A  3567    ; 1171	
                           A  3568    ; 1172					if (obj->stat == 2 && c
                           A  3569    ; 1173						val = (cofs == clen
                           A  3570    ; 1174						break;
                           A  3571    ; 1175					}
                           A  3572    ; 1176					if (obj->stat == 3 && c
                           A  3573    ; 1177						val = clst + 1; 	
                           A  3574    ; 1178						break;
                           A  3575    ; 1179					}
                           A  3576    ; 1180					if (obj->stat != 2) {	
                           A  3577    ; 1181						if (obj->n_frag != 
                           A  3578    ; 1182							val = 0x7FFFFFF
                           A  3579    ; 1183						} else {
                           A  3580    ; 1184							if (move_window
                           A  3581    ; 1185							val = ld_dword(
                           A  3582    ; 1186						}
                           A  3583    ; 1187						break;
                           A  3584    ; 1188					}
                           A  3585    ; 1189				}
                           A  3586    ; 1190				val = 1;	/* Internal err
                           A  3587    ; 1191				break;
                           A  3588    ; 1192	#endif
                           A  3589    ; 1193			default:
0008C0                     A  3590    L_77:
                           A  3591    .LINE 1193
                           A  3592    
                           A  3593    ; 1194				val = 1;	/* Internal err
                           A  3594    .LINE 1194
                           A  3595    
0008C0 01010000            A  3596    	LD	BC,1
0008C4 AF                  A  3597    	XOR	A,A
0008C5 DD0FF6              A  3598    	LD	(IX+%FFFFFFF6),BC
0008C8 DD77F9              A  3599    	LD	(IX+%FFFFFFF9),A
                           A  3600    ; 1195			}
                           A  3601    ; 1196		}
0008CB                     A  3602    L_80:
                           A  3603    .LINE 1196
                           A  3604    
                           A  3605    ; 1197	
                           A  3606    ; 1198		return val;
                           A  3607    .LINE 1198
                           A  3608    
0008CB DD27F6              A  3609    	LD	HL,(IX+%FFFFFFF6)
0008CE DD5EF9              A  3610    	LD	E,(IX+%FFFFFFF9)
                           A  3611    ; 1199	}
                           A  3612    .LINE 1199
                           A  3613    
0008D1 DDF9                A  3614    	LD	SP,IX
0008D3 DDE1                A  3615    	POP	IX
0008D5 C9                  A  3616    	RET	
                           A  3617    
                           A  3618    
                           A  3619    ;**************************** _get_fat ********
                           A  3620    ;Name                         Addr/Register   S
                           A  3621    ;temp67                               IX-16    
                           A  3622    ;wc                                   IX-13    
                           A  3623    ;val                                  IX-10    
                           A  3624    ;bc                                    IX-6    
                           A  3625    ;fs                                    IX-3    
                           A  3626    ;clst                                  IX+9    
                           A  3627    ;obj                                   IX+6    
                           A  3628    
                           A  3629    
                           A  3630    ; Stack Frame Size: 31 (bytes)
                           A  3631    ;       Spill Code: -1 (instruction)
                           A  3632    
                           A  3633    
                           A  3634    .ENDFUNC "get_fat",1199,"_get_fat"
                           A  3635    ; 1200	
                           A  3636    ; 1201	
                           A  3637    ; 1202	
                           A  3638    ; 1203	
                           A  3639    ; 1204	#if !FF_FS_READONLY
                           A  3640    ; 1205	/*-------------------------------------
                           A  3641    ; 1206	/* FAT access - Change value of an FAT 
                           A  3642    ; 1207	/*-------------------------------------
                           A  3643    ; 1208	
                           A  3644    ; 1209	static FRESULT put_fat (	/* FR_OK(0)
                           A  3645    ; 1210		FATFS* fs,		/* Corresponding fi
                           A  3646    ; 1211		DWORD clst,		/* FAT index number
                           A  3647    ; 1212		DWORD val		/* New value to be 
                           A  3648    ; 1213	)
                           A  3649    ; 1214	{
0008D6                     A  3650    _put_fat:
                           A  3651    .DEFINE "_put_fat"
                           A  3652    
                           A  3653    .VALUE _put_fat
                           A  3654    
                           A  3655    .CLASS 3
                           A  3656    
                           A  3657    .TYPE 68
                           A  3658    
                           A  3659    .ENDEF
                           A  3660    
                           A  3661    .BEGFUNC "put_fat",1214,"_put_fat"
                           A  3662    
                           A  3663    .LINE 1214
                           A  3664    
                           A  3665    .DEFINE "fs"
                           A  3666    
                           A  3667    .CLASS 65
                           A  3668    
                           A  3669    .VALUE 6
                           A  3670    
                           A  3671    .TAG "NONAME0"
                           A  3672    
                           A  3673    .TYPE 40
                           A  3674    
                           A  3675    .ENDEF
                           A  3676    
                           A  3677    .DEFINE "clst"
                           A  3678    
                           A  3679    .CLASS 65
                           A  3680    
                           A  3681    .VALUE 9
                           A  3682    
                           A  3683    .TYPE 15
                           A  3684    
                           A  3685    .ENDEF
                           A  3686    
                           A  3687    .DEFINE "val"
                           A  3688    
                           A  3689    .CLASS 65
                           A  3690    
                           A  3691    .VALUE 15
                           A  3692    
                           A  3693    .TYPE 15
                           A  3694    
                           A  3695    .ENDEF
                           A  3696    
                           A  3697    .DEFINE "res"
                           A  3698    
                           A  3699    .CLASS 65
                           A  3700    
                           A  3701    .VALUE -3
                           A  3702    
                           A  3703    .TYPE 4
                           A  3704    
                           A  3705    .ENDEF
                           A  3706    
                           A  3707    .DEFINE "bc"
                           A  3708    
                           A  3709    .CLASS 65
                           A  3710    
                           A  3711    .VALUE -6
                           A  3712    
                           A  3713    .TYPE 14
                           A  3714    
                           A  3715    .ENDEF
                           A  3716    
                           A  3717    .DEFINE "p"
                           A  3718    
                           A  3719    .CLASS 65
                           A  3720    
                           A  3721    .VALUE -16
                           A  3722    
                           A  3723    .TYPE 44
                           A  3724    
                           A  3725    .ENDEF
                           A  3726    
0008D6 DDE5                A  3727    	PUSH	IX
0008D8 DD210000 00         A  3728    	LD	IX,0
0008DD DD39                A  3729    	ADD	IX,SP
0008DF ED22E6              A  3730    	LEA	HL,IX+%FFFFFFE6
0008E2 F9                  A  3731    	LD	SP,HL
                           A  3732    ; 1215		UINT bc;
                           A  3733    ; 1216		BYTE *p;
                           A  3734    ; 1217		FRESULT res = FR_INT_ERR;
                           A  3735    .LINE 1217
                           A  3736    
0008E3 01020000            A  3737    	LD	BC,2
0008E7 DD0FFD              A  3738    	LD	(IX+%FFFFFFFD),BC
                           A  3739    ; 1218	
                           A  3740    ; 1219	
                           A  3741    ; 1220		if (clst >= 2 && clst < fs->n_faten
                           A  3742    .LINE 1220
                           A  3743    
0008EA DD2709              A  3744    	LD	HL,(IX+%9)
0008ED DD5E0C              A  3745    	LD	E,(IX+%C)
0008F0 AF                  A  3746    	XOR	A,A
0008F1 CD 00 00 00         A  3747    	CALL	__lcmpu
0008F5 DA EC 0B 00         A  3748    	JR	C,L_106
0008F9 DD2709              A  3749    	LD	HL,(IX+%9)
0008FC DD5E0C              A  3750    	LD	E,(IX+%C)
0008FF DD3106              A  3751    	LD	IY,(IX+%6)
000902 FD0716              A  3752    	LD	BC,(IY+%16)
000905 FD7E19              A  3753    	LD	A,(IY+%19)
000908 CD 00 00 00         A  3754    	CALL	__lcmpu
00090C D2 EC 0B 00         A  3755    	JR	NC,L_106
                           A  3756    ; 1221			switch (fs->fs_type) {
                           A  3757    .LINE 1221
                           A  3758    
000910 DD3106              A  3759    	LD	IY,(IX+%6)
000913 FD7E00              A  3760    	LD	A,(IY+%0)
000916 B7ED62              A  3761    	UEXT	HL
000919 6F                  A  3762    	LD	L,A
00091A E5C1                A  3763    	LD	BC,HL
00091C                     A  3764    L__49:
00091C 11010000            A  3765    	LD	DE,1
000920 B7                  A  3766    	OR	A,A
000921 ED52                A  3767    	SBC	HL,DE
000923 DA EC 0B 00         A  3768    	JR	C,L_106
000927 21030000            A  3769    	LD	HL,3
00092B B7                  A  3770    	OR	A,A
00092C ED42                A  3771    	SBC	HL,BC
00092E DA EC 0B 00         A  3772    	JR	C,L_106
000932 C5E1                A  3773    	LD	HL,BC
000934 E5C1                A  3774    	LD	BC,HL
000936 29                  A  3775    	ADD	HL,HL
000937 09                  A  3776    	ADD	HL,BC
000938 01 3D 09 00         A  3777    	LD	BC,L__48-3
00093C 09                  A  3778    	ADD	HL,BC
00093D ED27                A  3779    	LD	HL,(HL)
00093F E9                  A  3780    	JP	(HL)
000940                     A  3781    L__48:
000940 490900              A  3782    	DW24	L_83	
                           A  3783    
000943 B50A00              A  3784    	DW24	L_97	
                           A  3785    
000946 1E0B00              A  3786    	DW24	L_100	
                           A  3787    
                           A  3788    ; 1222			case FS_FAT12:
000949                     A  3789    L_83:
                           A  3790    .LINE 1222
                           A  3791    
                           A  3792    ; 1223				bc = (UINT)clst; bc += bc /
                           A  3793    .LINE 1223
                           A  3794    
000949 DD2709              A  3795    	LD	HL,(IX+%9)
00094C 3E01                A  3796    	LD	A,%1
00094E CD 00 00 00         A  3797    	CALL	__ishru_b
000952 DD0709              A  3798    	LD	BC,(IX+%9)
000955 09                  A  3799    	ADD	HL,BC
000956 DD2FFA              A  3800    	LD	(IX+%FFFFFFFA),HL
                           A  3801    ; 1224				res = move_window(fs, fs->f
                           A  3802    .LINE 1224
                           A  3803    
000959 3E09                A  3804    	LD	A,%9
00095B CD 00 00 00         A  3805    	CALL	__ishru_b
00095F E5C1                A  3806    	LD	BC,HL
000961 AF                  A  3807    	XOR	A,A
000962 DD3106              A  3808    	LD	IY,(IX+%6)
000965 FD2722              A  3809    	LD	HL,(IY+%22)
000968 FD5E25              A  3810    	LD	E,(IY+%25)
00096B CD 00 00 00         A  3811    	CALL	__ladd
00096F 4B                  A  3812    	LD	C,E
000970 0600                A  3813    	LD	B,%0
000972 C5                  A  3814    	PUSH	BC
000973 E5                  A  3815    	PUSH	HL
000974 DD0706              A  3816    	LD	BC,(IX+%6)
000977 C5                  A  3817    	PUSH	BC
000978 CD 1E 04 00         A  3818    	CALL	_move_window
00097C C1                  A  3819    	POP	BC
00097D C1                  A  3820    	POP	BC
00097E C1                  A  3821    	POP	BC
00097F DD2FFD              A  3822    	LD	(IX+%FFFFFFFD),HL
                           A  3823    ; 1225				if (res != FR_OK) break;
                           A  3824    .LINE 1225
                           A  3825    
000982 01000000            A  3826    	LD	BC,0
000986 DD27FD              A  3827    	LD	HL,(IX+%FFFFFFFD)
000989 B7                  A  3828    	OR	A,A
00098A ED42                A  3829    	SBC	HL,BC
00098C C2 EC 0B 00         A  3830    	JR	NZ,L_106
                           A  3831    ; 1226				p = fs->win + bc++ % SS(fs)
                           A  3832    .LINE 1226
                           A  3833    
000990 DD3106              A  3834    	LD	IY,(IX+%6)
000993 ED0332              A  3835    	LEA	BC,IY+%32
000996 DD0FED              A  3836    	LD	(IX+%FFFFFFED),BC
000999 DD07FA              A  3837    	LD	BC,(IX+%FFFFFFFA)
00099C 03                  A  3838    	INC	BC
00099D DD0FFA              A  3839    	LD	(IX+%FFFFFFFA),BC
                           A  3840    ; 1227				*p = (clst & 1) ? ((*p & 0x
                           A  3841    .LINE 1227
                           A  3842    
0009A0 DD7E09              A  3843    	LD	A,(IX+%9)
0009A3 E601                A  3844    	AND	A,%1
0009A5 B7ED62              A  3845    	UEXT	HL
0009A8 6F                  A  3846    	LD	L,A
0009A9 5C                  A  3847    	LD	E,H
0009AA 01000000            A  3848    	LD	BC,0
0009AE AF                  A  3849    	XOR	A,A
0009AF CD 00 00 00         A  3850    	CALL	__lcmpu
0009B3 20 04               A  3851    	JR	NZ,L__54
0009B5 3E01                A  3852    	LD	A,%1
0009B7 18 01               A  3853    	JR	L__55
0009B9                     A  3854    L__54:
0009B9 AF                  A  3855    	XOR	A,A
0009BA                     A  3856    L__55:
0009BA DD77F9              A  3857    	LD	(IX+%FFFFFFF9),A
0009BD B7                  A  3858    	OR	A,A
0009BE 20 3B               A  3859    	JR	NZ,L_89
0009C0 DD3106              A  3860    	LD	IY,(IX+%6)
0009C3 ED0332              A  3861    	LEA	BC,IY+%32
0009C6 DD0FED              A  3862    	LD	(IX+%FFFFFFED),BC
0009C9 01FF0100            A  3863    	LD	BC,511
0009CD DD27FA              A  3864    	LD	HL,(IX+%FFFFFFFA)
0009D0 CD 00 00 00         A  3865    	CALL	__iand
0009D4 E5C1                A  3866    	LD	BC,HL
0009D6 ED2332              A  3867    	LEA	HL,IY+%32
0009D9 09                  A  3868    	ADD	HL,BC
0009DA 7E                  A  3869    	LD	A,(HL)
0009DB E60F                A  3870    	AND	A,%F
0009DD B7ED62              A  3871    	UEXT	HL
0009E0 6F                  A  3872    	LD	L,A
0009E1 E5D1                A  3873    	LD	DE,HL
0009E3 DD7E0F              A  3874    	LD	A,(IX+%F)
0009E6 B7ED62              A  3875    	UEXT	HL
0009E9 6F                  A  3876    	LD	L,A
0009EA 29                  A  3877    	ADD	HL,HL
0009EB 29                  A  3878    	ADD	HL,HL
0009EC 29                  A  3879    	ADD	HL,HL
0009ED 29                  A  3880    	ADD	HL,HL
0009EE E5C1                A  3881    	LD	BC,HL
0009F0 D5E1                A  3882    	LD	HL,DE
0009F2 CD 00 00 00         A  3883    	CALL	__ior
0009F6 DD2FF6              A  3884    	LD	(IX+%FFFFFFF6),HL
0009F9 18 0A               A  3885    	JR	L_90
0009FB                     A  3886    L_89:
0009FB DD7E0F              A  3887    	LD	A,(IX+%F)
0009FE B7ED62              A  3888    	UEXT	HL
000A01 6F                  A  3889    	LD	L,A
000A02 DD2FF6              A  3890    	LD	(IX+%FFFFFFF6),HL
000A05                     A  3891    L_90:
000A05 01FF0100            A  3892    	LD	BC,511
000A09 DD27FA              A  3893    	LD	HL,(IX+%FFFFFFFA)
000A0C CD 00 00 00         A  3894    	CALL	__iand
000A10 DD2FEA              A  3895    	LD	(IX+%FFFFFFEA),HL
000A13 DD7EF6              A  3896    	LD	A,(IX+%FFFFFFF6)
000A16 DD07ED              A  3897    	LD	BC,(IX+%FFFFFFED)
000A19 09                  A  3898    	ADD	HL,BC
000A1A 77                  A  3899    	LD	(HL),A
                           A  3900    ; 1228				fs->wflag = 1;
                           A  3901    .LINE 1228
                           A  3902    
000A1B DD3106              A  3903    	LD	IY,(IX+%6)
000A1E FD360301            A  3904    	LD	(IY+%3),%1
                           A  3905    ; 1229				res = move_window(fs, fs->f
                           A  3906    .LINE 1229
                           A  3907    
000A22 DD27FA              A  3908    	LD	HL,(IX+%FFFFFFFA)
000A25 3E09                A  3909    	LD	A,%9
000A27 CD 00 00 00         A  3910    	CALL	__ishru_b
000A2B E5C1                A  3911    	LD	BC,HL
000A2D AF                  A  3912    	XOR	A,A
000A2E FD2722              A  3913    	LD	HL,(IY+%22)
000A31 FD5E25              A  3914    	LD	E,(IY+%25)
000A34 CD 00 00 00         A  3915    	CALL	__ladd
000A38 4B                  A  3916    	LD	C,E
000A39 0600                A  3917    	LD	B,%0
000A3B C5                  A  3918    	PUSH	BC
000A3C E5                  A  3919    	PUSH	HL
000A3D DD0706              A  3920    	LD	BC,(IX+%6)
000A40 C5                  A  3921    	PUSH	BC
000A41 CD 1E 04 00         A  3922    	CALL	_move_window
000A45 C1                  A  3923    	POP	BC
000A46 C1                  A  3924    	POP	BC
000A47 C1                  A  3925    	POP	BC
000A48 DD2FFD              A  3926    	LD	(IX+%FFFFFFFD),HL
                           A  3927    ; 1230				if (res != FR_OK) break;
                           A  3928    .LINE 1230
                           A  3929    
000A4B 01000000            A  3930    	LD	BC,0
000A4F DD27FD              A  3931    	LD	HL,(IX+%FFFFFFFD)
000A52 B7                  A  3932    	OR	A,A
000A53 ED42                A  3933    	SBC	HL,BC
000A55 C2 EC 0B 00         A  3934    	JR	NZ,L_106
                           A  3935    ; 1231				p = fs->win + bc % SS(fs);
                           A  3936    .LINE 1231
                           A  3937    
000A59 DD07EA              A  3938    	LD	BC,(IX+%FFFFFFEA)
000A5C DD3106              A  3939    	LD	IY,(IX+%6)
000A5F ED2332              A  3940    	LEA	HL,IY+%32
000A62 09                  A  3941    	ADD	HL,BC
000A63 DD2FF0              A  3942    	LD	(IX+%FFFFFFF0),HL
                           A  3943    ; 1232				*p = (clst & 1) ? (BYTE)(va
                           A  3944    .LINE 1232
                           A  3945    
000A66 DD7EF9              A  3946    	LD	A,(IX+%FFFFFFF9)
000A69 B7                  A  3947    	OR	A,A
000A6A 20 16               A  3948    	JR	NZ,L_95
000A6C DD070F              A  3949    	LD	BC,(IX+%F)
000A6F DD7E12              A  3950    	LD	A,(IX+%12)
000A72 2E04                A  3951    	LD	L,%4
000A74 CD 00 00 00         A  3952    	CALL	__lshru
000A78 79                  A  3953    	LD	A,C
000A79 B7ED62              A  3954    	UEXT	HL
000A7C 6F                  A  3955    	LD	L,A
000A7D DD2FF3              A  3956    	LD	(IX+%FFFFFFF3),HL
000A80 18 21               A  3957    	JR	L_96
000A82                     A  3958    L_95:
000A82 DD0710              A  3959    	LD	BC,(IX+%10)
000A85 79                  A  3960    	LD	A,C
000A86 E60F                A  3961    	AND	A,%F
000A88 B7ED62              A  3962    	UEXT	HL
000A8B 6F                  A  3963    	LD	L,A
000A8C E5D1                A  3964    	LD	DE,HL
000A8E DD27F0              A  3965    	LD	HL,(IX+%FFFFFFF0)
000A91 7E                  A  3966    	LD	A,(HL)
000A92 E6F0                A  3967    	AND	A,%F0
000A94 B7ED62              A  3968    	UEXT	HL
000A97 6F                  A  3969    	LD	L,A
000A98 E5C1                A  3970    	LD	BC,HL
000A9A D5E1                A  3971    	LD	HL,DE
000A9C CD 00 00 00         A  3972    	CALL	__ior
000AA0 DD2FF3              A  3973    	LD	(IX+%FFFFFFF3),HL
000AA3                     A  3974    L_96:
000AA3 DD7EF3              A  3975    	LD	A,(IX+%FFFFFFF3)
000AA6 DD27F0              A  3976    	LD	HL,(IX+%FFFFFFF0)
000AA9 77                  A  3977    	LD	(HL),A
                           A  3978    ; 1233				fs->wflag = 1;
                           A  3979    .LINE 1233
                           A  3980    
000AAA DD3106              A  3981    	LD	IY,(IX+%6)
000AAD FD360301            A  3982    	LD	(IY+%3),%1
                           A  3983    ; 1234				break;
                           A  3984    .LINE 1234
                           A  3985    
000AB1 C3 EC 0B 00         A  3986    	JR	L_106
                           A  3987    ; 1235	
                           A  3988    ; 1236			case FS_FAT16:
000AB5                     A  3989    L_97:
                           A  3990    .LINE 1236
                           A  3991    
                           A  3992    ; 1237				res = move_window(fs, fs->f
                           A  3993    .LINE 1237
                           A  3994    
000AB5 DD070A              A  3995    	LD	BC,(IX+%A)
000AB8 AF                  A  3996    	XOR	A,A
000AB9 DD3106              A  3997    	LD	IY,(IX+%6)
000ABC FD2722              A  3998    	LD	HL,(IY+%22)
000ABF FD5E25              A  3999    	LD	E,(IY+%25)
000AC2 CD 00 00 00         A  4000    	CALL	__ladd
000AC6 4B                  A  4001    	LD	C,E
000AC7 0600                A  4002    	LD	B,%0
000AC9 C5                  A  4003    	PUSH	BC
000ACA E5                  A  4004    	PUSH	HL
000ACB DD0706              A  4005    	LD	BC,(IX+%6)
000ACE C5                  A  4006    	PUSH	BC
000ACF CD 1E 04 00         A  4007    	CALL	_move_window
000AD3 C1                  A  4008    	POP	BC
000AD4 C1                  A  4009    	POP	BC
000AD5 C1                  A  4010    	POP	BC
000AD6 DD2FFD              A  4011    	LD	(IX+%FFFFFFFD),HL
                           A  4012    ; 1238				if (res != FR_OK) break;
                           A  4013    .LINE 1238
                           A  4014    
000AD9 01000000            A  4015    	LD	BC,0
000ADD DD27FD              A  4016    	LD	HL,(IX+%FFFFFFFD)
000AE0 B7                  A  4017    	OR	A,A
000AE1 ED42                A  4018    	SBC	HL,BC
000AE3 C2 EC 0B 00         A  4019    	JR	NZ,L_106
                           A  4020    ; 1239				st_word(fs->win + clst * 2 
                           A  4021    .LINE 1239
                           A  4022    
000AE7 DD070F              A  4023    	LD	BC,(IX+%F)
000AEA C5                  A  4024    	PUSH	BC
000AEB DD2709              A  4025    	LD	HL,(IX+%9)
000AEE DD5E0C              A  4026    	LD	E,(IX+%C)
000AF1 01020000            A  4027    	LD	BC,2
000AF5 AF                  A  4028    	XOR	A,A
000AF6 CD 00 00 00         A  4029    	CALL	__lmulu
000AFA 01FF0100            A  4030    	LD	BC,511
000AFE AF                  A  4031    	XOR	A,A
000AFF CD 00 00 00         A  4032    	CALL	__land
000B03 E5C1                A  4033    	LD	BC,HL
000B05 DD3106              A  4034    	LD	IY,(IX+%6)
000B08 ED2332              A  4035    	LEA	HL,IY+%32
000B0B 09                  A  4036    	ADD	HL,BC
000B0C E5                  A  4037    	PUSH	HL
000B0D CD 06 01 00         A  4038    	CALL	_st_word
000B11 C1                  A  4039    	POP	BC
000B12 C1                  A  4040    	POP	BC
                           A  4041    ; 1240				fs->wflag = 1;
                           A  4042    .LINE 1240
                           A  4043    
000B13 DD3106              A  4044    	LD	IY,(IX+%6)
000B16 FD360301            A  4045    	LD	(IY+%3),%1
                           A  4046    ; 1241				break;
                           A  4047    .LINE 1241
                           A  4048    
000B1A C3 EC 0B 00         A  4049    	JR	L_106
                           A  4050    ; 1242	
                           A  4051    ; 1243			case FS_FAT32:
000B1E                     A  4052    L_100:
                           A  4053    .LINE 1243
                           A  4054    
                           A  4055    ; 1244	#if FF_FS_EXFAT
                           A  4056    ; 1245			case FS_EXFAT:
                           A  4057    ; 1246	#endif
                           A  4058    ; 1247				res = move_window(fs, fs->f
                           A  4059    .LINE 1247
                           A  4060    
000B1E DD0709              A  4061    	LD	BC,(IX+%9)
000B21 DD7E0C              A  4062    	LD	A,(IX+%C)
000B24 2E07                A  4063    	LD	L,%7
000B26 CD 00 00 00         A  4064    	CALL	__lshru
000B2A DD3106              A  4065    	LD	IY,(IX+%6)
000B2D FD2722              A  4066    	LD	HL,(IY+%22)
000B30 FD5E25              A  4067    	LD	E,(IY+%25)
000B33 CD 00 00 00         A  4068    	CALL	__ladd
000B37 4B                  A  4069    	LD	C,E
000B38 0600                A  4070    	LD	B,%0
000B3A C5                  A  4071    	PUSH	BC
000B3B E5                  A  4072    	PUSH	HL
000B3C DD0706              A  4073    	LD	BC,(IX+%6)
000B3F C5                  A  4074    	PUSH	BC
000B40 CD 1E 04 00         A  4075    	CALL	_move_window
000B44 C1                  A  4076    	POP	BC
000B45 C1                  A  4077    	POP	BC
000B46 C1                  A  4078    	POP	BC
000B47 DD2FFD              A  4079    	LD	(IX+%FFFFFFFD),HL
                           A  4080    ; 1248				if (res != FR_OK) break;
                           A  4081    .LINE 1248
                           A  4082    
000B4A 01000000            A  4083    	LD	BC,0
000B4E DD27FD              A  4084    	LD	HL,(IX+%FFFFFFFD)
000B51 B7                  A  4085    	OR	A,A
000B52 ED42                A  4086    	SBC	HL,BC
000B54 C2 EC 0B 00         A  4087    	JR	NZ,L_106
                           A  4088    ; 1249				if (!FF_FS_EXFAT || fs->fs_
                           A  4089    ; 1250					val = (val & 0x0FFFFFFF
                           A  4090    .LINE 1250
                           A  4091    
000B58 DD2709              A  4092    	LD	HL,(IX+%9)
000B5B DD5E0C              A  4093    	LD	E,(IX+%C)
000B5E 01040000            A  4094    	LD	BC,4
000B62 AF                  A  4095    	XOR	A,A
000B63 CD 00 00 00         A  4096    	CALL	__lmulu
000B67 01FF0100            A  4097    	LD	BC,511
000B6B AF                  A  4098    	XOR	A,A
000B6C CD 00 00 00         A  4099    	CALL	__land
000B70 E5C1                A  4100    	LD	BC,HL
000B72 DD3106              A  4101    	LD	IY,(IX+%6)
000B75 ED2332              A  4102    	LEA	HL,IY+%32
000B78 09                  A  4103    	ADD	HL,BC
000B79 E5                  A  4104    	PUSH	HL
000B7A CD 3C 00 00         A  4105    	CALL	_ld_dword
000B7E C1                  A  4106    	POP	BC
000B7F 01000000            A  4107    	LD	BC,0
000B83 3EF0                A  4108    	LD	A,%F0
000B85 CD 00 00 00         A  4109    	CALL	__land
000B89 DD73E9              A  4110    	LD	(IX+%FFFFFFE9),E
000B8C DD2FE6              A  4111    	LD	(IX+%FFFFFFE6),HL
000B8F DD270F              A  4112    	LD	HL,(IX+%F)
000B92 DD5E12              A  4113    	LD	E,(IX+%12)
000B95 01FFFFFF            A  4114    	LD	BC,16777215
000B99 3E0F                A  4115    	LD	A,%F
000B9B CD 00 00 00         A  4116    	CALL	__land
000B9F 7B                  A  4117    	LD	A,E
000BA0 E5C1                A  4118    	LD	BC,HL
000BA2 DD5EE9              A  4119    	LD	E,(IX+%FFFFFFE9)
000BA5 DD27E6              A  4120    	LD	HL,(IX+%FFFFFFE6)
000BA8 CD 00 00 00         A  4121    	CALL	__lor
000BAC DD2F0F              A  4122    	LD	(IX+%F),HL
000BAF DD7312              A  4123    	LD	(IX+%12),E
                           A  4124    ; 1251				}
                           A  4125    ; 1252				st_dword(fs->win + clst * 4
                           A  4126    .LINE 1252
                           A  4127    
000BB2 DD4E12              A  4128    	LD	C,(IX+%12)
000BB5 0600                A  4129    	LD	B,%0
000BB7 C5                  A  4130    	PUSH	BC
000BB8 DD070F              A  4131    	LD	BC,(IX+%F)
000BBB C5                  A  4132    	PUSH	BC
000BBC DD2709              A  4133    	LD	HL,(IX+%9)
000BBF DD5E0C              A  4134    	LD	E,(IX+%C)
000BC2 01040000            A  4135    	LD	BC,4
000BC6 AF                  A  4136    	XOR	A,A
000BC7 CD 00 00 00         A  4137    	CALL	__lmulu
000BCB 01FF0100            A  4138    	LD	BC,511
000BCF AF                  A  4139    	XOR	A,A
000BD0 CD 00 00 00         A  4140    	CALL	__land
000BD4 E5C1                A  4141    	LD	BC,HL
000BD6 DD3106              A  4142    	LD	IY,(IX+%6)
000BD9 ED2332              A  4143    	LEA	HL,IY+%32
000BDC 09                  A  4144    	ADD	HL,BC
000BDD E5                  A  4145    	PUSH	HL
000BDE CD 45 01 00         A  4146    	CALL	_st_dword
000BE2 C1                  A  4147    	POP	BC
000BE3 C1                  A  4148    	POP	BC
000BE4 C1                  A  4149    	POP	BC
                           A  4150    ; 1253				fs->wflag = 1;
                           A  4151    .LINE 1253
                           A  4152    
000BE5 DD3106              A  4153    	LD	IY,(IX+%6)
000BE8 FD360301            A  4154    	LD	(IY+%3),%1
                           A  4155    ; 1254				break;
                           A  4156    ; 1255			}
                           A  4157    ; 1256		}
000BEC                     A  4158    L_106:
                           A  4159    .LINE 1256
                           A  4160    
                           A  4161    ; 1257		return res;
                           A  4162    .LINE 1257
                           A  4163    
000BEC DD27FD              A  4164    	LD	HL,(IX+%FFFFFFFD)
                           A  4165    ; 1258	}
                           A  4166    .LINE 1258
                           A  4167    
000BEF DDF9                A  4168    	LD	SP,IX
000BF1 DDE1                A  4169    	POP	IX
000BF3 C9                  A  4170    	RET	
                           A  4171    
                           A  4172    
                           A  4173    ;**************************** _put_fat ********
                           A  4174    ;Name                         Addr/Register   S
                           A  4175    ;G_7                                  IX-22    
                           A  4176    ;G_6                                  IX-19    
                           A  4177    ;p                                    IX-16    
                           A  4178    ;temp93                               IX-13    
                           A  4179    ;temp87                               IX-10    
                           A  4180    ;G_8                                   IX-7    
                           A  4181    ;bc                                    IX-6    
                           A  4182    ;res                                   IX-3    
                           A  4183    ;val                                  IX+15    
                           A  4184    ;clst                                  IX+9    
                           A  4185    ;fs                                    IX+6    
                           A  4186    
                           A  4187    
                           A  4188    ; Stack Frame Size: 47 (bytes)
                           A  4189    ;       Spill Code: -1 (instruction)
                           A  4190    
                           A  4191    
                           A  4192    .ENDFUNC "put_fat",1258,"_put_fat"
                           A  4193    ; 1259	
                           A  4194    ; 1260	#endif /* !FF_FS_READONLY */
                           A  4195    ; 1261	
                           A  4196    ; 1262	
                           A  4197    ; 1263	
                           A  4198    ; 1264	
                           A  4199    ; 1265	#if FF_FS_EXFAT && !FF_FS_READONLY
                           A  4200    ; 1266	/*-------------------------------------
                           A  4201    ; 1267	/* exFAT: Accessing FAT and Allocation 
                           A  4202    ; 1268	/*-------------------------------------
                           A  4203    ; 1269	
                           A  4204    ; 1270	/*-------------------------------------
                           A  4205    ; 1271	/* Find a contiguous free cluster block
                           A  4206    ; 1272	/*-------------------------------------
                           A  4207    ; 1273	
                           A  4208    ; 1274	static DWORD find_bitmap (	/* 0:Not fo
                           A  4209    ; 1275		FATFS* fs,	/* Filesystem object */
                           A  4210    ; 1276		DWORD clst,	/* Cluster number to sc
                           A  4211    ; 1277		DWORD ncl	/* Number of contiguous
                           A  4212    ; 1278	)
                           A  4213    ; 1279	{
                           A  4214    ; 1280		BYTE bm, bv;
                           A  4215    ; 1281		UINT i;
                           A  4216    ; 1282		DWORD val, scl, ctr;
                           A  4217    ; 1283	
                           A  4218    ; 1284	
                           A  4219    ; 1285		clst -= 2;	/* The first bit in the
                           A  4220    ; 1286		if (clst >= fs->n_fatent - 2) clst 
                           A  4221    ; 1287		scl = val = clst; ctr = 0;
                           A  4222    ; 1288		for (;;) {
                           A  4223    ; 1289			if (move_window(fs, fs->bitbase
                           A  4224    ; 1290			i = val / 8 % SS(fs); bm = 1 <<
                           A  4225    ; 1291			do {
                           A  4226    ; 1292				do {
                           A  4227    ; 1293					bv = fs->win[i] & bm; b
                           A  4228    ; 1294					if (++val >= fs->n_fate
                           A  4229    ; 1295						val = 0; bm = 0; i 
                           A  4230    ; 1296					}
                           A  4231    ; 1297					if (bv == 0) {	/* Is i
                           A  4232    ; 1298						if (++ctr == ncl) r
                           A  4233    ; 1299					} else {
                           A  4234    ; 1300						scl = val; ctr = 0;
                           A  4235    ; 1301					}
                           A  4236    ; 1302					if (val == clst) return
                           A  4237    ; 1303				} while (bm != 0);
                           A  4238    ; 1304				bm = 1;
                           A  4239    ; 1305			} while (++i < SS(fs));
                           A  4240    ; 1306		}
                           A  4241    ; 1307	}
                           A  4242    ; 1308	
                           A  4243    ; 1309	
                           A  4244    ; 1310	/*-------------------------------------
                           A  4245    ; 1311	/* Set/Clear a block of allocation bitm
                           A  4246    ; 1312	/*-------------------------------------
                           A  4247    ; 1313	
                           A  4248    ; 1314	static FRESULT change_bitmap (
                           A  4249    ; 1315		FATFS* fs,	/* Filesystem object */
                           A  4250    ; 1316		DWORD clst,	/* Cluster number to ch
                           A  4251    ; 1317		DWORD ncl,	/* Number of clusters t
                           A  4252    ; 1318		int bv		/* bit value to be set 
                           A  4253    ; 1319	)
                           A  4254    ; 1320	{
                           A  4255    ; 1321		BYTE bm;
                           A  4256    ; 1322		UINT i;
                           A  4257    ; 1323		LBA_t sect;
                           A  4258    ; 1324	
                           A  4259    ; 1325	
                           A  4260    ; 1326		clst -= 2;	/* The first bit corres
                           A  4261    ; 1327		sect = fs->bitbase + clst / 8 / SS(
                           A  4262    ; 1328		i = clst / 8 % SS(fs);				
                           A  4263    ; 1329		bm = 1 << (clst % 8);				
                           A  4264    ; 1330		for (;;) {
                           A  4265    ; 1331			if (move_window(fs, sect++) != 
                           A  4266    ; 1332			do {
                           A  4267    ; 1333				do {
                           A  4268    ; 1334					if (bv == (int)((fs->wi
                           A  4269    ; 1335					fs->win[i] ^= bm;	/* 
                           A  4270    ; 1336					fs->wflag = 1;
                           A  4271    ; 1337					if (--ncl == 0) return 
                           A  4272    ; 1338				} while (bm <<= 1);		/* 
                           A  4273    ; 1339				bm = 1;
                           A  4274    ; 1340			} while (++i < SS(fs));		/* 
                           A  4275    ; 1341			i = 0;
                           A  4276    ; 1342		}
                           A  4277    ; 1343	}
                           A  4278    ; 1344	
                           A  4279    ; 1345	
                           A  4280    ; 1346	/*-------------------------------------
                           A  4281    ; 1347	/* Fill the first fragment of the FAT c
                           A  4282    ; 1348	/*-------------------------------------
                           A  4283    ; 1349	
                           A  4284    ; 1350	static FRESULT fill_first_frag (
                           A  4285    ; 1351		FFOBJID* obj	/* Pointer to the c
                           A  4286    ; 1352	)
                           A  4287    ; 1353	{
                           A  4288    ; 1354		FRESULT res;
                           A  4289    ; 1355		DWORD cl, n;
                           A  4290    ; 1356	
                           A  4291    ; 1357	
                           A  4292    ; 1358		if (obj->stat == 3) {	/* Has the 
                           A  4293    ; 1359			for (cl = obj->sclust, n = obj-
                           A  4294    ; 1360				res = put_fat(obj->fs, cl, 
                           A  4295    ; 1361				if (res != FR_OK) return re
                           A  4296    ; 1362			}
                           A  4297    ; 1363			obj->stat = 0;	/* Change statu
                           A  4298    ; 1364		}
                           A  4299    ; 1365		return FR_OK;
                           A  4300    ; 1366	}
                           A  4301    ; 1367	
                           A  4302    ; 1368	
                           A  4303    ; 1369	/*-------------------------------------
                           A  4304    ; 1370	/* Fill the last fragment of the FAT ch
                           A  4305    ; 1371	/*-------------------------------------
                           A  4306    ; 1372	
                           A  4307    ; 1373	static FRESULT fill_last_frag (
                           A  4308    ; 1374		FFOBJID* obj,	/* Pointer to the c
                           A  4309    ; 1375		DWORD lcl,		/* Last cluster of 
                           A  4310    ; 1376		DWORD term		/* Value to set the
                           A  4311    ; 1377	)
                           A  4312    ; 1378	{
                           A  4313    ; 1379		FRESULT res;
                           A  4314    ; 1380	
                           A  4315    ; 1381	
                           A  4316    ; 1382		while (obj->n_frag > 0) {	/* Crea
                           A  4317    ; 1383			res = put_fat(obj->fs, lcl - ob
                           A  4318    ; 1384			if (res != FR_OK) return res;
                           A  4319    ; 1385			obj->n_frag--;
                           A  4320    ; 1386		}
                           A  4321    ; 1387		return FR_OK;
                           A  4322    ; 1388	}
                           A  4323    ; 1389	
                           A  4324    ; 1390	#endif	/* FF_FS_EXFAT && !FF_FS_READON
                           A  4325    ; 1391	
                           A  4326    ; 1392	
                           A  4327    ; 1393	
                           A  4328    ; 1394	#if !FF_FS_READONLY
                           A  4329    ; 1395	/*-------------------------------------
                           A  4330    ; 1396	/* FAT handling - Remove a cluster chai
                           A  4331    ; 1397	/*-------------------------------------
                           A  4332    ; 1398	
                           A  4333    ; 1399	static FRESULT remove_chain (	/* FR_O
                           A  4334    ; 1400		FFOBJID* obj,		/* Correspondin
                           A  4335    ; 1401		DWORD clst,			/* Cluster to r
                           A  4336    ; 1402		DWORD pclst			/* Previous clu
                           A  4337    ; 1403	)
                           A  4338    ; 1404	{
000BF4                     A  4339    _remove_chain:
                           A  4340    .DEFINE "_remove_chain"
                           A  4341    
                           A  4342    .VALUE _remove_chain
                           A  4343    
                           A  4344    .CLASS 3
                           A  4345    
                           A  4346    .TYPE 68
                           A  4347    
                           A  4348    .ENDEF
                           A  4349    
                           A  4350    .BEGFUNC "remove_chain",1404,"_remove_chain"
                           A  4351    
                           A  4352    .LINE 1404
                           A  4353    
                           A  4354    .DEFINE "obj"
                           A  4355    
                           A  4356    .CLASS 65
                           A  4357    
                           A  4358    .VALUE 6
                           A  4359    
                           A  4360    .TAG "NONAME1"
                           A  4361    
                           A  4362    .TYPE 40
                           A  4363    
                           A  4364    .ENDEF
                           A  4365    
                           A  4366    .DEFINE "clst"
                           A  4367    
                           A  4368    .CLASS 65
                           A  4369    
                           A  4370    .VALUE 9
                           A  4371    
                           A  4372    .TYPE 15
                           A  4373    
                           A  4374    .ENDEF
                           A  4375    
                           A  4376    .DEFINE "pclst"
                           A  4377    
                           A  4378    .CLASS 65
                           A  4379    
                           A  4380    .VALUE 15
                           A  4381    
                           A  4382    .TYPE 15
                           A  4383    
                           A  4384    .ENDEF
                           A  4385    
                           A  4386    .DEFINE "fs"
                           A  4387    
                           A  4388    .CLASS 65
                           A  4389    
                           A  4390    .VALUE -3
                           A  4391    
                           A  4392    .TAG "NONAME0"
                           A  4393    
                           A  4394    .TYPE 40
                           A  4395    
                           A  4396    .ENDEF
                           A  4397    
                           A  4398    .DEFINE "res"
                           A  4399    
                           A  4400    .CLASS 65
                           A  4401    
                           A  4402    .VALUE -6
                           A  4403    
                           A  4404    .TYPE 4
                           A  4405    
                           A  4406    .ENDEF
                           A  4407    
                           A  4408    .DEFINE "nxt"
                           A  4409    
                           A  4410    .CLASS 65
                           A  4411    
                           A  4412    .VALUE -10
                           A  4413    
                           A  4414    .TYPE 15
                           A  4415    
                           A  4416    .ENDEF
                           A  4417    
000BF4 DDE5                A  4418    	PUSH	IX
000BF6 DD210000 00         A  4419    	LD	IX,0
000BFB DD39                A  4420    	ADD	IX,SP
000BFD ED22F2              A  4421    	LEA	HL,IX+%FFFFFFF2
000C00 F9                  A  4422    	LD	SP,HL
                           A  4423    ; 1405		FRESULT res = FR_OK;
                           A  4424    .LINE 1405
                           A  4425    
000C01 01000000            A  4426    	LD	BC,0
000C05 DD0FFA              A  4427    	LD	(IX+%FFFFFFFA),BC
                           A  4428    ; 1406		DWORD nxt;
                           A  4429    ; 1407		FATFS *fs = obj->fs;
                           A  4430    .LINE 1407
                           A  4431    
000C08 DD3106              A  4432    	LD	IY,(IX+%6)
000C0B FD0700              A  4433    	LD	BC,(IY+%0)
000C0E DD0FFD              A  4434    	LD	(IX+%FFFFFFFD),BC
                           A  4435    ; 1408	#if FF_FS_EXFAT || FF_USE_TRIM
                           A  4436    ; 1409		DWORD scl = clst, ecl = clst;
                           A  4437    ; 1410	#endif
                           A  4438    ; 1411	#if FF_USE_TRIM
                           A  4439    ; 1412		LBA_t rt[2];
                           A  4440    ; 1413	#endif
                           A  4441    ; 1414	
                           A  4442    ; 1415		if (clst < 2 || clst >= fs->n_faten
                           A  4443    .LINE 1415
                           A  4444    
000C11 DD2709              A  4445    	LD	HL,(IX+%9)
000C14 DD5E0C              A  4446    	LD	E,(IX+%C)
000C17 01020000            A  4447    	LD	BC,2
000C1B AF                  A  4448    	XOR	A,A
000C1C CD 00 00 00         A  4449    	CALL	__lcmpu
000C20 38 15               A  4450    	JR	C,L_109
000C22 DD2709              A  4451    	LD	HL,(IX+%9)
000C25 DD5E0C              A  4452    	LD	E,(IX+%C)
000C28 DD31FD              A  4453    	LD	IY,(IX+%FFFFFFFD)
000C2B FD0716              A  4454    	LD	BC,(IY+%16)
000C2E FD7E19              A  4455    	LD	A,(IY+%19)
000C31 CD 00 00 00         A  4456    	CALL	__lcmpu
000C35 38 08               A  4457    	JR	C,L_113
000C37                     A  4458    L_109:
000C37 21020000            A  4459    	LD	HL,2
000C3B C3 89 0D 00         A  4460    	JR	L_130
000C3F                     A  4461    L_113:
                           A  4462    ; 1416	
                           A  4463    ; 1417		/* Mark the previous cluster 'EOC' 
                           A  4464    ; 1418		if (pclst != 0 && (!FF_FS_EXFAT || 
                           A  4465    .LINE 1418
                           A  4466    
000C3F DD270F              A  4467    	LD	HL,(IX+%F)
000C42 DD5E12              A  4468    	LD	E,(IX+%12)
000C45 01000000            A  4469    	LD	BC,0
000C49 AF                  A  4470    	XOR	A,A
000C4A CD 00 00 00         A  4471    	CALL	__lcmpu
000C4E 28 37               A  4472    	JR	Z,L_128
                           A  4473    ; 1419			res = put_fat(fs, pclst, 0xFFFF
                           A  4474    .LINE 1419
                           A  4475    
000C50 01FF0000            A  4476    	LD	BC,255
000C54 C5                  A  4477    	PUSH	BC
000C55 01FFFFFF            A  4478    	LD	BC,16777215
000C59 C5                  A  4479    	PUSH	BC
000C5A DD4E12              A  4480    	LD	C,(IX+%12)
000C5D 0600                A  4481    	LD	B,%0
000C5F C5                  A  4482    	PUSH	BC
000C60 DD070F              A  4483    	LD	BC,(IX+%F)
000C63 C5                  A  4484    	PUSH	BC
000C64 DD07FD              A  4485    	LD	BC,(IX+%FFFFFFFD)
000C67 C5                  A  4486    	PUSH	BC
000C68 CD D6 08 00         A  4487    	CALL	_put_fat
000C6C C1                  A  4488    	POP	BC
000C6D C1                  A  4489    	POP	BC
000C6E C1                  A  4490    	POP	BC
000C6F C1                  A  4491    	POP	BC
000C70 C1                  A  4492    	POP	BC
000C71 DD2FFA              A  4493    	LD	(IX+%FFFFFFFA),HL
                           A  4494    ; 1420			if (res != FR_OK) return res;
                           A  4495    .LINE 1420
                           A  4496    
000C74 01000000            A  4497    	LD	BC,0
000C78 DD27FA              A  4498    	LD	HL,(IX+%FFFFFFFA)
000C7B B7                  A  4499    	OR	A,A
000C7C ED42                A  4500    	SBC	HL,BC
000C7E 28 07               A  4501    	JR	Z,L_128
000C80 DD27FA              A  4502    	LD	HL,(IX+%FFFFFFFA)
000C83 C3 89 0D 00         A  4503    	JR	L_130
                           A  4504    ; 1421		}
000C87                     A  4505    L_128:
                           A  4506    .LINE 1421
                           A  4507    
                           A  4508    ; 1422	
                           A  4509    ; 1423		/* Remove the chain */
                           A  4510    ; 1424		do {
000C87                     A  4511    L_126:
                           A  4512    .LINE 1424
                           A  4513    
                           A  4514    ; 1425			nxt = get_fat(obj, clst);		
                           A  4515    .LINE 1425
                           A  4516    
000C87 DD4E0C              A  4517    	LD	C,(IX+%C)
000C8A 0600                A  4518    	LD	B,%0
000C8C C5                  A  4519    	PUSH	BC
000C8D DD0709              A  4520    	LD	BC,(IX+%9)
000C90 C5                  A  4521    	PUSH	BC
000C91 DD0706              A  4522    	LD	BC,(IX+%6)
000C94 C5                  A  4523    	PUSH	BC
000C95 CD 64 06 00         A  4524    	CALL	_get_fat
000C99 C1                  A  4525    	POP	BC
000C9A C1                  A  4526    	POP	BC
000C9B C1                  A  4527    	POP	BC
000C9C DD2FF6              A  4528    	LD	(IX+%FFFFFFF6),HL
000C9F DD73F9              A  4529    	LD	(IX+%FFFFFFF9),E
                           A  4530    ; 1426			if (nxt == 0) break;			
                           A  4531    .LINE 1426
                           A  4532    
000CA2 DD27F6              A  4533    	LD	HL,(IX+%FFFFFFF6)
000CA5 DD5EF9              A  4534    	LD	E,(IX+%FFFFFFF9)
000CA8 01000000            A  4535    	LD	BC,0
000CAC AF                  A  4536    	XOR	A,A
000CAD CD 00 00 00         A  4537    	CALL	__lcmpu
000CB1 CA 86 0D 00         A  4538    	JR	Z,L_129
                           A  4539    ; 1427			if (nxt == 1) return FR_INT_ERR
                           A  4540    .LINE 1427
                           A  4541    
000CB5 DD27F6              A  4542    	LD	HL,(IX+%FFFFFFF6)
000CB8 DD5EF9              A  4543    	LD	E,(IX+%FFFFFFF9)
000CBB 01010000            A  4544    	LD	BC,1
000CBF AF                  A  4545    	XOR	A,A
000CC0 CD 00 00 00         A  4546    	CALL	__lcmpu
000CC4 20 08               A  4547    	JR	NZ,L_118
000CC6 21020000            A  4548    	LD	HL,2
000CCA C3 89 0D 00         A  4549    	JR	L_130
000CCE                     A  4550    L_118:
                           A  4551    ; 1428			if (nxt == 0xFFFFFFFF) return F
                           A  4552    .LINE 1428
                           A  4553    
000CCE DD27F6              A  4554    	LD	HL,(IX+%FFFFFFF6)
000CD1 DD5EF9              A  4555    	LD	E,(IX+%FFFFFFF9)
000CD4 01FFFFFF            A  4556    	LD	BC,16777215
000CD8 3EFF                A  4557    	LD	A,%FF
000CDA CD 00 00 00         A  4558    	CALL	__lcmpu
000CDE 20 08               A  4559    	JR	NZ,L_120
000CE0 21010000            A  4560    	LD	HL,1
000CE4 C3 89 0D 00         A  4561    	JR	L_130
                           A  4562    ; 1429			if (!FF_FS_EXFAT || fs->fs_type
000CE8                     A  4563    L_120:
                           A  4564    .LINE 1429
                           A  4565    
                           A  4566    ; 1430				res = put_fat(fs, clst, 0);
                           A  4567    .LINE 1430
                           A  4568    
000CE8 01000000            A  4569    	LD	BC,0
000CEC C5                  A  4570    	PUSH	BC
000CED C5                  A  4571    	PUSH	BC
000CEE DD4E0C              A  4572    	LD	C,(IX+%C)
000CF1 0600                A  4573    	LD	B,%0
000CF3 C5                  A  4574    	PUSH	BC
000CF4 DD0709              A  4575    	LD	BC,(IX+%9)
000CF7 C5                  A  4576    	PUSH	BC
000CF8 DD07FD              A  4577    	LD	BC,(IX+%FFFFFFFD)
000CFB C5                  A  4578    	PUSH	BC
000CFC CD D6 08 00         A  4579    	CALL	_put_fat
000D00 C1                  A  4580    	POP	BC
000D01 C1                  A  4581    	POP	BC
000D02 C1                  A  4582    	POP	BC
000D03 C1                  A  4583    	POP	BC
000D04 C1                  A  4584    	POP	BC
000D05 DD2FFA              A  4585    	LD	(IX+%FFFFFFFA),HL
                           A  4586    ; 1431				if (res != FR_OK) return re
                           A  4587    .LINE 1431
                           A  4588    
000D08 01000000            A  4589    	LD	BC,0
000D0C DD27FA              A  4590    	LD	HL,(IX+%FFFFFFFA)
000D0F B7                  A  4591    	OR	A,A
000D10 ED42                A  4592    	SBC	HL,BC
000D12 28 05               A  4593    	JR	Z,L_124
000D14 DD27FA              A  4594    	LD	HL,(IX+%FFFFFFFA)
000D17 18 70               A  4595    	JR	L_130
                           A  4596    ; 1432			}
000D19                     A  4597    L_124:
                           A  4598    .LINE 1432
                           A  4599    
                           A  4600    ; 1433			if (fs->free_clst < fs->n_faten
                           A  4601    .LINE 1433
                           A  4602    
000D19 DD31FD              A  4603    	LD	IY,(IX+%FFFFFFFD)
000D1C FD0712              A  4604    	LD	BC,(IY+%12)
000D1F FD7E15              A  4605    	LD	A,(IY+%15)
000D22 DD0FF2              A  4606    	LD	(IX+%FFFFFFF2),BC
000D25 DD77F5              A  4607    	LD	(IX+%FFFFFFF5),A
000D28 FD2716              A  4608    	LD	HL,(IY+%16)
000D2B FD5E19              A  4609    	LD	E,(IY+%19)
000D2E 01020000            A  4610    	LD	BC,2
000D32 AF                  A  4611    	XOR	A,A
000D33 CD 00 00 00         A  4612    	CALL	__lsub
000D37 7B                  A  4613    	LD	A,E
000D38 E5C1                A  4614    	LD	BC,HL
000D3A DD27F2              A  4615    	LD	HL,(IX+%FFFFFFF2)
000D3D DD5EF5              A  4616    	LD	E,(IX+%FFFFFFF5)
000D40 CD 00 00 00         A  4617    	CALL	__lcmpu
000D44 30 1D               A  4618    	JR	NC,L_125
                           A  4619    ; 1434				fs->free_clst++;
                           A  4620    .LINE 1434
                           A  4621    
000D46 DD27F2              A  4622    	LD	HL,(IX+%FFFFFFF2)
000D49 DD5EF5              A  4623    	LD	E,(IX+%FFFFFFF5)
000D4C 3E01                A  4624    	LD	A,%1
000D4E CD 00 00 00         A  4625    	CALL	__ladd_b
000D52 DD31FD              A  4626    	LD	IY,(IX+%FFFFFFFD)
000D55 FD2F12              A  4627    	LD	(IY+%12),HL
000D58 FD7315              A  4628    	LD	(IY+%15),E
                           A  4629    ; 1435				fs->fsi_flag |= 1;
                           A  4630    .LINE 1435
                           A  4631    
000D5B FD7E04              A  4632    	LD	A,(IY+%4)
000D5E CBC7                A  4633    	SET	%0,A
000D60 FD7704              A  4634    	LD	(IY+%4),A
                           A  4635    ; 1436			}
000D63                     A  4636    L_125:
                           A  4637    .LINE 1436
                           A  4638    
                           A  4639    ; 1437	#if FF_FS_EXFAT || FF_USE_TRIM
                           A  4640    ; 1438			if (ecl + 1 == nxt) {	/* Is n
                           A  4641    ; 1439				ecl = nxt;
                           A  4642    ; 1440			} else {				/* End 
                           A  4643    ; 1441	#if FF_FS_EXFAT
                           A  4644    ; 1442				if (fs->fs_type == FS_EXFAT
                           A  4645    ; 1443					res = change_bitmap(fs,
                           A  4646    ; 1444					if (res != FR_OK) retur
                           A  4647    ; 1445				}
                           A  4648    ; 1446	#endif
                           A  4649    ; 1447	#if FF_USE_TRIM
                           A  4650    ; 1448				rt[0] = clst2sect(fs, scl);
                           A  4651    ; 1449				rt[1] = clst2sect(fs, ecl) 
                           A  4652    ; 1450				disk_ioctl(fs->pdrv, CTRL_T
                           A  4653    ; 1451	#endif
                           A  4654    ; 1452				scl = ecl = nxt;
                           A  4655    ; 1453			}
                           A  4656    ; 1454	#endif
                           A  4657    ; 1455			clst = nxt;					/* 
                           A  4658    .LINE 1455
                           A  4659    
000D63 DD07F6              A  4660    	LD	BC,(IX+%FFFFFFF6)
000D66 DD7EF9              A  4661    	LD	A,(IX+%FFFFFFF9)
000D69 DD0F09              A  4662    	LD	(IX+%9),BC
000D6C DD770C              A  4663    	LD	(IX+%C),A
                           A  4664    ; 1456		} while (clst < fs->n_fatent);	/* 
                           A  4665    .LINE 1456
                           A  4666    
000D6F DD27F6              A  4667    	LD	HL,(IX+%FFFFFFF6)
000D72 DD5EF9              A  4668    	LD	E,(IX+%FFFFFFF9)
000D75 DD31FD              A  4669    	LD	IY,(IX+%FFFFFFFD)
000D78 FD0716              A  4670    	LD	BC,(IY+%16)
000D7B FD7E19              A  4671    	LD	A,(IY+%19)
000D7E CD 00 00 00         A  4672    	CALL	__lcmpu
000D82 DA 87 0C 00         A  4673    	JR	C,L_126
000D86                     A  4674    L_129:
                           A  4675    ; 1457	
                           A  4676    ; 1458	#if FF_FS_EXFAT
                           A  4677    ; 1459		/* Some post processes for chain st
                           A  4678    ; 1460		if (fs->fs_type == FS_EXFAT) {
                           A  4679    ; 1461			if (pclst == 0) {	/* Has the 
                           A  4680    ; 1462				obj->stat = 0;		/* Chan
                           A  4681    ; 1463			} else {
                           A  4682    ; 1464				if (obj->stat == 0) {	/* 
                           A  4683    ; 1465					clst = obj->sclust;		
                           A  4684    ; 1466					while (clst != pclst) {
                           A  4685    ; 1467						nxt = get_fat(obj, 
                           A  4686    ; 1468						if (nxt < 2) return
                           A  4687    ; 1469						if (nxt == 0xFFFFFF
                           A  4688    ; 1470						if (nxt != clst + 1
                           A  4689    ; 1471						clst++;
                           A  4690    ; 1472					}
                           A  4691    ; 1473					if (clst == pclst) {	
                           A  4692    ; 1474						obj->stat = 2;		
                           A  4693    ; 1475					}
                           A  4694    ; 1476				} else {
                           A  4695    ; 1477					if (obj->stat == 3 && p
                           A  4696    ; 1478						obj->stat = 2;	/* 
                           A  4697    ; 1479					}
                           A  4698    ; 1480				}
                           A  4699    ; 1481			}
                           A  4700    ; 1482		}
                           A  4701    ; 1483	#endif
                           A  4702    ; 1484		return FR_OK;
                           A  4703    .LINE 1484
                           A  4704    
000D86 B7                  A  4705    	OR	A,A
000D87 ED62                A  4706    	SBC	HL,HL
                           A  4707    ; 1485	}
000D89                     A  4708    L_130:
                           A  4709    .LINE 1485
                           A  4710    
000D89 DDF9                A  4711    	LD	SP,IX
000D8B DDE1                A  4712    	POP	IX
000D8D C9                  A  4713    	RET	
                           A  4714    
                           A  4715    
                           A  4716    ;**************************** _remove_chain ***
                           A  4717    ;Name                         Addr/Register   S
                           A  4718    ;G_9                                  IX-14    
                           A  4719    ;nxt                                  IX-10    
                           A  4720    ;res                                   IX-6    
                           A  4721    ;fs                                    IX-3    
                           A  4722    ;pclst                                IX+15    
                           A  4723    ;clst                                  IX+9    
                           A  4724    ;obj                                   IX+6    
                           A  4725    
                           A  4726    
                           A  4727    ; Stack Frame Size: 35 (bytes)
                           A  4728    ;       Spill Code: -1 (instruction)
                           A  4729    
                           A  4730    
                           A  4731    .ENDFUNC "remove_chain",1485,"_remove_chain"
                           A  4732    ; 1486	
                           A  4733    ; 1487	
                           A  4734    ; 1488	
                           A  4735    ; 1489	
                           A  4736    ; 1490	/*-------------------------------------
                           A  4737    ; 1491	/* FAT handling - Stretch a chain or Cr
                           A  4738    ; 1492	/*-------------------------------------
                           A  4739    ; 1493	
                           A  4740    ; 1494	static DWORD create_chain (	/* 0:No fre
                           A  4741    ; 1495		FFOBJID* obj,		/* Correspondin
                           A  4742    ; 1496		DWORD clst			/* Cluster# to 
                           A  4743    ; 1497	)
                           A  4744    ; 1498	{
000D8E                     A  4745    _create_chain:
                           A  4746    .DEFINE "_create_chain"
                           A  4747    
                           A  4748    .VALUE _create_chain
                           A  4749    
                           A  4750    .CLASS 3
                           A  4751    
                           A  4752    .TYPE 79
                           A  4753    
                           A  4754    .ENDEF
                           A  4755    
                           A  4756    .BEGFUNC "create_chain",1498,"_create_chain"
                           A  4757    
                           A  4758    .LINE 1498
                           A  4759    
                           A  4760    .DEFINE "obj"
                           A  4761    
                           A  4762    .CLASS 65
                           A  4763    
                           A  4764    .VALUE 6
                           A  4765    
                           A  4766    .TAG "NONAME1"
                           A  4767    
                           A  4768    .TYPE 40
                           A  4769    
                           A  4770    .ENDEF
                           A  4771    
                           A  4772    .DEFINE "clst"
                           A  4773    
                           A  4774    .CLASS 65
                           A  4775    
                           A  4776    .VALUE 9
                           A  4777    
                           A  4778    .TYPE 15
                           A  4779    
                           A  4780    .ENDEF
                           A  4781    
                           A  4782    .DEFINE "cs"
                           A  4783    
                           A  4784    .CLASS 65
                           A  4785    
                           A  4786    .VALUE -4
                           A  4787    
                           A  4788    .TYPE 15
                           A  4789    
                           A  4790    .ENDEF
                           A  4791    
                           A  4792    .DEFINE "ncl"
                           A  4793    
                           A  4794    .CLASS 65
                           A  4795    
                           A  4796    .VALUE -8
                           A  4797    
                           A  4798    .TYPE 15
                           A  4799    
                           A  4800    .ENDEF
                           A  4801    
                           A  4802    .DEFINE "fs"
                           A  4803    
                           A  4804    .CLASS 65
                           A  4805    
                           A  4806    .VALUE -11
                           A  4807    
                           A  4808    .TAG "NONAME0"
                           A  4809    
                           A  4810    .TYPE 40
                           A  4811    
                           A  4812    .ENDEF
                           A  4813    
                           A  4814    .DEFINE "scl"
                           A  4815    
                           A  4816    .CLASS 65
                           A  4817    
                           A  4818    .VALUE -15
                           A  4819    
                           A  4820    .TYPE 15
                           A  4821    
                           A  4822    .ENDEF
                           A  4823    
                           A  4824    .DEFINE "res"
                           A  4825    
                           A  4826    .CLASS 65
                           A  4827    
                           A  4828    .VALUE -18
                           A  4829    
                           A  4830    .TYPE 4
                           A  4831    
                           A  4832    .ENDEF
                           A  4833    
000D8E DDE5                A  4834    	PUSH	IX
000D90 DD210000 00         A  4835    	LD	IX,0
000D95 DD39                A  4836    	ADD	IX,SP
000D97 ED22E6              A  4837    	LEA	HL,IX+%FFFFFFE6
000D9A F9                  A  4838    	LD	SP,HL
                           A  4839    ; 1499		DWORD cs, ncl, scl;
                           A  4840    ; 1500		FRESULT res;
                           A  4841    ; 1501		FATFS *fs = obj->fs;
                           A  4842    .LINE 1501
                           A  4843    
000D9B DD3106              A  4844    	LD	IY,(IX+%6)
000D9E FD0700              A  4845    	LD	BC,(IY+%0)
000DA1 DD0FF5              A  4846    	LD	(IX+%FFFFFFF5),BC
                           A  4847    ; 1502	
                           A  4848    ; 1503	
                           A  4849    ; 1504		if (clst == 0) {	/* Create a new
                           A  4850    .LINE 1504
                           A  4851    
000DA4 DD2709              A  4852    	LD	HL,(IX+%9)
000DA7 DD5E0C              A  4853    	LD	E,(IX+%C)
000DAA 01000000            A  4854    	LD	BC,0
000DAE AF                  A  4855    	XOR	A,A
000DAF CD 00 00 00         A  4856    	CALL	__lcmpu
000DB3 20 43               A  4857    	JR	NZ,L_140
                           A  4858    ; 1505			scl = fs->last_clst;			
                           A  4859    .LINE 1505
                           A  4860    
000DB5 DD31F5              A  4861    	LD	IY,(IX+%FFFFFFF5)
000DB8 FD070E              A  4862    	LD	BC,(IY+%E)
000DBB FD7E11              A  4863    	LD	A,(IY+%11)
000DBE DD0FF1              A  4864    	LD	(IX+%FFFFFFF1),BC
000DC1 DD77F4              A  4865    	LD	(IX+%FFFFFFF4),A
                           A  4866    ; 1506			if (scl == 0 || scl >= fs->n_fa
                           A  4867    .LINE 1506
                           A  4868    
000DC4 C5E1                A  4869    	LD	HL,BC
000DC6 DD5EF4              A  4870    	LD	E,(IX+%FFFFFFF4)
000DC9 01000000            A  4871    	LD	BC,0
000DCD AF                  A  4872    	XOR	A,A
000DCE CD 00 00 00         A  4873    	CALL	__lcmpu
000DD2 28 17               A  4874    	JR	Z,L_132
000DD4 DD27F1              A  4875    	LD	HL,(IX+%FFFFFFF1)
000DD7 DD5EF4              A  4876    	LD	E,(IX+%FFFFFFF4)
000DDA DD31F5              A  4877    	LD	IY,(IX+%FFFFFFF5)
000DDD FD0716              A  4878    	LD	BC,(IY+%16)
000DE0 FD7E19              A  4879    	LD	A,(IY+%19)
000DE3 CD 00 00 00         A  4880    	CALL	__lcmpu
000DE7 DA 75 0E 00         A  4881    	JR	C,L_142
000DEB                     A  4882    L_132:
000DEB 01010000            A  4883    	LD	BC,1
000DEF AF                  A  4884    	XOR	A,A
000DF0 DD0FF1              A  4885    	LD	(IX+%FFFFFFF1),BC
000DF3 DD77F4              A  4886    	LD	(IX+%FFFFFFF4),A
                           A  4887    ; 1507		}
                           A  4888    ; 1508		else {				/* Stretch a ch
                           A  4889    .LINE 1508
                           A  4890    
000DF6 18 7D               A  4891    	JR	L_142
000DF8                     A  4892    L_140:
                           A  4893    ; 1509			cs = get_fat(obj, clst);		
                           A  4894    .LINE 1509
                           A  4895    
000DF8 DD4E0C              A  4896    	LD	C,(IX+%C)
000DFB 0600                A  4897    	LD	B,%0
000DFD C5                  A  4898    	PUSH	BC
000DFE DD0709              A  4899    	LD	BC,(IX+%9)
000E01 C5                  A  4900    	PUSH	BC
000E02 DD0706              A  4901    	LD	BC,(IX+%6)
000E05 C5                  A  4902    	PUSH	BC
000E06 CD 64 06 00         A  4903    	CALL	_get_fat
000E0A C1                  A  4904    	POP	BC
000E0B C1                  A  4905    	POP	BC
000E0C C1                  A  4906    	POP	BC
000E0D DD2FFC              A  4907    	LD	(IX+%FFFFFFFC),HL
000E10 DD73FF              A  4908    	LD	(IX+%FFFFFFFF),E
                           A  4909    ; 1510			if (cs < 2) return 1;			
                           A  4910    .LINE 1510
                           A  4911    
000E13 DD27FC              A  4912    	LD	HL,(IX+%FFFFFFFC)
000E16 DD5EFF              A  4913    	LD	E,(IX+%FFFFFFFF)
000E19 01020000            A  4914    	LD	BC,2
000E1D AF                  A  4915    	XOR	A,A
000E1E CD 00 00 00         A  4916    	CALL	__lcmpu
000E22 30 0A               A  4917    	JR	NC,L_135
000E24 21010000            A  4918    	LD	HL,1
000E28 1E00                A  4919    	LD	E,%0
000E2A C3 5B 11 00         A  4920    	JR	L_182
000E2E                     A  4921    L_135:
                           A  4922    ; 1511			if (cs == 0xFFFFFFFF) return cs
                           A  4923    .LINE 1511
                           A  4924    
000E2E DD27FC              A  4925    	LD	HL,(IX+%FFFFFFFC)
000E31 DD5EFF              A  4926    	LD	E,(IX+%FFFFFFFF)
000E34 01FFFFFF            A  4927    	LD	BC,16777215
000E38 3EFF                A  4928    	LD	A,%FF
000E3A CD 00 00 00         A  4929    	CALL	__lcmpu
000E3E 20 0A               A  4930    	JR	NZ,L_137
000E40 DD27FC              A  4931    	LD	HL,(IX+%FFFFFFFC)
000E43 DD5EFF              A  4932    	LD	E,(IX+%FFFFFFFF)
000E46 C3 5B 11 00         A  4933    	JR	L_182
000E4A                     A  4934    L_137:
                           A  4935    ; 1512			if (cs < fs->n_fatent) return c
                           A  4936    .LINE 1512
                           A  4937    
000E4A DD27FC              A  4938    	LD	HL,(IX+%FFFFFFFC)
000E4D DD5EFF              A  4939    	LD	E,(IX+%FFFFFFFF)
000E50 DD31F5              A  4940    	LD	IY,(IX+%FFFFFFF5)
000E53 FD0716              A  4941    	LD	BC,(IY+%16)
000E56 FD7E19              A  4942    	LD	A,(IY+%19)
000E59 CD 00 00 00         A  4943    	CALL	__lcmpu
000E5D 30 0A               A  4944    	JR	NC,L_138
000E5F DD27FC              A  4945    	LD	HL,(IX+%FFFFFFFC)
000E62 DD5EFF              A  4946    	LD	E,(IX+%FFFFFFFF)
000E65 C3 5B 11 00         A  4947    	JR	L_182
000E69                     A  4948    L_138:
                           A  4949    ; 1513			scl = clst;						
                           A  4950    .LINE 1513
                           A  4951    
000E69 DD0709              A  4952    	LD	BC,(IX+%9)
000E6C DD7E0C              A  4953    	LD	A,(IX+%C)
000E6F DD0FF1              A  4954    	LD	(IX+%FFFFFFF1),BC
000E72 DD77F4              A  4955    	LD	(IX+%FFFFFFF4),A
                           A  4956    ; 1514		}
000E75                     A  4957    L_142:
                           A  4958    .LINE 1514
                           A  4959    
                           A  4960    ; 1515		if (fs->free_clst == 0) return 0;	
                           A  4961    .LINE 1515
                           A  4962    
000E75 DD31F5              A  4963    	LD	IY,(IX+%FFFFFFF5)
000E78 FD2712              A  4964    	LD	HL,(IY+%12)
000E7B FD5E15              A  4965    	LD	E,(IY+%15)
000E7E 01000000            A  4966    	LD	BC,0
000E82 AF                  A  4967    	XOR	A,A
000E83 CD 00 00 00         A  4968    	CALL	__lcmpu
000E87 20 09               A  4969    	JR	NZ,L_170
000E89 B7                  A  4970    	OR	A,A
000E8A ED62                A  4971    	SBC	HL,HL
000E8C 1E00                A  4972    	LD	E,%0
000E8E C3 5B 11 00         A  4973    	JR	L_182
000E92                     A  4974    L_170:
                           A  4975    ; 1516	
                           A  4976    ; 1517	#if FF_FS_EXFAT
                           A  4977    ; 1518		if (fs->fs_type == FS_EXFAT) {	/* 
                           A  4978    ; 1519			ncl = find_bitmap(fs, scl, 1);	
                           A  4979    ; 1520			if (ncl == 0 || ncl == 0xFFFFFF
                           A  4980    ; 1521			res = change_bitmap(fs, ncl, 1,
                           A  4981    ; 1522			if (res == FR_INT_ERR) return 1
                           A  4982    ; 1523			if (res == FR_DISK_ERR) return 
                           A  4983    ; 1524			if (clst == 0) {				
                           A  4984    ; 1525				obj->stat = 2;				
                           A  4985    ; 1526			} else {						
                           A  4986    ; 1527				if (obj->stat == 2 && ncl !
                           A  4987    ; 1528					obj->n_cont = scl - obj
                           A  4988    ; 1529					obj->stat = 3;			
                           A  4989    ; 1530				}
                           A  4990    ; 1531			}
                           A  4991    ; 1532			if (obj->stat != 2) {	/* Is t
                           A  4992    ; 1533				if (ncl == clst + 1) {	/* 
                           A  4993    ; 1534					obj->n_frag = obj->n_fr
                           A  4994    ; 1535				} else {				/* 
                           A  4995    ; 1536					if (obj->n_frag == 0) o
                           A  4996    ; 1537					res = fill_last_frag(ob
                           A  4997    ; 1538					if (res == FR_OK) obj->
                           A  4998    ; 1539				}
                           A  4999    ; 1540			}
                           A  5000    ; 1541		} else
                           A  5001    ; 1542	#endif
                           A  5002    ; 1543		{	/* On the FAT/FAT32 volume */
                           A  5003    ; 1544			ncl = 0;
                           A  5004    .LINE 1544
                           A  5005    
000E92 AF                  A  5006    	XOR	A,A
000E93 DD0FF8              A  5007    	LD	(IX+%FFFFFFF8),BC
000E96 DD77FB              A  5008    	LD	(IX+%FFFFFFFB),A
                           A  5009    ; 1545			if (scl == clst) {				
                           A  5010    .LINE 1545
                           A  5011    
000E99 DD27F1              A  5012    	LD	HL,(IX+%FFFFFFF1)
000E9C DD5EF4              A  5013    	LD	E,(IX+%FFFFFFF4)
000E9F DD0709              A  5014    	LD	BC,(IX+%9)
000EA2 DD7E0C              A  5015    	LD	A,(IX+%C)
000EA5 CD 00 00 00         A  5016    	CALL	__lcmpu
000EA9 C2 83 0F 00         A  5017    	JR	NZ,L_166
                           A  5018    ; 1546				ncl = scl + 1;				
                           A  5019    .LINE 1546
                           A  5020    
000EAD DD27F1              A  5021    	LD	HL,(IX+%FFFFFFF1)
000EB0 DD5EF4              A  5022    	LD	E,(IX+%FFFFFFF4)
000EB3 3E01                A  5023    	LD	A,%1
000EB5 CD 00 00 00         A  5024    	CALL	__ladd_b
000EB9 DD2FF8              A  5025    	LD	(IX+%FFFFFFF8),HL
000EBC DD73FB              A  5026    	LD	(IX+%FFFFFFFB),E
                           A  5027    ; 1547				if (ncl >= fs->n_fatent) nc
                           A  5028    .LINE 1547
                           A  5029    
000EBF DD27F8              A  5030    	LD	HL,(IX+%FFFFFFF8)
000EC2 DD5EFB              A  5031    	LD	E,(IX+%FFFFFFFB)
000EC5 DD31F5              A  5032    	LD	IY,(IX+%FFFFFFF5)
000EC8 FD0716              A  5033    	LD	BC,(IY+%16)
000ECB FD7E19              A  5034    	LD	A,(IY+%19)
000ECE CD 00 00 00         A  5035    	CALL	__lcmpu
000ED2 38 0B               A  5036    	JR	C,L_144
000ED4 01020000            A  5037    	LD	BC,2
000ED8 AF                  A  5038    	XOR	A,A
000ED9 DD0FF8              A  5039    	LD	(IX+%FFFFFFF8),BC
000EDC DD77FB              A  5040    	LD	(IX+%FFFFFFFB),A
000EDF                     A  5041    L_144:
                           A  5042    ; 1548				cs = get_fat(obj, ncl);		
                           A  5043    .LINE 1548
                           A  5044    
000EDF DD4EFB              A  5045    	LD	C,(IX+%FFFFFFFB)
000EE2 0600                A  5046    	LD	B,%0
000EE4 C5                  A  5047    	PUSH	BC
000EE5 DD07F8              A  5048    	LD	BC,(IX+%FFFFFFF8)
000EE8 C5                  A  5049    	PUSH	BC
000EE9 DD0706              A  5050    	LD	BC,(IX+%6)
000EEC C5                  A  5051    	PUSH	BC
000EED CD 64 06 00         A  5052    	CALL	_get_fat
000EF1 C1                  A  5053    	POP	BC
000EF2 C1                  A  5054    	POP	BC
000EF3 C1                  A  5055    	POP	BC
000EF4 DD2FFC              A  5056    	LD	(IX+%FFFFFFFC),HL
000EF7 DD73FF              A  5057    	LD	(IX+%FFFFFFFF),E
                           A  5058    ; 1549				if (cs == 1 || cs == 0xFFFF
                           A  5059    .LINE 1549
                           A  5060    
000EFA DD27FC              A  5061    	LD	HL,(IX+%FFFFFFFC)
000EFD DD5EFF              A  5062    	LD	E,(IX+%FFFFFFFF)
000F00 01010000            A  5063    	LD	BC,1
000F04 AF                  A  5064    	XOR	A,A
000F05 CD 00 00 00         A  5065    	CALL	__lcmpu
000F09 28 12               A  5066    	JR	Z,L_146
000F0B DD27FC              A  5067    	LD	HL,(IX+%FFFFFFFC)
000F0E DD5EFF              A  5068    	LD	E,(IX+%FFFFFFFF)
000F11 01FFFFFF            A  5069    	LD	BC,16777215
000F15 3EFF                A  5070    	LD	A,%FF
000F17 CD 00 00 00         A  5071    	CALL	__lcmpu
000F1B 20 0A               A  5072    	JR	NZ,L_151
000F1D                     A  5073    L_146:
000F1D DD27FC              A  5074    	LD	HL,(IX+%FFFFFFFC)
000F20 DD5EFF              A  5075    	LD	E,(IX+%FFFFFFFF)
000F23 C3 5B 11 00         A  5076    	JR	L_182
000F27                     A  5077    L_151:
                           A  5078    ; 1550				if (cs != 0) {				
                           A  5079    .LINE 1550
                           A  5080    
000F27 DD27FC              A  5081    	LD	HL,(IX+%FFFFFFFC)
000F2A DD5EFF              A  5082    	LD	E,(IX+%FFFFFFFF)
000F2D 01000000            A  5083    	LD	BC,0
000F31 AF                  A  5084    	XOR	A,A
000F32 CD 00 00 00         A  5085    	CALL	__lcmpu
000F36 28 4B               A  5086    	JR	Z,L_166
                           A  5087    ; 1551					cs = fs->last_clst;		
                           A  5088    .LINE 1551
                           A  5089    
000F38 DD31F5              A  5090    	LD	IY,(IX+%FFFFFFF5)
000F3B FD070E              A  5091    	LD	BC,(IY+%E)
000F3E FD7E11              A  5092    	LD	A,(IY+%11)
000F41 DD0FFC              A  5093    	LD	(IX+%FFFFFFFC),BC
000F44 DD77FF              A  5094    	LD	(IX+%FFFFFFFF),A
                           A  5095    ; 1552					if (cs >= 2 && cs < fs-
                           A  5096    .LINE 1552
                           A  5097    
000F47 C5E1                A  5098    	LD	HL,BC
000F49 DD5EFF              A  5099    	LD	E,(IX+%FFFFFFFF)
000F4C 01020000            A  5100    	LD	BC,2
000F50 AF                  A  5101    	XOR	A,A
000F51 CD 00 00 00         A  5102    	CALL	__lcmpu
000F55 38 21               A  5103    	JR	C,L_149
000F57 DD27FC              A  5104    	LD	HL,(IX+%FFFFFFFC)
000F5A DD5EFF              A  5105    	LD	E,(IX+%FFFFFFFF)
000F5D DD31F5              A  5106    	LD	IY,(IX+%FFFFFFF5)
000F60 FD0716              A  5107    	LD	BC,(IY+%16)
000F63 FD7E19              A  5108    	LD	A,(IY+%19)
000F66 CD 00 00 00         A  5109    	CALL	__lcmpu
000F6A 30 0C               A  5110    	JR	NC,L_149
000F6C DD07FC              A  5111    	LD	BC,(IX+%FFFFFFFC)
000F6F DD7EFF              A  5112    	LD	A,(IX+%FFFFFFFF)
000F72 DD0FF1              A  5113    	LD	(IX+%FFFFFFF1),BC
000F75 DD77F4              A  5114    	LD	(IX+%FFFFFFF4),A
000F78                     A  5115    L_149:
                           A  5116    ; 1553					ncl = 0;
                           A  5117    .LINE 1553
                           A  5118    
000F78 01000000            A  5119    	LD	BC,0
000F7C AF                  A  5120    	XOR	A,A
000F7D DD0FF8              A  5121    	LD	(IX+%FFFFFFF8),BC
000F80 DD77FB              A  5122    	LD	(IX+%FFFFFFFB),A
                           A  5123    ; 1554				}
                           A  5124    ; 1555			}
000F83                     A  5125    L_166:
                           A  5126    .LINE 1555
                           A  5127    
                           A  5128    ; 1556			if (ncl == 0) {	/* The new clus
                           A  5129    .LINE 1556
                           A  5130    
000F83 DD27F8              A  5131    	LD	HL,(IX+%FFFFFFF8)
000F86 DD5EFB              A  5132    	LD	E,(IX+%FFFFFFFB)
000F89 01000000            A  5133    	LD	BC,0
000F8D AF                  A  5134    	XOR	A,A
000F8E CD 00 00 00         A  5135    	CALL	__lcmpu
000F92 C2 60 10 00         A  5136    	JR	NZ,L_167
                           A  5137    ; 1557				ncl = scl;	/* Start cluste
                           A  5138    .LINE 1557
                           A  5139    
000F96 DD07F1              A  5140    	LD	BC,(IX+%FFFFFFF1)
000F99 DD7EF4              A  5141    	LD	A,(IX+%FFFFFFF4)
000F9C DD0FF8              A  5142    	LD	(IX+%FFFFFFF8),BC
000F9F DD77FB              A  5143    	LD	(IX+%FFFFFFFB),A
                           A  5144    ; 1558				for (;;) {
000FA2                     A  5145    L_163:
                           A  5146    .LINE 1558
                           A  5147    
                           A  5148    ; 1559					ncl++;					
                           A  5149    .LINE 1559
                           A  5150    
000FA2 DD27F8              A  5151    	LD	HL,(IX+%FFFFFFF8)
000FA5 DD5EFB              A  5152    	LD	E,(IX+%FFFFFFFB)
000FA8 3E01                A  5153    	LD	A,%1
000FAA CD 00 00 00         A  5154    	CALL	__ladd_b
000FAE DD2FF8              A  5155    	LD	(IX+%FFFFFFF8),HL
000FB1 DD73FB              A  5156    	LD	(IX+%FFFFFFFB),E
                           A  5157    ; 1560					if (ncl >= fs->n_fatent
                           A  5158    .LINE 1560
                           A  5159    
000FB4 DD27F8              A  5160    	LD	HL,(IX+%FFFFFFF8)
000FB7 DD5EFB              A  5161    	LD	E,(IX+%FFFFFFFB)
000FBA DD31F5              A  5162    	LD	IY,(IX+%FFFFFFF5)
000FBD FD0716              A  5163    	LD	BC,(IY+%16)
000FC0 FD7E19              A  5164    	LD	A,(IY+%19)
000FC3 CD 00 00 00         A  5165    	CALL	__lcmpu
000FC7 38 21               A  5166    	JR	C,L_156
                           A  5167    ; 1561						ncl = 2;
                           A  5168    .LINE 1561
                           A  5169    
000FC9 01020000            A  5170    	LD	BC,2
000FCD AF                  A  5171    	XOR	A,A
000FCE DD0FF8              A  5172    	LD	(IX+%FFFFFFF8),BC
000FD1 DD77FB              A  5173    	LD	(IX+%FFFFFFFB),A
                           A  5174    ; 1562						if (ncl > scl) retu
                           A  5175    .LINE 1562
                           A  5176    
000FD4 DD27F1              A  5177    	LD	HL,(IX+%FFFFFFF1)
000FD7 DD5EF4              A  5178    	LD	E,(IX+%FFFFFFF4)
000FDA AF                  A  5179    	XOR	A,A
000FDB CD 00 00 00         A  5180    	CALL	__lcmpu
000FDF 30 09               A  5181    	JR	NC,L_156
000FE1 B7                  A  5182    	OR	A,A
000FE2 ED62                A  5183    	SBC	HL,HL
000FE4 1E00                A  5184    	LD	E,%0
000FE6 C3 5B 11 00         A  5185    	JR	L_182
                           A  5186    ; 1563					}
000FEA                     A  5187    L_156:
                           A  5188    .LINE 1563
                           A  5189    
                           A  5190    ; 1564					cs = get_fat(obj, ncl);
                           A  5191    .LINE 1564
                           A  5192    
000FEA DD4EFB              A  5193    	LD	C,(IX+%FFFFFFFB)
000FED 0600                A  5194    	LD	B,%0
000FEF C5                  A  5195    	PUSH	BC
000FF0 DD07F8              A  5196    	LD	BC,(IX+%FFFFFFF8)
000FF3 C5                  A  5197    	PUSH	BC
000FF4 DD0706              A  5198    	LD	BC,(IX+%6)
000FF7 C5                  A  5199    	PUSH	BC
000FF8 CD 64 06 00         A  5200    	CALL	_get_fat
000FFC C1                  A  5201    	POP	BC
000FFD C1                  A  5202    	POP	BC
000FFE C1                  A  5203    	POP	BC
000FFF DD2FFC              A  5204    	LD	(IX+%FFFFFFFC),HL
001002 DD73FF              A  5205    	LD	(IX+%FFFFFFFF),E
                           A  5206    ; 1565					if (cs == 0) break;		
                           A  5207    .LINE 1565
                           A  5208    
001005 DD27FC              A  5209    	LD	HL,(IX+%FFFFFFFC)
001008 DD5EFF              A  5210    	LD	E,(IX+%FFFFFFFF)
00100B 01000000            A  5211    	LD	BC,0
00100F AF                  A  5212    	XOR	A,A
001010 CD 00 00 00         A  5213    	CALL	__lcmpu
001014 28 4A               A  5214    	JR	Z,L_167
                           A  5215    ; 1566					if (cs == 1 || cs == 0x
                           A  5216    .LINE 1566
                           A  5217    
001016 DD27FC              A  5218    	LD	HL,(IX+%FFFFFFFC)
001019 DD5EFF              A  5219    	LD	E,(IX+%FFFFFFFF)
00101C 01010000            A  5220    	LD	BC,1
001020 AF                  A  5221    	XOR	A,A
001021 CD 00 00 00         A  5222    	CALL	__lcmpu
001025 28 12               A  5223    	JR	Z,L_159
001027 DD27FC              A  5224    	LD	HL,(IX+%FFFFFFFC)
00102A DD5EFF              A  5225    	LD	E,(IX+%FFFFFFFF)
00102D 01FFFFFF            A  5226    	LD	BC,16777215
001031 3EFF                A  5227    	LD	A,%FF
001033 CD 00 00 00         A  5228    	CALL	__lcmpu
001037 20 0A               A  5229    	JR	NZ,L_162
001039                     A  5230    L_159:
001039 DD27FC              A  5231    	LD	HL,(IX+%FFFFFFFC)
00103C DD5EFF              A  5232    	LD	E,(IX+%FFFFFFFF)
00103F C3 5B 11 00         A  5233    	JR	L_182
001043                     A  5234    L_162:
                           A  5235    ; 1567					if (ncl == scl) return 
                           A  5236    .LINE 1567
                           A  5237    
001043 DD27F8              A  5238    	LD	HL,(IX+%FFFFFFF8)
001046 DD5EFB              A  5239    	LD	E,(IX+%FFFFFFFB)
001049 DD07F1              A  5240    	LD	BC,(IX+%FFFFFFF1)
00104C DD7EF4              A  5241    	LD	A,(IX+%FFFFFFF4)
00104F CD 00 00 00         A  5242    	CALL	__lcmpu
001053 C2 A2 0F 00         A  5243    	JR	NZ,L_163
001057 B7                  A  5244    	OR	A,A
001058 ED62                A  5245    	SBC	HL,HL
00105A 1E00                A  5246    	LD	E,%0
00105C C3 5B 11 00         A  5247    	JR	L_182
                           A  5248    ; 1568				}
                           A  5249    .LINE 1568
                           A  5250    
                           A  5251    ; 1569			}
001060                     A  5252    L_167:
                           A  5253    .LINE 1569
                           A  5254    
                           A  5255    ; 1570			res = put_fat(fs, ncl, 0xFFFFFF
                           A  5256    .LINE 1570
                           A  5257    
001060 01FF0000            A  5258    	LD	BC,255
001064 C5                  A  5259    	PUSH	BC
001065 01FFFFFF            A  5260    	LD	BC,16777215
001069 C5                  A  5261    	PUSH	BC
00106A DD4EFB              A  5262    	LD	C,(IX+%FFFFFFFB)
00106D 0600                A  5263    	LD	B,%0
00106F C5                  A  5264    	PUSH	BC
001070 DD07F8              A  5265    	LD	BC,(IX+%FFFFFFF8)
001073 C5                  A  5266    	PUSH	BC
001074 DD07F5              A  5267    	LD	BC,(IX+%FFFFFFF5)
001077 C5                  A  5268    	PUSH	BC
001078 CD D6 08 00         A  5269    	CALL	_put_fat
00107C C1                  A  5270    	POP	BC
00107D C1                  A  5271    	POP	BC
00107E C1                  A  5272    	POP	BC
00107F C1                  A  5273    	POP	BC
001080 C1                  A  5274    	POP	BC
001081 DD2FEE              A  5275    	LD	(IX+%FFFFFFEE),HL
                           A  5276    ; 1571			if (res == FR_OK && clst != 0) 
                           A  5277    .LINE 1571
                           A  5278    
001084 01000000            A  5279    	LD	BC,0
001088 DD27EE              A  5280    	LD	HL,(IX+%FFFFFFEE)
00108B B7                  A  5281    	OR	A,A
00108C ED42                A  5282    	SBC	HL,BC
00108E 20 31               A  5283    	JR	NZ,L_180
001090 DD2709              A  5284    	LD	HL,(IX+%9)
001093 DD5E0C              A  5285    	LD	E,(IX+%C)
001096 AF                  A  5286    	XOR	A,A
001097 CD 00 00 00         A  5287    	CALL	__lcmpu
00109B 28 24               A  5288    	JR	Z,L_180
                           A  5289    ; 1572				res = put_fat(fs, clst, ncl
                           A  5290    .LINE 1572
                           A  5291    
00109D DD4EFB              A  5292    	LD	C,(IX+%FFFFFFFB)
0010A0 0600                A  5293    	LD	B,%0
0010A2 C5                  A  5294    	PUSH	BC
0010A3 DD07F8              A  5295    	LD	BC,(IX+%FFFFFFF8)
0010A6 C5                  A  5296    	PUSH	BC
0010A7 DD4E0C              A  5297    	LD	C,(IX+%C)
0010AA 0600                A  5298    	LD	B,%0
0010AC C5                  A  5299    	PUSH	BC
0010AD DD0709              A  5300    	LD	BC,(IX+%9)
0010B0 C5                  A  5301    	PUSH	BC
0010B1 DD07F5              A  5302    	LD	BC,(IX+%FFFFFFF5)
0010B4 C5                  A  5303    	PUSH	BC
0010B5 CD D6 08 00         A  5304    	CALL	_put_fat
0010B9 C1                  A  5305    	POP	BC
0010BA C1                  A  5306    	POP	BC
0010BB C1                  A  5307    	POP	BC
0010BC C1                  A  5308    	POP	BC
0010BD C1                  A  5309    	POP	BC
0010BE DD2FEE              A  5310    	LD	(IX+%FFFFFFEE),HL
                           A  5311    ; 1573			}
                           A  5312    ; 1574		}
0010C1                     A  5313    L_180:
                           A  5314    .LINE 1574
                           A  5315    
                           A  5316    ; 1575	
                           A  5317    ; 1576		if (res == FR_OK) {			/* Upda
                           A  5318    .LINE 1576
                           A  5319    
0010C1 01000000            A  5320    	LD	BC,0
0010C5 DD27EE              A  5321    	LD	HL,(IX+%FFFFFFEE)
0010C8 B7                  A  5322    	OR	A,A
0010C9 ED42                A  5323    	SBC	HL,BC
0010CB 20 5B               A  5324    	JR	NZ,L_179
                           A  5325    ; 1577			fs->last_clst = ncl;
                           A  5326    .LINE 1577
                           A  5327    
0010CD DD07F8              A  5328    	LD	BC,(IX+%FFFFFFF8)
0010D0 DD7EFB              A  5329    	LD	A,(IX+%FFFFFFFB)
0010D3 DD31F5              A  5330    	LD	IY,(IX+%FFFFFFF5)
0010D6 FD0F0E              A  5331    	LD	(IY+%E),BC
0010D9 FD7711              A  5332    	LD	(IY+%11),A
                           A  5333    ; 1578			if (fs->free_clst <= fs->n_fate
                           A  5334    .LINE 1578
                           A  5335    
0010DC FD0712              A  5336    	LD	BC,(IY+%12)
0010DF FD7E15              A  5337    	LD	A,(IY+%15)
0010E2 DD0FEA              A  5338    	LD	(IX+%FFFFFFEA),BC
0010E5 DD77ED              A  5339    	LD	(IX+%FFFFFFED),A
0010E8 FD2716              A  5340    	LD	HL,(IY+%16)
0010EB FD5E19              A  5341    	LD	E,(IY+%19)
0010EE 01020000            A  5342    	LD	BC,2
0010F2 AF                  A  5343    	XOR	A,A
0010F3 CD 00 00 00         A  5344    	CALL	__lsub
0010F7 DD07EA              A  5345    	LD	BC,(IX+%FFFFFFEA)
0010FA DD7EED              A  5346    	LD	A,(IX+%FFFFFFED)
0010FD CD 00 00 00         A  5347    	CALL	__lcmpu
001101 38 18               A  5348    	JR	C,L_173
001103 DD27EA              A  5349    	LD	HL,(IX+%FFFFFFEA)
001106 DD5EED              A  5350    	LD	E,(IX+%FFFFFFED)
001109 01010000            A  5351    	LD	BC,1
00110D AF                  A  5352    	XOR	A,A
00110E CD 00 00 00         A  5353    	CALL	__lsub
001112 DD31F5              A  5354    	LD	IY,(IX+%FFFFFFF5)
001115 FD2F12              A  5355    	LD	(IY+%12),HL
001118 FD7315              A  5356    	LD	(IY+%15),E
00111B                     A  5357    L_173:
                           A  5358    ; 1579			fs->fsi_flag |= 1;
                           A  5359    .LINE 1579
                           A  5360    
00111B DD31F5              A  5361    	LD	IY,(IX+%FFFFFFF5)
00111E FD7E04              A  5362    	LD	A,(IY+%4)
001121 CBC7                A  5363    	SET	%0,A
001123 FD7704              A  5364    	LD	(IY+%4),A
                           A  5365    ; 1580		} else {
                           A  5366    .LINE 1580
                           A  5367    
001126 18 2D               A  5368    	JR	L_181
001128                     A  5369    L_179:
                           A  5370    ; 1581			ncl = (res == FR_DISK_ERR) ? 0x
                           A  5371    .LINE 1581
                           A  5372    
001128 01010000            A  5373    	LD	BC,1
00112C DD27EE              A  5374    	LD	HL,(IX+%FFFFFFEE)
00112F B7                  A  5375    	OR	A,A
001130 ED42                A  5376    	SBC	HL,BC
001132 20 0E               A  5377    	JR	NZ,L_176
001134 01FFFFFF            A  5378    	LD	BC,16777215
001138 3EFF                A  5379    	LD	A,%FF
00113A DD0FE6              A  5380    	LD	(IX+%FFFFFFE6),BC
00113D DD77E9              A  5381    	LD	(IX+%FFFFFFE9),A
001140 18 07               A  5382    	JR	L_177
001142                     A  5383    L_176:
001142 AF                  A  5384    	XOR	A,A
001143 DD0FE6              A  5385    	LD	(IX+%FFFFFFE6),BC
001146 DD77E9              A  5386    	LD	(IX+%FFFFFFE9),A
001149                     A  5387    L_177:
001149 DD07E6              A  5388    	LD	BC,(IX+%FFFFFFE6)
00114C DD7EE9              A  5389    	LD	A,(IX+%FFFFFFE9)
00114F DD0FF8              A  5390    	LD	(IX+%FFFFFFF8),BC
001152 DD77FB              A  5391    	LD	(IX+%FFFFFFFB),A
                           A  5392    ; 1582		}
001155                     A  5393    L_181:
                           A  5394    .LINE 1582
                           A  5395    
                           A  5396    ; 1583	
                           A  5397    ; 1584		return ncl;		/* Return new clust
                           A  5398    .LINE 1584
                           A  5399    
001155 DD27F8              A  5400    	LD	HL,(IX+%FFFFFFF8)
001158 DD5EFB              A  5401    	LD	E,(IX+%FFFFFFFB)
                           A  5402    ; 1585	}
00115B                     A  5403    L_182:
                           A  5404    .LINE 1585
                           A  5405    
00115B DDF9                A  5406    	LD	SP,IX
00115D DDE1                A  5407    	POP	IX
00115F C9                  A  5408    	RET	
                           A  5409    
                           A  5410    
                           A  5411    ;**************************** _create_chain ***
                           A  5412    ;Name                         Addr/Register   S
                           A  5413    ;temp174                              IX-26    
                           A  5414    ;G_10                                 IX-22    
                           A  5415    ;res                                  IX-18    
                           A  5416    ;scl                                  IX-15    
                           A  5417    ;fs                                   IX-11    
                           A  5418    ;ncl                                   IX-8    
                           A  5419    ;cs                                    IX-4    
                           A  5420    ;clst                                  IX+9    
                           A  5421    ;obj                                   IX+6    
                           A  5422    
                           A  5423    
                           A  5424    ; Stack Frame Size: 41 (bytes)
                           A  5425    ;       Spill Code: -1 (instruction)
                           A  5426    
                           A  5427    
                           A  5428    .ENDFUNC "create_chain",1585,"_create_chain"
                           A  5429    ; 1586	
                           A  5430    ; 1587	#endif /* !FF_FS_READONLY */
                           A  5431    ; 1588	
                           A  5432    ; 1589	
                           A  5433    ; 1590	
                           A  5434    ; 1591	
                           A  5435    ; 1592	#if FF_USE_FASTSEEK
                           A  5436    ; 1593	/*-------------------------------------
                           A  5437    ; 1594	/* FAT handling - Convert offset into c
                           A  5438    ; 1595	/*-------------------------------------
                           A  5439    ; 1596	
                           A  5440    ; 1597	static DWORD clmt_clust (	/* <2:Error
                           A  5441    ; 1598		FIL* fp,		/* Pointer to the f
                           A  5442    ; 1599		FSIZE_t ofs		/* File offset to b
                           A  5443    ; 1600	)
                           A  5444    ; 1601	{
                           A  5445    ; 1602		DWORD cl, ncl, *tbl;
                           A  5446    ; 1603		FATFS *fs = fp->obj.fs;
                           A  5447    ; 1604	
                           A  5448    ; 1605	
                           A  5449    ; 1606		tbl = fp->cltbl + 1;	/* Top of C
                           A  5450    ; 1607		cl = (DWORD)(ofs / SS(fs) / fs->csi
                           A  5451    ; 1608		for (;;) {
                           A  5452    ; 1609			ncl = *tbl++;			/* Numb
                           A  5453    ; 1610			if (ncl == 0) return 0;	/* End 
                           A  5454    ; 1611			if (cl < ncl) break;	/* In t
                           A  5455    ; 1612			cl -= ncl; tbl++;		/* Next
                           A  5456    ; 1613		}
                           A  5457    ; 1614		return cl + *tbl;	/* Return the c
                           A  5458    ; 1615	}
                           A  5459    ; 1616	
                           A  5460    ; 1617	#endif	/* FF_USE_FASTSEEK */
                           A  5461    ; 1618	
                           A  5462    ; 1619	
                           A  5463    ; 1620	
                           A  5464    ; 1621	
                           A  5465    ; 1622	/*-------------------------------------
                           A  5466    ; 1623	/* Directory handling - Fill a cluster 
                           A  5467    ; 1624	/*-------------------------------------
                           A  5468    ; 1625	
                           A  5469    ; 1626	#if !FF_FS_READONLY
                           A  5470    ; 1627	static FRESULT dir_clear (	/* Returns 
                           A  5471    ; 1628		FATFS *fs,		/* Filesystem objec
                           A  5472    ; 1629		DWORD clst		/* Directory table 
                           A  5473    ; 1630	)
                           A  5474    ; 1631	{
001160                     A  5475    _dir_clear:
                           A  5476    .DEFINE "_dir_clear"
                           A  5477    
                           A  5478    .VALUE _dir_clear
                           A  5479    
                           A  5480    .CLASS 3
                           A  5481    
                           A  5482    .TYPE 68
                           A  5483    
                           A  5484    .ENDEF
                           A  5485    
                           A  5486    .BEGFUNC "dir_clear",1631,"_dir_clear"
                           A  5487    
                           A  5488    .LINE 1631
                           A  5489    
                           A  5490    .DEFINE "fs"
                           A  5491    
                           A  5492    .CLASS 65
                           A  5493    
                           A  5494    .VALUE 6
                           A  5495    
                           A  5496    .TAG "NONAME0"
                           A  5497    
                           A  5498    .TYPE 40
                           A  5499    
                           A  5500    .ENDEF
                           A  5501    
                           A  5502    .DEFINE "clst"
                           A  5503    
                           A  5504    .CLASS 65
                           A  5505    
                           A  5506    .VALUE 9
                           A  5507    
                           A  5508    .TYPE 15
                           A  5509    
                           A  5510    .ENDEF
                           A  5511    
                           A  5512    .DEFINE "n"
                           A  5513    
                           A  5514    .CLASS 65
                           A  5515    
                           A  5516    .VALUE -3
                           A  5517    
                           A  5518    .TYPE 14
                           A  5519    
                           A  5520    .ENDEF
                           A  5521    
                           A  5522    .DEFINE "ibuf"
                           A  5523    
                           A  5524    .CLASS 65
                           A  5525    
                           A  5526    .VALUE -9
                           A  5527    
                           A  5528    .TYPE 44
                           A  5529    
                           A  5530    .ENDEF
                           A  5531    
                           A  5532    .DEFINE "sect"
                           A  5533    
                           A  5534    .CLASS 65
                           A  5535    
                           A  5536    .VALUE -13
                           A  5537    
                           A  5538    .TYPE 15
                           A  5539    
                           A  5540    .ENDEF
                           A  5541    
001160 DDE5                A  5542    	PUSH	IX
001162 DD210000 00         A  5543    	LD	IX,0
001167 DD39                A  5544    	ADD	IX,SP
001169 ED22F3              A  5545    	LEA	HL,IX+%FFFFFFF3
00116C F9                  A  5546    	LD	SP,HL
                           A  5547    ; 1632		LBA_t sect;
                           A  5548    ; 1633		UINT n, szb;
                           A  5549    ; 1634		BYTE *ibuf;
                           A  5550    ; 1635	
                           A  5551    ; 1636	
                           A  5552    ; 1637		if (sync_window(fs) != FR_OK) retur
                           A  5553    .LINE 1637
                           A  5554    
00116D DD0706              A  5555    	LD	BC,(IX+%6)
001170 C5                  A  5556    	PUSH	BC
001171 CD 4E 03 00         A  5557    	CALL	_sync_window
001175 C1                  A  5558    	POP	BC
001176 01000000            A  5559    	LD	BC,0
00117A B7                  A  5560    	OR	A,A
00117B ED42                A  5561    	SBC	HL,BC
00117D 28 08               A  5562    	JR	Z,L_184
00117F 21010000            A  5563    	LD	HL,1
001183 C3 4B 12 00         A  5564    	JR	L_194
001187                     A  5565    L_184:
                           A  5566    ; 1638		sect = clst2sect(fs, clst);		/* 
                           A  5567    .LINE 1638
                           A  5568    
001187 DD4E0C              A  5569    	LD	C,(IX+%C)
00118A 0600                A  5570    	LD	B,%0
00118C C5                  A  5571    	PUSH	BC
00118D DD0709              A  5572    	LD	BC,(IX+%9)
001190 C5                  A  5573    	PUSH	BC
001191 DD0706              A  5574    	LD	BC,(IX+%6)
001194 C5                  A  5575    	PUSH	BC
001195 CD F9 05 00         A  5576    	CALL	_clst2sect
001199 C1                  A  5577    	POP	BC
00119A C1                  A  5578    	POP	BC
00119B C1                  A  5579    	POP	BC
00119C DD2FF3              A  5580    	LD	(IX+%FFFFFFF3),HL
00119F DD73F6              A  5581    	LD	(IX+%FFFFFFF6),E
                           A  5582    ; 1639		fs->winsect = sect;				/* 
                           A  5583    .LINE 1639
                           A  5584    
0011A2 DD7EF6              A  5585    	LD	A,(IX+%FFFFFFF6)
0011A5 DD3106              A  5586    	LD	IY,(IX+%6)
0011A8 FD2F2E              A  5587    	LD	(IY+%2E),HL
0011AB FD7731              A  5588    	LD	(IY+%31),A
                           A  5589    ; 1640		memset(fs->win, 0, sizeof fs->win);
                           A  5590    .LINE 1640
                           A  5591    
0011AE 01000200            A  5592    	LD	BC,512
0011B2 C5                  A  5593    	PUSH	BC
0011B3 01000000            A  5594    	LD	BC,0
0011B7 C5                  A  5595    	PUSH	BC
0011B8 ED6632              A  5596    	PEA	IY+%32
0011BB CD 00 00 00         A  5597    	CALL	_memset
0011BF C1                  A  5598    	POP	BC
0011C0 C1                  A  5599    	POP	BC
0011C1 C1                  A  5600    	POP	BC
                           A  5601    ; 1641	#if FF_USE_LFN == 3		/* Quick table 
                           A  5602    ; 1642		/* Allocate a temporary buffer */
                           A  5603    ; 1643		for (szb = ((DWORD)fs->csize * SS(f
                           A  5604    ; 1644		if (szb > SS(fs)) {		/* Buffer a
                           A  5605    ; 1645			memset(ibuf, 0, szb);
                           A  5606    ; 1646			szb /= SS(fs);		/* Bytes ->
                           A  5607    ; 1647			for (n = 0; n < fs->csize && di
                           A  5608    ; 1648			ff_memfree(ibuf);
                           A  5609    ; 1649		} else
                           A  5610    ; 1650	#endif
                           A  5611    ; 1651		{
                           A  5612    ; 1652			ibuf = fs->win; szb = 1;	/* 
                           A  5613    .LINE 1652
                           A  5614    
0011C2 DD3106              A  5615    	LD	IY,(IX+%6)
0011C5 ED0332              A  5616    	LEA	BC,IY+%32
0011C8 DD0FF7              A  5617    	LD	(IX+%FFFFFFF7),BC
                           A  5618    ; 1653			for (n = 0; n < fs->csize && di
                           A  5619    .LINE 1653
                           A  5620    
0011CB 01000000            A  5621    	LD	BC,0
0011CF DD0FFD              A  5622    	LD	(IX+%FFFFFFFD),BC
0011D2 18 07               A  5623    	JR	L_188
0011D4                     A  5624    L_186:
0011D4 DD07FD              A  5625    	LD	BC,(IX+%FFFFFFFD)
0011D7 03                  A  5626    	INC	BC
0011D8 DD0FFD              A  5627    	LD	(IX+%FFFFFFFD),BC
0011DB                     A  5628    L_188:
0011DB DD3106              A  5629    	LD	IY,(IX+%6)
0011DE FD0709              A  5630    	LD	BC,(IY+%9)
0011E1 CD 00 00 00         A  5631    	CALL	__stoiu
0011E5 E5C1                A  5632    	LD	BC,HL
0011E7 DD27FD              A  5633    	LD	HL,(IX+%FFFFFFFD)
0011EA B7                  A  5634    	OR	A,A
0011EB ED42                A  5635    	SBC	HL,BC
0011ED 30 37               A  5636    	JR	NC,L_193
0011EF 01010000            A  5637    	LD	BC,1
0011F3 C5                  A  5638    	PUSH	BC
0011F4 DD07FD              A  5639    	LD	BC,(IX+%FFFFFFFD)
0011F7 AF                  A  5640    	XOR	A,A
0011F8 DD27F3              A  5641    	LD	HL,(IX+%FFFFFFF3)
0011FB DD5EF6              A  5642    	LD	E,(IX+%FFFFFFF6)
0011FE CD 00 00 00         A  5643    	CALL	__ladd
001202 4B                  A  5644    	LD	C,E
001203 0600                A  5645    	LD	B,%0
001205 C5                  A  5646    	PUSH	BC
001206 E5                  A  5647    	PUSH	HL
001207 DD07F7              A  5648    	LD	BC,(IX+%FFFFFFF7)
00120A C5                  A  5649    	PUSH	BC
00120B DD3106              A  5650    	LD	IY,(IX+%6)
00120E FD4E01              A  5651    	LD	C,(IY+%1)
001211 0600                A  5652    	LD	B,%0
001213 C5                  A  5653    	PUSH	BC
001214 CD 00 00 00         A  5654    	CALL	_disk_write
001218 C1                  A  5655    	POP	BC
001219 C1                  A  5656    	POP	BC
00121A C1                  A  5657    	POP	BC
00121B C1                  A  5658    	POP	BC
00121C C1                  A  5659    	POP	BC
00121D 01000000            A  5660    	LD	BC,0
001221 B7                  A  5661    	OR	A,A
001222 ED42                A  5662    	SBC	HL,BC
001224 28 AE               A  5663    	JR	Z,L_186
                           A  5664    ; 1654		}
001226                     A  5665    L_193:
                           A  5666    .LINE 1654
                           A  5667    
                           A  5668    ; 1655		return (n == fs->csize) ? FR_OK : F
                           A  5669    .LINE 1655
                           A  5670    
001226 DD3106              A  5671    	LD	IY,(IX+%6)
001229 FD0709              A  5672    	LD	BC,(IY+%9)
00122C CD 00 00 00         A  5673    	CALL	__stoiu
001230 DD07FD              A  5674    	LD	BC,(IX+%FFFFFFFD)
001233 B7                  A  5675    	OR	A,A
001234 ED42                A  5676    	SBC	HL,BC
001236 20 09               A  5677    	JR	NZ,L_191
001238 01000000            A  5678    	LD	BC,0
00123C DD0FFA              A  5679    	LD	(IX+%FFFFFFFA),BC
00123F 18 07               A  5680    	JR	L_192
001241                     A  5681    L_191:
001241 01010000            A  5682    	LD	BC,1
001245 DD0FFA              A  5683    	LD	(IX+%FFFFFFFA),BC
001248                     A  5684    L_192:
001248 DD27FA              A  5685    	LD	HL,(IX+%FFFFFFFA)
                           A  5686    ; 1656	}
00124B                     A  5687    L_194:
                           A  5688    .LINE 1656
                           A  5689    
00124B DDF9                A  5690    	LD	SP,IX
00124D DDE1                A  5691    	POP	IX
00124F C9                  A  5692    	RET	
                           A  5693    
                           A  5694    
                           A  5695    ;**************************** _dir_clear ******
                           A  5696    ;Name                         Addr/Register   S
                           A  5697    ;_disk_write                         IMPORT  --
                           A  5698    ;_memset                             IMPORT  --
                           A  5699    ;sect                                 IX-13    
                           A  5700    ;ibuf                                  IX-9    
                           A  5701    ;temp189                               IX-6    
                           A  5702    ;n                                     IX-3    
                           A  5703    ;clst                                  IX+9    
                           A  5704    ;fs                                    IX+6    
                           A  5705    
                           A  5706    
                           A  5707    ; Stack Frame Size: 28 (bytes)
                           A  5708    ;       Spill Code: -1 (instruction)
                           A  5709    
                           A  5710    
                           A  5711    .ENDFUNC "dir_clear",1656,"_dir_clear"
                           A  5712    ; 1657	#endif	/* !FF_FS_READONLY */
                           A  5713    ; 1658	
                           A  5714    ; 1659	
                           A  5715    ; 1660	
                           A  5716    ; 1661	
                           A  5717    ; 1662	/*-------------------------------------
                           A  5718    ; 1663	/* Directory handling - Set directory i
                           A  5719    ; 1664	/*-------------------------------------
                           A  5720    ; 1665	
                           A  5721    ; 1666	static FRESULT dir_sdi (	/* FR_OK(0)
                           A  5722    ; 1667		DIR* dp,		/* Pointer to direc
                           A  5723    ; 1668		DWORD ofs		/* Offset of direct
                           A  5724    ; 1669	)
                           A  5725    ; 1670	{
001250                     A  5726    _dir_sdi:
                           A  5727    .DEFINE "_dir_sdi"
                           A  5728    
                           A  5729    .VALUE _dir_sdi
                           A  5730    
                           A  5731    .CLASS 3
                           A  5732    
                           A  5733    .TYPE 68
                           A  5734    
                           A  5735    .ENDEF
                           A  5736    
                           A  5737    .BEGFUNC "dir_sdi",1670,"_dir_sdi"
                           A  5738    
                           A  5739    .LINE 1670
                           A  5740    
                           A  5741    .DEFINE "dp"
                           A  5742    
                           A  5743    .CLASS 65
                           A  5744    
                           A  5745    .VALUE 6
                           A  5746    
                           A  5747    .TAG "NONAME3"
                           A  5748    
                           A  5749    .TYPE 40
                           A  5750    
                           A  5751    .ENDEF
                           A  5752    
                           A  5753    .DEFINE "ofs"
                           A  5754    
                           A  5755    .CLASS 65
                           A  5756    
                           A  5757    .VALUE 9
                           A  5758    
                           A  5759    .TYPE 15
                           A  5760    
                           A  5761    .ENDEF
                           A  5762    
                           A  5763    .DEFINE "clst"
                           A  5764    
                           A  5765    .CLASS 65
                           A  5766    
                           A  5767    .VALUE -4
                           A  5768    
                           A  5769    .TYPE 15
                           A  5770    
                           A  5771    .ENDEF
                           A  5772    
                           A  5773    .DEFINE "fs"
                           A  5774    
                           A  5775    .CLASS 65
                           A  5776    
                           A  5777    .VALUE -7
                           A  5778    
                           A  5779    .TAG "NONAME0"
                           A  5780    
                           A  5781    .TYPE 40
                           A  5782    
                           A  5783    .ENDEF
                           A  5784    
                           A  5785    .DEFINE "csz"
                           A  5786    
                           A  5787    .CLASS 65
                           A  5788    
                           A  5789    .VALUE -11
                           A  5790    
                           A  5791    .TYPE 15
                           A  5792    
                           A  5793    .ENDEF
                           A  5794    
001250 DDE5                A  5795    	PUSH	IX
001252 DD210000 00         A  5796    	LD	IX,0
001257 DD39                A  5797    	ADD	IX,SP
001259 ED22F0              A  5798    	LEA	HL,IX+%FFFFFFF0
00125C F9                  A  5799    	LD	SP,HL
                           A  5800    ; 1671		DWORD csz, clst;
                           A  5801    ; 1672		FATFS *fs = dp->obj.fs;
                           A  5802    .LINE 1672
                           A  5803    
00125D DD3106              A  5804    	LD	IY,(IX+%6)
001260 FD0700              A  5805    	LD	BC,(IY+%0)
001263 DD0FF9              A  5806    	LD	(IX+%FFFFFFF9),BC
                           A  5807    ; 1673	
                           A  5808    ; 1674	
                           A  5809    ; 1675		if (ofs >= (DWORD)((FF_FS_EXFAT && 
                           A  5810    .LINE 1675
                           A  5811    
001266 DD2709              A  5812    	LD	HL,(IX+%9)
001269 DD5E0C              A  5813    	LD	E,(IX+%C)
00126C 01000020            A  5814    	LD	BC,2097152
001270 AF                  A  5815    	XOR	A,A
001271 CD 00 00 00         A  5816    	CALL	__lcmpu
001275 30 15               A  5817    	JR	NC,L_196
001277 DD7E09              A  5818    	LD	A,(IX+%9)
00127A E61F                A  5819    	AND	A,%1F
00127C B7ED62              A  5820    	UEXT	HL
00127F 6F                  A  5821    	LD	L,A
001280 5C                  A  5822    	LD	E,H
001281 01000000            A  5823    	LD	BC,0
001285 AF                  A  5824    	XOR	A,A
001286 CD 00 00 00         A  5825    	CALL	__lcmpu
00128A 28 08               A  5826    	JR	Z,L_197
00128C                     A  5827    L_196:
                           A  5828    ; 1676			return FR_INT_ERR;
                           A  5829    .LINE 1676
                           A  5830    
00128C 21020000            A  5831    	LD	HL,2
001290 C3 65 14 00         A  5832    	JR	L_217
                           A  5833    ; 1677		}
001294                     A  5834    L_197:
                           A  5835    .LINE 1677
                           A  5836    
                           A  5837    ; 1678		dp->dptr = ofs;				/* Set 
                           A  5838    .LINE 1678
                           A  5839    
001294 DD0709              A  5840    	LD	BC,(IX+%9)
001297 DD7E0C              A  5841    	LD	A,(IX+%C)
00129A DD3106              A  5842    	LD	IY,(IX+%6)
00129D FD0F0F              A  5843    	LD	(IY+%F),BC
0012A0 FD7712              A  5844    	LD	(IY+%12),A
                           A  5845    ; 1679		clst = dp->obj.sclust;		/* Tabl
                           A  5846    .LINE 1679
                           A  5847    
0012A3 FD0707              A  5848    	LD	BC,(IY+%7)
0012A6 FD7E0A              A  5849    	LD	A,(IY+%A)
0012A9 DD0FFC              A  5850    	LD	(IX+%FFFFFFFC),BC
0012AC DD77FF              A  5851    	LD	(IX+%FFFFFFFF),A
                           A  5852    ; 1680		if (clst == 0 && fs->fs_type >= FS_
                           A  5853    .LINE 1680
                           A  5854    
0012AF C5E1                A  5855    	LD	HL,BC
0012B1 DD5EFF              A  5856    	LD	E,(IX+%FFFFFFFF)
0012B4 01000000            A  5857    	LD	BC,0
0012B8 AF                  A  5858    	XOR	A,A
0012B9 CD 00 00 00         A  5859    	CALL	__lcmpu
0012BD 20 19               A  5860    	JR	NZ,L_213
0012BF DD31F9              A  5861    	LD	IY,(IX+%FFFFFFF9)
0012C2 FD7E00              A  5862    	LD	A,(IY+%0)
0012C5 FE03                A  5863    	CP	A,%3
0012C7 38 0F               A  5864    	JR	C,L_213
                           A  5865    ; 1681			clst = (DWORD)fs->dirbase;
                           A  5866    .LINE 1681
                           A  5867    
0012C9 DD31F9              A  5868    	LD	IY,(IX+%FFFFFFF9)
0012CC FD0726              A  5869    	LD	BC,(IY+%26)
0012CF FD7E29              A  5870    	LD	A,(IY+%29)
0012D2 DD0FFC              A  5871    	LD	(IX+%FFFFFFFC),BC
0012D5 DD77FF              A  5872    	LD	(IX+%FFFFFFFF),A
                           A  5873    ; 1682			if (FF_FS_EXFAT) dp->obj.stat =
                           A  5874    ; 1683		}
0012D8                     A  5875    L_213:
                           A  5876    .LINE 1683
                           A  5877    
                           A  5878    ; 1684	
                           A  5879    ; 1685		if (clst == 0) {	/* Static table
                           A  5880    .LINE 1685
                           A  5881    
0012D8 DD27FC              A  5882    	LD	HL,(IX+%FFFFFFFC)
0012DB DD5EFF              A  5883    	LD	E,(IX+%FFFFFFFF)
0012DE 01000000            A  5884    	LD	BC,0
0012E2 AF                  A  5885    	XOR	A,A
0012E3 CD 00 00 00         A  5886    	CALL	__lcmpu
0012E7 20 4C               A  5887    	JR	NZ,L_212
                           A  5888    ; 1686			if (ofs / SZDIRE >= fs->n_rootd
                           A  5889    .LINE 1686
                           A  5890    
0012E9 DD31F9              A  5891    	LD	IY,(IX+%FFFFFFF9)
0012EC FD0707              A  5892    	LD	BC,(IY+%7)
0012EF CD 00 00 00         A  5893    	CALL	__stoiu
0012F3 DD2FF2              A  5894    	LD	(IX+%FFFFFFF2),HL
0012F6 0600                A  5895    	LD	B,%0
0012F8 DD70F0              A  5896    	LD	(IX+%FFFFFFF0),B	; spill
0012FB DD0709              A  5897    	LD	BC,(IX+%9)
0012FE DD7E0C              A  5898    	LD	A,(IX+%C)
001301 2E05                A  5899    	LD	L,%5
001303 CD 00 00 00         A  5900    	CALL	__lshru
001307 5F                  A  5901    	LD	E,A
001308 C5E1                A  5902    	LD	HL,BC
00130A DD46F0              A  5903    	LD	B,(IX+%FFFFFFF0)	; unspill
00130D 78                  A  5904    	LD	A,B
00130E DD07F2              A  5905    	LD	BC,(IX+%FFFFFFF2)
001311 CD 00 00 00         A  5906    	CALL	__lcmpu
001315 38 08               A  5907    	JR	C,L_202
001317 21020000            A  5908    	LD	HL,2
00131B C3 65 14 00         A  5909    	JR	L_217
00131F                     A  5910    L_202:
                           A  5911    ; 1687			dp->sect = fs->dirbase;
                           A  5912    .LINE 1687
                           A  5913    
00131F DD31F9              A  5914    	LD	IY,(IX+%FFFFFFF9)
001322 FD0726              A  5915    	LD	BC,(IY+%26)
001325 FD7E29              A  5916    	LD	A,(IY+%29)
001328 DD3106              A  5917    	LD	IY,(IX+%6)
00132B FD0F17              A  5918    	LD	(IY+%17),BC
00132E FD771A              A  5919    	LD	(IY+%1A),A
                           A  5920    ; 1688	
                           A  5921    ; 1689		} else {			/* Dynamic tabl
                           A  5922    .LINE 1689
                           A  5923    
001331 C3 FF 13 00         A  5924    	JR	L_214
001335                     A  5925    L_212:
                           A  5926    ; 1690			csz = (DWORD)fs->csize * SS(fs)
                           A  5927    .LINE 1690
                           A  5928    
001335 DD31F9              A  5929    	LD	IY,(IX+%FFFFFFF9)
001338 FD0709              A  5930    	LD	BC,(IY+%9)
00133B CD 00 00 00         A  5931    	CALL	__stoiu
00133F 1E00                A  5932    	LD	E,%0
001341 01000200            A  5933    	LD	BC,512
001345 AF                  A  5934    	XOR	A,A
001346 CD 00 00 00         A  5935    	CALL	__lmulu
00134A DD2FF5              A  5936    	LD	(IX+%FFFFFFF5),HL
00134D DD73F8              A  5937    	LD	(IX+%FFFFFFF8),E
                           A  5938    ; 1691			while (ofs >= csz) {			
                           A  5939    .LINE 1691
                           A  5940    
001350 18 7B               A  5941    	JR	L_208
001352                     A  5942    L_209:
                           A  5943    ; 1692				clst = get_fat(&dp->obj, cl
                           A  5944    .LINE 1692
                           A  5945    
001352 DD4EFF              A  5946    	LD	C,(IX+%FFFFFFFF)
001355 0600                A  5947    	LD	B,%0
001357 C5                  A  5948    	PUSH	BC
001358 DD07FC              A  5949    	LD	BC,(IX+%FFFFFFFC)
00135B C5                  A  5950    	PUSH	BC
00135C DD3106              A  5951    	LD	IY,(IX+%6)
00135F ED6600              A  5952    	PEA	IY+%0
001362 CD 64 06 00         A  5953    	CALL	_get_fat
001366 C1                  A  5954    	POP	BC
001367 C1                  A  5955    	POP	BC
001368 C1                  A  5956    	POP	BC
001369 DD2FFC              A  5957    	LD	(IX+%FFFFFFFC),HL
00136C DD73FF              A  5958    	LD	(IX+%FFFFFFFF),E
                           A  5959    ; 1693				if (clst == 0xFFFFFFFF) ret
                           A  5960    .LINE 1693
                           A  5961    
00136F DD27FC              A  5962    	LD	HL,(IX+%FFFFFFFC)
001372 DD5EFF              A  5963    	LD	E,(IX+%FFFFFFFF)
001375 01FFFFFF            A  5964    	LD	BC,16777215
001379 3EFF                A  5965    	LD	A,%FF
00137B CD 00 00 00         A  5966    	CALL	__lcmpu
00137F 20 08               A  5967    	JR	NZ,L_206
001381 21010000            A  5968    	LD	HL,1
001385 C3 65 14 00         A  5969    	JR	L_217
001389                     A  5970    L_206:
                           A  5971    ; 1694				if (clst < 2 || clst >= fs-
                           A  5972    .LINE 1694
                           A  5973    
001389 DD27FC              A  5974    	LD	HL,(IX+%FFFFFFFC)
00138C DD5EFF              A  5975    	LD	E,(IX+%FFFFFFFF)
00138F 01020000            A  5976    	LD	BC,2
001393 AF                  A  5977    	XOR	A,A
001394 CD 00 00 00         A  5978    	CALL	__lcmpu
001398 38 15               A  5979    	JR	C,L_205
00139A DD27FC              A  5980    	LD	HL,(IX+%FFFFFFFC)
00139D DD5EFF              A  5981    	LD	E,(IX+%FFFFFFFF)
0013A0 DD31F9              A  5982    	LD	IY,(IX+%FFFFFFF9)
0013A3 FD0716              A  5983    	LD	BC,(IY+%16)
0013A6 FD7E19              A  5984    	LD	A,(IY+%19)
0013A9 CD 00 00 00         A  5985    	CALL	__lcmpu
0013AD 38 08               A  5986    	JR	C,L_207
0013AF                     A  5987    L_205:
0013AF 21020000            A  5988    	LD	HL,2
0013B3 C3 65 14 00         A  5989    	JR	L_217
0013B7                     A  5990    L_207:
                           A  5991    ; 1695				ofs -= csz;
                           A  5992    .LINE 1695
                           A  5993    
0013B7 DD2709              A  5994    	LD	HL,(IX+%9)
0013BA DD5E0C              A  5995    	LD	E,(IX+%C)
0013BD DD07F5              A  5996    	LD	BC,(IX+%FFFFFFF5)
0013C0 DD7EF8              A  5997    	LD	A,(IX+%FFFFFFF8)
0013C3 CD 00 00 00         A  5998    	CALL	__lsub
0013C7 DD2F09              A  5999    	LD	(IX+%9),HL
0013CA DD730C              A  6000    	LD	(IX+%C),E
                           A  6001    ; 1696			}
0013CD                     A  6002    L_208:
                           A  6003    .LINE 1696
                           A  6004    
0013CD DD2709              A  6005    	LD	HL,(IX+%9)
0013D0 DD5E0C              A  6006    	LD	E,(IX+%C)
0013D3 DD07F5              A  6007    	LD	BC,(IX+%FFFFFFF5)
0013D6 DD7EF8              A  6008    	LD	A,(IX+%FFFFFFF8)
0013D9 CD 00 00 00         A  6009    	CALL	__lcmpu
0013DD D2 52 13 00         A  6010    	JR	NC,L_209
                           A  6011    ; 1697			dp->sect = clst2sect(fs, clst);
                           A  6012    .LINE 1697
                           A  6013    
0013E1 DD4EFF              A  6014    	LD	C,(IX+%FFFFFFFF)
0013E4 0600                A  6015    	LD	B,%0
0013E6 C5                  A  6016    	PUSH	BC
0013E7 DD07FC              A  6017    	LD	BC,(IX+%FFFFFFFC)
0013EA C5                  A  6018    	PUSH	BC
0013EB DD07F9              A  6019    	LD	BC,(IX+%FFFFFFF9)
0013EE C5                  A  6020    	PUSH	BC
0013EF CD F9 05 00         A  6021    	CALL	_clst2sect
0013F3 C1                  A  6022    	POP	BC
0013F4 C1                  A  6023    	POP	BC
0013F5 C1                  A  6024    	POP	BC
0013F6 DD3106              A  6025    	LD	IY,(IX+%6)
0013F9 FD2F17              A  6026    	LD	(IY+%17),HL
0013FC FD731A              A  6027    	LD	(IY+%1A),E
                           A  6028    ; 1698		}
0013FF                     A  6029    L_214:
                           A  6030    .LINE 1698
                           A  6031    
                           A  6032    ; 1699		dp->clust = clst;					
                           A  6033    .LINE 1699
                           A  6034    
0013FF DD07FC              A  6035    	LD	BC,(IX+%FFFFFFFC)
001402 DD7EFF              A  6036    	LD	A,(IX+%FFFFFFFF)
001405 DD3106              A  6037    	LD	IY,(IX+%6)
001408 FD0F13              A  6038    	LD	(IY+%13),BC
00140B FD7716              A  6039    	LD	(IY+%16),A
                           A  6040    ; 1700		if (dp->sect == 0) return FR_INT_ER
                           A  6041    .LINE 1700
                           A  6042    
00140E FD2717              A  6043    	LD	HL,(IY+%17)
001411 FD5E1A              A  6044    	LD	E,(IY+%1A)
001414 01000000            A  6045    	LD	BC,0
001418 AF                  A  6046    	XOR	A,A
001419 CD 00 00 00         A  6047    	CALL	__lcmpu
00141D 20 06               A  6048    	JR	NZ,L_216
00141F 21020000            A  6049    	LD	HL,2
001423 18 40               A  6050    	JR	L_217
001425                     A  6051    L_216:
                           A  6052    ; 1701		dp->sect += ofs / SS(fs);			
                           A  6053    .LINE 1701
                           A  6054    
001425 DD0709              A  6055    	LD	BC,(IX+%9)
001428 DD7E0C              A  6056    	LD	A,(IX+%C)
00142B 2E09                A  6057    	LD	L,%9
00142D CD 00 00 00         A  6058    	CALL	__lshru
001431 DD3106              A  6059    	LD	IY,(IX+%6)
001434 FD2717              A  6060    	LD	HL,(IY+%17)
001437 FD5E1A              A  6061    	LD	E,(IY+%1A)
00143A CD 00 00 00         A  6062    	CALL	__ladd
00143E FD2F17              A  6063    	LD	(IY+%17),HL
001441 FD731A              A  6064    	LD	(IY+%1A),E
                           A  6065    ; 1702		dp->dir = fs->win + (ofs % SS(fs));
                           A  6066    .LINE 1702
                           A  6067    
001444 DD2709              A  6068    	LD	HL,(IX+%9)
001447 DD5E0C              A  6069    	LD	E,(IX+%C)
00144A 01FF0100            A  6070    	LD	BC,511
00144E AF                  A  6071    	XOR	A,A
00144F CD 00 00 00         A  6072    	CALL	__land
001453 E5C1                A  6073    	LD	BC,HL
001455 DD31F9              A  6074    	LD	IY,(IX+%FFFFFFF9)
001458 ED2332              A  6075    	LEA	HL,IY+%32
00145B 09                  A  6076    	ADD	HL,BC
00145C DD3106              A  6077    	LD	IY,(IX+%6)
00145F FD2F1B              A  6078    	LD	(IY+%1B),HL
                           A  6079    ; 1703	
                           A  6080    ; 1704		return FR_OK;
                           A  6081    .LINE 1704
                           A  6082    
001462 B7                  A  6083    	OR	A,A
001463 ED62                A  6084    	SBC	HL,HL
                           A  6085    ; 1705	}
001465                     A  6086    L_217:
                           A  6087    .LINE 1705
                           A  6088    
001465 DDF9                A  6089    	LD	SP,IX
001467 DDE1                A  6090    	POP	IX
001469 C9                  A  6091    	RET	
                           A  6092    
                           A  6093    
                           A  6094    ;**************************** _dir_sdi ********
                           A  6095    ;Name                         Addr/Register   S
                           A  6096    ;csz                                  IX-11    
                           A  6097    ;fs                                    IX-7    
                           A  6098    ;clst                                  IX-4    
                           A  6099    ;ofs                                   IX+9    
                           A  6100    ;dp                                    IX+6    
                           A  6101    
                           A  6102    
                           A  6103    ; Stack Frame Size: 31 (bytes)
                           A  6104    ;       Spill Code: -1 (instruction)
                           A  6105    
                           A  6106    
                           A  6107    .ENDFUNC "dir_sdi",1705,"_dir_sdi"
                           A  6108    ; 1706	
                           A  6109    ; 1707	
                           A  6110    ; 1708	
                           A  6111    ; 1709	
                           A  6112    ; 1710	/*-------------------------------------
                           A  6113    ; 1711	/* Directory handling - Move directory 
                           A  6114    ; 1712	/*-------------------------------------
                           A  6115    ; 1713	
                           A  6116    ; 1714	static FRESULT dir_next (	/* FR_OK(0)
                           A  6117    ; 1715		DIR* dp,				/* Pointer 
                           A  6118    ; 1716		int stretch				/* 0: Do no
                           A  6119    ; 1717	)
                           A  6120    ; 1718	{
00146A                     A  6121    _dir_next:
                           A  6122    .DEFINE "_dir_next"
                           A  6123    
                           A  6124    .VALUE _dir_next
                           A  6125    
                           A  6126    .CLASS 3
                           A  6127    
                           A  6128    .TYPE 68
                           A  6129    
                           A  6130    .ENDEF
                           A  6131    
                           A  6132    .BEGFUNC "dir_next",1718,"_dir_next"
                           A  6133    
                           A  6134    .LINE 1718
                           A  6135    
                           A  6136    .DEFINE "dp"
                           A  6137    
                           A  6138    .CLASS 65
                           A  6139    
                           A  6140    .VALUE 6
                           A  6141    
                           A  6142    .TAG "NONAME3"
                           A  6143    
                           A  6144    .TYPE 40
                           A  6145    
                           A  6146    .ENDEF
                           A  6147    
                           A  6148    .DEFINE "stretch"
                           A  6149    
                           A  6150    .CLASS 65
                           A  6151    
                           A  6152    .VALUE 9
                           A  6153    
                           A  6154    .TYPE 4
                           A  6155    
                           A  6156    .ENDEF
                           A  6157    
                           A  6158    .DEFINE "clst"
                           A  6159    
                           A  6160    .CLASS 65
                           A  6161    
                           A  6162    .VALUE -4
                           A  6163    
                           A  6164    .TYPE 15
                           A  6165    
                           A  6166    .ENDEF
                           A  6167    
                           A  6168    .DEFINE "fs"
                           A  6169    
                           A  6170    .CLASS 65
                           A  6171    
                           A  6172    .VALUE -7
                           A  6173    
                           A  6174    .TAG "NONAME0"
                           A  6175    
                           A  6176    .TYPE 40
                           A  6177    
                           A  6178    .ENDEF
                           A  6179    
                           A  6180    .DEFINE "ofs"
                           A  6181    
                           A  6182    .CLASS 65
                           A  6183    
                           A  6184    .VALUE -11
                           A  6185    
                           A  6186    .TYPE 15
                           A  6187    
                           A  6188    .ENDEF
                           A  6189    
00146A DDE5                A  6190    	PUSH	IX
00146C DD210000 00         A  6191    	LD	IX,0
001471 DD39                A  6192    	ADD	IX,SP
001473 ED22E5              A  6193    	LEA	HL,IX+%FFFFFFE5
001476 F9                  A  6194    	LD	SP,HL
                           A  6195    ; 1719		DWORD ofs, clst;
                           A  6196    ; 1720		FATFS *fs = dp->obj.fs;
                           A  6197    .LINE 1720
                           A  6198    
001477 DD3106              A  6199    	LD	IY,(IX+%6)
00147A FD0700              A  6200    	LD	BC,(IY+%0)
00147D DD0FF9              A  6201    	LD	(IX+%FFFFFFF9),BC
                           A  6202    ; 1721	
                           A  6203    ; 1722	
                           A  6204    ; 1723		ofs = dp->dptr + SZDIRE;	/* Next
                           A  6205    .LINE 1723
                           A  6206    
001480 FD270F              A  6207    	LD	HL,(IY+%F)
001483 FD5E12              A  6208    	LD	E,(IY+%12)
001486 3E20                A  6209    	LD	A,%20
001488 CD 00 00 00         A  6210    	CALL	__ladd_b
00148C DD2FF5              A  6211    	LD	(IX+%FFFFFFF5),HL
00148F DD73F8              A  6212    	LD	(IX+%FFFFFFF8),E
                           A  6213    ; 1724		if (ofs >= (DWORD)((FF_FS_EXFAT && 
                           A  6214    .LINE 1724
                           A  6215    
001492 DD27F5              A  6216    	LD	HL,(IX+%FFFFFFF5)
001495 DD5EF8              A  6217    	LD	E,(IX+%FFFFFFF8)
001498 01000020            A  6218    	LD	BC,2097152
00149C AF                  A  6219    	XOR	A,A
00149D CD 00 00 00         A  6220    	CALL	__lcmpu
0014A1 38 0E               A  6221    	JR	C,L_220
0014A3 01000000            A  6222    	LD	BC,0
0014A7 DD3106              A  6223    	LD	IY,(IX+%6)
0014AA FD0F17              A  6224    	LD	(IY+%17),BC
0014AD FD361A00            A  6225    	LD	(IY+%1A),%0
0014B1                     A  6226    L_220:
                           A  6227    ; 1725		if (dp->sect == 0) return FR_NO_FIL
                           A  6228    .LINE 1725
                           A  6229    
0014B1 DD3106              A  6230    	LD	IY,(IX+%6)
0014B4 FD0717              A  6231    	LD	BC,(IY+%17)
0014B7 FD7E1A              A  6232    	LD	A,(IY+%1A)
0014BA DD0FF1              A  6233    	LD	(IX+%FFFFFFF1),BC
0014BD DD77F4              A  6234    	LD	(IX+%FFFFFFF4),A
0014C0 C5E1                A  6235    	LD	HL,BC
0014C2 DD5EF4              A  6236    	LD	E,(IX+%FFFFFFF4)
0014C5 01000000            A  6237    	LD	BC,0
0014C9 AF                  A  6238    	XOR	A,A
0014CA CD 00 00 00         A  6239    	CALL	__lcmpu
0014CE 20 08               A  6240    	JR	NZ,L_244
0014D0 21040000            A  6241    	LD	HL,4
0014D4 C3 10 17 00         A  6242    	JR	L_246
0014D8                     A  6243    L_244:
                           A  6244    ; 1726	
                           A  6245    ; 1727		if (ofs % SS(fs) == 0) {	/* Sect
                           A  6246    .LINE 1727
                           A  6247    
0014D8 DD27F5              A  6248    	LD	HL,(IX+%FFFFFFF5)
0014DB DD5EF8              A  6249    	LD	E,(IX+%FFFFFFF8)
0014DE 01FF0100            A  6250    	LD	BC,511
0014E2 AF                  A  6251    	XOR	A,A
0014E3 CD 00 00 00         A  6252    	CALL	__land
0014E7 01000000            A  6253    	LD	BC,0
0014EB AF                  A  6254    	XOR	A,A
0014EC CD 00 00 00         A  6255    	CALL	__lcmpu
0014F0 C2 E0 16 00         A  6256    	JR	NZ,L_245
                           A  6257    ; 1728			dp->sect++;				/* Next
                           A  6258    .LINE 1728
                           A  6259    
0014F4 DD27F1              A  6260    	LD	HL,(IX+%FFFFFFF1)
0014F7 DD5EF4              A  6261    	LD	E,(IX+%FFFFFFF4)
0014FA 3E01                A  6262    	LD	A,%1
0014FC CD 00 00 00         A  6263    	CALL	__ladd_b
001500 DD3106              A  6264    	LD	IY,(IX+%6)
001503 FD2F17              A  6265    	LD	(IY+%17),HL
001506 FD731A              A  6266    	LD	(IY+%1A),E
                           A  6267    ; 1729	
                           A  6268    ; 1730			if (dp->clust == 0) {	/* Stat
                           A  6269    .LINE 1730
                           A  6270    
001509 FD0713              A  6271    	LD	BC,(IY+%13)
00150C FD7E16              A  6272    	LD	A,(IY+%16)
00150F DD0FED              A  6273    	LD	(IX+%FFFFFFED),BC
001512 DD77F0              A  6274    	LD	(IX+%FFFFFFF0),A
001515 C5E1                A  6275    	LD	HL,BC
001517 DD5EF0              A  6276    	LD	E,(IX+%FFFFFFF0)
00151A 01000000            A  6277    	LD	BC,0
00151E AF                  A  6278    	XOR	A,A
00151F CD 00 00 00         A  6279    	CALL	__lcmpu
001523 20 46               A  6280    	JR	NZ,L_242
                           A  6281    ; 1731				if (ofs / SZDIRE >= fs->n_r
                           A  6282    .LINE 1731
                           A  6283    
001525 DD31F9              A  6284    	LD	IY,(IX+%FFFFFFF9)
001528 FD0707              A  6285    	LD	BC,(IY+%7)
00152B CD 00 00 00         A  6286    	CALL	__stoiu
00152F DD2FE7              A  6287    	LD	(IX+%FFFFFFE7),HL
001532 0600                A  6288    	LD	B,%0
001534 DD70E5              A  6289    	LD	(IX+%FFFFFFE5),B	; spill
001537 DD07F5              A  6290    	LD	BC,(IX+%FFFFFFF5)
00153A DD7EF8              A  6291    	LD	A,(IX+%FFFFFFF8)
00153D 2E05                A  6292    	LD	L,%5
00153F CD 00 00 00         A  6293    	CALL	__lshru
001543 5F                  A  6294    	LD	E,A
001544 C5E1                A  6295    	LD	HL,BC
001546 DD46E5              A  6296    	LD	B,(IX+%FFFFFFE5)	; unspill
001549 78                  A  6297    	LD	A,B
00154A DD07E7              A  6298    	LD	BC,(IX+%FFFFFFE7)
00154D CD 00 00 00         A  6299    	CALL	__lcmpu
001551 DA E0 16 00         A  6300    	JR	C,L_245
                           A  6301    ; 1732					dp->sect = 0; return FR
                           A  6302    .LINE 1732
                           A  6303    
001555 01000000            A  6304    	LD	BC,0
001559 DD3106              A  6305    	LD	IY,(IX+%6)
00155C FD0F17              A  6306    	LD	(IY+%17),BC
00155F FD361A00            A  6307    	LD	(IY+%1A),%0
001563 21040000            A  6308    	LD	HL,4
001567 C3 10 17 00         A  6309    	JR	L_246
                           A  6310    ; 1733				}
                           A  6311    ; 1734			}
                           A  6312    ; 1735			else {					/* Dyna
00156B                     A  6313    L_242:
                           A  6314    .LINE 1735
                           A  6315    
                           A  6316    ; 1736				if ((ofs / SS(fs) & (fs->cs
                           A  6317    .LINE 1736
                           A  6318    
00156B DD31F9              A  6319    	LD	IY,(IX+%FFFFFFF9)
00156E FD0709              A  6320    	LD	BC,(IY+%9)
001571 CD 00 00 00         A  6321    	CALL	__stoiu
001575 2B                  A  6322    	DEC	HL
001576 E5C1                A  6323    	LD	BC,HL
001578 CD 00 00 00         A  6324    	CALL	__itol
00157C DD0FEA              A  6325    	LD	(IX+%FFFFFFEA),BC
00157F 5F                  A  6326    	LD	E,A
001580 DD07F5              A  6327    	LD	BC,(IX+%FFFFFFF5)
001583 DD7EF8              A  6328    	LD	A,(IX+%FFFFFFF8)
001586 2E09                A  6329    	LD	L,%9
001588 CD 00 00 00         A  6330    	CALL	__lshru
00158C DD27EA              A  6331    	LD	HL,(IX+%FFFFFFEA)
00158F CD 00 00 00         A  6332    	CALL	__land
001593 01000000            A  6333    	LD	BC,0
001597 AF                  A  6334    	XOR	A,A
001598 CD 00 00 00         A  6335    	CALL	__lcmpu
00159C C2 E0 16 00         A  6336    	JR	NZ,L_245
                           A  6337    ; 1737					clst = get_fat(&dp->obj
                           A  6338    .LINE 1737
                           A  6339    
0015A0 DD4EF0              A  6340    	LD	C,(IX+%FFFFFFF0)
0015A3 0600                A  6341    	LD	B,%0
0015A5 C5                  A  6342    	PUSH	BC
0015A6 DD07ED              A  6343    	LD	BC,(IX+%FFFFFFED)
0015A9 C5                  A  6344    	PUSH	BC
0015AA DD3106              A  6345    	LD	IY,(IX+%6)
0015AD ED6600              A  6346    	PEA	IY+%0
0015B0 CD 64 06 00         A  6347    	CALL	_get_fat
0015B4 C1                  A  6348    	POP	BC
0015B5 C1                  A  6349    	POP	BC
0015B6 C1                  A  6350    	POP	BC
0015B7 E5C1                A  6351    	LD	BC,HL
0015B9 DD0FFC              A  6352    	LD	(IX+%FFFFFFFC),BC
0015BC DD73FF              A  6353    	LD	(IX+%FFFFFFFF),E
                           A  6354    ; 1738					if (clst <= 1) return F
                           A  6355    .LINE 1738
                           A  6356    
0015BF 21010000            A  6357    	LD	HL,1
0015C3 1E00                A  6358    	LD	E,%0
0015C5 DD7EFF              A  6359    	LD	A,(IX+%FFFFFFFF)
0015C8 CD 00 00 00         A  6360    	CALL	__lcmpu
0015CC 38 08               A  6361    	JR	C,L_225
0015CE 21020000            A  6362    	LD	HL,2
0015D2 C3 10 17 00         A  6363    	JR	L_246
0015D6                     A  6364    L_225:
                           A  6365    ; 1739					if (clst == 0xFFFFFFFF)
                           A  6366    .LINE 1739
                           A  6367    
0015D6 DD27FC              A  6368    	LD	HL,(IX+%FFFFFFFC)
0015D9 DD5EFF              A  6369    	LD	E,(IX+%FFFFFFFF)
0015DC 01FFFFFF            A  6370    	LD	BC,16777215
0015E0 3EFF                A  6371    	LD	A,%FF
0015E2 CD 00 00 00         A  6372    	CALL	__lcmpu
0015E6 20 08               A  6373    	JR	NZ,L_238
0015E8 21010000            A  6374    	LD	HL,1
0015EC C3 10 17 00         A  6375    	JR	L_246
0015F0                     A  6376    L_238:
                           A  6377    ; 1740					if (clst >= fs->n_faten
                           A  6378    .LINE 1740
                           A  6379    
0015F0 DD27FC              A  6380    	LD	HL,(IX+%FFFFFFFC)
0015F3 DD5EFF              A  6381    	LD	E,(IX+%FFFFFFFF)
0015F6 DD31F9              A  6382    	LD	IY,(IX+%FFFFFFF9)
0015F9 FD0716              A  6383    	LD	BC,(IY+%16)
0015FC FD7E19              A  6384    	LD	A,(IY+%19)
0015FF CD 00 00 00         A  6385    	CALL	__lcmpu
001603 DA B3 16 00         A  6386    	JR	C,L_239
                           A  6387    ; 1741	#if !FF_FS_READONLY
                           A  6388    ; 1742						if (!stretch) {		
                           A  6389    .LINE 1742
                           A  6390    
001607 01000000            A  6391    	LD	BC,0
00160B DD2709              A  6392    	LD	HL,(IX+%9)
00160E B7                  A  6393    	OR	A,A
00160F ED42                A  6394    	SBC	HL,BC
001611 20 12               A  6395    	JR	NZ,L_227
                           A  6396    ; 1743							dp->sect = 0; r
                           A  6397    .LINE 1743
                           A  6398    
001613 DD3106              A  6399    	LD	IY,(IX+%6)
001616 FD0F17              A  6400    	LD	(IY+%17),BC
001619 FD361A00            A  6401    	LD	(IY+%1A),%0
00161D 21040000            A  6402    	LD	HL,4
001621 C3 10 17 00         A  6403    	JR	L_246
                           A  6404    ; 1744						}
001625                     A  6405    L_227:
                           A  6406    .LINE 1744
                           A  6407    
                           A  6408    ; 1745						clst = create_chain
                           A  6409    .LINE 1745
                           A  6410    
001625 DD3106              A  6411    	LD	IY,(IX+%6)
001628 FD0713              A  6412    	LD	BC,(IY+%13)
00162B FD7E16              A  6413    	LD	A,(IY+%16)
00162E 2600                A  6414    	LD	H,%0
001630 6F                  A  6415    	LD	L,A
001631 E5                  A  6416    	PUSH	HL
001632 C5                  A  6417    	PUSH	BC
001633 ED6600              A  6418    	PEA	IY+%0
001636 CD 8E 0D 00         A  6419    	CALL	_create_chain
00163A C1                  A  6420    	POP	BC
00163B C1                  A  6421    	POP	BC
00163C C1                  A  6422    	POP	BC
00163D DD2FFC              A  6423    	LD	(IX+%FFFFFFFC),HL
001640 DD73FF              A  6424    	LD	(IX+%FFFFFFFF),E
                           A  6425    ; 1746						if (clst == 0) retu
                           A  6426    .LINE 1746
                           A  6427    
001643 DD27FC              A  6428    	LD	HL,(IX+%FFFFFFFC)
001646 DD5EFF              A  6429    	LD	E,(IX+%FFFFFFFF)
001649 01000000            A  6430    	LD	BC,0
00164D AF                  A  6431    	XOR	A,A
00164E CD 00 00 00         A  6432    	CALL	__lcmpu
001652 20 08               A  6433    	JR	NZ,L_230
001654 21070000            A  6434    	LD	HL,7
001658 C3 10 17 00         A  6435    	JR	L_246
00165C                     A  6436    L_230:
                           A  6437    ; 1747						if (clst == 1) retu
                           A  6438    .LINE 1747
                           A  6439    
00165C DD27FC              A  6440    	LD	HL,(IX+%FFFFFFFC)
00165F DD5EFF              A  6441    	LD	E,(IX+%FFFFFFFF)
001662 01010000            A  6442    	LD	BC,1
001666 AF                  A  6443    	XOR	A,A
001667 CD 00 00 00         A  6444    	CALL	__lcmpu
00166B 20 08               A  6445    	JR	NZ,L_232
00166D 21020000            A  6446    	LD	HL,2
001671 C3 10 17 00         A  6447    	JR	L_246
001675                     A  6448    L_232:
                           A  6449    ; 1748						if (clst == 0xFFFFF
                           A  6450    .LINE 1748
                           A  6451    
001675 DD27FC              A  6452    	LD	HL,(IX+%FFFFFFFC)
001678 DD5EFF              A  6453    	LD	E,(IX+%FFFFFFFF)
00167B 01FFFFFF            A  6454    	LD	BC,16777215
00167F 3EFF                A  6455    	LD	A,%FF
001681 CD 00 00 00         A  6456    	CALL	__lcmpu
001685 20 08               A  6457    	JR	NZ,L_234
001687 21010000            A  6458    	LD	HL,1
00168B C3 10 17 00         A  6459    	JR	L_246
00168F                     A  6460    L_234:
                           A  6461    ; 1749						if (dir_clear(fs, c
                           A  6462    .LINE 1749
                           A  6463    
00168F DD4EFF              A  6464    	LD	C,(IX+%FFFFFFFF)
001692 0600                A  6465    	LD	B,%0
001694 C5                  A  6466    	PUSH	BC
001695 DD07FC              A  6467    	LD	BC,(IX+%FFFFFFFC)
001698 C5                  A  6468    	PUSH	BC
001699 DD07F9              A  6469    	LD	BC,(IX+%FFFFFFF9)
00169C C5                  A  6470    	PUSH	BC
00169D CD 60 11 00         A  6471    	CALL	_dir_clear
0016A1 C1                  A  6472    	POP	BC
0016A2 C1                  A  6473    	POP	BC
0016A3 C1                  A  6474    	POP	BC
0016A4 01000000            A  6475    	LD	BC,0
0016A8 B7                  A  6476    	OR	A,A
0016A9 ED42                A  6477    	SBC	HL,BC
0016AB 28 06               A  6478    	JR	Z,L_239
0016AD 21010000            A  6479    	LD	HL,1
0016B1 18 5D               A  6480    	JR	L_246
                           A  6481    ; 1750						if (FF_FS_EXFAT) dp
                           A  6482    ; 1751	#else
                           A  6483    ; 1752						if (!stretch) dp->s
                           A  6484    ; 1753						dp->sect = 0; retur
                           A  6485    ; 1754	#endif
                           A  6486    ; 1755					}
0016B3                     A  6487    L_239:
                           A  6488    .LINE 1755
                           A  6489    
                           A  6490    ; 1756					dp->clust = clst;		
                           A  6491    .LINE 1756
                           A  6492    
0016B3 DD07FC              A  6493    	LD	BC,(IX+%FFFFFFFC)
0016B6 DD7EFF              A  6494    	LD	A,(IX+%FFFFFFFF)
0016B9 DD3106              A  6495    	LD	IY,(IX+%6)
0016BC FD0F13              A  6496    	LD	(IY+%13),BC
0016BF FD7716              A  6497    	LD	(IY+%16),A
                           A  6498    ; 1757					dp->sect = clst2sect(fs
                           A  6499    .LINE 1757
                           A  6500    
0016C2 DD4EFF              A  6501    	LD	C,(IX+%FFFFFFFF)
0016C5 0600                A  6502    	LD	B,%0
0016C7 C5                  A  6503    	PUSH	BC
0016C8 DD07FC              A  6504    	LD	BC,(IX+%FFFFFFFC)
0016CB C5                  A  6505    	PUSH	BC
0016CC DD07F9              A  6506    	LD	BC,(IX+%FFFFFFF9)
0016CF C5                  A  6507    	PUSH	BC
0016D0 CD F9 05 00         A  6508    	CALL	_clst2sect
0016D4 C1                  A  6509    	POP	BC
0016D5 C1                  A  6510    	POP	BC
0016D6 C1                  A  6511    	POP	BC
0016D7 DD3106              A  6512    	LD	IY,(IX+%6)
0016DA FD2F17              A  6513    	LD	(IY+%17),HL
0016DD FD731A              A  6514    	LD	(IY+%1A),E
                           A  6515    ; 1758				}
                           A  6516    ; 1759			}
                           A  6517    ; 1760		}
0016E0                     A  6518    L_245:
                           A  6519    .LINE 1760
                           A  6520    
                           A  6521    ; 1761		dp->dptr = ofs;						
                           A  6522    .LINE 1761
                           A  6523    
0016E0 DD07F5              A  6524    	LD	BC,(IX+%FFFFFFF5)
0016E3 DD7EF8              A  6525    	LD	A,(IX+%FFFFFFF8)
0016E6 DD3106              A  6526    	LD	IY,(IX+%6)
0016E9 FD0F0F              A  6527    	LD	(IY+%F),BC
0016EC FD7712              A  6528    	LD	(IY+%12),A
                           A  6529    ; 1762		dp->dir = fs->win + ofs % SS(fs);	
                           A  6530    .LINE 1762
                           A  6531    
0016EF DD27F5              A  6532    	LD	HL,(IX+%FFFFFFF5)
0016F2 DD5EF8              A  6533    	LD	E,(IX+%FFFFFFF8)
0016F5 01FF0100            A  6534    	LD	BC,511
0016F9 AF                  A  6535    	XOR	A,A
0016FA CD 00 00 00         A  6536    	CALL	__land
0016FE E5C1                A  6537    	LD	BC,HL
001700 DD31F9              A  6538    	LD	IY,(IX+%FFFFFFF9)
001703 ED2332              A  6539    	LEA	HL,IY+%32
001706 09                  A  6540    	ADD	HL,BC
001707 DD3106              A  6541    	LD	IY,(IX+%6)
00170A FD2F1B              A  6542    	LD	(IY+%1B),HL
                           A  6543    ; 1763	
                           A  6544    ; 1764		return FR_OK;
                           A  6545    .LINE 1764
                           A  6546    
00170D B7                  A  6547    	OR	A,A
00170E ED62                A  6548    	SBC	HL,HL
                           A  6549    ; 1765	}
001710                     A  6550    L_246:
                           A  6551    .LINE 1765
                           A  6552    
001710 DDF9                A  6553    	LD	SP,IX
001712 DDE1                A  6554    	POP	IX
001714 C9                  A  6555    	RET	
                           A  6556    
                           A  6557    
                           A  6558    ;**************************** _dir_next *******
                           A  6559    ;Name                         Addr/Register   S
                           A  6560    ;G_12                                 IX-19    
                           A  6561    ;G_11                                 IX-15    
                           A  6562    ;ofs                                  IX-11    
                           A  6563    ;fs                                    IX-7    
                           A  6564    ;clst                                  IX-4    
                           A  6565    ;stretch                               IX+9    
                           A  6566    ;dp                                    IX+6    
                           A  6567    
                           A  6568    
                           A  6569    ; Stack Frame Size: 39 (bytes)
                           A  6570    ;       Spill Code: -1 (instruction)
                           A  6571    
                           A  6572    
                           A  6573    .ENDFUNC "dir_next",1765,"_dir_next"
                           A  6574    ; 1766	
                           A  6575    ; 1767	
                           A  6576    ; 1768	
                           A  6577    ; 1769	
                           A  6578    ; 1770	#if !FF_FS_READONLY
                           A  6579    ; 1771	/*-------------------------------------
                           A  6580    ; 1772	/* Directory handling - Reserve a block
                           A  6581    ; 1773	/*-------------------------------------
                           A  6582    ; 1774	
                           A  6583    ; 1775	static FRESULT dir_alloc (	/* FR_OK(0)
                           A  6584    ; 1776		DIR* dp,				/* Pointer 
                           A  6585    ; 1777		UINT n_ent				/* Number o
                           A  6586    ; 1778	)
                           A  6587    ; 1779	{
001715                     A  6588    _dir_alloc:
                           A  6589    .DEFINE "_dir_alloc"
                           A  6590    
                           A  6591    .VALUE _dir_alloc
                           A  6592    
                           A  6593    .CLASS 3
                           A  6594    
                           A  6595    .TYPE 68
                           A  6596    
                           A  6597    .ENDEF
                           A  6598    
                           A  6599    .BEGFUNC "dir_alloc",1779,"_dir_alloc"
                           A  6600    
                           A  6601    .LINE 1779
                           A  6602    
                           A  6603    .DEFINE "dp"
                           A  6604    
                           A  6605    .CLASS 65
                           A  6606    
                           A  6607    .VALUE 6
                           A  6608    
                           A  6609    .TAG "NONAME3"
                           A  6610    
                           A  6611    .TYPE 40
                           A  6612    
                           A  6613    .ENDEF
                           A  6614    
                           A  6615    .DEFINE "n_ent"
                           A  6616    
                           A  6617    .CLASS 65
                           A  6618    
                           A  6619    .VALUE 9
                           A  6620    
                           A  6621    .TYPE 14
                           A  6622    
                           A  6623    .ENDEF
                           A  6624    
                           A  6625    .DEFINE "res"
                           A  6626    
                           A  6627    .CLASS 65
                           A  6628    
                           A  6629    .VALUE -3
                           A  6630    
                           A  6631    .TYPE 4
                           A  6632    
                           A  6633    .ENDEF
                           A  6634    
                           A  6635    .DEFINE "n"
                           A  6636    
                           A  6637    .CLASS 65
                           A  6638    
                           A  6639    .VALUE -6
                           A  6640    
                           A  6641    .TYPE 14
                           A  6642    
                           A  6643    .ENDEF
                           A  6644    
                           A  6645    .DEFINE "fs"
                           A  6646    
                           A  6647    .CLASS 65
                           A  6648    
                           A  6649    .VALUE -12
                           A  6650    
                           A  6651    .TAG "NONAME0"
                           A  6652    
                           A  6653    .TYPE 40
                           A  6654    
                           A  6655    .ENDEF
                           A  6656    
001715 DDE5                A  6657    	PUSH	IX
001717 DD210000 00         A  6658    	LD	IX,0
00171C DD39                A  6659    	ADD	IX,SP
00171E ED22F4              A  6660    	LEA	HL,IX+%FFFFFFF4
001721 F9                  A  6661    	LD	SP,HL
                           A  6662    ; 1780		FRESULT res;
                           A  6663    ; 1781		UINT n;
                           A  6664    ; 1782		FATFS *fs = dp->obj.fs;
                           A  6665    .LINE 1782
                           A  6666    
001722 DD3106              A  6667    	LD	IY,(IX+%6)
001725 FD0700              A  6668    	LD	BC,(IY+%0)
001728 DD0FF4              A  6669    	LD	(IX+%FFFFFFF4),BC
                           A  6670    ; 1783	
                           A  6671    ; 1784	
                           A  6672    ; 1785		res = dir_sdi(dp, 0);
                           A  6673    .LINE 1785
                           A  6674    
00172B 01000000            A  6675    	LD	BC,0
00172F C5                  A  6676    	PUSH	BC
001730 C5                  A  6677    	PUSH	BC
001731 DD0706              A  6678    	LD	BC,(IX+%6)
001734 C5                  A  6679    	PUSH	BC
001735 CD 50 12 00         A  6680    	CALL	_dir_sdi
001739 C1                  A  6681    	POP	BC
00173A C1                  A  6682    	POP	BC
00173B C1                  A  6683    	POP	BC
00173C DD2FFD              A  6684    	LD	(IX+%FFFFFFFD),HL
                           A  6685    ; 1786		if (res == FR_OK) {
                           A  6686    .LINE 1786
                           A  6687    
00173F 01000000            A  6688    	LD	BC,0
001743 DD27FD              A  6689    	LD	HL,(IX+%FFFFFFFD)
001746 B7                  A  6690    	OR	A,A
001747 ED42                A  6691    	SBC	HL,BC
001749 C2 D3 17 00         A  6692    	JR	NZ,L_258
                           A  6693    ; 1787			n = 0;
                           A  6694    .LINE 1787
                           A  6695    
00174D DD0FFA              A  6696    	LD	(IX+%FFFFFFFA),BC
                           A  6697    ; 1788			do {
001750                     A  6698    L_254:
                           A  6699    .LINE 1788
                           A  6700    
                           A  6701    ; 1789				res = move_window(fs, dp->s
                           A  6702    .LINE 1789
                           A  6703    
001750 DD3106              A  6704    	LD	IY,(IX+%6)
001753 FD0717              A  6705    	LD	BC,(IY+%17)
001756 FD7E1A              A  6706    	LD	A,(IY+%1A)
001759 2600                A  6707    	LD	H,%0
00175B 6F                  A  6708    	LD	L,A
00175C E5                  A  6709    	PUSH	HL
00175D C5                  A  6710    	PUSH	BC
00175E DD07F4              A  6711    	LD	BC,(IX+%FFFFFFF4)
001761 C5                  A  6712    	PUSH	BC
001762 CD 1E 04 00         A  6713    	CALL	_move_window
001766 C1                  A  6714    	POP	BC
001767 C1                  A  6715    	POP	BC
001768 C1                  A  6716    	POP	BC
001769 DD2FFD              A  6717    	LD	(IX+%FFFFFFFD),HL
                           A  6718    ; 1790				if (res != FR_OK) break;
                           A  6719    .LINE 1790
                           A  6720    
00176C 01000000            A  6721    	LD	BC,0
001770 DD27FD              A  6722    	LD	HL,(IX+%FFFFFFFD)
001773 B7                  A  6723    	OR	A,A
001774 ED42                A  6724    	SBC	HL,BC
001776 20 5B               A  6725    	JR	NZ,L_258
                           A  6726    ; 1791	#if FF_FS_EXFAT
                           A  6727    ; 1792				if ((fs->fs_type == FS_EXFA
                           A  6728    ; 1793	#else
                           A  6729    ; 1794				if (dp->dir[DIR_Name] == DD
                           A  6730    .LINE 1794
                           A  6731    
001778 DD3106              A  6732    	LD	IY,(IX+%6)
00177B FD071B              A  6733    	LD	BC,(IY+%1B)
00177E DD0FF7              A  6734    	LD	(IX+%FFFFFFF7),BC
001781 C5E1                A  6735    	LD	HL,BC
001783 7E                  A  6736    	LD	A,(HL)
001784 B7ED62              A  6737    	UEXT	HL
001787 6F                  A  6738    	LD	L,A
001788 01E50000            A  6739    	LD	BC,229
00178C B7                  A  6740    	OR	A,A
00178D ED42                A  6741    	SBC	HL,BC
00178F 28 07               A  6742    	JR	Z,L_250
001791 DD27F7              A  6743    	LD	HL,(IX+%FFFFFFF7)
001794 7E                  A  6744    	LD	A,(HL)
001795 B7                  A  6745    	OR	A,A
001796 20 14               A  6746    	JR	NZ,L_251
001798                     A  6747    L_250:
                           A  6748    ; 1795	#endif
                           A  6749    ; 1796					if (++n == n_ent) break
                           A  6750    .LINE 1796
                           A  6751    
001798 DD07FA              A  6752    	LD	BC,(IX+%FFFFFFFA)
00179B 03                  A  6753    	INC	BC
00179C DD0FFA              A  6754    	LD	(IX+%FFFFFFFA),BC
00179F DD0709              A  6755    	LD	BC,(IX+%9)
0017A2 DD27FA              A  6756    	LD	HL,(IX+%FFFFFFFA)
0017A5 B7                  A  6757    	OR	A,A
0017A6 ED42                A  6758    	SBC	HL,BC
0017A8 28 29               A  6759    	JR	Z,L_258
0017AA 18 07               A  6760    	JR	L_253
                           A  6761    ; 1797				} else {
0017AC                     A  6762    L_251:
                           A  6763    .LINE 1797
                           A  6764    
                           A  6765    ; 1798					n = 0;				/* 
                           A  6766    .LINE 1798
                           A  6767    
0017AC 01000000            A  6768    	LD	BC,0
0017B0 DD0FFA              A  6769    	LD	(IX+%FFFFFFFA),BC
                           A  6770    ; 1799				}
0017B3                     A  6771    L_253:
                           A  6772    .LINE 1799
                           A  6773    
                           A  6774    ; 1800				res = dir_next(dp, 1);	/* 
                           A  6775    .LINE 1800
                           A  6776    
0017B3 01010000            A  6777    	LD	BC,1
0017B7 C5                  A  6778    	PUSH	BC
0017B8 DD0706              A  6779    	LD	BC,(IX+%6)
0017BB C5                  A  6780    	PUSH	BC
0017BC CD 6A 14 00         A  6781    	CALL	_dir_next
0017C0 C1                  A  6782    	POP	BC
0017C1 C1                  A  6783    	POP	BC
0017C2 DD2FFD              A  6784    	LD	(IX+%FFFFFFFD),HL
                           A  6785    ; 1801			} while (res == FR_OK);
                           A  6786    .LINE 1801
                           A  6787    
0017C5 01000000            A  6788    	LD	BC,0
0017C9 DD27FD              A  6789    	LD	HL,(IX+%FFFFFFFD)
0017CC B7                  A  6790    	OR	A,A
0017CD ED42                A  6791    	SBC	HL,BC
0017CF CA 50 17 00         A  6792    	JR	Z,L_254
                           A  6793    ; 1802		}
0017D3                     A  6794    L_258:
                           A  6795    .LINE 1802
                           A  6796    
                           A  6797    ; 1803	
                           A  6798    ; 1804		if (res == FR_NO_FILE) res = FR_DEN
                           A  6799    .LINE 1804
                           A  6800    
0017D3 01040000            A  6801    	LD	BC,4
0017D7 DD27FD              A  6802    	LD	HL,(IX+%FFFFFFFD)
0017DA B7                  A  6803    	OR	A,A
0017DB ED42                A  6804    	SBC	HL,BC
0017DD 20 07               A  6805    	JR	NZ,L_259
0017DF 01070000            A  6806    	LD	BC,7
0017E3 DD0FFD              A  6807    	LD	(IX+%FFFFFFFD),BC
0017E6                     A  6808    L_259:
                           A  6809    ; 1805		return res;
                           A  6810    .LINE 1805
                           A  6811    
0017E6 DD27FD              A  6812    	LD	HL,(IX+%FFFFFFFD)
                           A  6813    ; 1806	}
                           A  6814    .LINE 1806
                           A  6815    
0017E9 DDF9                A  6816    	LD	SP,IX
0017EB DDE1                A  6817    	POP	IX
0017ED C9                  A  6818    	RET	
                           A  6819    
                           A  6820    
                           A  6821    ;**************************** _dir_alloc ******
                           A  6822    ;Name                         Addr/Register   S
                           A  6823    ;fs                                   IX-12    
                           A  6824    ;G_13                                  IX-9    
                           A  6825    ;n                                     IX-6    
                           A  6826    ;res                                   IX-3    
                           A  6827    ;n_ent                                 IX+9    
                           A  6828    ;dp                                    IX+6    
                           A  6829    
                           A  6830    
                           A  6831    ; Stack Frame Size: 24 (bytes)
                           A  6832    ;       Spill Code: -1 (instruction)
                           A  6833    
                           A  6834    
                           A  6835    .ENDFUNC "dir_alloc",1806,"_dir_alloc"
                           A  6836    ; 1807	
                           A  6837    ; 1808	#endif	/* !FF_FS_READONLY */
                           A  6838    ; 1809	
                           A  6839    ; 1810	
                           A  6840    ; 1811	
                           A  6841    ; 1812	
                           A  6842    ; 1813	/*-------------------------------------
                           A  6843    ; 1814	/* FAT: Directory handling - Load/Store
                           A  6844    ; 1815	/*-------------------------------------
                           A  6845    ; 1816	
                           A  6846    ; 1817	static DWORD ld_clust (	/* Returns the 
                           A  6847    ; 1818		FATFS* fs,			/* Pointer to t
                           A  6848    ; 1819		const BYTE* dir		/* Pointer to t
                           A  6849    ; 1820	)
                           A  6850    ; 1821	{
0017EE                     A  6851    _ld_clust:
                           A  6852    .DEFINE "_ld_clust"
                           A  6853    
                           A  6854    .VALUE _ld_clust
                           A  6855    
                           A  6856    .CLASS 3
                           A  6857    
                           A  6858    .TYPE 79
                           A  6859    
                           A  6860    .ENDEF
                           A  6861    
                           A  6862    .BEGFUNC "ld_clust",1821,"_ld_clust"
                           A  6863    
                           A  6864    .LINE 1821
                           A  6865    
                           A  6866    .DEFINE "fs"
                           A  6867    
                           A  6868    .CLASS 65
                           A  6869    
                           A  6870    .VALUE 6
                           A  6871    
                           A  6872    .TAG "NONAME0"
                           A  6873    
                           A  6874    .TYPE 40
                           A  6875    
                           A  6876    .ENDEF
                           A  6877    
                           A  6878    .DEFINE "dir"
                           A  6879    
                           A  6880    .CLASS 65
                           A  6881    
                           A  6882    .VALUE 9
                           A  6883    
                           A  6884    .TYPE 204
                           A  6885    
                           A  6886    .ENDEF
                           A  6887    
                           A  6888    .DEFINE "cl"
                           A  6889    
                           A  6890    .CLASS 65
                           A  6891    
                           A  6892    .VALUE -4
                           A  6893    
                           A  6894    .TYPE 15
                           A  6895    
                           A  6896    .ENDEF
                           A  6897    
0017EE DDE5                A  6898    	PUSH	IX
0017F0 DD210000 00         A  6899    	LD	IX,0
0017F5 DD39                A  6900    	ADD	IX,SP
0017F7 C5                  A  6901    	PUSH	BC
0017F8 3B                  A  6902    	DEC	SP
0017F9 3B                  A  6903    	DEC	SP
                           A  6904    ; 1822		DWORD cl;
                           A  6905    ; 1823	
                           A  6906    ; 1824		cl = ld_word(dir + DIR_FstClusLO);
                           A  6907    .LINE 1824
                           A  6908    
0017FA DD3109              A  6909    	LD	IY,(IX+%9)
0017FD ED031A              A  6910    	LEA	BC,IY+%1A
001800 C5                  A  6911    	PUSH	BC
001801 CD 00 00 00         A  6912    	CALL	_ld_word
001805 C1                  A  6913    	POP	BC
001806 E5C1                A  6914    	LD	BC,HL
001808 CD 00 00 00         A  6915    	CALL	__stoiu
00180C AF                  A  6916    	XOR	A,A
00180D DD2FFC              A  6917    	LD	(IX+%FFFFFFFC),HL
001810 DD77FF              A  6918    	LD	(IX+%FFFFFFFF),A
                           A  6919    ; 1825		if (fs->fs_type == FS_FAT32) {
                           A  6920    .LINE 1825
                           A  6921    
001813 DD3106              A  6922    	LD	IY,(IX+%6)
001816 FD7E00              A  6923    	LD	A,(IY+%0)
001819 FE03                A  6924    	CP	A,%3
00181B 20 34               A  6925    	JR	NZ,L_262
                           A  6926    ; 1826			cl |= (DWORD)ld_word(dir + DIR_
                           A  6927    .LINE 1826
                           A  6928    
00181D DD3109              A  6929    	LD	IY,(IX+%9)
001820 ED0314              A  6930    	LEA	BC,IY+%14
001823 C5                  A  6931    	PUSH	BC
001824 DD77FB              A  6932    	LD	(IX+%FFFFFFFB),A
001827 CD 00 00 00         A  6933    	CALL	_ld_word
00182B DD7EFB              A  6934    	LD	A,(IX+%FFFFFFFB)
00182E C1                  A  6935    	POP	BC
00182F E5C1                A  6936    	LD	BC,HL
001831 CD 00 00 00         A  6937    	CALL	__stoiu
001835 E5                  A  6938    	PUSH	HL
001836 E5                  A  6939    	PUSH	HL
001837 B7ED62              A  6940    	UEXT	HL
00183A E5                  A  6941    	PUSH	HL
00183B 33                  A  6942    	INC	SP
00183C E1                  A  6943    	POP	HL
00183D C1                  A  6944    	POP	BC
00183E 33                  A  6945    	INC	SP
00183F 33                  A  6946    	INC	SP
001840 59                  A  6947    	LD	E,C
001841 DD07FC              A  6948    	LD	BC,(IX+%FFFFFFFC)
001844 DD7EFF              A  6949    	LD	A,(IX+%FFFFFFFF)
001847 CD 00 00 00         A  6950    	CALL	__lor
00184B DD2FFC              A  6951    	LD	(IX+%FFFFFFFC),HL
00184E DD73FF              A  6952    	LD	(IX+%FFFFFFFF),E
                           A  6953    ; 1827		}
001851                     A  6954    L_262:
                           A  6955    .LINE 1827
                           A  6956    
                           A  6957    ; 1828	
                           A  6958    ; 1829		return cl;
                           A  6959    .LINE 1829
                           A  6960    
001851 DD27FC              A  6961    	LD	HL,(IX+%FFFFFFFC)
001854 DD5EFF              A  6962    	LD	E,(IX+%FFFFFFFF)
                           A  6963    ; 1830	}
                           A  6964    .LINE 1830
                           A  6965    
001857 DDF9                A  6966    	LD	SP,IX
001859 DDE1                A  6967    	POP	IX
00185B C9                  A  6968    	RET	
                           A  6969    
                           A  6970    
                           A  6971    ;**************************** _ld_clust *******
                           A  6972    ;Name                         Addr/Register   S
                           A  6973    ;cl                                    IX-4    
                           A  6974    ;dir                                   IX+9    
                           A  6975    ;fs                                    IX+6    
                           A  6976    
                           A  6977    
                           A  6978    ; Stack Frame Size: 17 (bytes)
                           A  6979    ;       Spill Code: -1 (instruction)
                           A  6980    
                           A  6981    
                           A  6982    .ENDFUNC "ld_clust",1830,"_ld_clust"
                           A  6983    ; 1831	
                           A  6984    ; 1832	
                           A  6985    ; 1833	#if !FF_FS_READONLY
                           A  6986    ; 1834	static void st_clust (
                           A  6987    ; 1835		FATFS* fs,	/* Pointer to the fs ob
                           A  6988    ; 1836		BYTE* dir,	/* Pointer to the key e
                           A  6989    ; 1837		DWORD cl	/* Value to be set */
                           A  6990    ; 1838	)
                           A  6991    ; 1839	{
00185C                     A  6992    _st_clust:
                           A  6993    .DEFINE "_st_clust"
                           A  6994    
                           A  6995    .VALUE _st_clust
                           A  6996    
                           A  6997    .CLASS 3
                           A  6998    
                           A  6999    .TYPE 65
                           A  7000    
                           A  7001    .ENDEF
                           A  7002    
                           A  7003    .BEGFUNC "st_clust",1839,"_st_clust"
                           A  7004    
                           A  7005    .LINE 1839
                           A  7006    
                           A  7007    .DEFINE "fs"
                           A  7008    
                           A  7009    .CLASS 65
                           A  7010    
                           A  7011    .VALUE 6
                           A  7012    
                           A  7013    .TAG "NONAME0"
                           A  7014    
                           A  7015    .TYPE 40
                           A  7016    
                           A  7017    .ENDEF
                           A  7018    
                           A  7019    .DEFINE "dir"
                           A  7020    
                           A  7021    .CLASS 65
                           A  7022    
                           A  7023    .VALUE 9
                           A  7024    
                           A  7025    .TYPE 44
                           A  7026    
                           A  7027    .ENDEF
                           A  7028    
                           A  7029    .DEFINE "cl"
                           A  7030    
                           A  7031    .CLASS 65
                           A  7032    
                           A  7033    .VALUE 12
                           A  7034    
                           A  7035    .TYPE 15
                           A  7036    
                           A  7037    .ENDEF
                           A  7038    
00185C DDE5                A  7039    	PUSH	IX
00185E DD210000 00         A  7040    	LD	IX,0
001863 DD39                A  7041    	ADD	IX,SP
                           A  7042    ; 1840		st_word(dir + DIR_FstClusLO, (WORD)
                           A  7043    .LINE 1840
                           A  7044    
001865 DD070C              A  7045    	LD	BC,(IX+%C)
001868 C5                  A  7046    	PUSH	BC
001869 DD3109              A  7047    	LD	IY,(IX+%9)
00186C ED031A              A  7048    	LEA	BC,IY+%1A
00186F C5                  A  7049    	PUSH	BC
001870 CD 06 01 00         A  7050    	CALL	_st_word
001874 C1                  A  7051    	POP	BC
001875 C1                  A  7052    	POP	BC
                           A  7053    ; 1841		if (fs->fs_type == FS_FAT32) {
                           A  7054    .LINE 1841
                           A  7055    
001876 DD3106              A  7056    	LD	IY,(IX+%6)
001879 FD7E00              A  7057    	LD	A,(IY+%0)
00187C FE03                A  7058    	CP	A,%3
00187E 20 1A               A  7059    	JR	NZ,L_265
                           A  7060    ; 1842			st_word(dir + DIR_FstClusHI, (W
                           A  7061    .LINE 1842
                           A  7062    
001880 B7ED62              A  7063    	UEXT	HL
001883 E5                  A  7064    	PUSH	HL
001884 DD070D              A  7065    	LD	BC,(IX+%D)
001887 C5                  A  7066    	PUSH	BC
001888 33                  A  7067    	INC	SP
001889 C1                  A  7068    	POP	BC
00188A 33                  A  7069    	INC	SP
00188B 33                  A  7070    	INC	SP
00188C C5                  A  7071    	PUSH	BC
00188D DD3109              A  7072    	LD	IY,(IX+%9)
001890 ED0314              A  7073    	LEA	BC,IY+%14
001893 C5                  A  7074    	PUSH	BC
001894 CD 06 01 00         A  7075    	CALL	_st_word
001898 C1                  A  7076    	POP	BC
001899 C1                  A  7077    	POP	BC
                           A  7078    ; 1843		}
                           A  7079    ; 1844	}
00189A                     A  7080    L_265:
                           A  7081    .LINE 1844
                           A  7082    
00189A DDF9                A  7083    	LD	SP,IX
00189C DDE1                A  7084    	POP	IX
00189E C9                  A  7085    	RET	
                           A  7086    
                           A  7087    
                           A  7088    ;**************************** _st_clust *******
                           A  7089    ;Name                         Addr/Register   S
                           A  7090    ;cl                                   IX+12    
                           A  7091    ;dir                                   IX+9    
                           A  7092    ;fs                                    IX+6    
                           A  7093    
                           A  7094    
                           A  7095    ; Stack Frame Size: 18 (bytes)
                           A  7096    ;       Spill Code: -1 (instruction)
                           A  7097    
                           A  7098    
                           A  7099    .ENDFUNC "st_clust",1844,"_st_clust"
                           A  7100    ; 1845	#endif
                           A  7101    ; 1846	
                           A  7102    ; 1847	
                           A  7103    ; 1848	
                           A  7104    ; 1849	#if FF_USE_LFN
                           A  7105    ; 1850	/*-------------------------------------
                           A  7106    ; 1851	/* FAT-LFN: Compare a part of file name
                           A  7107    ; 1852	/*-------------------------------------
                           A  7108    ; 1853	
                           A  7109    ; 1854	static int cmp_lfn (		/* 1:matche
                           A  7110    ; 1855		const WCHAR* lfnbuf,	/* Pointer 
                           A  7111    ; 1856		BYTE* dir				/* Pointer 
                           A  7112    ; 1857	)
                           A  7113    ; 1858	{
00189F                     A  7114    _cmp_lfn:
                           A  7115    .DEFINE "_cmp_lfn"
                           A  7116    
                           A  7117    .VALUE _cmp_lfn
                           A  7118    
                           A  7119    .CLASS 3
                           A  7120    
                           A  7121    .TYPE 68
                           A  7122    
                           A  7123    .ENDEF
                           A  7124    
                           A  7125    .BEGFUNC "cmp_lfn",1858,"_cmp_lfn"
                           A  7126    
                           A  7127    .LINE 1858
                           A  7128    
                           A  7129    .DEFINE "lfnbuf"
                           A  7130    
                           A  7131    .CLASS 65
                           A  7132    
                           A  7133    .VALUE 6
                           A  7134    
                           A  7135    .TYPE 205
                           A  7136    
                           A  7137    .ENDEF
                           A  7138    
                           A  7139    .DEFINE "dir"
                           A  7140    
                           A  7141    .CLASS 65
                           A  7142    
                           A  7143    .VALUE 9
                           A  7144    
                           A  7145    .TYPE 44
                           A  7146    
                           A  7147    .ENDEF
                           A  7148    
                           A  7149    .DEFINE "i"
                           A  7150    
                           A  7151    .CLASS 65
                           A  7152    
                           A  7153    .VALUE -3
                           A  7154    
                           A  7155    .TYPE 14
                           A  7156    
                           A  7157    .ENDEF
                           A  7158    
                           A  7159    .DEFINE "s"
                           A  7160    
                           A  7161    .CLASS 65
                           A  7162    
                           A  7163    .VALUE -6
                           A  7164    
                           A  7165    .TYPE 14
                           A  7166    
                           A  7167    .ENDEF
                           A  7168    
                           A  7169    .DEFINE "wc"
                           A  7170    
                           A  7171    .CLASS 65
                           A  7172    
                           A  7173    .VALUE -8
                           A  7174    
                           A  7175    .TYPE 13
                           A  7176    
                           A  7177    .ENDEF
                           A  7178    
                           A  7179    .DEFINE "uc"
                           A  7180    
                           A  7181    .CLASS 65
                           A  7182    
                           A  7183    .VALUE -10
                           A  7184    
                           A  7185    .TYPE 13
                           A  7186    
                           A  7187    .ENDEF
                           A  7188    
00189F DDE5                A  7189    	PUSH	IX
0018A1 DD210000 00         A  7190    	LD	IX,0
0018A6 DD39                A  7191    	ADD	IX,SP
0018A8 ED22F2              A  7192    	LEA	HL,IX+%FFFFFFF2
0018AB F9                  A  7193    	LD	SP,HL
                           A  7194    ; 1859		UINT i, s;
                           A  7195    ; 1860		WCHAR wc, uc;
                           A  7196    ; 1861	
                           A  7197    ; 1862	
                           A  7198    ; 1863		if (ld_word(dir + LDIR_FstClusLO) !
                           A  7199    .LINE 1863
                           A  7200    
0018AC DD3109              A  7201    	LD	IY,(IX+%9)
0018AF ED031A              A  7202    	LEA	BC,IY+%1A
0018B2 C5                  A  7203    	PUSH	BC
0018B3 CD 00 00 00         A  7204    	CALL	_ld_word
0018B7 C1                  A  7205    	POP	BC
0018B8 49010000            A  7206    	LD.LIS	BC,0
0018BC B7                  A  7207    	OR	A,A
0018BD 40ED42              A  7208    	SBC.SIS	HL,BC
0018C0 28 07               A  7209    	JR	Z,L_267
0018C2 B7                  A  7210    	OR	A,A
0018C3 ED62                A  7211    	SBC	HL,HL
0018C5 C3 D8 19 00         A  7212    	JR	L_284
0018C9                     A  7213    L_267:
                           A  7214    ; 1864	
                           A  7215    ; 1865		i = ((dir[LDIR_Ord] & 0x3F) - 1) * 
                           A  7216    .LINE 1865
                           A  7217    
0018C9 DD2709              A  7218    	LD	HL,(IX+%9)
0018CC 7E                  A  7219    	LD	A,(HL)
0018CD E63F                A  7220    	AND	A,%3F
0018CF B7ED62              A  7221    	UEXT	HL
0018D2 6F                  A  7222    	LD	L,A
0018D3 2B                  A  7223    	DEC	HL
0018D4 3E0D                A  7224    	LD	A,%D
0018D6 CD 00 00 00         A  7225    	CALL	__imul_b
0018DA DD2FFD              A  7226    	LD	(IX+%FFFFFFFD),HL
                           A  7227    ; 1866	
                           A  7228    ; 1867		for (wc = 1, s = 0; s < 13; s++) {	
                           A  7229    .LINE 1867
                           A  7230    
0018DD DD36F801            A  7231    	LD	(IX+%FFFFFFF8),%1
0018E1 DD36F900            A  7232    	LD	(IX+%FFFFFFF9),%0
0018E5 01000000            A  7233    	LD	BC,0
0018E9 DD0FFA              A  7234    	LD	(IX+%FFFFFFFA),BC
0018EC C3 98 19 00         A  7235    	JR	L_278
0018F0                     A  7236    L_276:
                           A  7237    ; 1868			uc = ld_word(dir + LfnOfs[s]);	
                           A  7238    .LINE 1868
                           A  7239    
0018F0 01 00 00 00         A  7240    	LD	BC,_LfnOfs
0018F4 DD27FA              A  7241    	LD	HL,(IX+%FFFFFFFA)
0018F7 09                  A  7242    	ADD	HL,BC
0018F8 7E                  A  7243    	LD	A,(HL)
0018F9 B7ED62              A  7244    	UEXT	HL
0018FC 6F                  A  7245    	LD	L,A
0018FD DD0709              A  7246    	LD	BC,(IX+%9)
001900 09                  A  7247    	ADD	HL,BC
001901 E5                  A  7248    	PUSH	HL
001902 CD 00 00 00         A  7249    	CALL	_ld_word
001906 C1                  A  7250    	POP	BC
001907 DD75F6              A  7251    	LD	(IX+%FFFFFFF6),L
00190A DD74F7              A  7252    	LD	(IX+%FFFFFFF7),H
                           A  7253    ; 1869			if (wc != 0) {
                           A  7254    .LINE 1869
                           A  7255    
00190D 49010000            A  7256    	LD.LIS	BC,0
001911 DD27F8              A  7257    	LD	HL,(IX+%FFFFFFF8)
001914 B7                  A  7258    	OR	A,A
001915 40ED42              A  7259    	SBC.SIS	HL,BC
001918 28 65               A  7260    	JR	Z,L_275
                           A  7261    ; 1870				if (i >= FF_MAX_LFN + 1 || 
                           A  7262    .LINE 1870
                           A  7263    
00191A 01000100            A  7264    	LD	BC,256
00191E DD27FD              A  7265    	LD	HL,(IX+%FFFFFFFD)
001921 B7                  A  7266    	OR	A,A
001922 ED42                A  7267    	SBC	HL,BC
001924 30 49               A  7268    	JR	NC,L_271
001926 DD27FD              A  7269    	LD	HL,(IX+%FFFFFFFD)
001929 DD07FD              A  7270    	LD	BC,(IX+%FFFFFFFD)
00192C 03                  A  7271    	INC	BC
00192D DD0FFD              A  7272    	LD	(IX+%FFFFFFFD),BC
001930 29                  A  7273    	ADD	HL,HL
001931 DD0706              A  7274    	LD	BC,(IX+%6)
001934 09                  A  7275    	ADD	HL,BC
001935 ED07                A  7276    	LD	BC,(HL)
001937 CD 00 00 00         A  7277    	CALL	__stoiu
00193B 0E00                A  7278    	LD	C,%0
00193D 0600                A  7279    	LD	B,%0
00193F C5                  A  7280    	PUSH	BC
001940 E5                  A  7281    	PUSH	HL
001941 CD 00 00 00         A  7282    	CALL	_ff_wtoupper
001945 C1                  A  7283    	POP	BC
001946 C1                  A  7284    	POP	BC
001947 DD73F5              A  7285    	LD	(IX+%FFFFFFF5),E
00194A DD2FF2              A  7286    	LD	(IX+%FFFFFFF2),HL
00194D DD07F6              A  7287    	LD	BC,(IX+%FFFFFFF6)
001950 CD 00 00 00         A  7288    	CALL	__stoiu
001954 0E00                A  7289    	LD	C,%0
001956 0600                A  7290    	LD	B,%0
001958 C5                  A  7291    	PUSH	BC
001959 E5                  A  7292    	PUSH	HL
00195A CD 00 00 00         A  7293    	CALL	_ff_wtoupper
00195E C1                  A  7294    	POP	BC
00195F C1                  A  7295    	POP	BC
001960 7B                  A  7296    	LD	A,E
001961 E5C1                A  7297    	LD	BC,HL
001963 DD5EF5              A  7298    	LD	E,(IX+%FFFFFFF5)
001966 DD27F2              A  7299    	LD	HL,(IX+%FFFFFFF2)
001969 CD 00 00 00         A  7300    	CALL	__lcmpu
00196D 28 05               A  7301    	JR	Z,L_272
00196F                     A  7302    L_271:
                           A  7303    ; 1871					return 0;				
                           A  7304    .LINE 1871
                           A  7305    
00196F B7                  A  7306    	OR	A,A
001970 ED62                A  7307    	SBC	HL,HL
001972 18 64               A  7308    	JR	L_284
                           A  7309    ; 1872				}
001974                     A  7310    L_272:
                           A  7311    .LINE 1872
                           A  7312    
                           A  7313    ; 1873				wc = uc;
                           A  7314    .LINE 1873
                           A  7315    
001974 DD07F6              A  7316    	LD	BC,(IX+%FFFFFFF6)
001977 DD71F8              A  7317    	LD	(IX+%FFFFFFF8),C
00197A DD70F9              A  7318    	LD	(IX+%FFFFFFF9),B
                           A  7319    ; 1874			} else {
                           A  7320    .LINE 1874
                           A  7321    
00197D 18 12               A  7322    	JR	L_277
00197F                     A  7323    L_275:
                           A  7324    ; 1875				if (uc != 0xFFFF) return 0;
                           A  7325    .LINE 1875
                           A  7326    
00197F 4901FFFF            A  7327    	LD.LIS	BC,65535
001983 DD27F6              A  7328    	LD	HL,(IX+%FFFFFFF6)
001986 B7                  A  7329    	OR	A,A
001987 40ED42              A  7330    	SBC.SIS	HL,BC
00198A 28 05               A  7331    	JR	Z,L_277
00198C B7                  A  7332    	OR	A,A
00198D ED62                A  7333    	SBC	HL,HL
00198F 18 47               A  7334    	JR	L_284
                           A  7335    ; 1876			}
                           A  7336    ; 1877		}
001991                     A  7337    L_277:
                           A  7338    .LINE 1877
                           A  7339    
001991 DD07FA              A  7340    	LD	BC,(IX+%FFFFFFFA)
001994 03                  A  7341    	INC	BC
001995 DD0FFA              A  7342    	LD	(IX+%FFFFFFFA),BC
001998                     A  7343    L_278:
001998 010D0000            A  7344    	LD	BC,13
00199C DD27FA              A  7345    	LD	HL,(IX+%FFFFFFFA)
00199F B7                  A  7346    	OR	A,A
0019A0 ED42                A  7347    	SBC	HL,BC
0019A2 DA F0 18 00         A  7348    	JR	C,L_276
                           A  7349    ; 1878	
                           A  7350    ; 1879		if ((dir[LDIR_Ord] & LLEF) && wc &&
                           A  7351    .LINE 1879
                           A  7352    
0019A6 DD2709              A  7353    	LD	HL,(IX+%9)
0019A9 7E                  A  7354    	LD	A,(HL)
0019AA E640                A  7355    	AND	A,%40
0019AC 28 26               A  7356    	JR	Z,L_283
0019AE 49010000            A  7357    	LD.LIS	BC,0
0019B2 DD27F8              A  7358    	LD	HL,(IX+%FFFFFFF8)
0019B5 B7                  A  7359    	OR	A,A
0019B6 40ED42              A  7360    	SBC.SIS	HL,BC
0019B9 28 19               A  7361    	JR	Z,L_283
0019BB DD27FD              A  7362    	LD	HL,(IX+%FFFFFFFD)
0019BE 29                  A  7363    	ADD	HL,HL
0019BF DD0706              A  7364    	LD	BC,(IX+%6)
0019C2 09                  A  7365    	ADD	HL,BC
0019C3 49010000            A  7366    	LD.LIS	BC,0
0019C7 ED27                A  7367    	LD	HL,(HL)
0019C9 B7                  A  7368    	OR	A,A
0019CA 40ED42              A  7369    	SBC.SIS	HL,BC
0019CD 28 05               A  7370    	JR	Z,L_283
0019CF B7                  A  7371    	OR	A,A
0019D0 ED62                A  7372    	SBC	HL,HL
0019D2 18 04               A  7373    	JR	L_284
0019D4                     A  7374    L_283:
                           A  7375    ; 1880	
                           A  7376    ; 1881		return 1;		/* The part of LFN 
                           A  7377    .LINE 1881
                           A  7378    
0019D4 21010000            A  7379    	LD	HL,1
                           A  7380    ; 1882	}
0019D8                     A  7381    L_284:
                           A  7382    .LINE 1882
                           A  7383    
0019D8 DDF9                A  7384    	LD	SP,IX
0019DA DDE1                A  7385    	POP	IX
0019DC C9                  A  7386    	RET	
                           A  7387    
                           A  7388    
                           A  7389    ;**************************** _cmp_lfn ********
                           A  7390    ;Name                         Addr/Register   S
                           A  7391    ;_ff_wtoupper                        IMPORT  --
                           A  7392    ;_LfnOfs                             STATIC    
                           A  7393    ;uc                                   IX-10    
                           A  7394    ;wc                                    IX-8    
                           A  7395    ;s                                     IX-6    
                           A  7396    ;i                                     IX-3    
                           A  7397    ;dir                                   IX+9    
                           A  7398    ;lfnbuf                                IX+6    
                           A  7399    
                           A  7400    
                           A  7401    ; Stack Frame Size: 26 (bytes)
                           A  7402    ;       Spill Code: -1 (instruction)
                           A  7403    
                           A  7404    
                           A  7405    .ENDFUNC "cmp_lfn",1882,"_cmp_lfn"
                           A  7406    ; 1883	
                           A  7407    ; 1884	
                           A  7408    ; 1885	#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH 
                           A  7409    ; 1886	/*-------------------------------------
                           A  7410    ; 1887	/* FAT-LFN: Pick a part of file name fr
                           A  7411    ; 1888	/*-------------------------------------
                           A  7412    ; 1889	
                           A  7413    ; 1890	static int pick_lfn (	/* 1:succeeded,
                           A  7414    ; 1891		WCHAR* lfnbuf,		/* Pointer to t
                           A  7415    ; 1892		BYTE* dir			/* Pointer to t
                           A  7416    ; 1893	)
                           A  7417    ; 1894	{
0019DD                     A  7418    _pick_lfn:
                           A  7419    .DEFINE "_pick_lfn"
                           A  7420    
                           A  7421    .VALUE _pick_lfn
                           A  7422    
                           A  7423    .CLASS 3
                           A  7424    
                           A  7425    .TYPE 68
                           A  7426    
                           A  7427    .ENDEF
                           A  7428    
                           A  7429    .BEGFUNC "pick_lfn",1894,"_pick_lfn"
                           A  7430    
                           A  7431    .LINE 1894
                           A  7432    
                           A  7433    .DEFINE "lfnbuf"
                           A  7434    
                           A  7435    .CLASS 65
                           A  7436    
                           A  7437    .VALUE 6
                           A  7438    
                           A  7439    .TYPE 45
                           A  7440    
                           A  7441    .ENDEF
                           A  7442    
                           A  7443    .DEFINE "dir"
                           A  7444    
                           A  7445    .CLASS 65
                           A  7446    
                           A  7447    .VALUE 9
                           A  7448    
                           A  7449    .TYPE 44
                           A  7450    
                           A  7451    .ENDEF
                           A  7452    
                           A  7453    .DEFINE "i"
                           A  7454    
                           A  7455    .CLASS 65
                           A  7456    
                           A  7457    .VALUE -3
                           A  7458    
                           A  7459    .TYPE 14
                           A  7460    
                           A  7461    .ENDEF
                           A  7462    
                           A  7463    .DEFINE "s"
                           A  7464    
                           A  7465    .CLASS 65
                           A  7466    
                           A  7467    .VALUE -6
                           A  7468    
                           A  7469    .TYPE 14
                           A  7470    
                           A  7471    .ENDEF
                           A  7472    
                           A  7473    .DEFINE "wc"
                           A  7474    
                           A  7475    .CLASS 65
                           A  7476    
                           A  7477    .VALUE -8
                           A  7478    
                           A  7479    .TYPE 13
                           A  7480    
                           A  7481    .ENDEF
                           A  7482    
                           A  7483    .DEFINE "uc"
                           A  7484    
                           A  7485    .CLASS 65
                           A  7486    
                           A  7487    .VALUE -10
                           A  7488    
                           A  7489    .TYPE 13
                           A  7490    
                           A  7491    .ENDEF
                           A  7492    
0019DD DDE5                A  7493    	PUSH	IX
0019DF DD210000 00         A  7494    	LD	IX,0
0019E4 DD39                A  7495    	ADD	IX,SP
0019E6 C5                  A  7496    	PUSH	BC
0019E7 C5                  A  7497    	PUSH	BC
0019E8 C5                  A  7498    	PUSH	BC
0019E9 3B                  A  7499    	DEC	SP
                           A  7500    ; 1895		UINT i, s;
                           A  7501    ; 1896		WCHAR wc, uc;
                           A  7502    ; 1897	
                           A  7503    ; 1898	
                           A  7504    ; 1899		if (ld_word(dir + LDIR_FstClusLO) !
                           A  7505    .LINE 1899
                           A  7506    
0019EA DD3109              A  7507    	LD	IY,(IX+%9)
0019ED ED031A              A  7508    	LEA	BC,IY+%1A
0019F0 C5                  A  7509    	PUSH	BC
0019F1 CD 00 00 00         A  7510    	CALL	_ld_word
0019F5 C1                  A  7511    	POP	BC
0019F6 49010000            A  7512    	LD.LIS	BC,0
0019FA B7                  A  7513    	OR	A,A
0019FB 40ED42              A  7514    	SBC.SIS	HL,BC
0019FE 28 07               A  7515    	JR	Z,L_286
001A00 B7                  A  7516    	OR	A,A
001A01 ED62                A  7517    	SBC	HL,HL
001A03 C3 EA 1A 00         A  7518    	JR	L_303
001A07                     A  7519    L_286:
                           A  7520    ; 1900	
                           A  7521    ; 1901		i = ((dir[LDIR_Ord] & ~LLEF) - 1) *
                           A  7522    .LINE 1901
                           A  7523    
001A07 DD2709              A  7524    	LD	HL,(IX+%9)
001A0A 7E                  A  7525    	LD	A,(HL)
001A0B CBB7                A  7526    	RES	%6,A
001A0D B7ED62              A  7527    	UEXT	HL
001A10 6F                  A  7528    	LD	L,A
001A11 2B                  A  7529    	DEC	HL
001A12 3E0D                A  7530    	LD	A,%D
001A14 CD 00 00 00         A  7531    	CALL	__imul_b
001A18 DD2FFD              A  7532    	LD	(IX+%FFFFFFFD),HL
                           A  7533    ; 1902	
                           A  7534    ; 1903		for (wc = 1, s = 0; s < 13; s++) {	
                           A  7535    .LINE 1903
                           A  7536    
001A1B DD36F801            A  7537    	LD	(IX+%FFFFFFF8),%1
001A1F DD36F900            A  7538    	LD	(IX+%FFFFFFF9),%0
001A23 01000000            A  7539    	LD	BC,0
001A27 DD0FFA              A  7540    	LD	(IX+%FFFFFFFA),BC
001A2A 18 79               A  7541    	JR	L_296
001A2C                     A  7542    L_294:
                           A  7543    ; 1904			uc = ld_word(dir + LfnOfs[s]);	
                           A  7544    .LINE 1904
                           A  7545    
001A2C 01 00 00 00         A  7546    	LD	BC,_LfnOfs
001A30 DD27FA              A  7547    	LD	HL,(IX+%FFFFFFFA)
001A33 09                  A  7548    	ADD	HL,BC
001A34 7E                  A  7549    	LD	A,(HL)
001A35 B7ED62              A  7550    	UEXT	HL
001A38 6F                  A  7551    	LD	L,A
001A39 DD0709              A  7552    	LD	BC,(IX+%9)
001A3C 09                  A  7553    	ADD	HL,BC
001A3D E5                  A  7554    	PUSH	HL
001A3E CD 00 00 00         A  7555    	CALL	_ld_word
001A42 C1                  A  7556    	POP	BC
001A43 DD75F6              A  7557    	LD	(IX+%FFFFFFF6),L
001A46 DD74F7              A  7558    	LD	(IX+%FFFFFFF7),H
                           A  7559    ; 1905			if (wc != 0) {
                           A  7560    .LINE 1905
                           A  7561    
001A49 49010000            A  7562    	LD.LIS	BC,0
001A4D DD27F8              A  7563    	LD	HL,(IX+%FFFFFFF8)
001A50 B7                  A  7564    	OR	A,A
001A51 40ED42              A  7565    	SBC.SIS	HL,BC
001A54 28 36               A  7566    	JR	Z,L_293
                           A  7567    ; 1906				if (i >= FF_MAX_LFN + 1) re
                           A  7568    .LINE 1906
                           A  7569    
001A56 01000100            A  7570    	LD	BC,256
001A5A DD27FD              A  7571    	LD	HL,(IX+%FFFFFFFD)
001A5D B7                  A  7572    	OR	A,A
001A5E ED42                A  7573    	SBC	HL,BC
001A60 38 07               A  7574    	JR	C,L_290
001A62 B7                  A  7575    	OR	A,A
001A63 ED62                A  7576    	SBC	HL,HL
001A65 C3 EA 1A 00         A  7577    	JR	L_303
001A69                     A  7578    L_290:
                           A  7579    ; 1907				lfnbuf[i++] = wc = uc;		
                           A  7580    .LINE 1907
                           A  7581    
001A69 DD07F6              A  7582    	LD	BC,(IX+%FFFFFFF6)
001A6C DD71F8              A  7583    	LD	(IX+%FFFFFFF8),C
001A6F DD70F9              A  7584    	LD	(IX+%FFFFFFF9),B
001A72 DD27FD              A  7585    	LD	HL,(IX+%FFFFFFFD)
001A75 29                  A  7586    	ADD	HL,HL
001A76 DD0706              A  7587    	LD	BC,(IX+%6)
001A79 09                  A  7588    	ADD	HL,BC
001A7A DD7EF6              A  7589    	LD	A,(IX+%FFFFFFF6)
001A7D 77                  A  7590    	LD	(HL),A
001A7E 23                  A  7591    	INC	HL
001A7F DD7EF7              A  7592    	LD	A,(IX+%FFFFFFF7)
001A82 77                  A  7593    	LD	(HL),A
001A83 DD07FD              A  7594    	LD	BC,(IX+%FFFFFFFD)
001A86 03                  A  7595    	INC	BC
001A87 DD0FFD              A  7596    	LD	(IX+%FFFFFFFD),BC
                           A  7597    ; 1908			} else {
                           A  7598    .LINE 1908
                           A  7599    
001A8A 18 12               A  7600    	JR	L_295
001A8C                     A  7601    L_293:
                           A  7602    ; 1909				if (uc != 0xFFFF) return 0;
                           A  7603    .LINE 1909
                           A  7604    
001A8C 4901FFFF            A  7605    	LD.LIS	BC,65535
001A90 DD27F6              A  7606    	LD	HL,(IX+%FFFFFFF6)
001A93 B7                  A  7607    	OR	A,A
001A94 40ED42              A  7608    	SBC.SIS	HL,BC
001A97 28 05               A  7609    	JR	Z,L_295
001A99 B7                  A  7610    	OR	A,A
001A9A ED62                A  7611    	SBC	HL,HL
001A9C 18 4C               A  7612    	JR	L_303
                           A  7613    ; 1910			}
                           A  7614    ; 1911		}
001A9E                     A  7615    L_295:
                           A  7616    .LINE 1911
                           A  7617    
001A9E DD07FA              A  7618    	LD	BC,(IX+%FFFFFFFA)
001AA1 03                  A  7619    	INC	BC
001AA2 DD0FFA              A  7620    	LD	(IX+%FFFFFFFA),BC
001AA5                     A  7621    L_296:
001AA5 010D0000            A  7622    	LD	BC,13
001AA9 DD27FA              A  7623    	LD	HL,(IX+%FFFFFFFA)
001AAC B7                  A  7624    	OR	A,A
001AAD ED42                A  7625    	SBC	HL,BC
001AAF DA 2C 1A 00         A  7626    	JR	C,L_294
                           A  7627    ; 1912	
                           A  7628    ; 1913		if (dir[LDIR_Ord] & LLEF && wc != 0
                           A  7629    .LINE 1913
                           A  7630    
001AB3 DD2709              A  7631    	LD	HL,(IX+%9)
001AB6 7E                  A  7632    	LD	A,(HL)
001AB7 E640                A  7633    	AND	A,%40
001AB9 28 2B               A  7634    	JR	Z,L_302
001ABB 49010000            A  7635    	LD.LIS	BC,0
001ABF DD27F8              A  7636    	LD	HL,(IX+%FFFFFFF8)
001AC2 B7                  A  7637    	OR	A,A
001AC3 40ED42              A  7638    	SBC.SIS	HL,BC
001AC6 28 1E               A  7639    	JR	Z,L_302
                           A  7640    ; 1914			if (i >= FF_MAX_LFN + 1) return
                           A  7641    .LINE 1914
                           A  7642    
001AC8 01000100            A  7643    	LD	BC,256
001ACC DD27FD              A  7644    	LD	HL,(IX+%FFFFFFFD)
001ACF B7                  A  7645    	OR	A,A
001AD0 ED42                A  7646    	SBC	HL,BC
001AD2 38 05               A  7647    	JR	C,L_299
001AD4 B7                  A  7648    	OR	A,A
001AD5 ED62                A  7649    	SBC	HL,HL
001AD7 18 11               A  7650    	JR	L_303
001AD9                     A  7651    L_299:
                           A  7652    ; 1915			lfnbuf[i] = 0;
                           A  7653    .LINE 1915
                           A  7654    
001AD9 DD27FD              A  7655    	LD	HL,(IX+%FFFFFFFD)
001ADC 29                  A  7656    	ADD	HL,HL
001ADD DD0706              A  7657    	LD	BC,(IX+%6)
001AE0 09                  A  7658    	ADD	HL,BC
001AE1 3600                A  7659    	LD	(HL),%0
001AE3 23                  A  7660    	INC	HL
001AE4 3600                A  7661    	LD	(HL),%0
                           A  7662    ; 1916		}
001AE6                     A  7663    L_302:
                           A  7664    .LINE 1916
                           A  7665    
                           A  7666    ; 1917	
                           A  7667    ; 1918		return 1;		/* The part of LFN 
                           A  7668    .LINE 1918
                           A  7669    
001AE6 21010000            A  7670    	LD	HL,1
                           A  7671    ; 1919	}
001AEA                     A  7672    L_303:
                           A  7673    .LINE 1919
                           A  7674    
001AEA DDF9                A  7675    	LD	SP,IX
001AEC DDE1                A  7676    	POP	IX
001AEE C9                  A  7677    	RET	
                           A  7678    
                           A  7679    
                           A  7680    ;**************************** _pick_lfn *******
                           A  7681    ;Name                         Addr/Register   S
                           A  7682    ;_LfnOfs                             STATIC    
                           A  7683    ;uc                                   IX-10    
                           A  7684    ;wc                                    IX-8    
                           A  7685    ;s                                     IX-6    
                           A  7686    ;i                                     IX-3    
                           A  7687    ;dir                                   IX+9    
                           A  7688    ;lfnbuf                                IX+6    
                           A  7689    
                           A  7690    
                           A  7691    ; Stack Frame Size: 22 (bytes)
                           A  7692    ;       Spill Code: -1 (instruction)
                           A  7693    
                           A  7694    
                           A  7695    .ENDFUNC "pick_lfn",1919,"_pick_lfn"
                           A  7696    ; 1920	#endif
                           A  7697    ; 1921	
                           A  7698    ; 1922	
                           A  7699    ; 1923	#if !FF_FS_READONLY
                           A  7700    ; 1924	/*-------------------------------------
                           A  7701    ; 1925	/* FAT-LFN: Create an entry of LFN entr
                           A  7702    ; 1926	/*-------------------------------------
                           A  7703    ; 1927	
                           A  7704    ; 1928	static void put_lfn (
                           A  7705    ; 1929		const WCHAR* lfn,	/* Pointer to t
                           A  7706    ; 1930		BYTE* dir,			/* Pointer to t
                           A  7707    ; 1931		BYTE ord,			/* LFN order (1
                           A  7708    ; 1932		BYTE sum			/* Checksum of 
                           A  7709    ; 1933	)
                           A  7710    ; 1934	{
001AEF                     A  7711    _put_lfn:
                           A  7712    .DEFINE "_put_lfn"
                           A  7713    
                           A  7714    .VALUE _put_lfn
                           A  7715    
                           A  7716    .CLASS 3
                           A  7717    
                           A  7718    .TYPE 65
                           A  7719    
                           A  7720    .ENDEF
                           A  7721    
                           A  7722    .BEGFUNC "put_lfn",1934,"_put_lfn"
                           A  7723    
                           A  7724    .LINE 1934
                           A  7725    
                           A  7726    .DEFINE "lfn"
                           A  7727    
                           A  7728    .CLASS 65
                           A  7729    
                           A  7730    .VALUE 6
                           A  7731    
                           A  7732    .TYPE 205
                           A  7733    
                           A  7734    .ENDEF
                           A  7735    
                           A  7736    .DEFINE "dir"
                           A  7737    
                           A  7738    .CLASS 65
                           A  7739    
                           A  7740    .VALUE 9
                           A  7741    
                           A  7742    .TYPE 44
                           A  7743    
                           A  7744    .ENDEF
                           A  7745    
                           A  7746    .DEFINE "ord"
                           A  7747    
                           A  7748    .CLASS 65
                           A  7749    
                           A  7750    .VALUE 12
                           A  7751    
                           A  7752    .TYPE 12
                           A  7753    
                           A  7754    .ENDEF
                           A  7755    
                           A  7756    .DEFINE "sum"
                           A  7757    
                           A  7758    .CLASS 65
                           A  7759    
                           A  7760    .VALUE 15
                           A  7761    
                           A  7762    .TYPE 12
                           A  7763    
                           A  7764    .ENDEF
                           A  7765    
                           A  7766    .DEFINE "wc"
                           A  7767    
                           A  7768    .CLASS 65
                           A  7769    
                           A  7770    .VALUE -2
                           A  7771    
                           A  7772    .TYPE 13
                           A  7773    
                           A  7774    .ENDEF
                           A  7775    
                           A  7776    .DEFINE "s"
                           A  7777    
                           A  7778    .CLASS 65
                           A  7779    
                           A  7780    .VALUE -5
                           A  7781    
                           A  7782    .TYPE 14
                           A  7783    
                           A  7784    .ENDEF
                           A  7785    
                           A  7786    .DEFINE "i"
                           A  7787    
                           A  7788    .CLASS 65
                           A  7789    
                           A  7790    .VALUE -8
                           A  7791    
                           A  7792    .TYPE 14
                           A  7793    
                           A  7794    .ENDEF
                           A  7795    
001AEF DDE5                A  7796    	PUSH	IX
001AF1 DD210000 00         A  7797    	LD	IX,0
001AF6 DD39                A  7798    	ADD	IX,SP
001AF8 C5                  A  7799    	PUSH	BC
001AF9 C5                  A  7800    	PUSH	BC
001AFA 3B                  A  7801    	DEC	SP
001AFB 3B                  A  7802    	DEC	SP
                           A  7803    ; 1935		UINT i, s;
                           A  7804    ; 1936		WCHAR wc;
                           A  7805    ; 1937	
                           A  7806    ; 1938	
                           A  7807    ; 1939		dir[LDIR_Chksum] = sum;			/* 
                           A  7808    .LINE 1939
                           A  7809    
001AFC DD3109              A  7810    	LD	IY,(IX+%9)
001AFF ED230D              A  7811    	LEA	HL,IY+%D
001B02 DD7E0F              A  7812    	LD	A,(IX+%F)
001B05 77                  A  7813    	LD	(HL),A
                           A  7814    ; 1940		dir[LDIR_Attr] = AM_LFN;		/* 
                           A  7815    .LINE 1940
                           A  7816    
001B06 ED230B              A  7817    	LEA	HL,IY+%B
001B09 360F                A  7818    	LD	(HL),%F
                           A  7819    ; 1941		dir[LDIR_Type] = 0;
                           A  7820    .LINE 1941
                           A  7821    
001B0B ED230C              A  7822    	LEA	HL,IY+%C
001B0E 3600                A  7823    	LD	(HL),%0
                           A  7824    ; 1942		st_word(dir + LDIR_FstClusLO, 0);
                           A  7825    .LINE 1942
                           A  7826    
001B10 01000000            A  7827    	LD	BC,0
001B14 C5                  A  7828    	PUSH	BC
001B15 ED031A              A  7829    	LEA	BC,IY+%1A
001B18 C5                  A  7830    	PUSH	BC
001B19 CD 06 01 00         A  7831    	CALL	_st_word
001B1D C1                  A  7832    	POP	BC
001B1E C1                  A  7833    	POP	BC
                           A  7834    ; 1943	
                           A  7835    ; 1944		i = (ord - 1) * 13;				/* 
                           A  7836    .LINE 1944
                           A  7837    
001B1F DD7E0C              A  7838    	LD	A,(IX+%C)
001B22 B7ED62              A  7839    	UEXT	HL
001B25 6F                  A  7840    	LD	L,A
001B26 2B                  A  7841    	DEC	HL
001B27 3E0D                A  7842    	LD	A,%D
001B29 CD 00 00 00         A  7843    	CALL	__imul_b
001B2D DD2FF8              A  7844    	LD	(IX+%FFFFFFF8),HL
                           A  7845    ; 1945		s = wc = 0;
                           A  7846    .LINE 1945
                           A  7847    
001B30 DD36FE00            A  7848    	LD	(IX+%FFFFFFFE),%0
001B34 DD36FF00            A  7849    	LD	(IX+%FFFFFFFF),%0
001B38 01000000            A  7850    	LD	BC,0
001B3C DD0FFB              A  7851    	LD	(IX+%FFFFFFFB),BC
                           A  7852    ; 1946		do {
001B3F                     A  7853    L_308:
                           A  7854    .LINE 1946
                           A  7855    
                           A  7856    ; 1947			if (wc != 0xFFFF) wc = lfn[i++]
                           A  7857    .LINE 1947
                           A  7858    
001B3F 4901FFFF            A  7859    	LD.LIS	BC,65535
001B43 DD27FE              A  7860    	LD	HL,(IX+%FFFFFFFE)
001B46 B7                  A  7861    	OR	A,A
001B47 40ED42              A  7862    	SBC.SIS	HL,BC
001B4A 28 17               A  7863    	JR	Z,L_306
001B4C DD27F8              A  7864    	LD	HL,(IX+%FFFFFFF8)
001B4F 29                  A  7865    	ADD	HL,HL
001B50 DD0706              A  7866    	LD	BC,(IX+%6)
001B53 09                  A  7867    	ADD	HL,BC
001B54 ED07                A  7868    	LD	BC,(HL)
001B56 DD71FE              A  7869    	LD	(IX+%FFFFFFFE),C
001B59 DD70FF              A  7870    	LD	(IX+%FFFFFFFF),B
001B5C DD07F8              A  7871    	LD	BC,(IX+%FFFFFFF8)
001B5F 03                  A  7872    	INC	BC
001B60 DD0FF8              A  7873    	LD	(IX+%FFFFFFF8),BC
001B63                     A  7874    L_306:
                           A  7875    ; 1948			st_word(dir + LfnOfs[s], wc);	
                           A  7876    .LINE 1948
                           A  7877    
001B63 DD07FE              A  7878    	LD	BC,(IX+%FFFFFFFE)
001B66 C5                  A  7879    	PUSH	BC
001B67 01 00 00 00         A  7880    	LD	BC,_LfnOfs
001B6B DD27FB              A  7881    	LD	HL,(IX+%FFFFFFFB)
001B6E 09                  A  7882    	ADD	HL,BC
001B6F 7E                  A  7883    	LD	A,(HL)
001B70 B7ED62              A  7884    	UEXT	HL
001B73 6F                  A  7885    	LD	L,A
001B74 DD0709              A  7886    	LD	BC,(IX+%9)
001B77 09                  A  7887    	ADD	HL,BC
001B78 E5                  A  7888    	PUSH	HL
001B79 CD 06 01 00         A  7889    	CALL	_st_word
001B7D C1                  A  7890    	POP	BC
001B7E C1                  A  7891    	POP	BC
                           A  7892    ; 1949			if (wc == 0) wc = 0xFFFF;		
                           A  7893    .LINE 1949
                           A  7894    
001B7F 49010000            A  7895    	LD.LIS	BC,0
001B83 DD27FE              A  7896    	LD	HL,(IX+%FFFFFFFE)
001B86 B7                  A  7897    	OR	A,A
001B87 40ED42              A  7898    	SBC.SIS	HL,BC
001B8A 20 08               A  7899    	JR	NZ,L_309
001B8C DD36FEFF            A  7900    	LD	(IX+%FFFFFFFE),%FF
001B90 DD36FFFF            A  7901    	LD	(IX+%FFFFFFFF),%FF
                           A  7902    ; 1950		} while (++s < 13);
001B94                     A  7903    L_309:
                           A  7904    .LINE 1950
                           A  7905    
001B94 DD07FB              A  7906    	LD	BC,(IX+%FFFFFFFB)
001B97 03                  A  7907    	INC	BC
001B98 DD0FFB              A  7908    	LD	(IX+%FFFFFFFB),BC
001B9B 010D0000            A  7909    	LD	BC,13
001B9F DD27FB              A  7910    	LD	HL,(IX+%FFFFFFFB)
001BA2 B7                  A  7911    	OR	A,A
001BA3 ED42                A  7912    	SBC	HL,BC
001BA5 38 98               A  7913    	JR	C,L_308
                           A  7914    ; 1951		if (wc == 0xFFFF || !lfn[i]) ord |=
                           A  7915    .LINE 1951
                           A  7916    
001BA7 4901FFFF            A  7917    	LD.LIS	BC,65535
001BAB DD27FE              A  7918    	LD	HL,(IX+%FFFFFFFE)
001BAE B7                  A  7919    	OR	A,A
001BAF 40ED42              A  7920    	SBC.SIS	HL,BC
001BB2 28 14               A  7921    	JR	Z,L_311
001BB4 DD27F8              A  7922    	LD	HL,(IX+%FFFFFFF8)
001BB7 29                  A  7923    	ADD	HL,HL
001BB8 DD0706              A  7924    	LD	BC,(IX+%6)
001BBB 09                  A  7925    	ADD	HL,BC
001BBC 49010000            A  7926    	LD.LIS	BC,0
001BC0 ED27                A  7927    	LD	HL,(HL)
001BC2 B7                  A  7928    	OR	A,A
001BC3 40ED42              A  7929    	SBC.SIS	HL,BC
001BC6 20 08               A  7930    	JR	NZ,L_313
001BC8                     A  7931    L_311:
001BC8 DD7E0C              A  7932    	LD	A,(IX+%C)
001BCB CBF7                A  7933    	SET	%6,A
001BCD DD770C              A  7934    	LD	(IX+%C),A
001BD0                     A  7935    L_313:
                           A  7936    ; 1952		dir[LDIR_Ord] = ord;			/* 
                           A  7937    .LINE 1952
                           A  7938    
001BD0 DD2709              A  7939    	LD	HL,(IX+%9)
001BD3 DD7E0C              A  7940    	LD	A,(IX+%C)
001BD6 77                  A  7941    	LD	(HL),A
                           A  7942    ; 1953	}
                           A  7943    .LINE 1953
                           A  7944    
001BD7 DDF9                A  7945    	LD	SP,IX
001BD9 DDE1                A  7946    	POP	IX
001BDB C9                  A  7947    	RET	
                           A  7948    
                           A  7949    
                           A  7950    ;**************************** _put_lfn ********
                           A  7951    ;Name                         Addr/Register   S
                           A  7952    ;_LfnOfs                             STATIC    
                           A  7953    ;i                                     IX-8    
                           A  7954    ;s                                     IX-5    
                           A  7955    ;wc                                    IX-2    
                           A  7956    ;sum                                  IX+15    
                           A  7957    ;ord                                  IX+12    
                           A  7958    ;dir                                   IX+9    
                           A  7959    ;lfn                                   IX+6    
                           A  7960    
                           A  7961    
                           A  7962    ; Stack Frame Size: 26 (bytes)
                           A  7963    ;       Spill Code: -1 (instruction)
                           A  7964    
                           A  7965    
                           A  7966    .ENDFUNC "put_lfn",1953,"_put_lfn"
                           A  7967    ; 1954	
                           A  7968    ; 1955	#endif	/* !FF_FS_READONLY */
                           A  7969    ; 1956	#endif	/* FF_USE_LFN */
                           A  7970    ; 1957	
                           A  7971    ; 1958	
                           A  7972    ; 1959	
                           A  7973    ; 1960	#if FF_USE_LFN && !FF_FS_READONLY
                           A  7974    ; 1961	/*-------------------------------------
                           A  7975    ; 1962	/* FAT-LFN: Create a Numbered SFN      
                           A  7976    ; 1963	/*-------------------------------------
                           A  7977    ; 1964	
                           A  7978    ; 1965	static void gen_numname (
                           A  7979    ; 1966		BYTE* dst,			/* Pointer to t
                           A  7980    ; 1967		const BYTE* src,	/* Pointer to S
                           A  7981    ; 1968		const WCHAR* lfn,	/* Pointer to L
                           A  7982    ; 1969		UINT seq			/* Sequence num
                           A  7983    ; 1970	)
                           A  7984    ; 1971	{
001BDC                     A  7985    _gen_numname:
                           A  7986    .DEFINE "_gen_numname"
                           A  7987    
                           A  7988    .VALUE _gen_numname
                           A  7989    
                           A  7990    .CLASS 3
                           A  7991    
                           A  7992    .TYPE 65
                           A  7993    
                           A  7994    .ENDEF
                           A  7995    
                           A  7996    .BEGFUNC "gen_numname",1971,"_gen_numname"
                           A  7997    
                           A  7998    .LINE 1971
                           A  7999    
                           A  8000    .DEFINE "dst"
                           A  8001    
                           A  8002    .CLASS 65
                           A  8003    
                           A  8004    .VALUE 6
                           A  8005    
                           A  8006    .TYPE 44
                           A  8007    
                           A  8008    .ENDEF
                           A  8009    
                           A  8010    .DEFINE "src"
                           A  8011    
                           A  8012    .CLASS 65
                           A  8013    
                           A  8014    .VALUE 9
                           A  8015    
                           A  8016    .TYPE 204
                           A  8017    
                           A  8018    .ENDEF
                           A  8019    
                           A  8020    .DEFINE "lfn"
                           A  8021    
                           A  8022    .CLASS 65
                           A  8023    
                           A  8024    .VALUE 12
                           A  8025    
                           A  8026    .TYPE 205
                           A  8027    
                           A  8028    .ENDEF
                           A  8029    
                           A  8030    .DEFINE "seq"
                           A  8031    
                           A  8032    .CLASS 65
                           A  8033    
                           A  8034    .VALUE 15
                           A  8035    
                           A  8036    .TYPE 14
                           A  8037    
                           A  8038    .ENDEF
                           A  8039    
                           A  8040    .DEFINE "i"
                           A  8041    
                           A  8042    .CLASS 65
                           A  8043    
                           A  8044    .VALUE -3
                           A  8045    
                           A  8046    .TYPE 14
                           A  8047    
                           A  8048    .ENDEF
                           A  8049    
                           A  8050    .DEFINE "j"
                           A  8051    
                           A  8052    .CLASS 65
                           A  8053    
                           A  8054    .VALUE -6
                           A  8055    
                           A  8056    .TYPE 14
                           A  8057    
                           A  8058    .ENDEF
                           A  8059    
                           A  8060    .DEFINE "c"
                           A  8061    
                           A  8062    .CLASS 65
                           A  8063    
                           A  8064    .VALUE -7
                           A  8065    
                           A  8066    .TYPE 12
                           A  8067    
                           A  8068    .ENDEF
                           A  8069    
                           A  8070    .DEFINE "sreg"
                           A  8071    
                           A  8072    .CLASS 65
                           A  8073    
                           A  8074    .VALUE -11
                           A  8075    
                           A  8076    .TYPE 15
                           A  8077    
                           A  8078    .ENDEF
                           A  8079    
                           A  8080    .DEFINE "wc"
                           A  8081    
                           A  8082    .CLASS 65
                           A  8083    
                           A  8084    .VALUE -13
                           A  8085    
                           A  8086    .TYPE 13
                           A  8087    
                           A  8088    .ENDEF
                           A  8089    
                           A  8090    .DEFINE "ns"
                           A  8091    
                           A  8092    .CLASS 65
                           A  8093    
                           A  8094    .VALUE -33
                           A  8095    
                           A  8096    .DIM 8
                           A  8097    
                           A  8098    .TYPE 108
                           A  8099    
                           A  8100    .ENDEF
                           A  8101    
001BDC DDE5                A  8102    	PUSH	IX
001BDE DD210000 00         A  8103    	LD	IX,0
001BE3 DD39                A  8104    	ADD	IX,SP
001BE5 ED22DC              A  8105    	LEA	HL,IX+%FFFFFFDC
001BE8 F9                  A  8106    	LD	SP,HL
                           A  8107    ; 1972		BYTE ns[8], c;
                           A  8108    ; 1973		UINT i, j;
                           A  8109    ; 1974		WCHAR wc;
                           A  8110    ; 1975		DWORD sreg;
                           A  8111    ; 1976	
                           A  8112    ; 1977	
                           A  8113    ; 1978		memcpy(dst, src, 11);	/* Prepare 
                           A  8114    .LINE 1978
                           A  8115    
001BE9 010B0000            A  8116    	LD	BC,11
001BED C5                  A  8117    	PUSH	BC
001BEE DD0709              A  8118    	LD	BC,(IX+%9)
001BF1 C5                  A  8119    	PUSH	BC
001BF2 DD0706              A  8120    	LD	BC,(IX+%6)
001BF5 C5                  A  8121    	PUSH	BC
001BF6 CD 00 00 00         A  8122    	CALL	_memcpy
001BFA C1                  A  8123    	POP	BC
001BFB C1                  A  8124    	POP	BC
001BFC C1                  A  8125    	POP	BC
                           A  8126    ; 1979	
                           A  8127    ; 1980		if (seq > 5) {	/* In case of many 
                           A  8128    .LINE 1980
                           A  8129    
001BFD DD070F              A  8130    	LD	BC,(IX+%F)
001C00 21050000            A  8131    	LD	HL,5
001C04 B7                  A  8132    	OR	A,A
001C05 ED42                A  8133    	SBC	HL,BC
001C07 D2 D0 1C 00         A  8134    	JR	NC,L_325
                           A  8135    ; 1981			sreg = seq;
                           A  8136    .LINE 1981
                           A  8137    
001C0B DD070F              A  8138    	LD	BC,(IX+%F)
001C0E AF                  A  8139    	XOR	A,A
001C0F DD0FF5              A  8140    	LD	(IX+%FFFFFFF5),BC
001C12 DD77F8              A  8141    	LD	(IX+%FFFFFFF8),A
                           A  8142    ; 1982			while (*lfn) {	/* Create a CRC
                           A  8143    .LINE 1982
                           A  8144    
001C15 C3 B9 1C 00         A  8145    	JR	L_321
001C19                     A  8146    L_322:
                           A  8147    ; 1983				wc = *lfn++;
                           A  8148    .LINE 1983
                           A  8149    
001C19 DD270C              A  8150    	LD	HL,(IX+%C)
001C1C ED07                A  8151    	LD	BC,(HL)
001C1E DD71F3              A  8152    	LD	(IX+%FFFFFFF3),C
001C21 DD70F4              A  8153    	LD	(IX+%FFFFFFF4),B
001C24 DD310C              A  8154    	LD	IY,(IX+%C)
001C27 ED3302              A  8155    	LEA	IY,IY+%2
001C2A DD3E0C              A  8156    	LD	(IX+%C),IY
                           A  8157    ; 1984				for (i = 0; i < 16; i++) {
                           A  8158    .LINE 1984
                           A  8159    
001C2D 01000000            A  8160    	LD	BC,0
001C31 DD0FFD              A  8161    	LD	(IX+%FFFFFFFD),BC
001C34 18 75               A  8162    	JR	L_320
001C36                     A  8163    L_318:
                           A  8164    ; 1985					sreg = (sreg << 1) + (w
                           A  8165    .LINE 1985
                           A  8166    
001C36 DD07F5              A  8167    	LD	BC,(IX+%FFFFFFF5)
001C39 DD7EF8              A  8168    	LD	A,(IX+%FFFFFFF8)
001C3C 2E01                A  8169    	LD	L,%1
001C3E CD 00 00 00         A  8170    	CALL	__lshl
001C42 DD0FDC              A  8171    	LD	(IX+%FFFFFFDC),BC
001C45 5F                  A  8172    	LD	E,A
001C46 DD7EF3              A  8173    	LD	A,(IX+%FFFFFFF3)
001C49 E601                A  8174    	AND	A,%1
001C4B 4F                  A  8175    	LD	C,A
001C4C 0600                A  8176    	LD	B,%0
001C4E CD 00 00 00         A  8177    	CALL	__stoiu
001C52 E5C1                A  8178    	LD	BC,HL
001C54 AF                  A  8179    	XOR	A,A
001C55 DD27DC              A  8180    	LD	HL,(IX+%FFFFFFDC)
001C58 CD 00 00 00         A  8181    	CALL	__ladd
001C5C DD2FF5              A  8182    	LD	(IX+%FFFFFFF5),HL
001C5F DD73F8              A  8183    	LD	(IX+%FFFFFFF8),E
                           A  8184    ; 1986					wc >>= 1;
                           A  8185    .LINE 1986
                           A  8186    
001C62 DD07F3              A  8187    	LD	BC,(IX+%FFFFFFF3)
001C65 CD 00 00 00         A  8188    	CALL	__stoiu
001C69 3E01                A  8189    	LD	A,%1
001C6B CD 00 00 00         A  8190    	CALL	__ishrs_b
001C6F DD75F3              A  8191    	LD	(IX+%FFFFFFF3),L
001C72 DD74F4              A  8192    	LD	(IX+%FFFFFFF4),H
                           A  8193    ; 1987					if (sreg & 0x10000) sre
                           A  8194    .LINE 1987
                           A  8195    
001C75 DD27F5              A  8196    	LD	HL,(IX+%FFFFFFF5)
001C78 DD5EF8              A  8197    	LD	E,(IX+%FFFFFFF8)
001C7B 01000001            A  8198    	LD	BC,65536
001C7F AF                  A  8199    	XOR	A,A
001C80 CD 00 00 00         A  8200    	CALL	__land
001C84 01000000            A  8201    	LD	BC,0
001C88 AF                  A  8202    	XOR	A,A
001C89 CD 00 00 00         A  8203    	CALL	__lcmpu
001C8D 28 15               A  8204    	JR	Z,L_319
001C8F DD27F5              A  8205    	LD	HL,(IX+%FFFFFFF5)
001C92 DD5EF8              A  8206    	LD	E,(IX+%FFFFFFF8)
001C95 01211001            A  8207    	LD	BC,69665
001C99 AF                  A  8208    	XOR	A,A
001C9A CD 00 00 00         A  8209    	CALL	__lxor
001C9E DD2FF5              A  8210    	LD	(IX+%FFFFFFF5),HL
001CA1 DD73F8              A  8211    	LD	(IX+%FFFFFFF8),E
                           A  8212    ; 1988				}
001CA4                     A  8213    L_319:
                           A  8214    .LINE 1988
                           A  8215    
001CA4 DD07FD              A  8216    	LD	BC,(IX+%FFFFFFFD)
001CA7 03                  A  8217    	INC	BC
001CA8 DD0FFD              A  8218    	LD	(IX+%FFFFFFFD),BC
001CAB                     A  8219    L_320:
001CAB 01100000            A  8220    	LD	BC,16
001CAF DD27FD              A  8221    	LD	HL,(IX+%FFFFFFFD)
001CB2 B7                  A  8222    	OR	A,A
001CB3 ED42                A  8223    	SBC	HL,BC
001CB5 DA 36 1C 00         A  8224    	JR	C,L_318
                           A  8225    ; 1989			}
001CB9                     A  8226    L_321:
                           A  8227    .LINE 1989
                           A  8228    
001CB9 DD270C              A  8229    	LD	HL,(IX+%C)
001CBC 49010000            A  8230    	LD.LIS	BC,0
001CC0 ED27                A  8231    	LD	HL,(HL)
001CC2 B7                  A  8232    	OR	A,A
001CC3 40ED42              A  8233    	SBC.SIS	HL,BC
001CC6 C2 19 1C 00         A  8234    	JR	NZ,L_322
                           A  8235    ; 1990			seq = (UINT)sreg;
                           A  8236    .LINE 1990
                           A  8237    
001CCA DD07F5              A  8238    	LD	BC,(IX+%FFFFFFF5)
001CCD DD0F0F              A  8239    	LD	(IX+%F),BC
                           A  8240    ; 1991		}
001CD0                     A  8241    L_325:
                           A  8242    .LINE 1991
                           A  8243    
                           A  8244    ; 1992	
                           A  8245    ; 1993		/* Make suffix (~ + hexdecimal) */
                           A  8246    ; 1994		i = 7;
                           A  8247    .LINE 1994
                           A  8248    
001CD0 01070000            A  8249    	LD	BC,7
001CD4 DD0FFD              A  8250    	LD	(IX+%FFFFFFFD),BC
                           A  8251    ; 1995		do {
001CD7                     A  8252    L_330:
                           A  8253    .LINE 1995
                           A  8254    
                           A  8255    ; 1996			c = (BYTE)((seq % 16) + '0'); s
                           A  8256    .LINE 1996
                           A  8257    
001CD7 DD7E0F              A  8258    	LD	A,(IX+%F)
001CDA E60F                A  8259    	AND	A,%F
001CDC B7ED62              A  8260    	UEXT	HL
001CDF 6F                  A  8261    	LD	L,A
001CE0 E5FDE1              A  8262    	LD	IY,HL
001CE3 ED2330              A  8263    	LEA	HL,IY+%30
001CE6 DD75F9              A  8264    	LD	(IX+%FFFFFFF9),L
001CE9 DD270F              A  8265    	LD	HL,(IX+%F)
001CEC 3E04                A  8266    	LD	A,%4
001CEE CD 00 00 00         A  8267    	CALL	__ishru_b
001CF2 DD2F0F              A  8268    	LD	(IX+%F),HL
                           A  8269    ; 1997			if (c > '9') c += 7;
                           A  8270    .LINE 1997
                           A  8271    
001CF5 3E39                A  8272    	LD	A,%39
001CF7 DDBEF9              A  8273    	CP	A,(IX+%FFFFFFF9)
001CFA 30 08               A  8274    	JR	NC,L_328
001CFC DD7EF9              A  8275    	LD	A,(IX+%FFFFFFF9)
001CFF C607                A  8276    	ADD	A,%7
001D01 DD77F9              A  8277    	LD	(IX+%FFFFFFF9),A
001D04                     A  8278    L_328:
                           A  8279    ; 1998			ns[i--] = c;
                           A  8280    .LINE 1998
                           A  8281    
001D04 DD07FD              A  8282    	LD	BC,(IX+%FFFFFFFD)
001D07 ED22DF              A  8283    	LEA	HL,IX+%FFFFFFDF
001D0A 09                  A  8284    	ADD	HL,BC
001D0B DD7EF9              A  8285    	LD	A,(IX+%FFFFFFF9)
001D0E 77                  A  8286    	LD	(HL),A
001D0F DD31FD              A  8287    	LD	IY,(IX+%FFFFFFFD)
001D12 ED33FF              A  8288    	LEA	IY,IY+%FFFFFFFF
001D15 DD3EFD              A  8289    	LD	(IX+%FFFFFFFD),IY
                           A  8290    ; 1999		} while (i && seq);
                           A  8291    .LINE 1999
                           A  8292    
001D18 01000000            A  8293    	LD	BC,0
001D1C DD27FD              A  8294    	LD	HL,(IX+%FFFFFFFD)
001D1F B7                  A  8295    	OR	A,A
001D20 ED42                A  8296    	SBC	HL,BC
001D22 28 08               A  8297    	JR	Z,L_332
001D24 DD270F              A  8298    	LD	HL,(IX+%F)
001D27 B7                  A  8299    	OR	A,A
001D28 ED42                A  8300    	SBC	HL,BC
001D2A 20 AB               A  8301    	JR	NZ,L_330
001D2C                     A  8302    L_332:
                           A  8303    ; 2000		ns[i] = '~';
                           A  8304    .LINE 2000
                           A  8305    
001D2C DD07FD              A  8306    	LD	BC,(IX+%FFFFFFFD)
001D2F ED22DF              A  8307    	LEA	HL,IX+%FFFFFFDF
001D32 09                  A  8308    	ADD	HL,BC
001D33 367E                A  8309    	LD	(HL),%7E
                           A  8310    ; 2001	
                           A  8311    ; 2002		/* Append the suffix to the SFN bod
                           A  8312    ; 2003		for (j = 0; j < i && dst[j] != ' ';
                           A  8313    .LINE 2003
                           A  8314    
001D35 01000000            A  8315    	LD	BC,0
001D39 DD0FFA              A  8316    	LD	(IX+%FFFFFFFA),BC
001D3C 18 31               A  8317    	JR	L_341
001D3E                     A  8318    L_339:
                           A  8319    ; 2004			if (dbc_1st(dst[j])) {	/* To a
                           A  8320    .LINE 2004
                           A  8321    
001D3E DD27ED              A  8322    	LD	HL,(IX+%FFFFFFED)
001D41 4E                  A  8323    	LD	C,(HL)
001D42 0600                A  8324    	LD	B,%0
001D44 C5                  A  8325    	PUSH	BC
001D45 CD A2 01 00         A  8326    	CALL	_dbc_1st
001D49 C1                  A  8327    	POP	BC
001D4A 01000000            A  8328    	LD	BC,0
001D4E B7                  A  8329    	OR	A,A
001D4F ED42                A  8330    	SBC	HL,BC
001D51 28 15               A  8331    	JR	Z,L_340
                           A  8332    ; 2005				if (j == i - 1) break;
                           A  8333    .LINE 2005
                           A  8334    
001D53 DD31FD              A  8335    	LD	IY,(IX+%FFFFFFFD)
001D56 ED23FF              A  8336    	LEA	HL,IY+%FFFFFFFF
001D59 DD07FA              A  8337    	LD	BC,(IX+%FFFFFFFA)
001D5C B7                  A  8338    	OR	A,A
001D5D ED42                A  8339    	SBC	HL,BC
001D5F 28 31               A  8340    	JR	Z,L_348
                           A  8341    ; 2006				j++;
                           A  8342    .LINE 2006
                           A  8343    
001D61 DD07FA              A  8344    	LD	BC,(IX+%FFFFFFFA)
001D64 03                  A  8345    	INC	BC
001D65 DD0FFA              A  8346    	LD	(IX+%FFFFFFFA),BC
                           A  8347    ; 2007			}
                           A  8348    ; 2008		}
001D68                     A  8349    L_340:
                           A  8350    .LINE 2008
                           A  8351    
001D68 DD07FA              A  8352    	LD	BC,(IX+%FFFFFFFA)
001D6B 03                  A  8353    	INC	BC
001D6C DD0FFA              A  8354    	LD	(IX+%FFFFFFFA),BC
001D6F                     A  8355    L_341:
001D6F DD07FD              A  8356    	LD	BC,(IX+%FFFFFFFD)
001D72 DD27FA              A  8357    	LD	HL,(IX+%FFFFFFFA)
001D75 B7                  A  8358    	OR	A,A
001D76 ED42                A  8359    	SBC	HL,BC
001D78 30 18               A  8360    	JR	NC,L_348
001D7A DD07FA              A  8361    	LD	BC,(IX+%FFFFFFFA)
001D7D DD2706              A  8362    	LD	HL,(IX+%6)
001D80 09                  A  8363    	ADD	HL,BC
001D81 DD2FED              A  8364    	LD	(IX+%FFFFFFED),HL
001D84 7E                  A  8365    	LD	A,(HL)
001D85 B7ED62              A  8366    	UEXT	HL
001D88 6F                  A  8367    	LD	L,A
001D89 01200000            A  8368    	LD	BC,32
001D8D B7                  A  8369    	OR	A,A
001D8E ED42                A  8370    	SBC	HL,BC
001D90 20 AC               A  8371    	JR	NZ,L_339
                           A  8372    ; 2009		do {	/* Append the suffix */
001D92                     A  8373    L_348:
                           A  8374    .LINE 2009
                           A  8375    
                           A  8376    ; 2010			dst[j++] = (i < 8) ? ns[i++] : 
                           A  8377    .LINE 2010
                           A  8378    
001D92 01080000            A  8379    	LD	BC,8
001D96 DD27FD              A  8380    	LD	HL,(IX+%FFFFFFFD)
001D99 B7                  A  8381    	OR	A,A
001D9A ED42                A  8382    	SBC	HL,BC
001D9C 30 1E               A  8383    	JR	NC,L_346
001D9E DD07FD              A  8384    	LD	BC,(IX+%FFFFFFFD)
001DA1 DD0FE7              A  8385    	LD	(IX+%FFFFFFE7),BC
001DA4 DD07FD              A  8386    	LD	BC,(IX+%FFFFFFFD)
001DA7 03                  A  8387    	INC	BC
001DA8 DD0FFD              A  8388    	LD	(IX+%FFFFFFFD),BC
001DAB DD07E7              A  8389    	LD	BC,(IX+%FFFFFFE7)
001DAE ED22DF              A  8390    	LEA	HL,IX+%FFFFFFDF
001DB1 09                  A  8391    	ADD	HL,BC
001DB2 7E                  A  8392    	LD	A,(HL)
001DB3 B7ED62              A  8393    	UEXT	HL
001DB6 6F                  A  8394    	LD	L,A
001DB7 DD2FF0              A  8395    	LD	(IX+%FFFFFFF0),HL
001DBA 18 07               A  8396    	JR	L_347
001DBC                     A  8397    L_346:
001DBC 01200000            A  8398    	LD	BC,32
001DC0 DD0FF0              A  8399    	LD	(IX+%FFFFFFF0),BC
001DC3                     A  8400    L_347:
001DC3 DD07FA              A  8401    	LD	BC,(IX+%FFFFFFFA)
001DC6 DD0FEA              A  8402    	LD	(IX+%FFFFFFEA),BC
001DC9 DD7EF0              A  8403    	LD	A,(IX+%FFFFFFF0)
001DCC DD07EA              A  8404    	LD	BC,(IX+%FFFFFFEA)
001DCF DD2706              A  8405    	LD	HL,(IX+%6)
001DD2 09                  A  8406    	ADD	HL,BC
001DD3 77                  A  8407    	LD	(HL),A
001DD4 DD07FA              A  8408    	LD	BC,(IX+%FFFFFFFA)
001DD7 03                  A  8409    	INC	BC
001DD8 DD0FFA              A  8410    	LD	(IX+%FFFFFFFA),BC
                           A  8411    ; 2011		} while (j < 8);
                           A  8412    .LINE 2011
                           A  8413    
001DDB 01080000            A  8414    	LD	BC,8
001DDF DD27FA              A  8415    	LD	HL,(IX+%FFFFFFFA)
001DE2 B7                  A  8416    	OR	A,A
001DE3 ED42                A  8417    	SBC	HL,BC
001DE5 38 AB               A  8418    	JR	C,L_348
                           A  8419    ; 2012	}
                           A  8420    .LINE 2012
                           A  8421    
001DE7 DDF9                A  8422    	LD	SP,IX
001DE9 DDE1                A  8423    	POP	IX
001DEB C9                  A  8424    	RET	
                           A  8425    
                           A  8426    
                           A  8427    ;**************************** _gen_numname ****
                           A  8428    ;Name                         Addr/Register   S
                           A  8429    ;_memcpy                             IMPORT  --
                           A  8430    ;ns                                   IX-33    
                           A  8431    ;temp343                              IX-25    
                           A  8432    ;temp342                              IX-22    
                           A  8433    ;G_14                                 IX-19    
                           A  8434    ;temp344                              IX-16    
                           A  8435    ;wc                                   IX-13    
                           A  8436    ;sreg                                 IX-11    
                           A  8437    ;c                                     IX-7    
                           A  8438    ;j                                     IX-6    
                           A  8439    ;i                                     IX-3    
                           A  8440    ;seq                                  IX+15    
                           A  8441    ;lfn                                  IX+12    
                           A  8442    ;src                                   IX+9    
                           A  8443    ;dst                                   IX+6    
                           A  8444    
                           A  8445    
                           A  8446    ; Stack Frame Size: 54 (bytes)
                           A  8447    ;       Spill Code: -1 (instruction)
                           A  8448    
                           A  8449    
                           A  8450    .ENDFUNC "gen_numname",2012,"_gen_numname"
                           A  8451    ; 2013	#endif	/* FF_USE_LFN && !FF_FS_READONL
                           A  8452    ; 2014	
                           A  8453    ; 2015	
                           A  8454    ; 2016	
                           A  8455    ; 2017	#if FF_USE_LFN
                           A  8456    ; 2018	/*-------------------------------------
                           A  8457    ; 2019	/* FAT-LFN: Calculate checksum of an SF
                           A  8458    ; 2020	/*-------------------------------------
                           A  8459    ; 2021	
                           A  8460    ; 2022	static BYTE sum_sfn (
                           A  8461    ; 2023		const BYTE* dir		/* Pointer to t
                           A  8462    ; 2024	)
                           A  8463    ; 2025	{
001DEC                     A  8464    _sum_sfn:
                           A  8465    .DEFINE "_sum_sfn"
                           A  8466    
                           A  8467    .VALUE _sum_sfn
                           A  8468    
                           A  8469    .CLASS 3
                           A  8470    
                           A  8471    .TYPE 76
                           A  8472    
                           A  8473    .ENDEF
                           A  8474    
                           A  8475    .BEGFUNC "sum_sfn",2025,"_sum_sfn"
                           A  8476    
                           A  8477    .LINE 2025
                           A  8478    
                           A  8479    .DEFINE "dir"
                           A  8480    
                           A  8481    .CLASS 65
                           A  8482    
                           A  8483    .VALUE 6
                           A  8484    
                           A  8485    .TYPE 204
                           A  8486    
                           A  8487    .ENDEF
                           A  8488    
                           A  8489    .DEFINE "sum"
                           A  8490    
                           A  8491    .CLASS 65
                           A  8492    
                           A  8493    .VALUE -1
                           A  8494    
                           A  8495    .TYPE 12
                           A  8496    
                           A  8497    .ENDEF
                           A  8498    
                           A  8499    .DEFINE "n"
                           A  8500    
                           A  8501    .CLASS 65
                           A  8502    
                           A  8503    .VALUE -4
                           A  8504    
                           A  8505    .TYPE 14
                           A  8506    
                           A  8507    .ENDEF
                           A  8508    
001DEC DDE5                A  8509    	PUSH	IX
001DEE DD210000 00         A  8510    	LD	IX,0
001DF3 DD39                A  8511    	ADD	IX,SP
001DF5 C5                  A  8512    	PUSH	BC
001DF6 3B                  A  8513    	DEC	SP
                           A  8514    ; 2026		BYTE sum = 0;
                           A  8515    .LINE 2026
                           A  8516    
001DF7 DD36FF00            A  8517    	LD	(IX+%FFFFFFFF),%0
                           A  8518    ; 2027		UINT n = 11;
                           A  8519    .LINE 2027
                           A  8520    
001DFB 010B0000            A  8521    	LD	BC,11
001DFF DD0FFC              A  8522    	LD	(IX+%FFFFFFFC),BC
                           A  8523    ; 2028	
                           A  8524    ; 2029		do {
001E02                     A  8525    L_353:
                           A  8526    .LINE 2029
                           A  8527    
                           A  8528    ; 2030			sum = (sum >> 1) + (sum << 7) +
                           A  8529    .LINE 2030
                           A  8530    
001E02 DD7EFF              A  8531    	LD	A,(IX+%FFFFFFFF)
001E05 B7ED62              A  8532    	UEXT	HL
001E08 6F                  A  8533    	LD	L,A
001E09 3E01                A  8534    	LD	A,%1
001E0B CD 00 00 00         A  8535    	CALL	__ishrs_b
001E0F 0607                A  8536    	LD	B,%7
001E11 DD7EFF              A  8537    	LD	A,(IX+%FFFFFFFF)
001E14 CD 00 00 00         A  8538    	CALL	__bshl
001E18 47                  A  8539    	LD	B,A
001E19 7D                  A  8540    	LD	A,L
001E1A 80                  A  8541    	ADD	A,B
001E1B DD2706              A  8542    	LD	HL,(IX+%6)
001E1E 86                  A  8543    	ADD	A,(HL)
001E1F DD77FF              A  8544    	LD	(IX+%FFFFFFFF),A
001E22 DD0706              A  8545    	LD	BC,(IX+%6)
001E25 03                  A  8546    	INC	BC
001E26 DD0F06              A  8547    	LD	(IX+%6),BC
                           A  8548    ; 2031		} while (--n);
                           A  8549    .LINE 2031
                           A  8550    
001E29 DD31FC              A  8551    	LD	IY,(IX+%FFFFFFFC)
001E2C ED33FF              A  8552    	LEA	IY,IY+%FFFFFFFF
001E2F DD3EFC              A  8553    	LD	(IX+%FFFFFFFC),IY
001E32 01000000            A  8554    	LD	BC,0
001E36 DD27FC              A  8555    	LD	HL,(IX+%FFFFFFFC)
001E39 B7                  A  8556    	OR	A,A
001E3A ED42                A  8557    	SBC	HL,BC
001E3C 20 C4               A  8558    	JR	NZ,L_353
                           A  8559    ; 2032		return sum;
                           A  8560    .LINE 2032
                           A  8561    
001E3E DD7EFF              A  8562    	LD	A,(IX+%FFFFFFFF)
                           A  8563    ; 2033	}
                           A  8564    .LINE 2033
                           A  8565    
001E41 DDF9                A  8566    	LD	SP,IX
001E43 DDE1                A  8567    	POP	IX
001E45 C9                  A  8568    	RET	
                           A  8569    
                           A  8570    
                           A  8571    ;**************************** _sum_sfn ********
                           A  8572    ;Name                         Addr/Register   S
                           A  8573    ;n                                     IX-4    
                           A  8574    ;sum                                   IX-1    
                           A  8575    ;dir                                   IX+6    
                           A  8576    
                           A  8577    
                           A  8578    ; Stack Frame Size: 13 (bytes)
                           A  8579    ;       Spill Code: -1 (instruction)
                           A  8580    
                           A  8581    
                           A  8582    .ENDFUNC "sum_sfn",2033,"_sum_sfn"
                           A  8583    ; 2034	
                           A  8584    ; 2035	#endif	/* FF_USE_LFN */
                           A  8585    ; 2036	
                           A  8586    ; 2037	
                           A  8587    ; 2038	
                           A  8588    ; 2039	#if FF_FS_EXFAT
                           A  8589    ; 2040	/*-------------------------------------
                           A  8590    ; 2041	/* exFAT: Checksum                     
                           A  8591    ; 2042	/*-------------------------------------
                           A  8592    ; 2043	
                           A  8593    ; 2044	static WORD xdir_sum (	/* Get checksum
                           A  8594    ; 2045		const BYTE* dir		/* Directory en
                           A  8595    ; 2046	)
                           A  8596    ; 2047	{
                           A  8597    ; 2048		UINT i, szblk;
                           A  8598    ; 2049		WORD sum;
                           A  8599    ; 2050	
                           A  8600    ; 2051	
                           A  8601    ; 2052		szblk = (dir[XDIR_NumSec] + 1) * SZ
                           A  8602    ; 2053		for (i = sum = 0; i < szblk; i++) {
                           A  8603    ; 2054			if (i == XDIR_SetSum) {	/* Skip
                           A  8604    ; 2055				i++;
                           A  8605    ; 2056			} else {
                           A  8606    ; 2057				sum = ((sum & 1) ? 0x8000 :
                           A  8607    ; 2058			}
                           A  8608    ; 2059		}
                           A  8609    ; 2060		return sum;
                           A  8610    ; 2061	}
                           A  8611    ; 2062	
                           A  8612    ; 2063	
                           A  8613    ; 2064	
                           A  8614    ; 2065	static WORD xname_sum (	/* Get check su
                           A  8615    ; 2066		const WCHAR* name	/* File name to
                           A  8616    ; 2067	)
                           A  8617    ; 2068	{
                           A  8618    ; 2069		WCHAR chr;
                           A  8619    ; 2070		WORD sum = 0;
                           A  8620    ; 2071	
                           A  8621    ; 2072	
                           A  8622    ; 2073		while ((chr = *name++) != 0) {
                           A  8623    ; 2074			chr = (WCHAR)ff_wtoupper(chr);	
                           A  8624    ; 2075			sum = ((sum & 1) ? 0x8000 : 0) 
                           A  8625    ; 2076			sum = ((sum & 1) ? 0x8000 : 0) 
                           A  8626    ; 2077		}
                           A  8627    ; 2078		return sum;
                           A  8628    ; 2079	}
                           A  8629    ; 2080	
                           A  8630    ; 2081	
                           A  8631    ; 2082	#if !FF_FS_READONLY && FF_USE_MKFS
                           A  8632    ; 2083	static DWORD xsum32 (	/* Returns 32-b
                           A  8633    ; 2084		BYTE  dat,			/* Byte to be c
                           A  8634    ; 2085		DWORD sum			/* Previous sum
                           A  8635    ; 2086	)
                           A  8636    ; 2087	{
                           A  8637    ; 2088		sum = ((sum & 1) ? 0x80000000 : 0) 
                           A  8638    ; 2089		return sum;
                           A  8639    ; 2090	}
                           A  8640    ; 2091	#endif
                           A  8641    ; 2092	
                           A  8642    ; 2093	
                           A  8643    ; 2094	
                           A  8644    ; 2095	/*-----------------------------------*/
                           A  8645    ; 2096	/* exFAT: Get a directry entry block */
                           A  8646    ; 2097	/*-----------------------------------*/
                           A  8647    ; 2098	
                           A  8648    ; 2099	static FRESULT load_xdir (	/* FR_INT_E
                           A  8649    ; 2100		DIR* dp					/* Reading 
                           A  8650    ; 2101	)
                           A  8651    ; 2102	{
                           A  8652    ; 2103		FRESULT res;
                           A  8653    ; 2104		UINT i, sz_ent;
                           A  8654    ; 2105		BYTE *dirb = dp->obj.fs->dirbuf;	
                           A  8655    ; 2106	
                           A  8656    ; 2107	
                           A  8657    ; 2108		/* Load file directory entry */
                           A  8658    ; 2109		res = move_window(dp->obj.fs, dp->s
                           A  8659    ; 2110		if (res != FR_OK) return res;
                           A  8660    ; 2111		if (dp->dir[XDIR_Type] != ET_FILEDI
                           A  8661    ; 2112		memcpy(dirb + 0 * SZDIRE, dp->dir, 
                           A  8662    ; 2113		sz_ent = (dirb[XDIR_NumSec] + 1) * 
                           A  8663    ; 2114		if (sz_ent < 3 * SZDIRE || sz_ent >
                           A  8664    ; 2115	
                           A  8665    ; 2116		/* Load stream extension entry */
                           A  8666    ; 2117		res = dir_next(dp, 0);
                           A  8667    ; 2118		if (res == FR_NO_FILE) res = FR_INT
                           A  8668    ; 2119		if (res != FR_OK) return res;
                           A  8669    ; 2120		res = move_window(dp->obj.fs, dp->s
                           A  8670    ; 2121		if (res != FR_OK) return res;
                           A  8671    ; 2122		if (dp->dir[XDIR_Type] != ET_STREAM
                           A  8672    ; 2123		memcpy(dirb + 1 * SZDIRE, dp->dir, 
                           A  8673    ; 2124		if (MAXDIRB(dirb[XDIR_NumName]) > s
                           A  8674    ; 2125	
                           A  8675    ; 2126		/* Load file name entries */
                           A  8676    ; 2127		i = 2 * SZDIRE;	/* Name offset to l
                           A  8677    ; 2128		do {
                           A  8678    ; 2129			res = dir_next(dp, 0);
                           A  8679    ; 2130			if (res == FR_NO_FILE) res = FR
                           A  8680    ; 2131			if (res != FR_OK) return res;
                           A  8681    ; 2132			res = move_window(dp->obj.fs, d
                           A  8682    ; 2133			if (res != FR_OK) return res;
                           A  8683    ; 2134			if (dp->dir[XDIR_Type] != ET_FI
                           A  8684    ; 2135			if (i < MAXDIRB(FF_MAX_LFN)) me
                           A  8685    ; 2136		} while ((i += SZDIRE) < sz_ent);
                           A  8686    ; 2137	
                           A  8687    ; 2138		/* Sanity check (do it for only acc
                           A  8688    ; 2139		if (i <= MAXDIRB(FF_MAX_LFN)) {
                           A  8689    ; 2140			if (xdir_sum(dirb) != ld_word(d
                           A  8690    ; 2141		}
                           A  8691    ; 2142		return FR_OK;
                           A  8692    ; 2143	}
                           A  8693    ; 2144	
                           A  8694    ; 2145	
                           A  8695    ; 2146	/*-------------------------------------
                           A  8696    ; 2147	/* exFAT: Initialize object allocation 
                           A  8697    ; 2148	/*-------------------------------------
                           A  8698    ; 2149	
                           A  8699    ; 2150	static void init_alloc_info (
                           A  8700    ; 2151		FATFS* fs,		/* Filesystem objec
                           A  8701    ; 2152		FFOBJID* obj	/* Object allocatio
                           A  8702    ; 2153	)
                           A  8703    ; 2154	{
                           A  8704    ; 2155		obj->sclust = ld_dword(fs->dirbuf +
                           A  8705    ; 2156		obj->objsize = ld_qword(fs->dirbuf 
                           A  8706    ; 2157		obj->stat = fs->dirbuf[XDIR_GenFlag
                           A  8707    ; 2158		obj->n_frag = 0;					
                           A  8708    ; 2159	}
                           A  8709    ; 2160	
                           A  8710    ; 2161	
                           A  8711    ; 2162	
                           A  8712    ; 2163	#if !FF_FS_READONLY || FF_FS_RPATH != 0
                           A  8713    ; 2164	/*-------------------------------------
                           A  8714    ; 2165	/* exFAT: Load the object's directory e
                           A  8715    ; 2166	/*-------------------------------------
                           A  8716    ; 2167	
                           A  8717    ; 2168	static FRESULT load_obj_xdir (
                           A  8718    ; 2169		DIR* dp,			/* Blank direct
                           A  8719    ; 2170		const FFOBJID* obj	/* Object with 
                           A  8720    ; 2171	)
                           A  8721    ; 2172	{
                           A  8722    ; 2173		FRESULT res;
                           A  8723    ; 2174	
                           A  8724    ; 2175		/* Open object containing directory
                           A  8725    ; 2176		dp->obj.fs = obj->fs;
                           A  8726    ; 2177		dp->obj.sclust = obj->c_scl;
                           A  8727    ; 2178		dp->obj.stat = (BYTE)obj->c_size;
                           A  8728    ; 2179		dp->obj.objsize = obj->c_size & 0xF
                           A  8729    ; 2180		dp->obj.n_frag = 0;
                           A  8730    ; 2181		dp->blk_ofs = obj->c_ofs;
                           A  8731    ; 2182	
                           A  8732    ; 2183		res = dir_sdi(dp, dp->blk_ofs);	/* 
                           A  8733    ; 2184		if (res == FR_OK) {
                           A  8734    ; 2185			res = load_xdir(dp);		/* 
                           A  8735    ; 2186		}
                           A  8736    ; 2187		return res;
                           A  8737    ; 2188	}
                           A  8738    ; 2189	#endif
                           A  8739    ; 2190	
                           A  8740    ; 2191	
                           A  8741    ; 2192	#if !FF_FS_READONLY
                           A  8742    ; 2193	/*-------------------------------------
                           A  8743    ; 2194	/* exFAT: Store the directory entry blo
                           A  8744    ; 2195	/*-------------------------------------
                           A  8745    ; 2196	
                           A  8746    ; 2197	static FRESULT store_xdir (
                           A  8747    ; 2198		DIR* dp				/* Pointer to t
                           A  8748    ; 2199	)
                           A  8749    ; 2200	{
                           A  8750    ; 2201		FRESULT res;
                           A  8751    ; 2202		UINT nent;
                           A  8752    ; 2203		BYTE *dirb = dp->obj.fs->dirbuf;	
                           A  8753    ; 2204	
                           A  8754    ; 2205		/* Create set sum */
                           A  8755    ; 2206		st_word(dirb + XDIR_SetSum, xdir_su
                           A  8756    ; 2207		nent = dirb[XDIR_NumSec] + 1;
                           A  8757    ; 2208	
                           A  8758    ; 2209		/* Store the direcotry entry block 
                           A  8759    ; 2210		res = dir_sdi(dp, dp->blk_ofs);
                           A  8760    ; 2211		while (res == FR_OK) {
                           A  8761    ; 2212			res = move_window(dp->obj.fs, d
                           A  8762    ; 2213			if (res != FR_OK) break;
                           A  8763    ; 2214			memcpy(dp->dir, dirb, SZDIRE);
                           A  8764    ; 2215			dp->obj.fs->wflag = 1;
                           A  8765    ; 2216			if (--nent == 0) break;
                           A  8766    ; 2217			dirb += SZDIRE;
                           A  8767    ; 2218			res = dir_next(dp, 0);
                           A  8768    ; 2219		}
                           A  8769    ; 2220		return (res == FR_OK || res == FR_D
                           A  8770    ; 2221	}
                           A  8771    ; 2222	
                           A  8772    ; 2223	
                           A  8773    ; 2224	
                           A  8774    ; 2225	/*-------------------------------------
                           A  8775    ; 2226	/* exFAT: Create a new directory enrty 
                           A  8776    ; 2227	/*-------------------------------------
                           A  8777    ; 2228	
                           A  8778    ; 2229	static void create_xdir (
                           A  8779    ; 2230		BYTE* dirb,			/* Pointer to t
                           A  8780    ; 2231		const WCHAR* lfn	/* Pointer to t
                           A  8781    ; 2232	)
                           A  8782    ; 2233	{
                           A  8783    ; 2234		UINT i;
                           A  8784    ; 2235		BYTE nc1, nlen;
                           A  8785    ; 2236		WCHAR wc;
                           A  8786    ; 2237	
                           A  8787    ; 2238	
                           A  8788    ; 2239		/* Create file-directory and stream
                           A  8789    ; 2240		memset(dirb, 0, 2 * SZDIRE);
                           A  8790    ; 2241		dirb[0 * SZDIRE + XDIR_Type] = ET_F
                           A  8791    ; 2242		dirb[1 * SZDIRE + XDIR_Type] = ET_S
                           A  8792    ; 2243	
                           A  8793    ; 2244		/* Create file-name entries */
                           A  8794    ; 2245		i = SZDIRE * 2;	/* Top of file_name
                           A  8795    ; 2246		nlen = nc1 = 0; wc = 1;
                           A  8796    ; 2247		do {
                           A  8797    ; 2248			dirb[i++] = ET_FILENAME; dirb[i
                           A  8798    ; 2249			do {	/* Fill name field */
                           A  8799    ; 2250				if (wc != 0 && (wc = lfn[nl
                           A  8800    ; 2251				st_word(dirb + i, wc); 	/* 
                           A  8801    ; 2252				i += 2;
                           A  8802    ; 2253			} while (i % SZDIRE != 0);
                           A  8803    ; 2254			nc1++;
                           A  8804    ; 2255		} while (lfn[nlen]);	/* Fill nex
                           A  8805    ; 2256	
                           A  8806    ; 2257		dirb[XDIR_NumName] = nlen;		/* 
                           A  8807    ; 2258		dirb[XDIR_NumSec] = 1 + nc1;	/* 
                           A  8808    ; 2259		st_word(dirb + XDIR_NameHash, xname
                           A  8809    ; 2260	}
                           A  8810    ; 2261	
                           A  8811    ; 2262	#endif	/* !FF_FS_READONLY */
                           A  8812    ; 2263	#endif	/* FF_FS_EXFAT */
                           A  8813    ; 2264	
                           A  8814    ; 2265	
                           A  8815    ; 2266	
                           A  8816    ; 2267	#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH 
                           A  8817    ; 2268	/*-------------------------------------
                           A  8818    ; 2269	/* Read an object from the directory   
                           A  8819    ; 2270	/*-------------------------------------
                           A  8820    ; 2271	
                           A  8821    ; 2272	#define DIR_READ_FILE(dp) dir_read(dp, 
                           A  8822    ; 2273	#define DIR_READ_LABEL(dp) dir_read(dp,
                           A  8823    ; 2274	
                           A  8824    ; 2275	static FRESULT dir_read (
                           A  8825    ; 2276		DIR* dp,		/* Pointer to the d
                           A  8826    ; 2277		int vol			/* Filtered by 0:fi
                           A  8827    ; 2278	)
                           A  8828    ; 2279	{
001E46                     A  8829    _dir_read:
                           A  8830    .DEFINE "_dir_read"
                           A  8831    
                           A  8832    .VALUE _dir_read
                           A  8833    
                           A  8834    .CLASS 3
                           A  8835    
                           A  8836    .TYPE 68
                           A  8837    
                           A  8838    .ENDEF
                           A  8839    
                           A  8840    .BEGFUNC "dir_read",2279,"_dir_read"
                           A  8841    
                           A  8842    .LINE 2279
                           A  8843    
                           A  8844    .DEFINE "dp"
                           A  8845    
                           A  8846    .CLASS 65
                           A  8847    
                           A  8848    .VALUE 6
                           A  8849    
                           A  8850    .TAG "NONAME3"
                           A  8851    
                           A  8852    .TYPE 40
                           A  8853    
                           A  8854    .ENDEF
                           A  8855    
                           A  8856    .DEFINE "vol"
                           A  8857    
                           A  8858    .CLASS 65
                           A  8859    
                           A  8860    .VALUE 9
                           A  8861    
                           A  8862    .TYPE 4
                           A  8863    
                           A  8864    .ENDEF
                           A  8865    
                           A  8866    .DEFINE "b"
                           A  8867    
                           A  8868    .CLASS 65
                           A  8869    
                           A  8870    .VALUE -1
                           A  8871    
                           A  8872    .TYPE 12
                           A  8873    
                           A  8874    .ENDEF
                           A  8875    
                           A  8876    .DEFINE "ord"
                           A  8877    
                           A  8878    .CLASS 65
                           A  8879    
                           A  8880    .VALUE -2
                           A  8881    
                           A  8882    .TYPE 12
                           A  8883    
                           A  8884    .ENDEF
                           A  8885    
                           A  8886    .DEFINE "res"
                           A  8887    
                           A  8888    .CLASS 65
                           A  8889    
                           A  8890    .VALUE -5
                           A  8891    
                           A  8892    .TYPE 4
                           A  8893    
                           A  8894    .ENDEF
                           A  8895    
                           A  8896    .DEFINE "attr"
                           A  8897    
                           A  8898    .CLASS 65
                           A  8899    
                           A  8900    .VALUE -6
                           A  8901    
                           A  8902    .TYPE 12
                           A  8903    
                           A  8904    .ENDEF
                           A  8905    
                           A  8906    .DEFINE "sum"
                           A  8907    
                           A  8908    .CLASS 65
                           A  8909    
                           A  8910    .VALUE -7
                           A  8911    
                           A  8912    .TYPE 12
                           A  8913    
                           A  8914    .ENDEF
                           A  8915    
                           A  8916    .DEFINE "fs"
                           A  8917    
                           A  8918    .CLASS 65
                           A  8919    
                           A  8920    .VALUE -10
                           A  8921    
                           A  8922    .TAG "NONAME0"
                           A  8923    
                           A  8924    .TYPE 40
                           A  8925    
                           A  8926    .ENDEF
                           A  8927    
001E46 DDE5                A  8928    	PUSH	IX
001E48 DD210000 00         A  8929    	LD	IX,0
001E4D DD39                A  8930    	ADD	IX,SP
001E4F ED22E9              A  8931    	LEA	HL,IX+%FFFFFFE9
001E52 F9                  A  8932    	LD	SP,HL
                           A  8933    ; 2280		FRESULT res = FR_NO_FILE;
                           A  8934    .LINE 2280
                           A  8935    
001E53 01040000            A  8936    	LD	BC,4
001E57 DD0FFB              A  8937    	LD	(IX+%FFFFFFFB),BC
                           A  8938    ; 2281		FATFS *fs = dp->obj.fs;
                           A  8939    .LINE 2281
                           A  8940    
001E5A DD3106              A  8941    	LD	IY,(IX+%6)
001E5D FD0700              A  8942    	LD	BC,(IY+%0)
001E60 DD0FF6              A  8943    	LD	(IX+%FFFFFFF6),BC
                           A  8944    ; 2282		BYTE attr, b;
                           A  8945    ; 2283	#if FF_USE_LFN
                           A  8946    ; 2284		BYTE ord = 0xFF, sum = 0xFF;
                           A  8947    .LINE 2284
                           A  8948    
001E63 DD36FEFF            A  8949    	LD	(IX+%FFFFFFFE),%FF
001E67 DD36F9FF            A  8950    	LD	(IX+%FFFFFFF9),%FF
                           A  8951    ; 2285	#endif
                           A  8952    ; 2286	
                           A  8953    ; 2287		while (dp->sect) {
                           A  8954    .LINE 2287
                           A  8955    
001E6B C3 C0 1F 00         A  8956    	JR	L_380
001E6F                     A  8957    L_381:
                           A  8958    ; 2288			res = move_window(fs, dp->sect)
                           A  8959    .LINE 2288
                           A  8960    
001E6F DD4EEC              A  8961    	LD	C,(IX+%FFFFFFEC)
001E72 0600                A  8962    	LD	B,%0
001E74 C5                  A  8963    	PUSH	BC
001E75 DD07E9              A  8964    	LD	BC,(IX+%FFFFFFE9)
001E78 C5                  A  8965    	PUSH	BC
001E79 DD07F6              A  8966    	LD	BC,(IX+%FFFFFFF6)
001E7C C5                  A  8967    	PUSH	BC
001E7D CD 1E 04 00         A  8968    	CALL	_move_window
001E81 C1                  A  8969    	POP	BC
001E82 C1                  A  8970    	POP	BC
001E83 C1                  A  8971    	POP	BC
001E84 DD2FFB              A  8972    	LD	(IX+%FFFFFFFB),HL
                           A  8973    ; 2289			if (res != FR_OK) break;
                           A  8974    .LINE 2289
                           A  8975    
001E87 01000000            A  8976    	LD	BC,0
001E8B DD27FB              A  8977    	LD	HL,(IX+%FFFFFFFB)
001E8E B7                  A  8978    	OR	A,A
001E8F ED42                A  8979    	SBC	HL,BC
001E91 C2 E1 1F 00         A  8980    	JR	NZ,L_383
                           A  8981    ; 2290			b = dp->dir[DIR_Name];	/* Test
                           A  8982    .LINE 2290
                           A  8983    
001E95 DD3106              A  8984    	LD	IY,(IX+%6)
001E98 FD071B              A  8985    	LD	BC,(IY+%1B)
001E9B DD0FF0              A  8986    	LD	(IX+%FFFFFFF0),BC
001E9E C5E1                A  8987    	LD	HL,BC
001EA0 7E                  A  8988    	LD	A,(HL)
001EA1 DD77FF              A  8989    	LD	(IX+%FFFFFFFF),A
                           A  8990    ; 2291			if (b == 0) {
                           A  8991    .LINE 2291
                           A  8992    
001EA4 B7                  A  8993    	OR	A,A
001EA5 20 0B               A  8994    	JR	NZ,L_377
                           A  8995    ; 2292				res = FR_NO_FILE; break; /*
                           A  8996    .LINE 2292
                           A  8997    
001EA7 01040000            A  8998    	LD	BC,4
001EAB DD0FFB              A  8999    	LD	(IX+%FFFFFFFB),BC
001EAE C3 E1 1F 00         A  9000    	JR	L_383
                           A  9001    ; 2293			}
001EB2                     A  9002    L_377:
                           A  9003    .LINE 2293
                           A  9004    
                           A  9005    ; 2294	#if FF_FS_EXFAT
                           A  9006    ; 2295			if (fs->fs_type == FS_EXFAT) {	
                           A  9007    ; 2296				if (FF_USE_LABEL && vol) {
                           A  9008    ; 2297					if (b == ET_VLABEL) bre
                           A  9009    ; 2298				} else {
                           A  9010    ; 2299					if (b == ET_FILEDIR) {	
                           A  9011    ; 2300						dp->blk_ofs = dp->d
                           A  9012    ; 2301						res = load_xdir(dp)
                           A  9013    ; 2302						if (res == FR_OK) {
                           A  9014    ; 2303							dp->obj.attr = 
                           A  9015    ; 2304						}
                           A  9016    ; 2305						break;
                           A  9017    ; 2306					}
                           A  9018    ; 2307				}
                           A  9019    ; 2308			} else
                           A  9020    ; 2309	#endif
                           A  9021    ; 2310			{	/* On the FAT/FAT32 volume 
                           A  9022    ; 2311				dp->obj.attr = attr = dp->d
                           A  9023    .LINE 2311
                           A  9024    
001EB2 DD31F0              A  9025    	LD	IY,(IX+%FFFFFFF0)
001EB5 FD7E0B              A  9026    	LD	A,(IY+%B)
001EB8 E63F                A  9027    	AND	A,%3F
001EBA DD77FA              A  9028    	LD	(IX+%FFFFFFFA),A
001EBD DD3106              A  9029    	LD	IY,(IX+%6)
001EC0 FD7705              A  9030    	LD	(IY+%5),A
                           A  9031    ; 2312	#if FF_USE_LFN		/* LFN configuratio
                           A  9032    ; 2313				if (b == DDEM || b == '.' |
                           A  9033    .LINE 2313
                           A  9034    
001EC3 DD7EFF              A  9035    	LD	A,(IX+%FFFFFFFF)
001EC6 FEE5                A  9036    	CP	A,%E5
001EC8 28 23               A  9037    	JR	Z,L_375
001ECA DD7EFF              A  9038    	LD	A,(IX+%FFFFFFFF)
001ECD FE2E                A  9039    	CP	A,%2E
001ECF 28 1C               A  9040    	JR	Z,L_375
001ED1 DD7EFA              A  9041    	LD	A,(IX+%FFFFFFFA)
001ED4 CBAF                A  9042    	RES	%5,A
001ED6 FE08                A  9043    	CP	A,%8
001ED8 20 04               A  9044    	JR	NZ,L__190
001EDA 0601                A  9045    	LD	B,%1
001EDC 18 02               A  9046    	JR	L__191
001EDE                     A  9047    L__190:
001EDE 0600                A  9048    	LD	B,%0
001EE0                     A  9049    L__191:
001EE0 78                  A  9050    	LD	A,B
001EE1 17ED62              A  9051    	SEXT	HL
001EE4 68                  A  9052    	LD	L,B
001EE5 DD0709              A  9053    	LD	BC,(IX+%9)
001EE8 B7                  A  9054    	OR	A,A
001EE9 ED42                A  9055    	SBC	HL,BC
001EEB 28 08               A  9056    	JR	Z,L_376
001EED                     A  9057    L_375:
                           A  9058    ; 2314					ord = 0xFF;
                           A  9059    .LINE 2314
                           A  9060    
001EED DD36FEFF            A  9061    	LD	(IX+%FFFFFFFE),%FF
                           A  9062    ; 2315				} else {
                           A  9063    .LINE 2315
                           A  9064    
001EF1 C3 A2 1F 00         A  9065    	JR	L_378
001EF5                     A  9066    L_376:
                           A  9067    ; 2316					if (attr == AM_LFN) {	
                           A  9068    .LINE 2316
                           A  9069    
001EF5 DD7EFA              A  9070    	LD	A,(IX+%FFFFFFFA)
001EF8 FE0F                A  9071    	CP	A,%F
001EFA 20 7F               A  9072    	JR	NZ,L_374
                           A  9073    ; 2317						if (b & LLEF) {		
                           A  9074    .LINE 2317
                           A  9075    
001EFC DD7EFF              A  9076    	LD	A,(IX+%FFFFFFFF)
001EFF E640                A  9077    	AND	A,%40
001F01 28 26               A  9078    	JR	Z,L_369
                           A  9079    ; 2318							sum = dp->dir[L
                           A  9080    .LINE 2318
                           A  9081    
001F03 DD3106              A  9082    	LD	IY,(IX+%6)
001F06 FD371B              A  9083    	LD	IY,(IY+%1B)
001F09 FD7E0D              A  9084    	LD	A,(IY+%D)
001F0C DD77F9              A  9085    	LD	(IX+%FFFFFFF9),A
                           A  9086    ; 2319							b &= (BYTE)~LLE
                           A  9087    .LINE 2319
                           A  9088    
001F0F DD7EFF              A  9089    	LD	A,(IX+%FFFFFFFF)
001F12 CBB7                A  9090    	RES	%6,A
001F14 DD77FF              A  9091    	LD	(IX+%FFFFFFFF),A
001F17 DD77FE              A  9092    	LD	(IX+%FFFFFFFE),A
                           A  9093    ; 2320							dp->blk_ofs = d
                           A  9094    .LINE 2320
                           A  9095    
001F1A DD3106              A  9096    	LD	IY,(IX+%6)
001F1D FD070F              A  9097    	LD	BC,(IY+%F)
001F20 FD7E12              A  9098    	LD	A,(IY+%12)
001F23 FD0F2A              A  9099    	LD	(IY+%2A),BC
001F26 FD772D              A  9100    	LD	(IY+%2D),A
                           A  9101    ; 2321						}
001F29                     A  9102    L_369:
                           A  9103    .LINE 2321
                           A  9104    
                           A  9105    ; 2322						/* Check LFN validi
                           A  9106    ; 2323						ord = (b == ord && 
                           A  9107    .LINE 2323
                           A  9108    
001F29 DD7EFF              A  9109    	LD	A,(IX+%FFFFFFFF)
001F2C DDBEFE              A  9110    	CP	A,(IX+%FFFFFFFE)
001F2F 20 3B               A  9111    	JR	NZ,L_367
001F31 DD3106              A  9112    	LD	IY,(IX+%6)
001F34 FD071B              A  9113    	LD	BC,(IY+%1B)
001F37 DD0FED              A  9114    	LD	(IX+%FFFFFFED),BC
001F3A DD31ED              A  9115    	LD	IY,(IX+%FFFFFFED)
001F3D FD7E0D              A  9116    	LD	A,(IY+%D)
001F40 DDBEF9              A  9117    	CP	A,(IX+%FFFFFFF9)
001F43 20 27               A  9118    	JR	NZ,L_367
001F45 DD07ED              A  9119    	LD	BC,(IX+%FFFFFFED)
001F48 C5                  A  9120    	PUSH	BC
001F49 DD31F6              A  9121    	LD	IY,(IX+%FFFFFFF6)
001F4C FD070B              A  9122    	LD	BC,(IY+%B)
001F4F C5                  A  9123    	PUSH	BC
001F50 CD DD 19 00         A  9124    	CALL	_pick_lfn
001F54 C1                  A  9125    	POP	BC
001F55 C1                  A  9126    	POP	BC
001F56 01000000            A  9127    	LD	BC,0
001F5A B7                  A  9128    	OR	A,A
001F5B ED42                A  9129    	SBC	HL,BC
001F5D 28 0D               A  9130    	JR	Z,L_367
001F5F DD7EFE              A  9131    	LD	A,(IX+%FFFFFFFE)
001F62 B7ED62              A  9132    	UEXT	HL
001F65 6F                  A  9133    	LD	L,A
001F66 2B                  A  9134    	DEC	HL
001F67 DD2FF3              A  9135    	LD	(IX+%FFFFFFF3),HL
001F6A 18 07               A  9136    	JR	L_368
001F6C                     A  9137    L_367:
001F6C 01FF0000            A  9138    	LD	BC,255
001F70 DD0FF3              A  9139    	LD	(IX+%FFFFFFF3),BC
001F73                     A  9140    L_368:
001F73 DD7EF3              A  9141    	LD	A,(IX+%FFFFFFF3)
001F76 DD77FE              A  9142    	LD	(IX+%FFFFFFFE),A
                           A  9143    ; 2324					} else {				
                           A  9144    .LINE 2324
                           A  9145    
001F79 18 27               A  9146    	JR	L_378
001F7B                     A  9147    L_374:
                           A  9148    ; 2325						if (ord != 0 || sum
                           A  9149    .LINE 2325
                           A  9150    
001F7B DD7EFE              A  9151    	LD	A,(IX+%FFFFFFFE)
001F7E B7                  A  9152    	OR	A,A
001F7F 20 11               A  9153    	JR	NZ,L_371
001F81 DD3106              A  9154    	LD	IY,(IX+%6)
001F84 FD071B              A  9155    	LD	BC,(IY+%1B)
001F87 C5                  A  9156    	PUSH	BC
001F88 CD EC 1D 00         A  9157    	CALL	_sum_sfn
001F8C C1                  A  9158    	POP	BC
001F8D DDBEF9              A  9159    	CP	A,(IX+%FFFFFFF9)
001F90 28 4F               A  9160    	JR	Z,L_383
001F92                     A  9161    L_371:
                           A  9162    ; 2326							dp->blk_ofs = 0
                           A  9163    .LINE 2326
                           A  9164    
001F92 01FFFFFF            A  9165    	LD	BC,16777215
001F96 DD3106              A  9166    	LD	IY,(IX+%6)
001F99 FD0F2A              A  9167    	LD	(IY+%2A),BC
001F9C FD362DFF            A  9168    	LD	(IY+%2D),%FF
                           A  9169    ; 2327						}
                           A  9170    .LINE 2327
                           A  9171    
                           A  9172    ; 2328						break;
                           A  9173    .LINE 2328
                           A  9174    
001FA0 18 3F               A  9175    	JR	L_383
                           A  9176    ; 2329					}
                           A  9177    ; 2330				}
                           A  9178    ; 2331	#else		/* Non LFN configuration */
                           A  9179    ; 2332				if (b != DDEM && b != '.' &
                           A  9180    ; 2333					break;
                           A  9181    ; 2334				}
                           A  9182    ; 2335	#endif
                           A  9183    ; 2336			}
001FA2                     A  9184    L_378:
                           A  9185    .LINE 2336
                           A  9186    
                           A  9187    ; 2337			res = dir_next(dp, 0);		/* 
                           A  9188    .LINE 2337
                           A  9189    
001FA2 01000000            A  9190    	LD	BC,0
001FA6 C5                  A  9191    	PUSH	BC
001FA7 DD0706              A  9192    	LD	BC,(IX+%6)
001FAA C5                  A  9193    	PUSH	BC
001FAB CD 6A 14 00         A  9194    	CALL	_dir_next
001FAF C1                  A  9195    	POP	BC
001FB0 C1                  A  9196    	POP	BC
001FB1 DD2FFB              A  9197    	LD	(IX+%FFFFFFFB),HL
                           A  9198    ; 2338			if (res != FR_OK) break;
                           A  9199    .LINE 2338
                           A  9200    
001FB4 01000000            A  9201    	LD	BC,0
001FB8 DD27FB              A  9202    	LD	HL,(IX+%FFFFFFFB)
001FBB B7                  A  9203    	OR	A,A
001FBC ED42                A  9204    	SBC	HL,BC
001FBE 20 21               A  9205    	JR	NZ,L_383
                           A  9206    ; 2339		}
001FC0                     A  9207    L_380:
                           A  9208    .LINE 2339
                           A  9209    
001FC0 DD3106              A  9210    	LD	IY,(IX+%6)
001FC3 FD0717              A  9211    	LD	BC,(IY+%17)
001FC6 FD7E1A              A  9212    	LD	A,(IY+%1A)
001FC9 DD0FE9              A  9213    	LD	(IX+%FFFFFFE9),BC
001FCC DD77EC              A  9214    	LD	(IX+%FFFFFFEC),A
001FCF C5E1                A  9215    	LD	HL,BC
001FD1 DD5EEC              A  9216    	LD	E,(IX+%FFFFFFEC)
001FD4 01000000            A  9217    	LD	BC,0
001FD8 AF                  A  9218    	XOR	A,A
001FD9 CD 00 00 00         A  9219    	CALL	__lcmpu
001FDD C2 6F 1E 00         A  9220    	JR	NZ,L_381
001FE1                     A  9221    L_383:
                           A  9222    ; 2340	
                           A  9223    ; 2341		if (res != FR_OK) dp->sect = 0;		
                           A  9224    .LINE 2341
                           A  9225    
001FE1 01000000            A  9226    	LD	BC,0
001FE5 DD27FB              A  9227    	LD	HL,(IX+%FFFFFFFB)
001FE8 B7                  A  9228    	OR	A,A
001FE9 ED42                A  9229    	SBC	HL,BC
001FEB 28 0A               A  9230    	JR	Z,L_384
001FED DD3106              A  9231    	LD	IY,(IX+%6)
001FF0 FD0F17              A  9232    	LD	(IY+%17),BC
001FF3 FD361A00            A  9233    	LD	(IY+%1A),%0
001FF7                     A  9234    L_384:
                           A  9235    ; 2342		return res;
                           A  9236    .LINE 2342
                           A  9237    
001FF7 DD27FB              A  9238    	LD	HL,(IX+%FFFFFFFB)
                           A  9239    ; 2343	}
                           A  9240    .LINE 2343
                           A  9241    
001FFA DDF9                A  9242    	LD	SP,IX
001FFC DDE1                A  9243    	POP	IX
001FFE C9                  A  9244    	RET	
                           A  9245    
                           A  9246    
                           A  9247    ;**************************** _dir_read *******
                           A  9248    ;Name                         Addr/Register   S
                           A  9249    ;G_15                                 IX-23    
                           A  9250    ;G_17                                 IX-19    
                           A  9251    ;G_16                                 IX-16    
                           A  9252    ;temp365                              IX-13    
                           A  9253    ;fs                                   IX-10    
                           A  9254    ;sum                                   IX-7    
                           A  9255    ;attr                                  IX-6    
                           A  9256    ;res                                   IX-5    
                           A  9257    ;ord                                   IX-2    
                           A  9258    ;b                                     IX-1    
                           A  9259    ;vol                                   IX+9    
                           A  9260    ;dp                                    IX+6    
                           A  9261    
                           A  9262    
                           A  9263    ; Stack Frame Size: 35 (bytes)
                           A  9264    ;       Spill Code: -1 (instruction)
                           A  9265    
                           A  9266    
                           A  9267    .ENDFUNC "dir_read",2343,"_dir_read"
                           A  9268    ; 2344	
                           A  9269    ; 2345	#endif	/* FF_FS_MINIMIZE <= 1 || FF_US
                           A  9270    ; 2346	
                           A  9271    ; 2347	
                           A  9272    ; 2348	
                           A  9273    ; 2349	/*-------------------------------------
                           A  9274    ; 2350	/* Directory handling - Find an object 
                           A  9275    ; 2351	/*-------------------------------------
                           A  9276    ; 2352	
                           A  9277    ; 2353	static FRESULT dir_find (	/* FR_OK(0)
                           A  9278    ; 2354		DIR* dp					/* Pointer 
                           A  9279    ; 2355	)
                           A  9280    ; 2356	{
001FFF                     A  9281    _dir_find:
                           A  9282    .DEFINE "_dir_find"
                           A  9283    
                           A  9284    .VALUE _dir_find
                           A  9285    
                           A  9286    .CLASS 3
                           A  9287    
                           A  9288    .TYPE 68
                           A  9289    
                           A  9290    .ENDEF
                           A  9291    
                           A  9292    .BEGFUNC "dir_find",2356,"_dir_find"
                           A  9293    
                           A  9294    .LINE 2356
                           A  9295    
                           A  9296    .DEFINE "dp"
                           A  9297    
                           A  9298    .CLASS 65
                           A  9299    
                           A  9300    .VALUE 6
                           A  9301    
                           A  9302    .TAG "NONAME3"
                           A  9303    
                           A  9304    .TYPE 40
                           A  9305    
                           A  9306    .ENDEF
                           A  9307    
                           A  9308    .DEFINE "c"
                           A  9309    
                           A  9310    .CLASS 65
                           A  9311    
                           A  9312    .VALUE -1
                           A  9313    
                           A  9314    .TYPE 12
                           A  9315    
                           A  9316    .ENDEF
                           A  9317    
                           A  9318    .DEFINE "ord"
                           A  9319    
                           A  9320    .CLASS 65
                           A  9321    
                           A  9322    .VALUE -2
                           A  9323    
                           A  9324    .TYPE 12
                           A  9325    
                           A  9326    .ENDEF
                           A  9327    
                           A  9328    .DEFINE "res"
                           A  9329    
                           A  9330    .CLASS 65
                           A  9331    
                           A  9332    .VALUE -5
                           A  9333    
                           A  9334    .TYPE 4
                           A  9335    
                           A  9336    .ENDEF
                           A  9337    
                           A  9338    .DEFINE "a"
                           A  9339    
                           A  9340    .CLASS 65
                           A  9341    
                           A  9342    .VALUE -6
                           A  9343    
                           A  9344    .TYPE 12
                           A  9345    
                           A  9346    .ENDEF
                           A  9347    
                           A  9348    .DEFINE "sum"
                           A  9349    
                           A  9350    .CLASS 65
                           A  9351    
                           A  9352    .VALUE -7
                           A  9353    
                           A  9354    .TYPE 12
                           A  9355    
                           A  9356    .ENDEF
                           A  9357    
                           A  9358    .DEFINE "fs"
                           A  9359    
                           A  9360    .CLASS 65
                           A  9361    
                           A  9362    .VALUE -10
                           A  9363    
                           A  9364    .TAG "NONAME0"
                           A  9365    
                           A  9366    .TYPE 40
                           A  9367    
                           A  9368    .ENDEF
                           A  9369    
001FFF DDE5                A  9370    	PUSH	IX
002001 DD210000 00         A  9371    	LD	IX,0
002006 DD39                A  9372    	ADD	IX,SP
002008 ED22EA              A  9373    	LEA	HL,IX+%FFFFFFEA
00200B F9                  A  9374    	LD	SP,HL
                           A  9375    ; 2357		FRESULT res;
                           A  9376    ; 2358		FATFS *fs = dp->obj.fs;
                           A  9377    .LINE 2358
                           A  9378    
00200C DD3106              A  9379    	LD	IY,(IX+%6)
00200F FD0700              A  9380    	LD	BC,(IY+%0)
002012 DD0FF6              A  9381    	LD	(IX+%FFFFFFF6),BC
                           A  9382    ; 2359		BYTE c;
                           A  9383    ; 2360	#if FF_USE_LFN
                           A  9384    ; 2361		BYTE a, ord, sum;
                           A  9385    ; 2362	#endif
                           A  9386    ; 2363	
                           A  9387    ; 2364		res = dir_sdi(dp, 0);			/* 
                           A  9388    .LINE 2364
                           A  9389    
002015 01000000            A  9390    	LD	BC,0
002019 C5                  A  9391    	PUSH	BC
00201A C5                  A  9392    	PUSH	BC
00201B DD0706              A  9393    	LD	BC,(IX+%6)
00201E C5                  A  9394    	PUSH	BC
00201F CD 50 12 00         A  9395    	CALL	_dir_sdi
002023 C1                  A  9396    	POP	BC
002024 C1                  A  9397    	POP	BC
002025 C1                  A  9398    	POP	BC
002026 DD2FFB              A  9399    	LD	(IX+%FFFFFFFB),HL
                           A  9400    ; 2365		if (res != FR_OK) return res;
                           A  9401    .LINE 2365
                           A  9402    
002029 01000000            A  9403    	LD	BC,0
00202D DD27FB              A  9404    	LD	HL,(IX+%FFFFFFFB)
002030 B7                  A  9405    	OR	A,A
002031 ED42                A  9406    	SBC	HL,BC
002033 28 07               A  9407    	JR	Z,L_387
002035 DD27FB              A  9408    	LD	HL,(IX+%FFFFFFFB)
002038 C3 E8 21 00         A  9409    	JR	L_417
00203C                     A  9410    L_387:
                           A  9411    ; 2366	#if FF_FS_EXFAT
                           A  9412    ; 2367		if (fs->fs_type == FS_EXFAT) {	/* 
                           A  9413    ; 2368			BYTE nc;
                           A  9414    ; 2369			UINT di, ni;
                           A  9415    ; 2370			WORD hash = xname_sum(fs->lfnbu
                           A  9416    ; 2371	
                           A  9417    ; 2372			while ((res = DIR_READ_FILE(dp)
                           A  9418    ; 2373	#if FF_MAX_LFN < 255
                           A  9419    ; 2374				if (fs->dirbuf[XDIR_NumName
                           A  9420    ; 2375	#endif
                           A  9421    ; 2376				if (ld_word(fs->dirbuf + XD
                           A  9422    ; 2377				for (nc = fs->dirbuf[XDIR_N
                           A  9423    ; 2378					if ((di % SZDIRE) == 0)
                           A  9424    ; 2379					if (ff_wtoupper(ld_word
                           A  9425    ; 2380				}
                           A  9426    ; 2381				if (nc == 0 && !fs->lfnbuf[
                           A  9427    ; 2382			}
                           A  9428    ; 2383			return res;
                           A  9429    ; 2384		}
                           A  9430    ; 2385	#endif
                           A  9431    ; 2386		/* On the FAT/FAT32 volume */
                           A  9432    ; 2387	#if FF_USE_LFN
                           A  9433    ; 2388		ord = sum = 0xFF; dp->blk_ofs = 0xF
                           A  9434    .LINE 2388
                           A  9435    
00203C DD36F9FF            A  9436    	LD	(IX+%FFFFFFF9),%FF
002040 DD36FEFF            A  9437    	LD	(IX+%FFFFFFFE),%FF
002044 01FFFFFF            A  9438    	LD	BC,16777215
002048 DD3106              A  9439    	LD	IY,(IX+%6)
00204B FD0F2A              A  9440    	LD	(IY+%2A),BC
00204E FD362DFF            A  9441    	LD	(IY+%2D),%FF
                           A  9442    ; 2389	#endif
                           A  9443    ; 2390		do {
002052                     A  9444    L_414:
                           A  9445    .LINE 2390
                           A  9446    
                           A  9447    ; 2391			res = move_window(fs, dp->sect)
                           A  9448    .LINE 2391
                           A  9449    
002052 DD3106              A  9450    	LD	IY,(IX+%6)
002055 FD0717              A  9451    	LD	BC,(IY+%17)
002058 FD7E1A              A  9452    	LD	A,(IY+%1A)
00205B 2600                A  9453    	LD	H,%0
00205D 6F                  A  9454    	LD	L,A
00205E E5                  A  9455    	PUSH	HL
00205F C5                  A  9456    	PUSH	BC
002060 DD07F6              A  9457    	LD	BC,(IX+%FFFFFFF6)
002063 C5                  A  9458    	PUSH	BC
002064 CD 1E 04 00         A  9459    	CALL	_move_window
002068 C1                  A  9460    	POP	BC
002069 C1                  A  9461    	POP	BC
00206A C1                  A  9462    	POP	BC
00206B DD2FFB              A  9463    	LD	(IX+%FFFFFFFB),HL
                           A  9464    ; 2392			if (res != FR_OK) break;
                           A  9465    .LINE 2392
                           A  9466    
00206E 01000000            A  9467    	LD	BC,0
002072 DD27FB              A  9468    	LD	HL,(IX+%FFFFFFFB)
002075 B7                  A  9469    	OR	A,A
002076 ED42                A  9470    	SBC	HL,BC
002078 C2 E5 21 00         A  9471    	JR	NZ,L_416
                           A  9472    ; 2393			c = dp->dir[DIR_Name];
                           A  9473    .LINE 2393
                           A  9474    
00207C DD3106              A  9475    	LD	IY,(IX+%6)
00207F FD071B              A  9476    	LD	BC,(IY+%1B)
002082 DD0FF0              A  9477    	LD	(IX+%FFFFFFF0),BC
002085 C5E1                A  9478    	LD	HL,BC
002087 7E                  A  9479    	LD	A,(HL)
002088 DD77FF              A  9480    	LD	(IX+%FFFFFFFF),A
                           A  9481    ; 2394			if (c == 0) { res = FR_NO_FILE;
                           A  9482    .LINE 2394
                           A  9483    
00208B B7                  A  9484    	OR	A,A
00208C 20 0B               A  9485    	JR	NZ,L_391
00208E 01040000            A  9486    	LD	BC,4
002092 DD0FFB              A  9487    	LD	(IX+%FFFFFFFB),BC
002095 C3 E5 21 00         A  9488    	JR	L_416
002099                     A  9489    L_391:
                           A  9490    ; 2395	#if FF_USE_LFN		/* LFN configuratio
                           A  9491    ; 2396			dp->obj.attr = a = dp->dir[DIR_
                           A  9492    .LINE 2396
                           A  9493    
002099 DD31F0              A  9494    	LD	IY,(IX+%FFFFFFF0)
00209C FD7E0B              A  9495    	LD	A,(IY+%B)
00209F E63F                A  9496    	AND	A,%3F
0020A1 DD77FA              A  9497    	LD	(IX+%FFFFFFFA),A
0020A4 DD3106              A  9498    	LD	IY,(IX+%6)
0020A7 FD7705              A  9499    	LD	(IY+%5),A
                           A  9500    ; 2397			if (c == DDEM || ((a & AM_VOL) 
                           A  9501    .LINE 2397
                           A  9502    
0020AA DD7EFF              A  9503    	LD	A,(IX+%FFFFFFFF)
0020AD FEE5                A  9504    	CP	A,%E5
0020AF 28 0E               A  9505    	JR	Z,L_411
0020B1 DD7EFA              A  9506    	LD	A,(IX+%FFFFFFFA)
0020B4 E608                A  9507    	AND	A,%8
0020B6 28 1D               A  9508    	JR	Z,L_412
0020B8 DD7EFA              A  9509    	LD	A,(IX+%FFFFFFFA)
0020BB FE0F                A  9510    	CP	A,%F
0020BD 28 16               A  9511    	JR	Z,L_412
0020BF                     A  9512    L_411:
                           A  9513    ; 2398				ord = 0xFF; dp->blk_ofs = 0
                           A  9514    .LINE 2398
                           A  9515    
0020BF DD36FEFF            A  9516    	LD	(IX+%FFFFFFFE),%FF
0020C3 01FFFFFF            A  9517    	LD	BC,16777215
0020C7 DD3106              A  9518    	LD	IY,(IX+%6)
0020CA FD0F2A              A  9519    	LD	(IY+%2A),BC
0020CD FD362DFF            A  9520    	LD	(IY+%2D),%FF
                           A  9521    ; 2399			} else {
                           A  9522    .LINE 2399
                           A  9523    
0020D1 C3 C5 21 00         A  9524    	JR	L_413
0020D5                     A  9525    L_412:
                           A  9526    ; 2400				if (a == AM_LFN) {			
                           A  9527    .LINE 2400
                           A  9528    
0020D5 DD7EFA              A  9529    	LD	A,(IX+%FFFFFFFA)
0020D8 FE0F                A  9530    	CP	A,%F
0020DA C2 69 21 00         A  9531    	JR	NZ,L_410
                           A  9532    ; 2401					if (!(dp->fn[NSFLAG] & 
                           A  9533    .LINE 2401
                           A  9534    
0020DE DD3106              A  9535    	LD	IY,(IX+%6)
0020E1 FD7E29              A  9536    	LD	A,(IY+%29)
0020E4 E640                A  9537    	AND	A,%40
0020E6 C2 C5 21 00         A  9538    	JR	NZ,L_413
                           A  9539    ; 2402						if (c & LLEF) {		
                           A  9540    .LINE 2402
                           A  9541    
0020EA DD7EFF              A  9542    	LD	A,(IX+%FFFFFFFF)
0020ED E640                A  9543    	AND	A,%40
0020EF 28 26               A  9544    	JR	Z,L_401
                           A  9545    ; 2403							sum = dp->dir[L
                           A  9546    .LINE 2403
                           A  9547    
0020F1 DD3106              A  9548    	LD	IY,(IX+%6)
0020F4 FD371B              A  9549    	LD	IY,(IY+%1B)
0020F7 FD7E0D              A  9550    	LD	A,(IY+%D)
0020FA DD77F9              A  9551    	LD	(IX+%FFFFFFF9),A
                           A  9552    ; 2404							c &= (BYTE)~LLE
                           A  9553    .LINE 2404
                           A  9554    
0020FD DD7EFF              A  9555    	LD	A,(IX+%FFFFFFFF)
002100 CBB7                A  9556    	RES	%6,A
002102 DD77FF              A  9557    	LD	(IX+%FFFFFFFF),A
002105 DD77FE              A  9558    	LD	(IX+%FFFFFFFE),A
                           A  9559    ; 2405							dp->blk_ofs = d
                           A  9560    .LINE 2405
                           A  9561    
002108 DD3106              A  9562    	LD	IY,(IX+%6)
00210B FD070F              A  9563    	LD	BC,(IY+%F)
00210E FD7E12              A  9564    	LD	A,(IY+%12)
002111 FD0F2A              A  9565    	LD	(IY+%2A),BC
002114 FD772D              A  9566    	LD	(IY+%2D),A
                           A  9567    ; 2406						}
002117                     A  9568    L_401:
                           A  9569    .LINE 2406
                           A  9570    
                           A  9571    ; 2407						/* Check validity o
                           A  9572    ; 2408						ord = (c == ord && 
                           A  9573    .LINE 2408
                           A  9574    
002117 DD7EFF              A  9575    	LD	A,(IX+%FFFFFFFF)
00211A DDBEFE              A  9576    	CP	A,(IX+%FFFFFFFE)
00211D 20 3B               A  9577    	JR	NZ,L_399
00211F DD3106              A  9578    	LD	IY,(IX+%6)
002122 FD071B              A  9579    	LD	BC,(IY+%1B)
002125 DD0FED              A  9580    	LD	(IX+%FFFFFFED),BC
002128 DD31ED              A  9581    	LD	IY,(IX+%FFFFFFED)
00212B FD7E0D              A  9582    	LD	A,(IY+%D)
00212E DDBEF9              A  9583    	CP	A,(IX+%FFFFFFF9)
002131 20 27               A  9584    	JR	NZ,L_399
002133 DD07ED              A  9585    	LD	BC,(IX+%FFFFFFED)
002136 C5                  A  9586    	PUSH	BC
002137 DD31F6              A  9587    	LD	IY,(IX+%FFFFFFF6)
00213A FD070B              A  9588    	LD	BC,(IY+%B)
00213D C5                  A  9589    	PUSH	BC
00213E CD 9F 18 00         A  9590    	CALL	_cmp_lfn
002142 C1                  A  9591    	POP	BC
002143 C1                  A  9592    	POP	BC
002144 01000000            A  9593    	LD	BC,0
002148 B7                  A  9594    	OR	A,A
002149 ED42                A  9595    	SBC	HL,BC
00214B 28 0D               A  9596    	JR	Z,L_399
00214D DD7EFE              A  9597    	LD	A,(IX+%FFFFFFFE)
002150 B7ED62              A  9598    	UEXT	HL
002153 6F                  A  9599    	LD	L,A
002154 2B                  A  9600    	DEC	HL
002155 DD2FF3              A  9601    	LD	(IX+%FFFFFFF3),HL
002158 18 07               A  9602    	JR	L_400
00215A                     A  9603    L_399:
00215A 01FF0000            A  9604    	LD	BC,255
00215E DD0FF3              A  9605    	LD	(IX+%FFFFFFF3),BC
002161                     A  9606    L_400:
002161 DD7EF3              A  9607    	LD	A,(IX+%FFFFFFF3)
002164 DD77FE              A  9608    	LD	(IX+%FFFFFFFE),A
                           A  9609    ; 2409					}
                           A  9610    ; 2410				} else {					
                           A  9611    .LINE 2410
                           A  9612    
002167 18 5C               A  9613    	JR	L_413
002169                     A  9614    L_410:
                           A  9615    ; 2411					if (ord == 0 && sum == 
                           A  9616    .LINE 2411
                           A  9617    
002169 DD7EFE              A  9618    	LD	A,(IX+%FFFFFFFE)
00216C B7                  A  9619    	OR	A,A
00216D 20 11               A  9620    	JR	NZ,L_407
00216F DD3106              A  9621    	LD	IY,(IX+%6)
002172 FD071B              A  9622    	LD	BC,(IY+%1B)
002175 C5                  A  9623    	PUSH	BC
002176 CD EC 1D 00         A  9624    	CALL	_sum_sfn
00217A C1                  A  9625    	POP	BC
00217B DDBEF9              A  9626    	CP	A,(IX+%FFFFFFF9)
00217E 28 65               A  9627    	JR	Z,L_416
002180                     A  9628    L_407:
                           A  9629    ; 2412					if (!(dp->fn[NSFLAG] & 
                           A  9630    .LINE 2412
                           A  9631    
002180 DD3106              A  9632    	LD	IY,(IX+%6)
002183 ED031E              A  9633    	LEA	BC,IY+%1E
002186 DD0FEA              A  9634    	LD	(IX+%FFFFFFEA),BC
002189 DD31EA              A  9635    	LD	IY,(IX+%FFFFFFEA)
00218C FD7E0B              A  9636    	LD	A,(IY+%B)
00218F E601                A  9637    	AND	A,%1
002191 20 20               A  9638    	JR	NZ,L_408
002193 010B0000            A  9639    	LD	BC,11
002197 C5                  A  9640    	PUSH	BC
002198 DD07EA              A  9641    	LD	BC,(IX+%FFFFFFEA)
00219B C5                  A  9642    	PUSH	BC
00219C DD3106              A  9643    	LD	IY,(IX+%6)
00219F FD071B              A  9644    	LD	BC,(IY+%1B)
0021A2 C5                  A  9645    	PUSH	BC
0021A3 CD 00 00 00         A  9646    	CALL	_memcmp
0021A7 C1                  A  9647    	POP	BC
0021A8 C1                  A  9648    	POP	BC
0021A9 C1                  A  9649    	POP	BC
0021AA 01000000            A  9650    	LD	BC,0
0021AE B7                  A  9651    	OR	A,A
0021AF ED42                A  9652    	SBC	HL,BC
0021B1 28 32               A  9653    	JR	Z,L_416
0021B3                     A  9654    L_408:
                           A  9655    ; 2413					ord = 0xFF; dp->blk_ofs
                           A  9656    .LINE 2413
                           A  9657    
0021B3 DD36FEFF            A  9658    	LD	(IX+%FFFFFFFE),%FF
0021B7 01FFFFFF            A  9659    	LD	BC,16777215
0021BB DD3106              A  9660    	LD	IY,(IX+%6)
0021BE FD0F2A              A  9661    	LD	(IY+%2A),BC
0021C1 FD362DFF            A  9662    	LD	(IY+%2D),%FF
                           A  9663    ; 2414				}
                           A  9664    ; 2415			}
0021C5                     A  9665    L_413:
                           A  9666    .LINE 2415
                           A  9667    
                           A  9668    ; 2416	#else		/* Non LFN configuration */
                           A  9669    ; 2417			dp->obj.attr = dp->dir[DIR_Attr
                           A  9670    ; 2418			if (!(dp->dir[DIR_Attr] & AM_VO
                           A  9671    ; 2419	#endif
                           A  9672    ; 2420			res = dir_next(dp, 0);	/* Next
                           A  9673    .LINE 2420
                           A  9674    
0021C5 01000000            A  9675    	LD	BC,0
0021C9 C5                  A  9676    	PUSH	BC
0021CA DD0706              A  9677    	LD	BC,(IX+%6)
0021CD C5                  A  9678    	PUSH	BC
0021CE CD 6A 14 00         A  9679    	CALL	_dir_next
0021D2 C1                  A  9680    	POP	BC
0021D3 C1                  A  9681    	POP	BC
0021D4 DD2FFB              A  9682    	LD	(IX+%FFFFFFFB),HL
                           A  9683    ; 2421		} while (res == FR_OK);
                           A  9684    .LINE 2421
                           A  9685    
0021D7 01000000            A  9686    	LD	BC,0
0021DB DD27FB              A  9687    	LD	HL,(IX+%FFFFFFFB)
0021DE B7                  A  9688    	OR	A,A
0021DF ED42                A  9689    	SBC	HL,BC
0021E1 CA 52 20 00         A  9690    	JR	Z,L_414
0021E5                     A  9691    L_416:
                           A  9692    ; 2422	
                           A  9693    ; 2423		return res;
                           A  9694    .LINE 2423
                           A  9695    
0021E5 DD27FB              A  9696    	LD	HL,(IX+%FFFFFFFB)
                           A  9697    ; 2424	}
0021E8                     A  9698    L_417:
                           A  9699    .LINE 2424
                           A  9700    
0021E8 DDF9                A  9701    	LD	SP,IX
0021EA DDE1                A  9702    	POP	IX
0021EC C9                  A  9703    	RET	
                           A  9704    
                           A  9705    
                           A  9706    ;**************************** _dir_find *******
                           A  9707    ;Name                         Addr/Register   S
                           A  9708    ;_memcmp                             IMPORT  --
                           A  9709    ;G_20                                 IX-22    
                           A  9710    ;G_19                                 IX-19    
                           A  9711    ;G_18                                 IX-16    
                           A  9712    ;temp397                              IX-13    
                           A  9713    ;fs                                   IX-10    
                           A  9714    ;sum                                   IX-7    
                           A  9715    ;a                                     IX-6    
                           A  9716    ;res                                   IX-5    
                           A  9717    ;ord                                   IX-2    
                           A  9718    ;c                                     IX-1    
                           A  9719    ;dp                                    IX+6    
                           A  9720    
                           A  9721    
                           A  9722    ; Stack Frame Size: 31 (bytes)
                           A  9723    ;       Spill Code: -1 (instruction)
                           A  9724    
                           A  9725    
                           A  9726    .ENDFUNC "dir_find",2424,"_dir_find"
                           A  9727    ; 2425	
                           A  9728    ; 2426	
                           A  9729    ; 2427	
                           A  9730    ; 2428	
                           A  9731    ; 2429	#if !FF_FS_READONLY
                           A  9732    ; 2430	/*-------------------------------------
                           A  9733    ; 2431	/* Register an object to the directory 
                           A  9734    ; 2432	/*-------------------------------------
                           A  9735    ; 2433	
                           A  9736    ; 2434	static FRESULT dir_register (	/* FR_O
                           A  9737    ; 2435		DIR* dp						/* Targ
                           A  9738    ; 2436	)
                           A  9739    ; 2437	{
0021ED                     A  9740    _dir_register:
                           A  9741    .DEFINE "_dir_register"
                           A  9742    
                           A  9743    .VALUE _dir_register
                           A  9744    
                           A  9745    .CLASS 3
                           A  9746    
                           A  9747    .TYPE 68
                           A  9748    
                           A  9749    .ENDEF
                           A  9750    
                           A  9751    .BEGFUNC "dir_register",2437,"_dir_register"
                           A  9752    
                           A  9753    .LINE 2437
                           A  9754    
                           A  9755    .DEFINE "dp"
                           A  9756    
                           A  9757    .CLASS 65
                           A  9758    
                           A  9759    .VALUE 6
                           A  9760    
                           A  9761    .TAG "NONAME3"
                           A  9762    
                           A  9763    .TYPE 40
                           A  9764    
                           A  9765    .ENDEF
                           A  9766    
                           A  9767    .DEFINE "res"
                           A  9768    
                           A  9769    .CLASS 65
                           A  9770    
                           A  9771    .VALUE -3
                           A  9772    
                           A  9773    .TYPE 4
                           A  9774    
                           A  9775    .ENDEF
                           A  9776    
                           A  9777    .DEFINE "n_ent"
                           A  9778    
                           A  9779    .CLASS 65
                           A  9780    
                           A  9781    .VALUE -6
                           A  9782    
                           A  9783    .TYPE 14
                           A  9784    
                           A  9785    .ENDEF
                           A  9786    
                           A  9787    .DEFINE "fs"
                           A  9788    
                           A  9789    .CLASS 65
                           A  9790    
                           A  9791    .VALUE -9
                           A  9792    
                           A  9793    .TAG "NONAME0"
                           A  9794    
                           A  9795    .TYPE 40
                           A  9796    
                           A  9797    .ENDEF
                           A  9798    
                           A  9799    .DEFINE "n"
                           A  9800    
                           A  9801    .CLASS 65
                           A  9802    
                           A  9803    .VALUE -12
                           A  9804    
                           A  9805    .TYPE 14
                           A  9806    
                           A  9807    .ENDEF
                           A  9808    
                           A  9809    .DEFINE "len"
                           A  9810    
                           A  9811    .CLASS 65
                           A  9812    
                           A  9813    .VALUE -15
                           A  9814    
                           A  9815    .TYPE 14
                           A  9816    
                           A  9817    .ENDEF
                           A  9818    
                           A  9819    .DEFINE "sum"
                           A  9820    
                           A  9821    .CLASS 65
                           A  9822    
                           A  9823    .VALUE -16
                           A  9824    
                           A  9825    .TYPE 12
                           A  9826    
                           A  9827    .ENDEF
                           A  9828    
                           A  9829    .DEFINE "sn"
                           A  9830    
                           A  9831    .CLASS 65
                           A  9832    
                           A  9833    .VALUE -34
                           A  9834    
                           A  9835    .DIM 12
                           A  9836    
                           A  9837    .TYPE 108
                           A  9838    
                           A  9839    .ENDEF
                           A  9840    
0021ED DDE5                A  9841    	PUSH	IX
0021EF DD210000 00         A  9842    	LD	IX,0
0021F4 DD39                A  9843    	ADD	IX,SP
0021F6 ED22DE              A  9844    	LEA	HL,IX+%FFFFFFDE
0021F9 F9                  A  9845    	LD	SP,HL
                           A  9846    ; 2438		FRESULT res;
                           A  9847    ; 2439		FATFS *fs = dp->obj.fs;
                           A  9848    .LINE 2439
                           A  9849    
0021FA DD3106              A  9850    	LD	IY,(IX+%6)
0021FD FD0700              A  9851    	LD	BC,(IY+%0)
002200 DD0FF7              A  9852    	LD	(IX+%FFFFFFF7),BC
                           A  9853    ; 2440	#if FF_USE_LFN		/* LFN configuratio
                           A  9854    ; 2441		UINT n, len, n_ent;
                           A  9855    ; 2442		BYTE sn[12], sum;
                           A  9856    ; 2443	
                           A  9857    ; 2444	
                           A  9858    ; 2445		if (dp->fn[NSFLAG] & (NS_DOT | NS_N
                           A  9859    .LINE 2445
                           A  9860    
002203 FD7E29              A  9861    	LD	A,(IY+%29)
002206 E6A0                A  9862    	AND	A,%A0
002208 28 08               A  9863    	JR	Z,L_423
00220A 21060000            A  9864    	LD	HL,6
00220E C3 84 24 00         A  9865    	JR	L_453
002212                     A  9866    L_423:
                           A  9867    ; 2446		for (len = 0; fs->lfnbuf[len]; len+
                           A  9868    .LINE 2446
                           A  9869    
002212 01000000            A  9870    	LD	BC,0
002216 DD0FF1              A  9871    	LD	(IX+%FFFFFFF1),BC
002219 18 07               A  9872    	JR	L_422
00221B                     A  9873    L_420:
00221B DD07F1              A  9874    	LD	BC,(IX+%FFFFFFF1)
00221E 03                  A  9875    	INC	BC
00221F DD0FF1              A  9876    	LD	(IX+%FFFFFFF1),BC
002222                     A  9877    L_422:
002222 DD27F1              A  9878    	LD	HL,(IX+%FFFFFFF1)
002225 29                  A  9879    	ADD	HL,HL
002226 DD31F7              A  9880    	LD	IY,(IX+%FFFFFFF7)
002229 FD070B              A  9881    	LD	BC,(IY+%B)
00222C 09                  A  9882    	ADD	HL,BC
00222D 49010000            A  9883    	LD.LIS	BC,0
002231 ED27                A  9884    	LD	HL,(HL)
002233 B7                  A  9885    	OR	A,A
002234 40ED42              A  9886    	SBC.SIS	HL,BC
002237 20 E2               A  9887    	JR	NZ,L_420
                           A  9888    ; 2447	
                           A  9889    ; 2448	#if FF_FS_EXFAT
                           A  9890    ; 2449		if (fs->fs_type == FS_EXFAT) {	/* 
                           A  9891    ; 2450			n_ent = (len + 14) / 15 + 2;	
                           A  9892    ; 2451			res = dir_alloc(dp, n_ent);		
                           A  9893    ; 2452			if (res != FR_OK) return res;
                           A  9894    ; 2453			dp->blk_ofs = dp->dptr - SZDIRE
                           A  9895    ; 2454	
                           A  9896    ; 2455			if (dp->obj.stat & 4) {			
                           A  9897    ; 2456				dp->obj.stat &= ~4;
                           A  9898    ; 2457				res = fill_first_frag(&dp->
                           A  9899    ; 2458				if (res != FR_OK) return re
                           A  9900    ; 2459				res = fill_last_frag(&dp->o
                           A  9901    ; 2460				if (res != FR_OK) return re
                           A  9902    ; 2461				if (dp->obj.sclust != 0) {	
                           A  9903    ; 2462					DIR dj;
                           A  9904    ; 2463	
                           A  9905    ; 2464					res = load_obj_xdir(&dj
                           A  9906    ; 2465					if (res != FR_OK) retur
                           A  9907    ; 2466					dp->obj.objsize += (DWO
                           A  9908    ; 2467					st_qword(fs->dirbuf + X
                           A  9909    ; 2468					st_qword(fs->dirbuf + X
                           A  9910    ; 2469					fs->dirbuf[XDIR_GenFlag
                           A  9911    ; 2470					res = store_xdir(&dj);	
                           A  9912    ; 2471					if (res != FR_OK) retur
                           A  9913    ; 2472				}
                           A  9914    ; 2473			}
                           A  9915    ; 2474	
                           A  9916    ; 2475			create_xdir(fs->dirbuf, fs->lfn
                           A  9917    ; 2476			return FR_OK;
                           A  9918    ; 2477		}
                           A  9919    ; 2478	#endif
                           A  9920    ; 2479		/* On the FAT/FAT32 volume */
                           A  9921    ; 2480		memcpy(sn, dp->fn, 12);
                           A  9922    .LINE 2480
                           A  9923    
002239 010C0000            A  9924    	LD	BC,12
00223D C5                  A  9925    	PUSH	BC
00223E DD3106              A  9926    	LD	IY,(IX+%6)
002241 ED661E              A  9927    	PEA	IY+%1E
002244 ED65DE              A  9928    	PEA	IX+%FFFFFFDE
002247 CD 00 00 00         A  9929    	CALL	_memcpy
00224B C1                  A  9930    	POP	BC
00224C C1                  A  9931    	POP	BC
00224D C1                  A  9932    	POP	BC
                           A  9933    ; 2481		if (sn[NSFLAG] & NS_LOSS) {			
                           A  9934    .LINE 2481
                           A  9935    
00224E ED55DE              A  9936    	LEA	IY,IX+%FFFFFFDE
002251 ED030B              A  9937    	LEA	BC,IY+%B
002254 DD0FEA              A  9938    	LD	(IX+%FFFFFFEA),BC
002257 FD7E0B              A  9939    	LD	A,(IY+%B)
00225A E601                A  9940    	AND	A,%1
00225C CA EF 22 00         A  9941    	JR	Z,L_440
                           A  9942    ; 2482			dp->fn[NSFLAG] = NS_NOLFN;		
                           A  9943    .LINE 2482
                           A  9944    
002260 DD3106              A  9945    	LD	IY,(IX+%6)
002263 ED2329              A  9946    	LEA	HL,IY+%29
002266 3640                A  9947    	LD	(HL),%40
                           A  9948    ; 2483			for (n = 1; n < 100; n++) {
                           A  9949    .LINE 2483
                           A  9950    
002268 01010000            A  9951    	LD	BC,1
00226C DD0FF4              A  9952    	LD	(IX+%FFFFFFF4),BC
00226F 18 3B               A  9953    	JR	L_429
002271                     A  9954    L_427:
                           A  9955    ; 2484				gen_numname(dp->fn, sn, fs-
                           A  9956    .LINE 2484
                           A  9957    
002271 DD07F4              A  9958    	LD	BC,(IX+%FFFFFFF4)
002274 C5                  A  9959    	PUSH	BC
002275 DD31F7              A  9960    	LD	IY,(IX+%FFFFFFF7)
002278 FD070B              A  9961    	LD	BC,(IY+%B)
00227B C5                  A  9962    	PUSH	BC
00227C ED65DE              A  9963    	PEA	IX+%FFFFFFDE
00227F DD3106              A  9964    	LD	IY,(IX+%6)
002282 ED661E              A  9965    	PEA	IY+%1E
002285 CD DC 1B 00         A  9966    	CALL	_gen_numname
002289 C1                  A  9967    	POP	BC
00228A C1                  A  9968    	POP	BC
00228B C1                  A  9969    	POP	BC
00228C C1                  A  9970    	POP	BC
                           A  9971    ; 2485				res = dir_find(dp);			
                           A  9972    .LINE 2485
                           A  9973    
00228D DD0706              A  9974    	LD	BC,(IX+%6)
002290 C5                  A  9975    	PUSH	BC
002291 CD FF 1F 00         A  9976    	CALL	_dir_find
002295 C1                  A  9977    	POP	BC
002296 DD2FFD              A  9978    	LD	(IX+%FFFFFFFD),HL
                           A  9979    ; 2486				if (res != FR_OK) break;
                           A  9980    .LINE 2486
                           A  9981    
002299 01000000            A  9982    	LD	BC,0
00229D DD27FD              A  9983    	LD	HL,(IX+%FFFFFFFD)
0022A0 B7                  A  9984    	OR	A,A
0022A1 ED42                A  9985    	SBC	HL,BC
0022A3 20 13               A  9986    	JR	NZ,L_431
0022A5 DD07F4              A  9987    	LD	BC,(IX+%FFFFFFF4)
0022A8 03                  A  9988    	INC	BC
0022A9 DD0FF4              A  9989    	LD	(IX+%FFFFFFF4),BC
                           A  9990    ; 2487			}
0022AC                     A  9991    L_429:
                           A  9992    .LINE 2487
                           A  9993    
0022AC 01640000            A  9994    	LD	BC,100
0022B0 DD27F4              A  9995    	LD	HL,(IX+%FFFFFFF4)
0022B3 B7                  A  9996    	OR	A,A
0022B4 ED42                A  9997    	SBC	HL,BC
0022B6 38 B9               A  9998    	JR	C,L_427
0022B8                     A  9999    L_431:
                           A 10000    ; 2488			if (n == 100) return FR_DENIED;
                           A 10001    .LINE 2488
                           A 10002    
0022B8 01640000            A 10003    	LD	BC,100
0022BC DD27F4              A 10004    	LD	HL,(IX+%FFFFFFF4)
0022BF B7                  A 10005    	OR	A,A
0022C0 ED42                A 10006    	SBC	HL,BC
0022C2 20 08               A 10007    	JR	NZ,L_433
0022C4 21070000            A 10008    	LD	HL,7
0022C8 C3 84 24 00         A 10009    	JR	L_453
0022CC                     A 10010    L_433:
                           A 10011    ; 2489			if (res != FR_NO_FILE) return r
                           A 10012    .LINE 2489
                           A 10013    
0022CC 01040000            A 10014    	LD	BC,4
0022D0 DD27FD              A 10015    	LD	HL,(IX+%FFFFFFFD)
0022D3 B7                  A 10016    	OR	A,A
0022D4 ED42                A 10017    	SBC	HL,BC
0022D6 28 07               A 10018    	JR	Z,L_434
0022D8 DD27FD              A 10019    	LD	HL,(IX+%FFFFFFFD)
0022DB C3 84 24 00         A 10020    	JR	L_453
0022DF                     A 10021    L_434:
                           A 10022    ; 2490			dp->fn[NSFLAG] = sn[NSFLAG];
                           A 10023    .LINE 2490
                           A 10024    
0022DF ED02E9              A 10025    	LEA	BC,IX+%FFFFFFE9
0022E2 DD0FEA              A 10026    	LD	(IX+%FFFFFFEA),BC
0022E5 ED22E9              A 10027    	LEA	HL,IX+%FFFFFFE9
0022E8 DD3106              A 10028    	LD	IY,(IX+%6)
0022EB 7E                  A 10029    	LD	A,(HL)
0022EC FD7729              A 10030    	LD	(IY+%29),A
                           A 10031    ; 2491		}
0022EF                     A 10032    L_440:
                           A 10033    .LINE 2491
                           A 10034    
                           A 10035    ; 2492	
                           A 10036    ; 2493		/* Create an SFN with/without LFNs.
                           A 10037    ; 2494		n_ent = (sn[NSFLAG] & NS_LFN) ? (le
                           A 10038    .LINE 2494
                           A 10039    
0022EF DD27EA              A 10040    	LD	HL,(IX+%FFFFFFEA)
0022F2 7E                  A 10041    	LD	A,(HL)
0022F3 E602                A 10042    	AND	A,%2
0022F5 28 14               A 10043    	JR	Z,L_438
0022F7 DD31F1              A 10044    	LD	IY,(IX+%FFFFFFF1)
0022FA ED230C              A 10045    	LEA	HL,IY+%C
0022FD 010D0000            A 10046    	LD	BC,13
002301 CD 00 00 00         A 10047    	CALL	__idivu
002305 23                  A 10048    	INC	HL
002306 DD2FED              A 10049    	LD	(IX+%FFFFFFED),HL
002309 18 07               A 10050    	JR	L_439
00230B                     A 10051    L_438:
00230B 01010000            A 10052    	LD	BC,1
00230F DD0FED              A 10053    	LD	(IX+%FFFFFFED),BC
002312                     A 10054    L_439:
002312 DD07ED              A 10055    	LD	BC,(IX+%FFFFFFED)
002315 DD0FFA              A 10056    	LD	(IX+%FFFFFFFA),BC
                           A 10057    ; 2495		res = dir_alloc(dp, n_ent);		/* 
                           A 10058    .LINE 2495
                           A 10059    
002318 C5                  A 10060    	PUSH	BC
002319 DD0706              A 10061    	LD	BC,(IX+%6)
00231C C5                  A 10062    	PUSH	BC
00231D CD 15 17 00         A 10063    	CALL	_dir_alloc
002321 C1                  A 10064    	POP	BC
002322 C1                  A 10065    	POP	BC
002323 DD2FFD              A 10066    	LD	(IX+%FFFFFFFD),HL
                           A 10067    ; 2496		if (res == FR_OK && --n_ent) {	/* 
                           A 10068    .LINE 2496
                           A 10069    
002326 01000000            A 10070    	LD	BC,0
00232A DD27FD              A 10071    	LD	HL,(IX+%FFFFFFFD)
00232D B7                  A 10072    	OR	A,A
00232E ED42                A 10073    	SBC	HL,BC
002330 C2 0C 24 00         A 10074    	JR	NZ,L_451
002334 DD31FA              A 10075    	LD	IY,(IX+%FFFFFFFA)
002337 ED33FF              A 10076    	LEA	IY,IY+%FFFFFFFF
00233A DD3EFA              A 10077    	LD	(IX+%FFFFFFFA),IY
00233D DD27FA              A 10078    	LD	HL,(IX+%FFFFFFFA)
002340 B7                  A 10079    	OR	A,A
002341 ED42                A 10080    	SBC	HL,BC
002343 CA 0C 24 00         A 10081    	JR	Z,L_451
                           A 10082    ; 2497			res = dir_sdi(dp, dp->dptr - n_
                           A 10083    .LINE 2497
                           A 10084    
002347 DD27FA              A 10085    	LD	HL,(IX+%FFFFFFFA)
00234A 29                  A 10086    	ADD	HL,HL
00234B 29                  A 10087    	ADD	HL,HL
00234C 29                  A 10088    	ADD	HL,HL
00234D 29                  A 10089    	ADD	HL,HL
00234E 29                  A 10090    	ADD	HL,HL
00234F E5C1                A 10091    	LD	BC,HL
002351 AF                  A 10092    	XOR	A,A
002352 DD3106              A 10093    	LD	IY,(IX+%6)
002355 FD270F              A 10094    	LD	HL,(IY+%F)
002358 FD5E12              A 10095    	LD	E,(IY+%12)
00235B CD 00 00 00         A 10096    	CALL	__lsub
00235F 4B                  A 10097    	LD	C,E
002360 0600                A 10098    	LD	B,%0
002362 C5                  A 10099    	PUSH	BC
002363 E5                  A 10100    	PUSH	HL
002364 DD0706              A 10101    	LD	BC,(IX+%6)
002367 C5                  A 10102    	PUSH	BC
002368 CD 50 12 00         A 10103    	CALL	_dir_sdi
00236C C1                  A 10104    	POP	BC
00236D C1                  A 10105    	POP	BC
00236E C1                  A 10106    	POP	BC
00236F DD2FFD              A 10107    	LD	(IX+%FFFFFFFD),HL
                           A 10108    ; 2498			if (res == FR_OK) {
                           A 10109    .LINE 2498
                           A 10110    
002372 01000000            A 10111    	LD	BC,0
002376 DD27FD              A 10112    	LD	HL,(IX+%FFFFFFFD)
002379 B7                  A 10113    	OR	A,A
00237A ED42                A 10114    	SBC	HL,BC
00237C C2 0C 24 00         A 10115    	JR	NZ,L_451
                           A 10116    ; 2499				sum = sum_sfn(dp->fn);	/* 
                           A 10117    .LINE 2499
                           A 10118    
002380 DD3106              A 10119    	LD	IY,(IX+%6)
002383 ED661E              A 10120    	PEA	IY+%1E
002386 CD EC 1D 00         A 10121    	CALL	_sum_sfn
00238A C1                  A 10122    	POP	BC
00238B DD77F0              A 10123    	LD	(IX+%FFFFFFF0),A
                           A 10124    ; 2500				do {					/* 
00238E                     A 10125    L_445:
                           A 10126    .LINE 2500
                           A 10127    
                           A 10128    ; 2501					res = move_window(fs, d
                           A 10129    .LINE 2501
                           A 10130    
00238E DD3106              A 10131    	LD	IY,(IX+%6)
002391 FD0717              A 10132    	LD	BC,(IY+%17)
002394 FD7E1A              A 10133    	LD	A,(IY+%1A)
002397 2600                A 10134    	LD	H,%0
002399 6F                  A 10135    	LD	L,A
00239A E5                  A 10136    	PUSH	HL
00239B C5                  A 10137    	PUSH	BC
00239C DD07F7              A 10138    	LD	BC,(IX+%FFFFFFF7)
00239F C5                  A 10139    	PUSH	BC
0023A0 CD 1E 04 00         A 10140    	CALL	_move_window
0023A4 C1                  A 10141    	POP	BC
0023A5 C1                  A 10142    	POP	BC
0023A6 C1                  A 10143    	POP	BC
0023A7 DD2FFD              A 10144    	LD	(IX+%FFFFFFFD),HL
                           A 10145    ; 2502					if (res != FR_OK) break
                           A 10146    .LINE 2502
                           A 10147    
0023AA 01000000            A 10148    	LD	BC,0
0023AE DD27FD              A 10149    	LD	HL,(IX+%FFFFFFFD)
0023B1 B7                  A 10150    	OR	A,A
0023B2 ED42                A 10151    	SBC	HL,BC
0023B4 20 56               A 10152    	JR	NZ,L_451
                           A 10153    ; 2503					put_lfn(fs->lfnbuf, dp-
                           A 10154    .LINE 2503
                           A 10155    
0023B6 DD4EF0              A 10156    	LD	C,(IX+%FFFFFFF0)
0023B9 0600                A 10157    	LD	B,%0
0023BB C5                  A 10158    	PUSH	BC
0023BC DD4EFA              A 10159    	LD	C,(IX+%FFFFFFFA)
0023BF C5                  A 10160    	PUSH	BC
0023C0 DD3106              A 10161    	LD	IY,(IX+%6)
0023C3 FD071B              A 10162    	LD	BC,(IY+%1B)
0023C6 C5                  A 10163    	PUSH	BC
0023C7 DD31F7              A 10164    	LD	IY,(IX+%FFFFFFF7)
0023CA FD070B              A 10165    	LD	BC,(IY+%B)
0023CD C5                  A 10166    	PUSH	BC
0023CE CD EF 1A 00         A 10167    	CALL	_put_lfn
0023D2 C1                  A 10168    	POP	BC
0023D3 C1                  A 10169    	POP	BC
0023D4 C1                  A 10170    	POP	BC
0023D5 C1                  A 10171    	POP	BC
                           A 10172    ; 2504					fs->wflag = 1;
                           A 10173    .LINE 2504
                           A 10174    
0023D6 DD31F7              A 10175    	LD	IY,(IX+%FFFFFFF7)
0023D9 FD360301            A 10176    	LD	(IY+%3),%1
                           A 10177    ; 2505					res = dir_next(dp, 0);	
                           A 10178    .LINE 2505
                           A 10179    
0023DD 01000000            A 10180    	LD	BC,0
0023E1 C5                  A 10181    	PUSH	BC
0023E2 DD0706              A 10182    	LD	BC,(IX+%6)
0023E5 C5                  A 10183    	PUSH	BC
0023E6 CD 6A 14 00         A 10184    	CALL	_dir_next
0023EA C1                  A 10185    	POP	BC
0023EB C1                  A 10186    	POP	BC
0023EC DD2FFD              A 10187    	LD	(IX+%FFFFFFFD),HL
                           A 10188    ; 2506				} while (res == FR_OK && --
                           A 10189    .LINE 2506
                           A 10190    
0023EF 01000000            A 10191    	LD	BC,0
0023F3 DD27FD              A 10192    	LD	HL,(IX+%FFFFFFFD)
0023F6 B7                  A 10193    	OR	A,A
0023F7 ED42                A 10194    	SBC	HL,BC
0023F9 20 11               A 10195    	JR	NZ,L_451
0023FB DD31FA              A 10196    	LD	IY,(IX+%FFFFFFFA)
0023FE ED33FF              A 10197    	LEA	IY,IY+%FFFFFFFF
002401 DD3EFA              A 10198    	LD	(IX+%FFFFFFFA),IY
002404 DD27FA              A 10199    	LD	HL,(IX+%FFFFFFFA)
002407 B7                  A 10200    	OR	A,A
002408 ED42                A 10201    	SBC	HL,BC
00240A 20 82               A 10202    	JR	NZ,L_445
                           A 10203    ; 2507			}
                           A 10204    ; 2508		}
00240C                     A 10205    L_451:
                           A 10206    .LINE 2508
                           A 10207    
                           A 10208    ; 2509	
                           A 10209    ; 2510	#else	/* Non LFN configuration */
                           A 10210    ; 2511		res = dir_alloc(dp, 1);		/* Allo
                           A 10211    ; 2512	
                           A 10212    ; 2513	#endif
                           A 10213    ; 2514	
                           A 10214    ; 2515		/* Set SFN entry */
                           A 10215    ; 2516		if (res == FR_OK) {
                           A 10216    .LINE 2516
                           A 10217    
00240C DD27FD              A 10218    	LD	HL,(IX+%FFFFFFFD)
00240F B7                  A 10219    	OR	A,A
002410 ED42                A 10220    	SBC	HL,BC
002412 20 6D               A 10221    	JR	NZ,L_452
                           A 10222    ; 2517			res = move_window(fs, dp->sect)
                           A 10223    .LINE 2517
                           A 10224    
002414 DD3106              A 10225    	LD	IY,(IX+%6)
002417 FD0717              A 10226    	LD	BC,(IY+%17)
00241A FD7E1A              A 10227    	LD	A,(IY+%1A)
00241D 2600                A 10228    	LD	H,%0
00241F 6F                  A 10229    	LD	L,A
002420 E5                  A 10230    	PUSH	HL
002421 C5                  A 10231    	PUSH	BC
002422 DD07F7              A 10232    	LD	BC,(IX+%FFFFFFF7)
002425 C5                  A 10233    	PUSH	BC
002426 CD 1E 04 00         A 10234    	CALL	_move_window
00242A C1                  A 10235    	POP	BC
00242B C1                  A 10236    	POP	BC
00242C C1                  A 10237    	POP	BC
00242D DD2FFD              A 10238    	LD	(IX+%FFFFFFFD),HL
                           A 10239    ; 2518			if (res == FR_OK) {
                           A 10240    .LINE 2518
                           A 10241    
002430 01000000            A 10242    	LD	BC,0
002434 DD27FD              A 10243    	LD	HL,(IX+%FFFFFFFD)
002437 B7                  A 10244    	OR	A,A
002438 ED42                A 10245    	SBC	HL,BC
00243A 20 45               A 10246    	JR	NZ,L_452
                           A 10247    ; 2519				memset(dp->dir, 0, SZDIRE);
                           A 10248    .LINE 2519
                           A 10249    
00243C 01200000            A 10250    	LD	BC,32
002440 C5                  A 10251    	PUSH	BC
002441 01000000            A 10252    	LD	BC,0
002445 C5                  A 10253    	PUSH	BC
002446 DD3106              A 10254    	LD	IY,(IX+%6)
002449 FD071B              A 10255    	LD	BC,(IY+%1B)
00244C C5                  A 10256    	PUSH	BC
00244D CD 00 00 00         A 10257    	CALL	_memset
002451 C1                  A 10258    	POP	BC
002452 C1                  A 10259    	POP	BC
002453 C1                  A 10260    	POP	BC
                           A 10261    ; 2520				memcpy(dp->dir + DIR_Name, 
                           A 10262    .LINE 2520
                           A 10263    
002454 010B0000            A 10264    	LD	BC,11
002458 C5                  A 10265    	PUSH	BC
002459 DD3106              A 10266    	LD	IY,(IX+%6)
00245C ED661E              A 10267    	PEA	IY+%1E
00245F FD071B              A 10268    	LD	BC,(IY+%1B)
002462 C5                  A 10269    	PUSH	BC
002463 CD 00 00 00         A 10270    	CALL	_memcpy
002467 C1                  A 10271    	POP	BC
002468 C1                  A 10272    	POP	BC
002469 C1                  A 10273    	POP	BC
                           A 10274    ; 2521	#if FF_USE_LFN
                           A 10275    ; 2522				dp->dir[DIR_NTres] = dp->fn
                           A 10276    .LINE 2522
                           A 10277    
00246A DD3106              A 10278    	LD	IY,(IX+%6)
00246D ED2329              A 10279    	LEA	HL,IY+%29
002470 7E                  A 10280    	LD	A,(HL)
002471 E618                A 10281    	AND	A,%18
002473 FD371B              A 10282    	LD	IY,(IY+%1B)
002476 ED230C              A 10283    	LEA	HL,IY+%C
002479 77                  A 10284    	LD	(HL),A
                           A 10285    ; 2523	#endif
                           A 10286    ; 2524				fs->wflag = 1;
                           A 10287    .LINE 2524
                           A 10288    
00247A DD31F7              A 10289    	LD	IY,(IX+%FFFFFFF7)
00247D FD360301            A 10290    	LD	(IY+%3),%1
                           A 10291    ; 2525			}
                           A 10292    ; 2526		}
002481                     A 10293    L_452:
                           A 10294    .LINE 2526
                           A 10295    
                           A 10296    ; 2527	
                           A 10297    ; 2528		return res;
                           A 10298    .LINE 2528
                           A 10299    
002481 DD27FD              A 10300    	LD	HL,(IX+%FFFFFFFD)
                           A 10301    ; 2529	}
002484                     A 10302    L_453:
                           A 10303    .LINE 2529
                           A 10304    
002484 DDF9                A 10305    	LD	SP,IX
002486 DDE1                A 10306    	POP	IX
002488 C9                  A 10307    	RET	
                           A 10308    
                           A 10309    
                           A 10310    ;**************************** _dir_register ***
                           A 10311    ;Name                         Addr/Register   S
                           A 10312    ;_memset                             IMPORT  --
                           A 10313    ;_memcpy                             IMPORT  --
                           A 10314    ;sn                                   IX-34    
                           A 10315    ;G_21                                 IX-22    
                           A 10316    ;temp436                              IX-19    
                           A 10317    ;sum                                  IX-16    
                           A 10318    ;len                                  IX-15    
                           A 10319    ;n                                    IX-12    
                           A 10320    ;fs                                    IX-9    
                           A 10321    ;n_ent                                 IX-6    
                           A 10322    ;res                                   IX-3    
                           A 10323    ;dp                                    IX+6    
                           A 10324    
                           A 10325    
                           A 10326    ; Stack Frame Size: 43 (bytes)
                           A 10327    ;       Spill Code: -1 (instruction)
                           A 10328    
                           A 10329    
                           A 10330    .ENDFUNC "dir_register",2529,"_dir_register"
                           A 10331    ; 2530	
                           A 10332    ; 2531	#endif /* !FF_FS_READONLY */
                           A 10333    ; 2532	
                           A 10334    ; 2533	
                           A 10335    ; 2534	
                           A 10336    ; 2535	#if !FF_FS_READONLY && FF_FS_MINIMIZE =
                           A 10337    ; 2536	/*-------------------------------------
                           A 10338    ; 2537	/* Remove an object from the directory 
                           A 10339    ; 2538	/*-------------------------------------
                           A 10340    ; 2539	
                           A 10341    ; 2540	static FRESULT dir_remove (	/* FR_OK:Su
                           A 10342    ; 2541		DIR* dp					/* Director
                           A 10343    ; 2542	)
                           A 10344    ; 2543	{
002489                     A 10345    _dir_remove:
                           A 10346    .DEFINE "_dir_remove"
                           A 10347    
                           A 10348    .VALUE _dir_remove
                           A 10349    
                           A 10350    .CLASS 3
                           A 10351    
                           A 10352    .TYPE 68
                           A 10353    
                           A 10354    .ENDEF
                           A 10355    
                           A 10356    .BEGFUNC "dir_remove",2543,"_dir_remove"
                           A 10357    
                           A 10358    .LINE 2543
                           A 10359    
                           A 10360    .DEFINE "dp"
                           A 10361    
                           A 10362    .CLASS 65
                           A 10363    
                           A 10364    .VALUE 6
                           A 10365    
                           A 10366    .TAG "NONAME3"
                           A 10367    
                           A 10368    .TYPE 40
                           A 10369    
                           A 10370    .ENDEF
                           A 10371    
                           A 10372    .DEFINE "res"
                           A 10373    
                           A 10374    .CLASS 65
                           A 10375    
                           A 10376    .VALUE -3
                           A 10377    
                           A 10378    .TYPE 4
                           A 10379    
                           A 10380    .ENDEF
                           A 10381    
                           A 10382    .DEFINE "fs"
                           A 10383    
                           A 10384    .CLASS 65
                           A 10385    
                           A 10386    .VALUE -6
                           A 10387    
                           A 10388    .TAG "NONAME0"
                           A 10389    
                           A 10390    .TYPE 40
                           A 10391    
                           A 10392    .ENDEF
                           A 10393    
                           A 10394    .DEFINE "last"
                           A 10395    
                           A 10396    .CLASS 65
                           A 10397    
                           A 10398    .VALUE -17
                           A 10399    
                           A 10400    .TYPE 15
                           A 10401    
                           A 10402    .ENDEF
                           A 10403    
002489 DDE5                A 10404    	PUSH	IX
00248B DD210000 00         A 10405    	LD	IX,0
002490 DD39                A 10406    	ADD	IX,SP
002492 ED22EF              A 10407    	LEA	HL,IX+%FFFFFFEF
002495 F9                  A 10408    	LD	SP,HL
                           A 10409    ; 2544		FRESULT res;
                           A 10410    ; 2545		FATFS *fs = dp->obj.fs;
                           A 10411    .LINE 2545
                           A 10412    
002496 DD3106              A 10413    	LD	IY,(IX+%6)
002499 FD0700              A 10414    	LD	BC,(IY+%0)
00249C DD0FFA              A 10415    	LD	(IX+%FFFFFFFA),BC
                           A 10416    ; 2546	#if FF_USE_LFN		/* LFN configuratio
                           A 10417    ; 2547		DWORD last = dp->dptr;
                           A 10418    .LINE 2547
                           A 10419    
00249F FD070F              A 10420    	LD	BC,(IY+%F)
0024A2 FD7E12              A 10421    	LD	A,(IY+%12)
0024A5 DD0FEF              A 10422    	LD	(IX+%FFFFFFEF),BC
0024A8 DD77F2              A 10423    	LD	(IX+%FFFFFFF2),A
                           A 10424    ; 2548	
                           A 10425    ; 2549		res = (dp->blk_ofs == 0xFFFFFFFF) ?
                           A 10426    .LINE 2549
                           A 10427    
0024AB FD072A              A 10428    	LD	BC,(IY+%2A)
0024AE FD7E2D              A 10429    	LD	A,(IY+%2D)
0024B1 DD0FF3              A 10430    	LD	(IX+%FFFFFFF3),BC
0024B4 DD77F6              A 10431    	LD	(IX+%FFFFFFF6),A
0024B7 C5E1                A 10432    	LD	HL,BC
0024B9 DD5EF6              A 10433    	LD	E,(IX+%FFFFFFF6)
0024BC 01FFFFFF            A 10434    	LD	BC,16777215
0024C0 3EFF                A 10435    	LD	A,%FF
0024C2 CD 00 00 00         A 10436    	CALL	__lcmpu
0024C6 20 09               A 10437    	JR	NZ,L_456
0024C8 01000000            A 10438    	LD	BC,0
0024CC DD0FF7              A 10439    	LD	(IX+%FFFFFFF7),BC
0024CF 18 18               A 10440    	JR	L_457
0024D1                     A 10441    L_456:
0024D1 DD4EF6              A 10442    	LD	C,(IX+%FFFFFFF6)
0024D4 0600                A 10443    	LD	B,%0
0024D6 C5                  A 10444    	PUSH	BC
0024D7 DD07F3              A 10445    	LD	BC,(IX+%FFFFFFF3)
0024DA C5                  A 10446    	PUSH	BC
0024DB DD0706              A 10447    	LD	BC,(IX+%6)
0024DE C5                  A 10448    	PUSH	BC
0024DF CD 50 12 00         A 10449    	CALL	_dir_sdi
0024E3 C1                  A 10450    	POP	BC
0024E4 C1                  A 10451    	POP	BC
0024E5 C1                  A 10452    	POP	BC
0024E6 DD2FF7              A 10453    	LD	(IX+%FFFFFFF7),HL
0024E9                     A 10454    L_457:
0024E9 DD07F7              A 10455    	LD	BC,(IX+%FFFFFFF7)
0024EC DD0FFD              A 10456    	LD	(IX+%FFFFFFFD),BC
                           A 10457    ; 2550		if (res == FR_OK) {
                           A 10458    .LINE 2550
                           A 10459    
0024EF 01000000            A 10460    	LD	BC,0
0024F3 DD27FD              A 10461    	LD	HL,(IX+%FFFFFFFD)
0024F6 B7                  A 10462    	OR	A,A
0024F7 ED42                A 10463    	SBC	HL,BC
0024F9 20 7D               A 10464    	JR	NZ,L_470
                           A 10465    ; 2551			do {
0024FB                     A 10466    L_465:
                           A 10467    .LINE 2551
                           A 10468    
                           A 10469    ; 2552				res = move_window(fs, dp->s
                           A 10470    .LINE 2552
                           A 10471    
0024FB DD3106              A 10472    	LD	IY,(IX+%6)
0024FE FD0717              A 10473    	LD	BC,(IY+%17)
002501 FD7E1A              A 10474    	LD	A,(IY+%1A)
002504 2600                A 10475    	LD	H,%0
002506 6F                  A 10476    	LD	L,A
002507 E5                  A 10477    	PUSH	HL
002508 C5                  A 10478    	PUSH	BC
002509 DD07FA              A 10479    	LD	BC,(IX+%FFFFFFFA)
00250C C5                  A 10480    	PUSH	BC
00250D CD 1E 04 00         A 10481    	CALL	_move_window
002511 C1                  A 10482    	POP	BC
002512 C1                  A 10483    	POP	BC
002513 C1                  A 10484    	POP	BC
002514 DD2FFD              A 10485    	LD	(IX+%FFFFFFFD),HL
                           A 10486    ; 2553				if (res != FR_OK) break;
                           A 10487    .LINE 2553
                           A 10488    
002517 01000000            A 10489    	LD	BC,0
00251B DD27FD              A 10490    	LD	HL,(IX+%FFFFFFFD)
00251E B7                  A 10491    	OR	A,A
00251F ED42                A 10492    	SBC	HL,BC
002521 20 42               A 10493    	JR	NZ,L_468
                           A 10494    ; 2554				if (FF_FS_EXFAT && fs->fs_t
                           A 10495    ; 2555					dp->dir[XDIR_Type] &= 0
                           A 10496    ; 2556				} else {					
                           A 10497    ; 2557					dp->dir[DIR_Name] = DDE
                           A 10498    .LINE 2557
                           A 10499    
002523 DD3106              A 10500    	LD	IY,(IX+%6)
002526 FD271B              A 10501    	LD	HL,(IY+%1B)
002529 36E5                A 10502    	LD	(HL),%E5
                           A 10503    ; 2558				}
                           A 10504    ; 2559				fs->wflag = 1;
                           A 10505    .LINE 2559
                           A 10506    
00252B DD31FA              A 10507    	LD	IY,(IX+%FFFFFFFA)
00252E FD360301            A 10508    	LD	(IY+%3),%1
                           A 10509    ; 2560				if (dp->dptr >= last) break
                           A 10510    .LINE 2560
                           A 10511    
002532 DD3106              A 10512    	LD	IY,(IX+%6)
002535 FD270F              A 10513    	LD	HL,(IY+%F)
002538 FD5E12              A 10514    	LD	E,(IY+%12)
00253B DD07EF              A 10515    	LD	BC,(IX+%FFFFFFEF)
00253E DD7EF2              A 10516    	LD	A,(IX+%FFFFFFF2)
002541 CD 00 00 00         A 10517    	CALL	__lcmpu
002545 30 1E               A 10518    	JR	NC,L_468
                           A 10519    ; 2561				res = dir_next(dp, 0);	/* 
                           A 10520    .LINE 2561
                           A 10521    
002547 01000000            A 10522    	LD	BC,0
00254B C5                  A 10523    	PUSH	BC
00254C DD0706              A 10524    	LD	BC,(IX+%6)
00254F C5                  A 10525    	PUSH	BC
002550 CD 6A 14 00         A 10526    	CALL	_dir_next
002554 C1                  A 10527    	POP	BC
002555 C1                  A 10528    	POP	BC
002556 DD2FFD              A 10529    	LD	(IX+%FFFFFFFD),HL
                           A 10530    ; 2562			} while (res == FR_OK);
                           A 10531    .LINE 2562
                           A 10532    
002559 01000000            A 10533    	LD	BC,0
00255D DD27FD              A 10534    	LD	HL,(IX+%FFFFFFFD)
002560 B7                  A 10535    	OR	A,A
002561 ED42                A 10536    	SBC	HL,BC
002563 28 96               A 10537    	JR	Z,L_465
002565                     A 10538    L_468:
                           A 10539    ; 2563			if (res == FR_NO_FILE) res = FR
                           A 10540    .LINE 2563
                           A 10541    
002565 01040000            A 10542    	LD	BC,4
002569 DD27FD              A 10543    	LD	HL,(IX+%FFFFFFFD)
00256C B7                  A 10544    	OR	A,A
00256D ED42                A 10545    	SBC	HL,BC
00256F 20 07               A 10546    	JR	NZ,L_470
002571 01020000            A 10547    	LD	BC,2
002575 DD0FFD              A 10548    	LD	(IX+%FFFFFFFD),BC
                           A 10549    ; 2564		}
002578                     A 10550    L_470:
                           A 10551    .LINE 2564
                           A 10552    
                           A 10553    ; 2565	#else			/* Non LFN configuratio
                           A 10554    ; 2566	
                           A 10555    ; 2567		res = move_window(fs, dp->sect);
                           A 10556    ; 2568		if (res == FR_OK) {
                           A 10557    ; 2569			dp->dir[DIR_Name] = DDEM;	/* 
                           A 10558    ; 2570			fs->wflag = 1;
                           A 10559    ; 2571		}
                           A 10560    ; 2572	#endif
                           A 10561    ; 2573	
                           A 10562    ; 2574		return res;
                           A 10563    .LINE 2574
                           A 10564    
002578 DD27FD              A 10565    	LD	HL,(IX+%FFFFFFFD)
                           A 10566    ; 2575	}
                           A 10567    .LINE 2575
                           A 10568    
00257B DDF9                A 10569    	LD	SP,IX
00257D DDE1                A 10570    	POP	IX
00257F C9                  A 10571    	RET	
                           A 10572    
                           A 10573    
                           A 10574    ;**************************** _dir_remove *****
                           A 10575    ;Name                         Addr/Register   S
                           A 10576    ;last                                 IX-17    
                           A 10577    ;G_22                                 IX-13    
                           A 10578    ;temp454                               IX-9    
                           A 10579    ;fs                                    IX-6    
                           A 10580    ;res                                   IX-3    
                           A 10581    ;dp                                    IX+6    
                           A 10582    
                           A 10583    
                           A 10584    ; Stack Frame Size: 26 (bytes)
                           A 10585    ;       Spill Code: -1 (instruction)
                           A 10586    
                           A 10587    
                           A 10588    .ENDFUNC "dir_remove",2575,"_dir_remove"
                           A 10589    ; 2576	
                           A 10590    ; 2577	#endif /* !FF_FS_READONLY && FF_FS_MINI
                           A 10591    ; 2578	
                           A 10592    ; 2579	
                           A 10593    ; 2580	
                           A 10594    ; 2581	#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH 
                           A 10595    ; 2582	/*-------------------------------------
                           A 10596    ; 2583	/* Get file information from directory 
                           A 10597    ; 2584	/*-------------------------------------
                           A 10598    ; 2585	
                           A 10599    ; 2586	static void get_fileinfo (
                           A 10600    ; 2587		DIR* dp,			/* Pointer to t
                           A 10601    ; 2588		FILINFO* fno		/* Pointer to t
                           A 10602    ; 2589	)
                           A 10603    ; 2590	{
002580                     A 10604    _get_fileinfo:
                           A 10605    .DEFINE "_get_fileinfo"
                           A 10606    
                           A 10607    .VALUE _get_fileinfo
                           A 10608    
                           A 10609    .CLASS 3
                           A 10610    
                           A 10611    .TYPE 65
                           A 10612    
                           A 10613    .ENDEF
                           A 10614    
                           A 10615    .BEGFUNC "get_fileinfo",2590,"_get_fileinfo"
                           A 10616    
                           A 10617    .LINE 2590
                           A 10618    
                           A 10619    .DEFINE "dp"
                           A 10620    
                           A 10621    .CLASS 65
                           A 10622    
                           A 10623    .VALUE 6
                           A 10624    
                           A 10625    .TAG "NONAME3"
                           A 10626    
                           A 10627    .TYPE 40
                           A 10628    
                           A 10629    .ENDEF
                           A 10630    
                           A 10631    .DEFINE "fno"
                           A 10632    
                           A 10633    .CLASS 65
                           A 10634    
                           A 10635    .VALUE 9
                           A 10636    
                           A 10637    .TAG "NONAME4"
                           A 10638    
                           A 10639    .TYPE 40
                           A 10640    
                           A 10641    .ENDEF
                           A 10642    
                           A 10643    .DEFINE "di"
                           A 10644    
                           A 10645    .CLASS 65
                           A 10646    
                           A 10647    .VALUE -3
                           A 10648    
                           A 10649    .TYPE 14
                           A 10650    
                           A 10651    .ENDEF
                           A 10652    
                           A 10653    .DEFINE "wc"
                           A 10654    
                           A 10655    .CLASS 65
                           A 10656    
                           A 10657    .VALUE -5
                           A 10658    
                           A 10659    .TYPE 13
                           A 10660    
                           A 10661    .ENDEF
                           A 10662    
                           A 10663    .DEFINE "si"
                           A 10664    
                           A 10665    .CLASS 65
                           A 10666    
                           A 10667    .VALUE -8
                           A 10668    
                           A 10669    .TYPE 14
                           A 10670    
                           A 10671    .ENDEF
                           A 10672    
                           A 10673    .DEFINE "hs"
                           A 10674    
                           A 10675    .CLASS 65
                           A 10676    
                           A 10677    .VALUE -10
                           A 10678    
                           A 10679    .TYPE 13
                           A 10680    
                           A 10681    .ENDEF
                           A 10682    
                           A 10683    .DEFINE "lcf"
                           A 10684    
                           A 10685    .CLASS 65
                           A 10686    
                           A 10687    .VALUE -11
                           A 10688    
                           A 10689    .TYPE 12
                           A 10690    
                           A 10691    .ENDEF
                           A 10692    
                           A 10693    .DEFINE "nw"
                           A 10694    
                           A 10695    .CLASS 65
                           A 10696    
                           A 10697    .VALUE -23
                           A 10698    
                           A 10699    .TYPE 14
                           A 10700    
                           A 10701    .ENDEF
                           A 10702    
                           A 10703    .DEFINE "fs"
                           A 10704    
                           A 10705    .CLASS 65
                           A 10706    
                           A 10707    .VALUE -29
                           A 10708    
                           A 10709    .TAG "NONAME0"
                           A 10710    
                           A 10711    .TYPE 40
                           A 10712    
                           A 10713    .ENDEF
                           A 10714    
002580 DDE5                A 10715    	PUSH	IX
002582 DD210000 00         A 10716    	LD	IX,0
002587 DD39                A 10717    	ADD	IX,SP
002589 ED22DC              A 10718    	LEA	HL,IX+%FFFFFFDC
00258C F9                  A 10719    	LD	SP,HL
                           A 10720    ; 2591		UINT si, di;
                           A 10721    ; 2592	#if FF_USE_LFN
                           A 10722    ; 2593		BYTE lcf;
                           A 10723    ; 2594		WCHAR wc, hs;
                           A 10724    ; 2595		FATFS *fs = dp->obj.fs;
                           A 10725    .LINE 2595
                           A 10726    
00258D DD3106              A 10727    	LD	IY,(IX+%6)
002590 FD0700              A 10728    	LD	BC,(IY+%0)
002593 DD0FE3              A 10729    	LD	(IX+%FFFFFFE3),BC
                           A 10730    ; 2596		UINT nw;
                           A 10731    ; 2597	#else
                           A 10732    ; 2598		TCHAR c;
                           A 10733    ; 2599	#endif
                           A 10734    ; 2600	
                           A 10735    ; 2601	
                           A 10736    ; 2602		fno->fname[0] = 0;			/* Inva
                           A 10737    .LINE 2602
                           A 10738    
002596 DD3109              A 10739    	LD	IY,(IX+%9)
002599 FD361600            A 10740    	LD	(IY+%16),%0
                           A 10741    ; 2603		if (dp->sect == 0) return;	/* Exit
                           A 10742    .LINE 2603
                           A 10743    
00259D DD3106              A 10744    	LD	IY,(IX+%6)
0025A0 FD2717              A 10745    	LD	HL,(IY+%17)
0025A3 FD5E1A              A 10746    	LD	E,(IY+%1A)
0025A6 01000000            A 10747    	LD	BC,0
0025AA AF                  A 10748    	XOR	A,A
0025AB CD 00 00 00         A 10749    	CALL	__lcmpu
0025AF CA D4 28 00         A 10750    	JR	Z,L_519
                           A 10751    ; 2604	
                           A 10752    ; 2605	#if FF_USE_LFN		/* LFN configuratio
                           A 10753    ; 2606	#if FF_FS_EXFAT
                           A 10754    ; 2607		if (fs->fs_type == FS_EXFAT) {	/* 
                           A 10755    ; 2608			UINT nc = 0;
                           A 10756    ; 2609	
                           A 10757    ; 2610			si = SZDIRE * 2; di = 0;	/* 
                           A 10758    ; 2611			hs = 0;
                           A 10759    ; 2612			while (nc < fs->dirbuf[XDIR_Num
                           A 10760    ; 2613				if (si >= MAXDIRB(FF_MAX_LF
                           A 10761    ; 2614				if ((si % SZDIRE) == 0) si 
                           A 10762    ; 2615				wc = ld_word(fs->dirbuf + s
                           A 10763    ; 2616				if (hs == 0 && IsSurrogate(
                           A 10764    ; 2617					hs = wc; continue;		
                           A 10765    ; 2618				}
                           A 10766    ; 2619				nw = put_utf((DWORD)hs << 1
                           A 10767    ; 2620				if (nw == 0) { di = 0; brea
                           A 10768    ; 2621				di += nw;
                           A 10769    ; 2622				hs = 0;
                           A 10770    ; 2623			}
                           A 10771    ; 2624			if (hs != 0) di = 0;			
                           A 10772    ; 2625			if (di == 0) fno->fname[di++] =
                           A 10773    ; 2626			fno->fname[di] = 0;				
                           A 10774    ; 2627			fno->altname[0] = 0;			
                           A 10775    ; 2628	
                           A 10776    ; 2629			fno->fattrib = fs->dirbuf[XDIR_
                           A 10777    ; 2630			fno->fsize = (fno->fattrib & AM
                           A 10778    ; 2631			fno->ftime = ld_word(fs->dirbuf
                           A 10779    ; 2632			fno->fdate = ld_word(fs->dirbuf
                           A 10780    ; 2633			return;
                           A 10781    ; 2634		} else
                           A 10782    ; 2635	#endif
                           A 10783    ; 2636		{	/* FAT/FAT32 volume */
                           A 10784    ; 2637			if (dp->blk_ofs != 0xFFFFFFFF) 
                           A 10785    .LINE 2637
                           A 10786    
0025B3 DD3106              A 10787    	LD	IY,(IX+%6)
0025B6 FD272A              A 10788    	LD	HL,(IY+%2A)
0025B9 FD5E2D              A 10789    	LD	E,(IY+%2D)
0025BC 01FFFFFF            A 10790    	LD	BC,16777215
0025C0 3EFF                A 10791    	LD	A,%FF
0025C2 CD 00 00 00         A 10792    	CALL	__lcmpu
0025C6 CA E1 26 00         A 10793    	JR	Z,L_487
                           A 10794    ; 2638				si = di = 0;
                           A 10795    .LINE 2638
                           A 10796    
0025CA 01000000            A 10797    	LD	BC,0
0025CE DD0FFD              A 10798    	LD	(IX+%FFFFFFFD),BC
0025D1 DD0FF8              A 10799    	LD	(IX+%FFFFFFF8),BC
                           A 10800    ; 2639				hs = 0;
                           A 10801    .LINE 2639
                           A 10802    
0025D4 DD36F600            A 10803    	LD	(IX+%FFFFFFF6),%0
0025D8 DD36F700            A 10804    	LD	(IX+%FFFFFFF7),%0
                           A 10805    ; 2640				while (fs->lfnbuf[si] != 0)
                           A 10806    .LINE 2640
                           A 10807    
0025DC C3 A2 26 00         A 10808    	JR	L_480
0025E0                     A 10809    L_481:
                           A 10810    ; 2641					wc = fs->lfnbuf[si++];	
                           A 10811    .LINE 2641
                           A 10812    
0025E0 DD27F8              A 10813    	LD	HL,(IX+%FFFFFFF8)
0025E3 29                  A 10814    	ADD	HL,HL
0025E4 DD07EF              A 10815    	LD	BC,(IX+%FFFFFFEF)
0025E7 09                  A 10816    	ADD	HL,BC
0025E8 ED07                A 10817    	LD	BC,(HL)
0025EA DD71FB              A 10818    	LD	(IX+%FFFFFFFB),C
0025ED DD70FC              A 10819    	LD	(IX+%FFFFFFFC),B
0025F0 DD07F8              A 10820    	LD	BC,(IX+%FFFFFFF8)
0025F3 03                  A 10821    	INC	BC
0025F4 DD0FF8              A 10822    	LD	(IX+%FFFFFFF8),BC
                           A 10823    ; 2642					if (hs == 0 && IsSurrog
                           A 10824    .LINE 2642
                           A 10825    
0025F7 49010000            A 10826    	LD.LIS	BC,0
0025FB DD27F6              A 10827    	LD	HL,(IX+%FFFFFFF6)
0025FE B7                  A 10828    	OR	A,A
0025FF 40ED42              A 10829    	SBC.SIS	HL,BC
002602 20 25               A 10830    	JR	NZ,L_477
002604 490100D8            A 10831    	LD.LIS	BC,55296
002608 DD27FB              A 10832    	LD	HL,(IX+%FFFFFFFB)
00260B B7                  A 10833    	OR	A,A
00260C 40ED42              A 10834    	SBC.SIS	HL,BC
00260F 38 18               A 10835    	JR	C,L_477
002611 DD07FB              A 10836    	LD	BC,(IX+%FFFFFFFB)
002614 4921FFDF            A 10837    	LD.LIS	HL,57343
002618 B7                  A 10838    	OR	A,A
002619 40ED42              A 10839    	SBC.SIS	HL,BC
00261C 38 0B               A 10840    	JR	C,L_477
                           A 10841    ; 2643						hs = wc; continue;	
                           A 10842    .LINE 2643
                           A 10843    
00261E DD07FB              A 10844    	LD	BC,(IX+%FFFFFFFB)
002621 DD71F6              A 10845    	LD	(IX+%FFFFFFF6),C
002624 DD70F7              A 10846    	LD	(IX+%FFFFFFF7),B
002627 18 79               A 10847    	JR	L_480
                           A 10848    ; 2644					}
002629                     A 10849    L_477:
                           A 10850    .LINE 2644
                           A 10851    
                           A 10852    ; 2645					nw = put_utf((DWORD)hs 
                           A 10853    .LINE 2645
                           A 10854    
002629 21FF0000            A 10855    	LD	HL,255
00262D DD07FD              A 10856    	LD	BC,(IX+%FFFFFFFD)
002630 B7                  A 10857    	OR	A,A
002631 ED42                A 10858    	SBC	HL,BC
002633 E5                  A 10859    	PUSH	HL
002634 DD07FD              A 10860    	LD	BC,(IX+%FFFFFFFD)
002637 DD3109              A 10861    	LD	IY,(IX+%9)
00263A ED2316              A 10862    	LEA	HL,IY+%16
00263D 09                  A 10863    	ADD	HL,BC
00263E E5                  A 10864    	PUSH	HL
00263F DD07F6              A 10865    	LD	BC,(IX+%FFFFFFF6)
002642 CD 00 00 00         A 10866    	CALL	__stoiu
002646 E5                  A 10867    	PUSH	HL
002647 E5                  A 10868    	PUSH	HL
002648 B7ED62              A 10869    	UEXT	HL
00264B E5                  A 10870    	PUSH	HL
00264C 33                  A 10871    	INC	SP
00264D C1                  A 10872    	POP	BC
00264E DD0FDD              A 10873    	LD	(IX+%FFFFFFDD),BC	; spill
002651 D1                  A 10874    	POP	DE
002652 33                  A 10875    	INC	SP
002653 33                  A 10876    	INC	SP
002654 DD07FB              A 10877    	LD	BC,(IX+%FFFFFFFB)
002657 CD 00 00 00         A 10878    	CALL	__stoiu
00265B AF                  A 10879    	XOR	A,A
00265C DD2FE0              A 10880    	LD	(IX+%FFFFFFE0),HL	; spill
00265F DD27DD              A 10881    	LD	HL,(IX+%FFFFFFDD)
002662 DD07E0              A 10882    	LD	BC,(IX+%FFFFFFE0)	; unspill
002665 CD 00 00 00         A 10883    	CALL	__lor
002669 4B                  A 10884    	LD	C,E
00266A 0600                A 10885    	LD	B,%0
00266C C5                  A 10886    	PUSH	BC
00266D E5                  A 10887    	PUSH	HL
00266E DD77DC              A 10888    	LD	(IX+%FFFFFFDC),A
002671 CD AC 02 00         A 10889    	CALL	_put_utf
002675 DD7EDC              A 10890    	LD	A,(IX+%FFFFFFDC)
002678 C1                  A 10891    	POP	BC
002679 C1                  A 10892    	POP	BC
00267A C1                  A 10893    	POP	BC
00267B C1                  A 10894    	POP	BC
00267C DD2FE9              A 10895    	LD	(IX+%FFFFFFE9),HL
                           A 10896    ; 2646					if (nw == 0) { di = 0; 
                           A 10897    .LINE 2646
                           A 10898    
00267F 01000000            A 10899    	LD	BC,0
002683 DD27E9              A 10900    	LD	HL,(IX+%FFFFFFE9)
002686 B7                  A 10901    	OR	A,A
002687 ED42                A 10902    	SBC	HL,BC
002689 20 05               A 10903    	JR	NZ,L_479
00268B DD0FFD              A 10904    	LD	(IX+%FFFFFFFD),BC
00268E 18 31               A 10905    	JR	L_483
002690                     A 10906    L_479:
                           A 10907    ; 2647					di += nw;
                           A 10908    .LINE 2647
                           A 10909    
002690 DD07E9              A 10910    	LD	BC,(IX+%FFFFFFE9)
002693 DD27FD              A 10911    	LD	HL,(IX+%FFFFFFFD)
002696 09                  A 10912    	ADD	HL,BC
002697 DD2FFD              A 10913    	LD	(IX+%FFFFFFFD),HL
                           A 10914    ; 2648					hs = 0;
                           A 10915    .LINE 2648
                           A 10916    
00269A DD36F600            A 10917    	LD	(IX+%FFFFFFF6),%0
00269E DD36F700            A 10918    	LD	(IX+%FFFFFFF7),%0
                           A 10919    ; 2649				}
0026A2                     A 10920    L_480:
                           A 10921    .LINE 2649
                           A 10922    
0026A2 DD31E3              A 10923    	LD	IY,(IX+%FFFFFFE3)
0026A5 FD070B              A 10924    	LD	BC,(IY+%B)
0026A8 DD0FEF              A 10925    	LD	(IX+%FFFFFFEF),BC
0026AB DD27F8              A 10926    	LD	HL,(IX+%FFFFFFF8)
0026AE 29                  A 10927    	ADD	HL,HL
0026AF DD07EF              A 10928    	LD	BC,(IX+%FFFFFFEF)
0026B2 09                  A 10929    	ADD	HL,BC
0026B3 49010000            A 10930    	LD.LIS	BC,0
0026B7 ED27                A 10931    	LD	HL,(HL)
0026B9 B7                  A 10932    	OR	A,A
0026BA 40ED42              A 10933    	SBC.SIS	HL,BC
0026BD C2 E0 25 00         A 10934    	JR	NZ,L_481
0026C1                     A 10935    L_483:
                           A 10936    ; 2650				if (hs != 0) di = 0;	/* 
                           A 10937    .LINE 2650
                           A 10938    
0026C1 49010000            A 10939    	LD.LIS	BC,0
0026C5 DD27F6              A 10940    	LD	HL,(IX+%FFFFFFF6)
0026C8 B7                  A 10941    	OR	A,A
0026C9 40ED42              A 10942    	SBC.SIS	HL,BC
0026CC 28 07               A 10943    	JR	Z,L_484
0026CE 01000000            A 10944    	LD	BC,0
0026D2 DD0FFD              A 10945    	LD	(IX+%FFFFFFFD),BC
0026D5                     A 10946    L_484:
                           A 10947    ; 2651				fno->fname[di] = 0;		/* 
                           A 10948    .LINE 2651
                           A 10949    
0026D5 DD07FD              A 10950    	LD	BC,(IX+%FFFFFFFD)
0026D8 DD3109              A 10951    	LD	IY,(IX+%9)
0026DB ED2316              A 10952    	LEA	HL,IY+%16
0026DE 09                  A 10953    	ADD	HL,BC
0026DF 3600                A 10954    	LD	(HL),%0
                           A 10955    ; 2652			}
                           A 10956    ; 2653		}
0026E1                     A 10957    L_487:
                           A 10958    .LINE 2653
                           A 10959    
                           A 10960    ; 2654	
                           A 10961    ; 2655		si = di = 0;
                           A 10962    .LINE 2655
                           A 10963    
0026E1 01000000            A 10964    	LD	BC,0
0026E5 DD0FFD              A 10965    	LD	(IX+%FFFFFFFD),BC
0026E8 DD0FF8              A 10966    	LD	(IX+%FFFFFFF8),BC
                           A 10967    ; 2656		while (si < 11) {		/* Get SFN 
                           A 10968    .LINE 2656
                           A 10969    
0026EB 18 7E               A 10970    	JR	L_498
0026ED                     A 10971    L_499:
                           A 10972    ; 2657			wc = dp->dir[si++];			/* 
                           A 10973    .LINE 2657
                           A 10974    
0026ED DD07F8              A 10975    	LD	BC,(IX+%FFFFFFF8)
0026F0 DD3106              A 10976    	LD	IY,(IX+%6)
0026F3 FD271B              A 10977    	LD	HL,(IY+%1B)
0026F6 09                  A 10978    	ADD	HL,BC
0026F7 4E                  A 10979    	LD	C,(HL)
0026F8 0600                A 10980    	LD	B,%0
0026FA C5E1                A 10981    	LD	HL,BC
0026FC DD75FB              A 10982    	LD	(IX+%FFFFFFFB),L
0026FF DD74FC              A 10983    	LD	(IX+%FFFFFFFC),H
002702 DD07F8              A 10984    	LD	BC,(IX+%FFFFFFF8)
002705 03                  A 10985    	INC	BC
002706 DD0FF8              A 10986    	LD	(IX+%FFFFFFF8),BC
                           A 10987    ; 2658			if (wc == ' ') continue;	/* 
                           A 10988    .LINE 2658
                           A 10989    
002709 49012000            A 10990    	LD.LIS	BC,32
00270D DD27FB              A 10991    	LD	HL,(IX+%FFFFFFFB)
002710 B7                  A 10992    	OR	A,A
002711 40ED42              A 10993    	SBC.SIS	HL,BC
002714 28 55               A 10994    	JR	Z,L_498
                           A 10995    ; 2659			if (wc == RDDEM) wc = DDEM;	/* 
                           A 10996    .LINE 2659
                           A 10997    
002716 49010500            A 10998    	LD.LIS	BC,5
00271A DD27FB              A 10999    	LD	HL,(IX+%FFFFFFFB)
00271D B7                  A 11000    	OR	A,A
00271E 40ED42              A 11001    	SBC.SIS	HL,BC
002721 20 08               A 11002    	JR	NZ,L_495
002723 DD36FBE5            A 11003    	LD	(IX+%FFFFFFFB),%E5
002727 DD36FC00            A 11004    	LD	(IX+%FFFFFFFC),%0
00272B                     A 11005    L_495:
                           A 11006    ; 2660			if (si == 9 && di < FF_SFN_BUF)
                           A 11007    .LINE 2660
                           A 11008    
00272B 01090000            A 11009    	LD	BC,9
00272F DD27F8              A 11010    	LD	HL,(IX+%FFFFFFF8)
002732 B7                  A 11011    	OR	A,A
002733 ED42                A 11012    	SBC	HL,BC
002735 20 1F               A 11013    	JR	NZ,L_497
002737 010C0000            A 11014    	LD	BC,12
00273B DD27FD              A 11015    	LD	HL,(IX+%FFFFFFFD)
00273E B7                  A 11016    	OR	A,A
00273F ED42                A 11017    	SBC	HL,BC
002741 30 13               A 11018    	JR	NC,L_497
002743 DD07FD              A 11019    	LD	BC,(IX+%FFFFFFFD)
002746 DD3109              A 11020    	LD	IY,(IX+%9)
002749 ED2309              A 11021    	LEA	HL,IY+%9
00274C 09                  A 11022    	ADD	HL,BC
00274D 362E                A 11023    	LD	(HL),%2E
00274F DD07FD              A 11024    	LD	BC,(IX+%FFFFFFFD)
002752 03                  A 11025    	INC	BC
002753 DD0FFD              A 11026    	LD	(IX+%FFFFFFFD),BC
002756                     A 11027    L_497:
                           A 11028    ; 2661	#if FF_LFN_UNICODE >= 1	/* Unicode outp
                           A 11029    ; 2662			if (dbc_1st((BYTE)wc) && si != 
                           A 11030    ; 2663				wc = wc << 8 | dp->dir[si++
                           A 11031    ; 2664			}
                           A 11032    ; 2665			wc = ff_oem2uni(wc, CODEPAGE);	
                           A 11033    ; 2666			if (wc == 0) { di = 0; break; }
                           A 11034    ; 2667			nw = put_utf(wc, &fno->altname[
                           A 11035    ; 2668			if (nw == 0) { di = 0; break; }
                           A 11036    ; 2669			di += nw;
                           A 11037    ; 2670	#else					/* ANSI/OEM out
                           A 11038    ; 2671			fno->altname[di++] = (TCHAR)wc;
                           A 11039    .LINE 2671
                           A 11040    
002756 DD7EFB              A 11041    	LD	A,(IX+%FFFFFFFB)
002759 DD07FD              A 11042    	LD	BC,(IX+%FFFFFFFD)
00275C DD3109              A 11043    	LD	IY,(IX+%9)
00275F ED2309              A 11044    	LEA	HL,IY+%9
002762 09                  A 11045    	ADD	HL,BC
002763 77                  A 11046    	LD	(HL),A
002764 DD07FD              A 11047    	LD	BC,(IX+%FFFFFFFD)
002767 03                  A 11048    	INC	BC
002768 DD0FFD              A 11049    	LD	(IX+%FFFFFFFD),BC
                           A 11050    ; 2672	#endif
                           A 11051    ; 2673		}
00276B                     A 11052    L_498:
                           A 11053    .LINE 2673
                           A 11054    
00276B 010B0000            A 11055    	LD	BC,11
00276F DD27F8              A 11056    	LD	HL,(IX+%FFFFFFF8)
002772 B7                  A 11057    	OR	A,A
002773 ED42                A 11058    	SBC	HL,BC
002775 DA ED 26 00         A 11059    	JR	C,L_499
                           A 11060    ; 2674		fno->altname[di] = 0;	/* Terminat
                           A 11061    .LINE 2674
                           A 11062    
002779 DD3109              A 11063    	LD	IY,(IX+%9)
00277C ED0309              A 11064    	LEA	BC,IY+%9
00277F DD0FEC              A 11065    	LD	(IX+%FFFFFFEC),BC
002782 DD07FD              A 11066    	LD	BC,(IX+%FFFFFFFD)
002785 ED2309              A 11067    	LEA	HL,IY+%9
002788 09                  A 11068    	ADD	HL,BC
002789 3600                A 11069    	LD	(HL),%0
                           A 11070    ; 2675	
                           A 11071    ; 2676		if (fno->fname[0] == 0) {	/* If L
                           A 11072    .LINE 2676
                           A 11073    
00278B ED0316              A 11074    	LEA	BC,IY+%16
00278E DD0FF2              A 11075    	LD	(IX+%FFFFFFF2),BC
002791 FD7E16              A 11076    	LD	A,(IY+%16)
002794 B7                  A 11077    	OR	A,A
002795 C2 76 28 00         A 11078    	JR	NZ,L_518
                           A 11079    ; 2677			if (di == 0) {	/* If LFN and S
                           A 11080    .LINE 2677
                           A 11081    
002799 01000000            A 11082    	LD	BC,0
00279D DD27FD              A 11083    	LD	HL,(IX+%FFFFFFFD)
0027A0 B7                  A 11084    	OR	A,A
0027A1 ED42                A 11085    	SBC	HL,BC
0027A3 20 1D               A 11086    	JR	NZ,L_514
                           A 11087    ; 2678				fno->fname[di++] = '?';
                           A 11088    .LINE 2678
                           A 11089    
0027A5 DD3109              A 11090    	LD	IY,(IX+%9)
0027A8 ED0316              A 11091    	LEA	BC,IY+%16
0027AB DD0FF2              A 11092    	LD	(IX+%FFFFFFF2),BC
0027AE DD07FD              A 11093    	LD	BC,(IX+%FFFFFFFD)
0027B1 ED2316              A 11094    	LEA	HL,IY+%16
0027B4 09                  A 11095    	ADD	HL,BC
0027B5 363F                A 11096    	LD	(HL),%3F
0027B7 DD07FD              A 11097    	LD	BC,(IX+%FFFFFFFD)
0027BA 03                  A 11098    	INC	BC
0027BB DD0FFD              A 11099    	LD	(IX+%FFFFFFFD),BC
                           A 11100    ; 2679			} else {
                           A 11101    .LINE 2679
                           A 11102    
0027BE C3 5C 28 00         A 11103    	JR	L_515
0027C2                     A 11104    L_514:
                           A 11105    ; 2680				for (si = di = 0, lcf = NS_
                           A 11106    .LINE 2680
                           A 11107    
0027C2 DD0FFD              A 11108    	LD	(IX+%FFFFFFFD),BC
0027C5 DD0FF8              A 11109    	LD	(IX+%FFFFFFF8),BC
0027C8 DD36F508            A 11110    	LD	(IX+%FFFFFFF5),%8
0027CC 18 75               A 11111    	JR	L_512
0027CE                     A 11112    L_510:
                           A 11113    ; 2681					wc = (WCHAR)fno->altnam
                           A 11114    .LINE 2681
                           A 11115    
0027CE DD27E6              A 11116    	LD	HL,(IX+%FFFFFFE6)
0027D1 7E                  A 11117    	LD	A,(HL)
0027D2 47                  A 11118    	LD	B,A
0027D3 17ED62              A 11119    	SEXT	HL
0027D6 DD70FB              A 11120    	LD	(IX+%FFFFFFFB),B
0027D9 DD74FC              A 11121    	LD	(IX+%FFFFFFFC),H
                           A 11122    ; 2682					if (wc == '.') lcf = NS
                           A 11123    .LINE 2682
                           A 11124    
0027DC 49012E00            A 11125    	LD.LIS	BC,46
0027E0 DD27FB              A 11126    	LD	HL,(IX+%FFFFFFFB)
0027E3 B7                  A 11127    	OR	A,A
0027E4 40ED42              A 11128    	SBC.SIS	HL,BC
0027E7 20 04               A 11129    	JR	NZ,L_508
0027E9 DD36F510            A 11130    	LD	(IX+%FFFFFFF5),%10
0027ED                     A 11131    L_508:
                           A 11132    ; 2683					if (IsUpper(wc) && (dp-
                           A 11133    .LINE 2683
                           A 11134    
0027ED 49014100            A 11135    	LD.LIS	BC,65
0027F1 DD27FB              A 11136    	LD	HL,(IX+%FFFFFFFB)
0027F4 B7                  A 11137    	OR	A,A
0027F5 40ED42              A 11138    	SBC.SIS	HL,BC
0027F8 38 27               A 11139    	JR	C,L_509
0027FA DD07FB              A 11140    	LD	BC,(IX+%FFFFFFFB)
0027FD 49215A00            A 11141    	LD.LIS	HL,90
002801 B7                  A 11142    	OR	A,A
002802 40ED42              A 11143    	SBC.SIS	HL,BC
002805 38 1A               A 11144    	JR	C,L_509
002807 DD3106              A 11145    	LD	IY,(IX+%6)
00280A FD371B              A 11146    	LD	IY,(IY+%1B)
00280D FD7E0C              A 11147    	LD	A,(IY+%C)
002810 DDA6F5              A 11148    	AND	A,(IX+%FFFFFFF5)
002813 28 0C               A 11149    	JR	Z,L_509
002815 DD31FB              A 11150    	LD	IY,(IX+%FFFFFFFB)
002818 ED2320              A 11151    	LEA	HL,IY+%20
00281B DD75FB              A 11152    	LD	(IX+%FFFFFFFB),L
00281E DD74FC              A 11153    	LD	(IX+%FFFFFFFC),H
002821                     A 11154    L_509:
                           A 11155    ; 2684					fno->fname[di] = (TCHAR
                           A 11156    .LINE 2684
                           A 11157    
002821 DD3109              A 11158    	LD	IY,(IX+%9)
002824 ED0316              A 11159    	LEA	BC,IY+%16
002827 DD0FF2              A 11160    	LD	(IX+%FFFFFFF2),BC
00282A DD7EFB              A 11161    	LD	A,(IX+%FFFFFFFB)
00282D DD07FD              A 11162    	LD	BC,(IX+%FFFFFFFD)
002830 ED2316              A 11163    	LEA	HL,IY+%16
002833 09                  A 11164    	ADD	HL,BC
002834 77                  A 11165    	LD	(HL),A
002835 DD07F8              A 11166    	LD	BC,(IX+%FFFFFFF8)
002838 03                  A 11167    	INC	BC
002839 DD0FF8              A 11168    	LD	(IX+%FFFFFFF8),BC
00283C DD07FD              A 11169    	LD	BC,(IX+%FFFFFFFD)
00283F 03                  A 11170    	INC	BC
002840 DD0FFD              A 11171    	LD	(IX+%FFFFFFFD),BC
                           A 11172    ; 2685				}
002843                     A 11173    L_512:
                           A 11174    .LINE 2685
                           A 11175    
002843 DD3109              A 11176    	LD	IY,(IX+%9)
002846 ED0309              A 11177    	LEA	BC,IY+%9
002849 DD0FEC              A 11178    	LD	(IX+%FFFFFFEC),BC
00284C DD07F8              A 11179    	LD	BC,(IX+%FFFFFFF8)
00284F ED2309              A 11180    	LEA	HL,IY+%9
002852 09                  A 11181    	ADD	HL,BC
002853 DD2FE6              A 11182    	LD	(IX+%FFFFFFE6),HL
002856 7E                  A 11183    	LD	A,(HL)
002857 B7                  A 11184    	OR	A,A
002858 C2 CE 27 00         A 11185    	JR	NZ,L_510
                           A 11186    ; 2686			}
00285C                     A 11187    L_515:
                           A 11188    .LINE 2686
                           A 11189    
                           A 11190    ; 2687			fno->fname[di] = 0;	/* Terminat
                           A 11191    .LINE 2687
                           A 11192    
00285C DD07FD              A 11193    	LD	BC,(IX+%FFFFFFFD)
00285F DD27F2              A 11194    	LD	HL,(IX+%FFFFFFF2)
002862 09                  A 11195    	ADD	HL,BC
002863 3600                A 11196    	LD	(HL),%0
                           A 11197    ; 2688			if (!dp->dir[DIR_NTres]) fno->a
                           A 11198    .LINE 2688
                           A 11199    
002865 DD3106              A 11200    	LD	IY,(IX+%6)
002868 FD371B              A 11201    	LD	IY,(IY+%1B)
00286B FD7E0C              A 11202    	LD	A,(IY+%C)
00286E B7                  A 11203    	OR	A,A
00286F 20 05               A 11204    	JR	NZ,L_518
002871 DD27EC              A 11205    	LD	HL,(IX+%FFFFFFEC)
002874 3600                A 11206    	LD	(HL),%0
                           A 11207    ; 2689		}
002876                     A 11208    L_518:
                           A 11209    .LINE 2689
                           A 11210    
                           A 11211    ; 2690	
                           A 11212    ; 2691	#else	/* Non-LFN configuration */
                           A 11213    ; 2692		si = di = 0;
                           A 11214    ; 2693		while (si < 11) {		/* Copy nam
                           A 11215    ; 2694			c = (TCHAR)dp->dir[si++];
                           A 11216    ; 2695			if (c == ' ') continue;		/* 
                           A 11217    ; 2696			if (c == RDDEM) c = DDEM;	/* 
                           A 11218    ; 2697			if (si == 9) fno->fname[di++] =
                           A 11219    ; 2698			fno->fname[di++] = c;
                           A 11220    ; 2699		}
                           A 11221    ; 2700		fno->fname[di] = 0;		/* Terminat
                           A 11222    ; 2701	#endif
                           A 11223    ; 2702	
                           A 11224    ; 2703		fno->fattrib = dp->dir[DIR_Attr] & 
                           A 11225    .LINE 2703
                           A 11226    
002876 DD3106              A 11227    	LD	IY,(IX+%6)
002879 FD371B              A 11228    	LD	IY,(IY+%1B)
00287C ED230B              A 11229    	LEA	HL,IY+%B
00287F 7E                  A 11230    	LD	A,(HL)
002880 E63F                A 11231    	AND	A,%3F
002882 DD3109              A 11232    	LD	IY,(IX+%9)
002885 FD7708              A 11233    	LD	(IY+%8),A
                           A 11234    ; 2704		fno->fsize = ld_dword(dp->dir + DIR
                           A 11235    .LINE 2704
                           A 11236    
002888 DD3106              A 11237    	LD	IY,(IX+%6)
00288B FD371B              A 11238    	LD	IY,(IY+%1B)
00288E ED031C              A 11239    	LEA	BC,IY+%1C
002891 C5                  A 11240    	PUSH	BC
002892 CD 3C 00 00         A 11241    	CALL	_ld_dword
002896 C1                  A 11242    	POP	BC
002897 DD3109              A 11243    	LD	IY,(IX+%9)
00289A FD2F00              A 11244    	LD	(IY+%0),HL
00289D FD7303              A 11245    	LD	(IY+%3),E
                           A 11246    ; 2705		fno->ftime = ld_word(dp->dir + DIR_
                           A 11247    .LINE 2705
                           A 11248    
0028A0 DD3106              A 11249    	LD	IY,(IX+%6)
0028A3 FD371B              A 11250    	LD	IY,(IY+%1B)
0028A6 ED0316              A 11251    	LEA	BC,IY+%16
0028A9 C5                  A 11252    	PUSH	BC
0028AA CD 00 00 00         A 11253    	CALL	_ld_word
0028AE C1                  A 11254    	POP	BC
0028AF DD3109              A 11255    	LD	IY,(IX+%9)
0028B2 E5C1                A 11256    	LD	BC,HL
0028B4 FD7106              A 11257    	LD	(IY+%6),C
0028B7 FD7007              A 11258    	LD	(IY+%7),B
                           A 11259    ; 2706		fno->fdate = ld_word(dp->dir + DIR_
                           A 11260    .LINE 2706
                           A 11261    
0028BA DD3106              A 11262    	LD	IY,(IX+%6)
0028BD FD371B              A 11263    	LD	IY,(IY+%1B)
0028C0 ED0318              A 11264    	LEA	BC,IY+%18
0028C3 C5                  A 11265    	PUSH	BC
0028C4 CD 00 00 00         A 11266    	CALL	_ld_word
0028C8 C1                  A 11267    	POP	BC
0028C9 DD3109              A 11268    	LD	IY,(IX+%9)
0028CC E5C1                A 11269    	LD	BC,HL
0028CE FD7104              A 11270    	LD	(IY+%4),C
0028D1 FD7005              A 11271    	LD	(IY+%5),B
                           A 11272    ; 2707	}
0028D4                     A 11273    L_519:
                           A 11274    .LINE 2707
                           A 11275    
0028D4 DDF9                A 11276    	LD	SP,IX
0028D6 DDE1                A 11277    	POP	IX
0028D8 C9                  A 11278    	RET	
                           A 11279    
                           A 11280    
                           A 11281    ;**************************** _get_fileinfo ***
                           A 11282    ;Name                         Addr/Register   S
                           A 11283    ;fs                                   IX-29    
                           A 11284    ;G_25                                 IX-26    
                           A 11285    ;nw                                   IX-23    
                           A 11286    ;G_29                                 IX-20    
                           A 11287    ;G_23                                 IX-17    
                           A 11288    ;G_28                                 IX-14    
                           A 11289    ;lcf                                  IX-11    
                           A 11290    ;hs                                   IX-10    
                           A 11291    ;si                                    IX-8    
                           A 11292    ;wc                                    IX-5    
                           A 11293    ;di                                    IX-3    
                           A 11294    ;fno                                   IX+9    
                           A 11295    ;dp                                    IX+6    
                           A 11296    
                           A 11297    
                           A 11298    ; Stack Frame Size: 48 (bytes)
                           A 11299    ;       Spill Code: -2 (instruction)
                           A 11300    
                           A 11301    
                           A 11302    .ENDFUNC "get_fileinfo",2707,"_get_fileinfo"
                           A 11303    ; 2708	
                           A 11304    ; 2709	#endif /* FF_FS_MINIMIZE <= 1 || FF_FS_
                           A 11305    ; 2710	
                           A 11306    ; 2711	
                           A 11307    ; 2712	
                           A 11308    ; 2713	#if FF_USE_FIND && FF_FS_MINIMIZE <= 1
                           A 11309    ; 2714	/*-------------------------------------
                           A 11310    ; 2715	/* Pattern matching                    
                           A 11311    ; 2716	/*-------------------------------------
                           A 11312    ; 2717	
                           A 11313    ; 2718	#define FIND_RECURS	4	/* Maximum numb
                           A 11314    ; 2719	
                           A 11315    ; 2720	
                           A 11316    ; 2721	static DWORD get_achar (	/* Get a ch
                           A 11317    ; 2722		const TCHAR** ptr		/* Pointer 
                           A 11318    ; 2723	)
                           A 11319    ; 2724	{
                           A 11320    ; 2725		DWORD chr;
                           A 11321    ; 2726	
                           A 11322    ; 2727	
                           A 11323    ; 2728	#if FF_USE_LFN && FF_LFN_UNICODE >= 1	
                           A 11324    ; 2729		chr = tchar2uni(ptr);
                           A 11325    ; 2730		if (chr == 0xFFFFFFFF) chr = 0;		
                           A 11326    ; 2731		chr = ff_wtoupper(chr);
                           A 11327    ; 2732	
                           A 11328    ; 2733	#else									
                           A 11329    ; 2734		chr = (BYTE)*(*ptr)++;				
                           A 11330    ; 2735		if (IsLower(chr)) chr -= 0x20;		
                           A 11331    ; 2736	#if FF_CODE_PAGE == 0
                           A 11332    ; 2737		if (ExCvt && chr >= 0x80) chr = ExC
                           A 11333    ; 2738	#elif FF_CODE_PAGE < 900
                           A 11334    ; 2739		if (chr >= 0x80) chr = ExCvt[chr - 
                           A 11335    ; 2740	#endif
                           A 11336    ; 2741	#if FF_CODE_PAGE == 0 || FF_CODE_PAGE >
                           A 11337    ; 2742		if (dbc_1st((BYTE)chr)) {	/* Get 
                           A 11338    ; 2743			chr = dbc_2nd((BYTE)**ptr) ? ch
                           A 11339    ; 2744		}
                           A 11340    ; 2745	#endif
                           A 11341    ; 2746	
                           A 11342    ; 2747	#endif
                           A 11343    ; 2748		return chr;
                           A 11344    ; 2749	}
                           A 11345    ; 2750	
                           A 11346    ; 2751	
                           A 11347    ; 2752	static int pattern_match (	/* 0:mismat
                           A 11348    ; 2753		const TCHAR* pat,	/* Matching pat
                           A 11349    ; 2754		const TCHAR* nam,	/* String to be
                           A 11350    ; 2755		UINT skip,			/* Number of pr
                           A 11351    ; 2756		UINT recur			/* Recursion co
                           A 11352    ; 2757	)
                           A 11353    ; 2758	{
                           A 11354    ; 2759		const TCHAR *pptr, *nptr;
                           A 11355    ; 2760		DWORD pchr, nchr;
                           A 11356    ; 2761		UINT sk;
                           A 11357    ; 2762	
                           A 11358    ; 2763	
                           A 11359    ; 2764		while ((skip & 0xFF) != 0) {		
                           A 11360    ; 2765			if (!get_achar(&nam)) return 0;
                           A 11361    ; 2766			skip--;
                           A 11362    ; 2767		}
                           A 11363    ; 2768		if (*pat == 0 && skip) return 1;	
                           A 11364    ; 2769	
                           A 11365    ; 2770		do {
                           A 11366    ; 2771			pptr = pat; nptr = nam;			
                           A 11367    ; 2772			for (;;) {
                           A 11368    ; 2773				if (*pptr == '?' || *pptr =
                           A 11369    ; 2774					if (recur == 0) return 
                           A 11370    ; 2775					sk = 0;
                           A 11371    ; 2776					do {	/* Analyze the 
                           A 11372    ; 2777						if (*pptr++ == '?')
                           A 11373    ; 2778					} while (*pptr == '?' |
                           A 11374    ; 2779					if (pattern_match(pptr,
                           A 11375    ; 2780					nchr = *nptr; break;	
                           A 11376    ; 2781				}
                           A 11377    ; 2782				pchr = get_achar(&pptr);	
                           A 11378    ; 2783				nchr = get_achar(&nptr);	
                           A 11379    ; 2784				if (pchr != nchr) break;	
                           A 11380    ; 2785				if (pchr == 0) return 1;	
                           A 11381    ; 2786			}
                           A 11382    ; 2787			get_achar(&nam);			/* 
                           A 11383    ; 2788		} while (skip && nchr);		/* Retr
                           A 11384    ; 2789	
                           A 11385    ; 2790		return 0;
                           A 11386    ; 2791	}
                           A 11387    ; 2792	
                           A 11388    ; 2793	#endif /* FF_USE_FIND && FF_FS_MINIMIZE
                           A 11389    ; 2794	
                           A 11390    ; 2795	
                           A 11391    ; 2796	
                           A 11392    ; 2797	/*-------------------------------------
                           A 11393    ; 2798	/* Pick a top segment and create the ob
                           A 11394    ; 2799	/*-------------------------------------
                           A 11395    ; 2800	
                           A 11396    ; 2801	static FRESULT create_name (	/* FR_O
                           A 11397    ; 2802		DIR* dp,					/* Poin
                           A 11398    ; 2803		const TCHAR** path			/* Poin
                           A 11399    ; 2804	)
                           A 11400    ; 2805	{
0028D9                     A 11401    _create_name:
                           A 11402    .DEFINE "_create_name"
                           A 11403    
                           A 11404    .VALUE _create_name
                           A 11405    
                           A 11406    .CLASS 3
                           A 11407    
                           A 11408    .TYPE 68
                           A 11409    
                           A 11410    .ENDEF
                           A 11411    
                           A 11412    .BEGFUNC "create_name",2805,"_create_name"
                           A 11413    
                           A 11414    .LINE 2805
                           A 11415    
                           A 11416    .DEFINE "dp"
                           A 11417    
                           A 11418    .CLASS 65
                           A 11419    
                           A 11420    .VALUE 6
                           A 11421    
                           A 11422    .TAG "NONAME3"
                           A 11423    
                           A 11424    .TYPE 40
                           A 11425    
                           A 11426    .ENDEF
                           A 11427    
                           A 11428    .DEFINE "path"
                           A 11429    
                           A 11430    .CLASS 65
                           A 11431    
                           A 11432    .VALUE 9
                           A 11433    
                           A 11434    .TYPE 1570
                           A 11435    
                           A 11436    .ENDEF
                           A 11437    
                           A 11438    .DEFINE "cf"
                           A 11439    
                           A 11440    .CLASS 65
                           A 11441    
                           A 11442    .VALUE -1
                           A 11443    
                           A 11444    .TYPE 12
                           A 11445    
                           A 11446    .ENDEF
                           A 11447    
                           A 11448    .DEFINE "wc"
                           A 11449    
                           A 11450    .CLASS 65
                           A 11451    
                           A 11452    .VALUE -3
                           A 11453    
                           A 11454    .TYPE 13
                           A 11455    
                           A 11456    .ENDEF
                           A 11457    
                           A 11458    .DEFINE "di"
                           A 11459    
                           A 11460    .CLASS 65
                           A 11461    
                           A 11462    .VALUE -6
                           A 11463    
                           A 11464    .TYPE 14
                           A 11465    
                           A 11466    .ENDEF
                           A 11467    
                           A 11468    .DEFINE "b"
                           A 11469    
                           A 11470    .CLASS 65
                           A 11471    
                           A 11472    .VALUE -7
                           A 11473    
                           A 11474    .TYPE 12
                           A 11475    
                           A 11476    .ENDEF
                           A 11477    
                           A 11478    .DEFINE "si"
                           A 11479    
                           A 11480    .CLASS 65
                           A 11481    
                           A 11482    .VALUE -10
                           A 11483    
                           A 11484    .TYPE 14
                           A 11485    
                           A 11486    .ENDEF
                           A 11487    
                           A 11488    .DEFINE "uc"
                           A 11489    
                           A 11490    .CLASS 65
                           A 11491    
                           A 11492    .VALUE -14
                           A 11493    
                           A 11494    .TYPE 15
                           A 11495    
                           A 11496    .ENDEF
                           A 11497    
                           A 11498    .DEFINE "i"
                           A 11499    
                           A 11500    .CLASS 65
                           A 11501    
                           A 11502    .VALUE -17
                           A 11503    
                           A 11504    .TYPE 14
                           A 11505    
                           A 11506    .ENDEF
                           A 11507    
                           A 11508    .DEFINE "p"
                           A 11509    
                           A 11510    .CLASS 65
                           A 11511    
                           A 11512    .VALUE -20
                           A 11513    
                           A 11514    .TYPE 194
                           A 11515    
                           A 11516    .ENDEF
                           A 11517    
                           A 11518    .DEFINE "lfn"
                           A 11519    
                           A 11520    .CLASS 65
                           A 11521    
                           A 11522    .VALUE -23
                           A 11523    
                           A 11524    .TYPE 45
                           A 11525    
                           A 11526    .ENDEF
                           A 11527    
                           A 11528    .DEFINE "ni"
                           A 11529    
                           A 11530    .CLASS 65
                           A 11531    
                           A 11532    .VALUE -26
                           A 11533    
                           A 11534    .TYPE 14
                           A 11535    
                           A 11536    .ENDEF
                           A 11537    
0028D9 DDE5                A 11538    	PUSH	IX
0028DB DD210000 00         A 11539    	LD	IX,0
0028E0 DD39                A 11540    	ADD	IX,SP
0028E2 ED22D7              A 11541    	LEA	HL,IX+%FFFFFFD7
0028E5 F9                  A 11542    	LD	SP,HL
                           A 11543    ; 2806	#if FF_USE_LFN		/* LFN configuratio
                           A 11544    ; 2807		BYTE b, cf;
                           A 11545    ; 2808		WCHAR wc, *lfn;
                           A 11546    ; 2809		DWORD uc;
                           A 11547    ; 2810		UINT i, ni, si, di;
                           A 11548    ; 2811		const TCHAR *p;
                           A 11549    ; 2812	
                           A 11550    ; 2813	
                           A 11551    ; 2814		/* Create LFN into LFN working buff
                           A 11552    ; 2815		p = *path; lfn = dp->obj.fs->lfnbuf
                           A 11553    .LINE 2815
                           A 11554    
0028E6 DD2709              A 11555    	LD	HL,(IX+%9)
0028E9 ED07                A 11556    	LD	BC,(HL)
0028EB DD0FEC              A 11557    	LD	(IX+%FFFFFFEC),BC
0028EE DD3106              A 11558    	LD	IY,(IX+%6)
0028F1 FD3700              A 11559    	LD	IY,(IY+%0)
0028F4 FD070B              A 11560    	LD	BC,(IY+%B)
0028F7 DD0FE9              A 11561    	LD	(IX+%FFFFFFE9),BC
0028FA 01000000            A 11562    	LD	BC,0
0028FE DD0FFA              A 11563    	LD	(IX+%FFFFFFFA),BC
                           A 11564    ; 2816		for (;;) {
002901                     A 11565    L_535:
                           A 11566    .LINE 2816
                           A 11567    
                           A 11568    ; 2817			uc = tchar2uni(&p);			/* 
                           A 11569    .LINE 2817
                           A 11570    
002901 ED65EC              A 11571    	PEA	IX+%FFFFFFEC
002904 CD DA 01 00         A 11572    	CALL	_tchar2uni
002908 C1                  A 11573    	POP	BC
002909 DD2FF2              A 11574    	LD	(IX+%FFFFFFF2),HL
00290C DD73F5              A 11575    	LD	(IX+%FFFFFFF5),E
                           A 11576    ; 2818			if (uc == 0xFFFFFFFF) return FR
                           A 11577    .LINE 2818
                           A 11578    
00290F DD27F2              A 11579    	LD	HL,(IX+%FFFFFFF2)
002912 DD5EF5              A 11580    	LD	E,(IX+%FFFFFFF5)
002915 01FFFFFF            A 11581    	LD	BC,16777215
002919 3EFF                A 11582    	LD	A,%FF
00291B CD 00 00 00         A 11583    	CALL	__lcmpu
00291F 20 08               A 11584    	JR	NZ,L_523
002921 21060000            A 11585    	LD	HL,6
002925 C3 FB 2D 00         A 11586    	JR	L_618
002929                     A 11587    L_523:
                           A 11588    ; 2819			if (uc >= 0x10000) lfn[di++] = 
                           A 11589    .LINE 2819
                           A 11590    
002929 DD27F2              A 11591    	LD	HL,(IX+%FFFFFFF2)
00292C DD5EF5              A 11592    	LD	E,(IX+%FFFFFFF5)
00292F 01000001            A 11593    	LD	BC,65536
002933 AF                  A 11594    	XOR	A,A
002934 CD 00 00 00         A 11595    	CALL	__lcmpu
002938 38 1E               A 11596    	JR	C,L_524
00293A B7ED62              A 11597    	UEXT	HL
00293D E5                  A 11598    	PUSH	HL
00293E DD07F3              A 11599    	LD	BC,(IX+%FFFFFFF3)
002941 C5                  A 11600    	PUSH	BC
002942 33                  A 11601    	INC	SP
002943 C1                  A 11602    	POP	BC
002944 33                  A 11603    	INC	SP
002945 33                  A 11604    	INC	SP
002946 DD27FA              A 11605    	LD	HL,(IX+%FFFFFFFA)
002949 29                  A 11606    	ADD	HL,HL
00294A DD17E9              A 11607    	LD	DE,(IX+%FFFFFFE9)
00294D 19                  A 11608    	ADD	HL,DE
00294E 71                  A 11609    	LD	(HL),C
00294F 23                  A 11610    	INC	HL
002950 70                  A 11611    	LD	(HL),B
002951 DD07FA              A 11612    	LD	BC,(IX+%FFFFFFFA)
002954 03                  A 11613    	INC	BC
002955 DD0FFA              A 11614    	LD	(IX+%FFFFFFFA),BC
002958                     A 11615    L_524:
                           A 11616    ; 2820			wc = (WCHAR)uc;
                           A 11617    ; 2821			if (wc < ' ' || IsSeparator(wc)
                           A 11618    .LINE 2821
                           A 11619    
002958 49012000            A 11620    	LD.LIS	BC,32
00295C DD27F2              A 11621    	LD	HL,(IX+%FFFFFFF2)
00295F B7                  A 11622    	OR	A,A
002960 40ED42              A 11623    	SBC.SIS	HL,BC
002963 38 78               A 11624    	JR	C,L_545
002965 49012F00            A 11625    	LD.LIS	BC,47
002969 DD27F2              A 11626    	LD	HL,(IX+%FFFFFFF2)
00296C B7                  A 11627    	OR	A,A
00296D 40ED42              A 11628    	SBC.SIS	HL,BC
002970 28 6B               A 11629    	JR	Z,L_545
002972 49015C00            A 11630    	LD.LIS	BC,92
002976 DD27F2              A 11631    	LD	HL,(IX+%FFFFFFF2)
002979 B7                  A 11632    	OR	A,A
00297A 40ED42              A 11633    	SBC.SIS	HL,BC
00297D 28 5E               A 11634    	JR	Z,L_545
                           A 11635    ; 2822			if (wc < 0x80 && strchr("*:<>|\
                           A 11636    .LINE 2822
                           A 11637    
00297F 49018000            A 11638    	LD.LIS	BC,128
002983 DD27F2              A 11639    	LD	HL,(IX+%FFFFFFF2)
002986 B7                  A 11640    	OR	A,A
002987 40ED42              A 11641    	SBC.SIS	HL,BC
00298A 30 24               A 11642    	JR	NC,L_532
00298C DD07F2              A 11643    	LD	BC,(IX+%FFFFFFF2)
00298F CD 00 00 00         A 11644    	CALL	__stoiu
002993 E5                  A 11645    	PUSH	HL
002994 01 00 00 00         A 11646    	LD	BC,L__274
002998 C5                  A 11647    	PUSH	BC
002999 CD 00 00 00         A 11648    	CALL	_strchr
00299D C1                  A 11649    	POP	BC
00299E C1                  A 11650    	POP	BC
00299F 01000000            A 11651    	LD	BC,0
0029A3 B7                  A 11652    	OR	A,A
0029A4 ED42                A 11653    	SBC	HL,BC
0029A6 28 08               A 11654    	JR	Z,L_532
0029A8 21060000            A 11655    	LD	HL,6
0029AC C3 FB 2D 00         A 11656    	JR	L_618
0029B0                     A 11657    L_532:
                           A 11658    ; 2823			if (di >= FF_MAX_LFN) return FR
                           A 11659    .LINE 2823
                           A 11660    
0029B0 01FF0000            A 11661    	LD	BC,255
0029B4 DD27FA              A 11662    	LD	HL,(IX+%FFFFFFFA)
0029B7 B7                  A 11663    	OR	A,A
0029B8 ED42                A 11664    	SBC	HL,BC
0029BA 38 08               A 11665    	JR	C,L_534
0029BC 21060000            A 11666    	LD	HL,6
0029C0 C3 FB 2D 00         A 11667    	JR	L_618
0029C4                     A 11668    L_534:
                           A 11669    ; 2824			lfn[di++] = wc;				/* 
                           A 11670    .LINE 2824
                           A 11671    
0029C4 DD27FA              A 11672    	LD	HL,(IX+%FFFFFFFA)
0029C7 29                  A 11673    	ADD	HL,HL
0029C8 DD07E9              A 11674    	LD	BC,(IX+%FFFFFFE9)
0029CB 09                  A 11675    	ADD	HL,BC
0029CC DD07F2              A 11676    	LD	BC,(IX+%FFFFFFF2)
0029CF 71                  A 11677    	LD	(HL),C
0029D0 23                  A 11678    	INC	HL
0029D1 70                  A 11679    	LD	(HL),B
0029D2 DD07FA              A 11680    	LD	BC,(IX+%FFFFFFFA)
0029D5 03                  A 11681    	INC	BC
0029D6 DD0FFA              A 11682    	LD	(IX+%FFFFFFFA),BC
                           A 11683    ; 2825		}
                           A 11684    .LINE 2825
                           A 11685    
0029D9 C3 01 29 00         A 11686    	JR	L_535
0029DD                     A 11687    L_545:
                           A 11688    ; 2826		if (wc < ' ') {				/* Stop
                           A 11689    .LINE 2826
                           A 11690    
0029DD 49012000            A 11691    	LD.LIS	BC,32
0029E1 DD27F2              A 11692    	LD	HL,(IX+%FFFFFFF2)
0029E4 B7                  A 11693    	OR	A,A
0029E5 40ED42              A 11694    	SBC.SIS	HL,BC
0029E8 30 13               A 11695    	JR	NC,L_539
                           A 11696    ; 2827			cf = NS_LAST;			/* Last
                           A 11697    .LINE 2827
                           A 11698    
0029EA DD36FF04            A 11699    	LD	(IX+%FFFFFFFF),%4
                           A 11700    ; 2828		} else {					/* Stop
                           A 11701    .LINE 2828
                           A 11702    
0029EE 18 4B               A 11703    	JR	L_546
                           A 11704    ; 2829			while (IsSeparator(*p)) p++;	
                           A 11705    .LINE 2829
                           A 11706    
0029F0                     A 11707    L_540:
0029F0 DD07EC              A 11708    	LD	BC,(IX+%FFFFFFEC)
0029F3 DD0FD7              A 11709    	LD	(IX+%FFFFFFD7),BC
0029F6 DD07EC              A 11710    	LD	BC,(IX+%FFFFFFEC)
0029F9 03                  A 11711    	INC	BC
0029FA DD0FEC              A 11712    	LD	(IX+%FFFFFFEC),BC
0029FD                     A 11713    L_539:
0029FD DD27EC              A 11714    	LD	HL,(IX+%FFFFFFEC)
002A00 7E                  A 11715    	LD	A,(HL)
002A01 47                  A 11716    	LD	B,A
002A02 17ED62              A 11717    	SEXT	HL
002A05 68                  A 11718    	LD	L,B
002A06 012F0000            A 11719    	LD	BC,47
002A0A B7                  A 11720    	OR	A,A
002A0B ED42                A 11721    	SBC	HL,BC
002A0D 28 E1               A 11722    	JR	Z,L_540
002A0F DD27EC              A 11723    	LD	HL,(IX+%FFFFFFEC)
002A12 7E                  A 11724    	LD	A,(HL)
002A13 47                  A 11725    	LD	B,A
002A14 17ED62              A 11726    	SEXT	HL
002A17 68                  A 11727    	LD	L,B
002A18 015C0000            A 11728    	LD	BC,92
002A1C B7                  A 11729    	OR	A,A
002A1D ED42                A 11730    	SBC	HL,BC
002A1F 28 CF               A 11731    	JR	Z,L_540
                           A 11732    ; 2830			cf = 0;					/* Next
                           A 11733    .LINE 2830
                           A 11734    
002A21 DD36FF00            A 11735    	LD	(IX+%FFFFFFFF),%0
                           A 11736    ; 2831			if (IsTerminator(*p)) cf = NS_L
                           A 11737    .LINE 2831
                           A 11738    
002A25 DD27EC              A 11739    	LD	HL,(IX+%FFFFFFEC)
002A28 7E                  A 11740    	LD	A,(HL)
002A29 47                  A 11741    	LD	B,A
002A2A 17ED62              A 11742    	SEXT	HL
002A2D 68                  A 11743    	LD	L,B
002A2E 01200000            A 11744    	LD	BC,32
002A32 B7                  A 11745    	OR	A,A
002A33 ED42                A 11746    	SBC	HL,BC
002A35 30 04               A 11747    	JR	NC,L_546
002A37 DD36FF04            A 11748    	LD	(IX+%FFFFFFFF),%4
                           A 11749    ; 2832		}
002A3B                     A 11750    L_546:
                           A 11751    .LINE 2832
                           A 11752    
                           A 11753    ; 2833		*path = p;					/* Retu
                           A 11754    .LINE 2833
                           A 11755    
002A3B DD2709              A 11756    	LD	HL,(IX+%9)
002A3E DD07EC              A 11757    	LD	BC,(IX+%FFFFFFEC)
002A41 ED0F                A 11758    	LD	(HL),BC
                           A 11759    ; 2834	
                           A 11760    ; 2835	#if FF_FS_RPATH != 0
                           A 11761    ; 2836		if ((di == 1 && lfn[di - 1] == '.')
                           A 11762    ; 2837			(di == 2 && lfn[di - 1] == '.' 
                           A 11763    ; 2838			lfn[di] = 0;
                           A 11764    ; 2839			for (i = 0; i < 11; i++) {	/* 
                           A 11765    ; 2840				dp->fn[i] = (i < di) ? '.' 
                           A 11766    ; 2841			}
                           A 11767    ; 2842			dp->fn[i] = cf | NS_DOT;	/* 
                           A 11768    ; 2843			return FR_OK;
                           A 11769    ; 2844		}
                           A 11770    ; 2845	#endif
                           A 11771    ; 2846		while (di) {					/* 
                           A 11772    .LINE 2846
                           A 11773    
002A43 18 39               A 11774    	JR	L_551
002A45                     A 11775    L_552:
                           A 11776    ; 2847			wc = lfn[di - 1];
                           A 11777    .LINE 2847
                           A 11778    
002A45 DD31FA              A 11779    	LD	IY,(IX+%FFFFFFFA)
002A48 ED33FF              A 11780    	LEA	IY,IY+%FFFFFFFF
002A4B DD3EE3              A 11781    	LD	(IX+%FFFFFFE3),IY
002A4E DD27E3              A 11782    	LD	HL,(IX+%FFFFFFE3)
002A51 29                  A 11783    	ADD	HL,HL
002A52 DD07E9              A 11784    	LD	BC,(IX+%FFFFFFE9)
002A55 09                  A 11785    	ADD	HL,BC
002A56 ED07                A 11786    	LD	BC,(HL)
002A58 DD71FD              A 11787    	LD	(IX+%FFFFFFFD),C
002A5B DD70FE              A 11788    	LD	(IX+%FFFFFFFE),B
                           A 11789    ; 2848			if (wc != ' ' && wc != '.') bre
                           A 11790    .LINE 2848
                           A 11791    
002A5E 49012000            A 11792    	LD.LIS	BC,32
002A62 DD27FD              A 11793    	LD	HL,(IX+%FFFFFFFD)
002A65 B7                  A 11794    	OR	A,A
002A66 40ED42              A 11795    	SBC.SIS	HL,BC
002A69 28 0D               A 11796    	JR	Z,L_550
002A6B 49012E00            A 11797    	LD.LIS	BC,46
002A6F DD27FD              A 11798    	LD	HL,(IX+%FFFFFFFD)
002A72 B7                  A 11799    	OR	A,A
002A73 40ED42              A 11800    	SBC.SIS	HL,BC
002A76 20 12               A 11801    	JR	NZ,L_553
002A78                     A 11802    L_550:
                           A 11803    ; 2849			di--;
                           A 11804    .LINE 2849
                           A 11805    
002A78 DD07E3              A 11806    	LD	BC,(IX+%FFFFFFE3)
002A7B DD0FFA              A 11807    	LD	(IX+%FFFFFFFA),BC
                           A 11808    ; 2850		}
002A7E                     A 11809    L_551:
                           A 11810    .LINE 2850
                           A 11811    
002A7E 01000000            A 11812    	LD	BC,0
002A82 DD27FA              A 11813    	LD	HL,(IX+%FFFFFFFA)
002A85 B7                  A 11814    	OR	A,A
002A86 ED42                A 11815    	SBC	HL,BC
002A88 20 BB               A 11816    	JR	NZ,L_552
002A8A                     A 11817    L_553:
                           A 11818    ; 2851		lfn[di] = 0;						
                           A 11819    .LINE 2851
                           A 11820    
002A8A DD27FA              A 11821    	LD	HL,(IX+%FFFFFFFA)
002A8D 29                  A 11822    	ADD	HL,HL
002A8E DD07E9              A 11823    	LD	BC,(IX+%FFFFFFE9)
002A91 09                  A 11824    	ADD	HL,BC
002A92 3600                A 11825    	LD	(HL),%0
002A94 23                  A 11826    	INC	HL
002A95 3600                A 11827    	LD	(HL),%0
                           A 11828    ; 2852		if (di == 0) return FR_INVALID_NAME
                           A 11829    .LINE 2852
                           A 11830    
002A97 01000000            A 11831    	LD	BC,0
002A9B DD27FA              A 11832    	LD	HL,(IX+%FFFFFFFA)
002A9E B7                  A 11833    	OR	A,A
002A9F ED42                A 11834    	SBC	HL,BC
002AA1 20 08               A 11835    	JR	NZ,L_559
002AA3 21060000            A 11836    	LD	HL,6
002AA7 C3 FB 2D 00         A 11837    	JR	L_618
002AAB                     A 11838    L_559:
                           A 11839    ; 2853	
                           A 11840    ; 2854		/* Create SFN in directory form */
                           A 11841    ; 2855		for (si = 0; lfn[si] == ' '; si++) 
                           A 11842    .LINE 2855
                           A 11843    
002AAB DD0FF6              A 11844    	LD	(IX+%FFFFFFF6),BC
002AAE 18 07               A 11845    	JR	L_558
002AB0                     A 11846    L_556:
002AB0 DD07F6              A 11847    	LD	BC,(IX+%FFFFFFF6)
002AB3 03                  A 11848    	INC	BC
002AB4 DD0FF6              A 11849    	LD	(IX+%FFFFFFF6),BC
002AB7                     A 11850    L_558:
002AB7 DD27F6              A 11851    	LD	HL,(IX+%FFFFFFF6)
002ABA 29                  A 11852    	ADD	HL,HL
002ABB DD07E9              A 11853    	LD	BC,(IX+%FFFFFFE9)
002ABE 09                  A 11854    	ADD	HL,BC
002ABF DD2FE0              A 11855    	LD	(IX+%FFFFFFE0),HL
002AC2 ED07                A 11856    	LD	BC,(HL)
002AC4 CD 00 00 00         A 11857    	CALL	__stoiu
002AC8 01200000            A 11858    	LD	BC,32
002ACC B7                  A 11859    	OR	A,A
002ACD ED42                A 11860    	SBC	HL,BC
002ACF 28 DF               A 11861    	JR	Z,L_556
                           A 11862    ; 2856		if (si > 0 || lfn[si] == '.') cf |=
                           A 11863    .LINE 2856
                           A 11864    
002AD1 DD07F6              A 11865    	LD	BC,(IX+%FFFFFFF6)
002AD4 B7                  A 11866    	OR	A,A
002AD5 ED62                A 11867    	SBC	HL,HL
002AD7 B7                  A 11868    	OR	A,A
002AD8 ED42                A 11869    	SBC	HL,BC
002ADA 38 12               A 11870    	JR	C,L_561
002ADC DD27E0              A 11871    	LD	HL,(IX+%FFFFFFE0)
002ADF ED07                A 11872    	LD	BC,(HL)
002AE1 CD 00 00 00         A 11873    	CALL	__stoiu
002AE5 012E0000            A 11874    	LD	BC,46
002AE9 B7                  A 11875    	OR	A,A
002AEA ED42                A 11876    	SBC	HL,BC
002AEC 20 10               A 11877    	JR	NZ,L_565
002AEE                     A 11878    L_561:
002AEE DD7EFF              A 11879    	LD	A,(IX+%FFFFFFFF)
002AF1 F603                A 11880    	OR	A,%3
002AF3 DD77FF              A 11881    	LD	(IX+%FFFFFFFF),A
                           A 11882    ; 2857		while (di > 0 && lfn[di - 1] != '.'
                           A 11883    .LINE 2857
                           A 11884    
002AF6 18 06               A 11885    	JR	L_565
002AF8                     A 11886    L_566:
002AF8 DD07DD              A 11887    	LD	BC,(IX+%FFFFFFDD)
002AFB DD0FFA              A 11888    	LD	(IX+%FFFFFFFA),BC
002AFE                     A 11889    L_565:
002AFE DD07FA              A 11890    	LD	BC,(IX+%FFFFFFFA)
002B01 B7                  A 11891    	OR	A,A
002B02 ED62                A 11892    	SBC	HL,HL
002B04 B7                  A 11893    	OR	A,A
002B05 ED42                A 11894    	SBC	HL,BC
002B07 30 20               A 11895    	JR	NC,L_568
002B09 DD31FA              A 11896    	LD	IY,(IX+%FFFFFFFA)
002B0C ED33FF              A 11897    	LEA	IY,IY+%FFFFFFFF
002B0F DD3EDD              A 11898    	LD	(IX+%FFFFFFDD),IY
002B12 DD27DD              A 11899    	LD	HL,(IX+%FFFFFFDD)
002B15 29                  A 11900    	ADD	HL,HL
002B16 DD07E9              A 11901    	LD	BC,(IX+%FFFFFFE9)
002B19 09                  A 11902    	ADD	HL,BC
002B1A ED07                A 11903    	LD	BC,(HL)
002B1C CD 00 00 00         A 11904    	CALL	__stoiu
002B20 012E0000            A 11905    	LD	BC,46
002B24 B7                  A 11906    	OR	A,A
002B25 ED42                A 11907    	SBC	HL,BC
002B27 20 CF               A 11908    	JR	NZ,L_566
002B29                     A 11909    L_568:
                           A 11910    ; 2858	
                           A 11911    ; 2859		memset(dp->fn, ' ', 11);
                           A 11912    .LINE 2859
                           A 11913    
002B29 010B0000            A 11914    	LD	BC,11
002B2D C5                  A 11915    	PUSH	BC
002B2E 01200000            A 11916    	LD	BC,32
002B32 C5                  A 11917    	PUSH	BC
002B33 DD3106              A 11918    	LD	IY,(IX+%6)
002B36 ED661E              A 11919    	PEA	IY+%1E
002B39 CD 00 00 00         A 11920    	CALL	_memset
002B3D C1                  A 11921    	POP	BC
002B3E C1                  A 11922    	POP	BC
002B3F C1                  A 11923    	POP	BC
                           A 11924    ; 2860		i = b = 0; ni = 8;
                           A 11925    .LINE 2860
                           A 11926    
002B40 DD36F900            A 11927    	LD	(IX+%FFFFFFF9),%0
002B44 01000000            A 11928    	LD	BC,0
002B48 DD0FEF              A 11929    	LD	(IX+%FFFFFFEF),BC
002B4B 01080000            A 11930    	LD	BC,8
002B4F DD0FE6              A 11931    	LD	(IX+%FFFFFFE6),BC
                           A 11932    ; 2861		for (;;) {
002B52                     A 11933    L_603:
                           A 11934    .LINE 2861
                           A 11935    
                           A 11936    ; 2862			wc = lfn[si++];					
                           A 11937    .LINE 2862
                           A 11938    
002B52 DD27F6              A 11939    	LD	HL,(IX+%FFFFFFF6)
002B55 29                  A 11940    	ADD	HL,HL
002B56 DD07E9              A 11941    	LD	BC,(IX+%FFFFFFE9)
002B59 09                  A 11942    	ADD	HL,BC
002B5A ED07                A 11943    	LD	BC,(HL)
002B5C DD71FD              A 11944    	LD	(IX+%FFFFFFFD),C
002B5F DD70FE              A 11945    	LD	(IX+%FFFFFFFE),B
002B62 DD07F6              A 11946    	LD	BC,(IX+%FFFFFFF6)
002B65 03                  A 11947    	INC	BC
002B66 DD0FF6              A 11948    	LD	(IX+%FFFFFFF6),BC
                           A 11949    ; 2863			if (wc == 0) break;				
                           A 11950    .LINE 2863
                           A 11951    
002B69 49010000            A 11952    	LD.LIS	BC,0
002B6D DD27FD              A 11953    	LD	HL,(IX+%FFFFFFFD)
002B70 B7                  A 11954    	OR	A,A
002B71 40ED42              A 11955    	SBC.SIS	HL,BC
002B74 CA 75 2D 00         A 11956    	JR	Z,L_606
                           A 11957    ; 2864			if (wc == ' ' || (wc == '.' && 
                           A 11958    .LINE 2864
                           A 11959    
002B78 49012000            A 11960    	LD.LIS	BC,32
002B7C DD27FD              A 11961    	LD	HL,(IX+%FFFFFFFD)
002B7F B7                  A 11962    	OR	A,A
002B80 40ED42              A 11963    	SBC.SIS	HL,BC
002B83 28 18               A 11964    	JR	Z,L_573
002B85 49012E00            A 11965    	LD.LIS	BC,46
002B89 DD27FD              A 11966    	LD	HL,(IX+%FFFFFFFD)
002B8C B7                  A 11967    	OR	A,A
002B8D 40ED42              A 11968    	SBC.SIS	HL,BC
002B90 20 15               A 11969    	JR	NZ,L_583
002B92 DD07FA              A 11970    	LD	BC,(IX+%FFFFFFFA)
002B95 DD27F6              A 11971    	LD	HL,(IX+%FFFFFFF6)
002B98 B7                  A 11972    	OR	A,A
002B99 ED42                A 11973    	SBC	HL,BC
002B9B 28 0A               A 11974    	JR	Z,L_583
002B9D                     A 11975    L_573:
                           A 11976    ; 2865				cf |= NS_LOSS | NS_LFN;
                           A 11977    .LINE 2865
                           A 11978    
002B9D DD7EFF              A 11979    	LD	A,(IX+%FFFFFFFF)
002BA0 F603                A 11980    	OR	A,%3
002BA2 DD77FF              A 11981    	LD	(IX+%FFFFFFFF),A
                           A 11982    ; 2866				continue;
                           A 11983    .LINE 2866
                           A 11984    
002BA5 18 AB               A 11985    	JR	L_603
                           A 11986    ; 2867			}
002BA7                     A 11987    L_583:
                           A 11988    .LINE 2867
                           A 11989    
                           A 11990    ; 2868	
                           A 11991    ; 2869			if (i >= ni || si == di) {		
                           A 11992    .LINE 2869
                           A 11993    
002BA7 DD07E6              A 11994    	LD	BC,(IX+%FFFFFFE6)
002BAA DD27EF              A 11995    	LD	HL,(IX+%FFFFFFEF)
002BAD B7                  A 11996    	OR	A,A
002BAE ED42                A 11997    	SBC	HL,BC
002BB0 30 0B               A 11998    	JR	NC,L_582
002BB2 DD07FA              A 11999    	LD	BC,(IX+%FFFFFFFA)
002BB5 DD27F6              A 12000    	LD	HL,(IX+%FFFFFFF6)
002BB8 B7                  A 12001    	OR	A,A
002BB9 ED42                A 12002    	SBC	HL,BC
002BBB 20 58               A 12003    	JR	NZ,L_586
002BBD                     A 12004    L_582:
                           A 12005    ; 2870				if (ni == 11) {				
                           A 12006    .LINE 2870
                           A 12007    
002BBD 010B0000            A 12008    	LD	BC,11
002BC1 DD27E6              A 12009    	LD	HL,(IX+%FFFFFFE6)
002BC4 B7                  A 12010    	OR	A,A
002BC5 ED42                A 12011    	SBC	HL,BC
002BC7 20 0C               A 12012    	JR	NZ,L_578
                           A 12013    ; 2871					cf |= NS_LOSS | NS_LFN;
                           A 12014    .LINE 2871
                           A 12015    
002BC9 DD7EFF              A 12016    	LD	A,(IX+%FFFFFFFF)
002BCC F603                A 12017    	OR	A,%3
002BCE DD77FF              A 12018    	LD	(IX+%FFFFFFFF),A
                           A 12019    ; 2872					break;
                           A 12020    .LINE 2872
                           A 12021    
002BD1 C3 75 2D 00         A 12022    	JR	L_606
                           A 12023    ; 2873				}
002BD5                     A 12024    L_578:
                           A 12025    .LINE 2873
                           A 12026    
                           A 12027    ; 2874				if (si != di) cf |= NS_LOSS
                           A 12028    .LINE 2874
                           A 12029    
002BD5 DD07FA              A 12030    	LD	BC,(IX+%FFFFFFFA)
002BD8 DD27F6              A 12031    	LD	HL,(IX+%FFFFFFF6)
002BDB B7                  A 12032    	OR	A,A
002BDC ED42                A 12033    	SBC	HL,BC
002BDE 28 08               A 12034    	JR	Z,L_580
002BE0 DD7EFF              A 12035    	LD	A,(IX+%FFFFFFFF)
002BE3 F603                A 12036    	OR	A,%3
002BE5 DD77FF              A 12037    	LD	(IX+%FFFFFFFF),A
002BE8                     A 12038    L_580:
                           A 12039    ; 2875				if (si > di) break;			
                           A 12040    .LINE 2875
                           A 12041    
002BE8 DD07F6              A 12042    	LD	BC,(IX+%FFFFFFF6)
002BEB DD27FA              A 12043    	LD	HL,(IX+%FFFFFFFA)
002BEE B7                  A 12044    	OR	A,A
002BEF ED42                A 12045    	SBC	HL,BC
002BF1 DA 75 2D 00         A 12046    	JR	C,L_606
                           A 12047    ; 2876				si = di; i = 8; ni = 11; b 
                           A 12048    .LINE 2876
                           A 12049    
002BF5 DD07FA              A 12050    	LD	BC,(IX+%FFFFFFFA)
002BF8 DD0FF6              A 12051    	LD	(IX+%FFFFFFF6),BC
002BFB 01080000            A 12052    	LD	BC,8
002BFF DD0FEF              A 12053    	LD	(IX+%FFFFFFEF),BC
002C02 010B0000            A 12054    	LD	BC,11
002C06 DD0FE6              A 12055    	LD	(IX+%FFFFFFE6),BC
002C09 DD7EF9              A 12056    	LD	A,(IX+%FFFFFFF9)
002C0C 87                  A 12057    	ADD	A,A
002C0D 87                  A 12058    	ADD	A,A
002C0E DD77F9              A 12059    	LD	(IX+%FFFFFFF9),A
                           A 12060    ; 2877				continue;
                           A 12061    .LINE 2877
                           A 12062    
002C11 C3 52 2B 00         A 12063    	JR	L_603
                           A 12064    ; 2878			}
002C15                     A 12065    L_586:
                           A 12066    .LINE 2878
                           A 12067    
                           A 12068    ; 2879	
                           A 12069    ; 2880			if (wc >= 0x80) {	/* Is this 
                           A 12070    .LINE 2880
                           A 12071    
002C15 49018000            A 12072    	LD.LIS	BC,128
002C19 DD27FD              A 12073    	LD	HL,(IX+%FFFFFFFD)
002C1C B7                  A 12074    	OR	A,A
002C1D 40ED42              A 12075    	SBC.SIS	HL,BC
002C20 38 55               A 12076    	JR	C,L_600
                           A 12077    ; 2881				cf |= NS_LFN;	/* LFN entr
                           A 12078    .LINE 2881
                           A 12079    
002C22 DD7EFF              A 12080    	LD	A,(IX+%FFFFFFFF)
002C25 CBCF                A 12081    	SET	%1,A
002C27 DD77FF              A 12082    	LD	(IX+%FFFFFFFF),A
                           A 12083    ; 2882	#if FF_CODE_PAGE == 0
                           A 12084    ; 2883				if (ExCvt) {	/* In SBCS 
                           A 12085    ; 2884					wc = ff_uni2oem(wc, COD
                           A 12086    ; 2885					if (wc & 0x80) wc = ExC
                           A 12087    ; 2886				} else {		/* In DBCS 
                           A 12088    ; 2887					wc = ff_uni2oem(ff_wtou
                           A 12089    ; 2888				}
                           A 12090    ; 2889	#elif FF_CODE_PAGE < 900	/* In SBCS 
                           A 12091    ; 2890				wc = ff_uni2oem(wc, CODEPAG
                           A 12092    .LINE 2890
                           A 12093    
002C2A 01B50100            A 12094    	LD	BC,437
002C2E C5                  A 12095    	PUSH	BC
002C2F DD07FD              A 12096    	LD	BC,(IX+%FFFFFFFD)
002C32 CD 00 00 00         A 12097    	CALL	__stoiu
002C36 0E00                A 12098    	LD	C,%0
002C38 0600                A 12099    	LD	B,%0
002C3A C5                  A 12100    	PUSH	BC
002C3B E5                  A 12101    	PUSH	HL
002C3C CD 00 00 00         A 12102    	CALL	_ff_uni2oem
002C40 C1                  A 12103    	POP	BC
002C41 C1                  A 12104    	POP	BC
002C42 C1                  A 12105    	POP	BC
002C43 DD75FD              A 12106    	LD	(IX+%FFFFFFFD),L
002C46 DD74FE              A 12107    	LD	(IX+%FFFFFFFE),H
                           A 12108    ; 2891				if (wc & 0x80) wc = ExCvt[w
                           A 12109    .LINE 2891
                           A 12110    
002C49 DD7EFD              A 12111    	LD	A,(IX+%FFFFFFFD)
002C4C E680                A 12112    	AND	A,%80
002C4E 4F                  A 12113    	LD	C,A
002C4F 0600                A 12114    	LD	B,%0
002C51 49110000            A 12115    	LD.LIS	DE,0
002C55 C5E1                A 12116    	LD	HL,BC
002C57 B7                  A 12117    	OR	A,A
002C58 40ED52              A 12118    	SBC.SIS	HL,DE
002C5B 28 1A               A 12119    	JR	Z,L_600
002C5D DD7EFD              A 12120    	LD	A,(IX+%FFFFFFFD)
002C60 CBBF                A 12121    	RES	%7,A
002C62 4F                  A 12122    	LD	C,A
002C63 CD 00 00 00         A 12123    	CALL	__stoiu
002C67 01 0D 00 00         A 12124    	LD	BC,_ExCvt
002C6B 09                  A 12125    	ADD	HL,BC
002C6C 4E                  A 12126    	LD	C,(HL)
002C6D 0600                A 12127    	LD	B,%0
002C6F C5E1                A 12128    	LD	HL,BC
002C71 DD75FD              A 12129    	LD	(IX+%FFFFFFFD),L
002C74 DD74FE              A 12130    	LD	(IX+%FFFFFFFE),H
                           A 12131    ; 2892	#else						/* In DBCS 
                           A 12132    ; 2893				wc = ff_uni2oem(ff_wtoupper
                           A 12133    ; 2894	#endif
                           A 12134    ; 2895			}
002C77                     A 12135    L_600:
                           A 12136    .LINE 2895
                           A 12137    
                           A 12138    ; 2896	
                           A 12139    ; 2897			if (wc >= 0x100) {				
                           A 12140    .LINE 2897
                           A 12141    
002C77 49010001            A 12142    	LD.LIS	BC,256
002C7B DD27FD              A 12143    	LD	HL,(IX+%FFFFFFFD)
002C7E B7                  A 12144    	OR	A,A
002C7F 40ED42              A 12145    	SBC.SIS	HL,BC
002C82 38 4D               A 12146    	JR	C,L_599
                           A 12147    ; 2898				if (i >= ni - 1) {			
                           A 12148    .LINE 2898
                           A 12149    
002C84 DD31E6              A 12150    	LD	IY,(IX+%FFFFFFE6)
002C87 ED03FF              A 12151    	LEA	BC,IY+%FFFFFFFF
002C8A DD27EF              A 12152    	LD	HL,(IX+%FFFFFFEF)
002C8D B7                  A 12153    	OR	A,A
002C8E ED42                A 12154    	SBC	HL,BC
002C90 38 12               A 12155    	JR	C,L_589
                           A 12156    ; 2899					cf |= NS_LOSS | NS_LFN;
                           A 12157    .LINE 2899
                           A 12158    
002C92 DD7EFF              A 12159    	LD	A,(IX+%FFFFFFFF)
002C95 F603                A 12160    	OR	A,%3
002C97 DD77FF              A 12161    	LD	(IX+%FFFFFFFF),A
                           A 12162    ; 2900					i = ni; continue;		
                           A 12163    .LINE 2900
                           A 12164    
002C9A DD07E6              A 12165    	LD	BC,(IX+%FFFFFFE6)
002C9D DD0FEF              A 12166    	LD	(IX+%FFFFFFEF),BC
002CA0 C3 52 2B 00         A 12167    	JR	L_603
                           A 12168    ; 2901				}
002CA4                     A 12169    L_589:
                           A 12170    .LINE 2901
                           A 12171    
                           A 12172    ; 2902				dp->fn[i++] = (BYTE)(wc >> 
                           A 12173    .LINE 2902
                           A 12174    
002CA4 DD17EF              A 12175    	LD	DE,(IX+%FFFFFFEF)
002CA7 DD07FD              A 12176    	LD	BC,(IX+%FFFFFFFD)
002CAA CD 00 00 00         A 12177    	CALL	__stoiu
002CAE E5C1                A 12178    	LD	BC,HL
002CB0 3B                  A 12179    	DEC	SP
002CB1 C5                  A 12180    	PUSH	BC
002CB2 33                  A 12181    	INC	SP
002CB3 F1                  A 12182    	POP	AF
002CB4 17ED62              A 12183    	SEXT	HL
002CB7 E5                  A 12184    	PUSH	HL
002CB8 C5                  A 12185    	PUSH	BC
002CB9 33                  A 12186    	INC	SP
002CBA E1                  A 12187    	POP	HL
002CBB 33                  A 12188    	INC	SP
002CBC 33                  A 12189    	INC	SP
002CBD 7D                  A 12190    	LD	A,L
002CBE DD3106              A 12191    	LD	IY,(IX+%6)
002CC1 ED231E              A 12192    	LEA	HL,IY+%1E
002CC4 19                  A 12193    	ADD	HL,DE
002CC5 77                  A 12194    	LD	(HL),A
002CC6 DD07EF              A 12195    	LD	BC,(IX+%FFFFFFEF)
002CC9 03                  A 12196    	INC	BC
002CCA DD0FEF              A 12197    	LD	(IX+%FFFFFFEF),BC
                           A 12198    ; 2903			} else {						
                           A 12199    .LINE 2903
                           A 12200    
002CCD C3 5C 2D 00         A 12201    	JR	L_602
002CD1                     A 12202    L_599:
                           A 12203    ; 2904				if (wc == 0 || strchr("+,;=
                           A 12204    .LINE 2904
                           A 12205    
002CD1 49010000            A 12206    	LD.LIS	BC,0
002CD5 DD27FD              A 12207    	LD	HL,(IX+%FFFFFFFD)
002CD8 B7                  A 12208    	OR	A,A
002CD9 40ED42              A 12209    	SBC.SIS	HL,BC
002CDC 28 1C               A 12210    	JR	Z,L_596
002CDE DD07FD              A 12211    	LD	BC,(IX+%FFFFFFFD)
002CE1 CD 00 00 00         A 12212    	CALL	__stoiu
002CE5 E5                  A 12213    	PUSH	HL
002CE6 01 09 00 00         A 12214    	LD	BC,L__304
002CEA C5                  A 12215    	PUSH	BC
002CEB CD 00 00 00         A 12216    	CALL	_strchr
002CEF C1                  A 12217    	POP	BC
002CF0 C1                  A 12218    	POP	BC
002CF1 01000000            A 12219    	LD	BC,0
002CF5 B7                  A 12220    	OR	A,A
002CF6 ED42                A 12221    	SBC	HL,BC
002CF8 28 12               A 12222    	JR	Z,L_597
002CFA                     A 12223    L_596:
                           A 12224    ; 2905					wc = '_'; cf |= NS_LOSS
                           A 12225    .LINE 2905
                           A 12226    
002CFA DD36FD5F            A 12227    	LD	(IX+%FFFFFFFD),%5F
002CFE DD36FE00            A 12228    	LD	(IX+%FFFFFFFE),%0
002D02 DD7EFF              A 12229    	LD	A,(IX+%FFFFFFFF)
002D05 F603                A 12230    	OR	A,%3
002D07 DD77FF              A 12231    	LD	(IX+%FFFFFFFF),A
                           A 12232    ; 2906				} else {
                           A 12233    .LINE 2906
                           A 12234    
002D0A 18 50               A 12235    	JR	L_602
002D0C                     A 12236    L_597:
                           A 12237    ; 2907					if (IsUpper(wc)) {		
                           A 12238    .LINE 2907
                           A 12239    
002D0C 49014100            A 12240    	LD.LIS	BC,65
002D10 DD27FD              A 12241    	LD	HL,(IX+%FFFFFFFD)
002D13 B7                  A 12242    	OR	A,A
002D14 40ED42              A 12243    	SBC.SIS	HL,BC
002D17 38 15               A 12244    	JR	C,L_595
002D19 DD07FD              A 12245    	LD	BC,(IX+%FFFFFFFD)
002D1C 49215A00            A 12246    	LD.LIS	HL,90
002D20 B7                  A 12247    	OR	A,A
002D21 40ED42              A 12248    	SBC.SIS	HL,BC
002D24 38 08               A 12249    	JR	C,L_595
                           A 12250    ; 2908						b |= 2;
                           A 12251    .LINE 2908
                           A 12252    
002D26 DD7EF9              A 12253    	LD	A,(IX+%FFFFFFF9)
002D29 CBCF                A 12254    	SET	%1,A
002D2B DD77F9              A 12255    	LD	(IX+%FFFFFFF9),A
                           A 12256    ; 2909					}
002D2E                     A 12257    L_595:
                           A 12258    .LINE 2909
                           A 12259    
                           A 12260    ; 2910					if (IsLower(wc)) {		
                           A 12261    .LINE 2910
                           A 12262    
002D2E 49016100            A 12263    	LD.LIS	BC,97
002D32 DD27FD              A 12264    	LD	HL,(IX+%FFFFFFFD)
002D35 B7                  A 12265    	OR	A,A
002D36 40ED42              A 12266    	SBC.SIS	HL,BC
002D39 38 21               A 12267    	JR	C,L_602
002D3B DD07FD              A 12268    	LD	BC,(IX+%FFFFFFFD)
002D3E 49217A00            A 12269    	LD.LIS	HL,122
002D42 B7                  A 12270    	OR	A,A
002D43 40ED42              A 12271    	SBC.SIS	HL,BC
002D46 38 14               A 12272    	JR	C,L_602
                           A 12273    ; 2911						b |= 1; wc -= 0x20;
                           A 12274    .LINE 2911
                           A 12275    
002D48 DD7EF9              A 12276    	LD	A,(IX+%FFFFFFF9)
002D4B CBC7                A 12277    	SET	%0,A
002D4D DD77F9              A 12278    	LD	(IX+%FFFFFFF9),A
002D50 DD31FD              A 12279    	LD	IY,(IX+%FFFFFFFD)
002D53 ED23E0              A 12280    	LEA	HL,IY+%FFFFFFE0
002D56 DD75FD              A 12281    	LD	(IX+%FFFFFFFD),L
002D59 DD74FE              A 12282    	LD	(IX+%FFFFFFFE),H
                           A 12283    ; 2912					}
                           A 12284    ; 2913				}
                           A 12285    ; 2914			}
002D5C                     A 12286    L_602:
                           A 12287    .LINE 2914
                           A 12288    
                           A 12289    ; 2915			dp->fn[i++] = (BYTE)wc;
                           A 12290    .LINE 2915
                           A 12291    
002D5C DD7EFD              A 12292    	LD	A,(IX+%FFFFFFFD)
002D5F DD07EF              A 12293    	LD	BC,(IX+%FFFFFFEF)
002D62 DD3106              A 12294    	LD	IY,(IX+%6)
002D65 ED231E              A 12295    	LEA	HL,IY+%1E
002D68 09                  A 12296    	ADD	HL,BC
002D69 77                  A 12297    	LD	(HL),A
002D6A DD07EF              A 12298    	LD	BC,(IX+%FFFFFFEF)
002D6D 03                  A 12299    	INC	BC
002D6E DD0FEF              A 12300    	LD	(IX+%FFFFFFEF),BC
                           A 12301    ; 2916		}
                           A 12302    .LINE 2916
                           A 12303    
002D71 C3 52 2B 00         A 12304    	JR	L_603
002D75                     A 12305    L_606:
                           A 12306    ; 2917	
                           A 12307    ; 2918		if (dp->fn[0] == DDEM) dp->fn[0] = 
                           A 12308    .LINE 2918
                           A 12309    
002D75 DD3106              A 12310    	LD	IY,(IX+%6)
002D78 ED031E              A 12311    	LEA	BC,IY+%1E
002D7B DD0FDA              A 12312    	LD	(IX+%FFFFFFDA),BC
002D7E FD7E1E              A 12313    	LD	A,(IY+%1E)
002D81 B7ED62              A 12314    	UEXT	HL
002D84 6F                  A 12315    	LD	L,A
002D85 01E50000            A 12316    	LD	BC,229
002D89 B7                  A 12317    	OR	A,A
002D8A ED42                A 12318    	SBC	HL,BC
002D8C 20 0D               A 12319    	JR	NZ,L_608
002D8E DD3106              A 12320    	LD	IY,(IX+%6)
002D91 ED031E              A 12321    	LEA	BC,IY+%1E
002D94 DD0FDA              A 12322    	LD	(IX+%FFFFFFDA),BC
002D97 FD361E05            A 12323    	LD	(IY+%1E),%5
002D9B                     A 12324    L_608:
                           A 12325    ; 2919	
                           A 12326    ; 2920		if (ni == 8) b <<= 2;				
                           A 12327    .LINE 2920
                           A 12328    
002D9B 01080000            A 12329    	LD	BC,8
002D9F DD27E6              A 12330    	LD	HL,(IX+%FFFFFFE6)
002DA2 B7                  A 12331    	OR	A,A
002DA3 ED42                A 12332    	SBC	HL,BC
002DA5 20 08               A 12333    	JR	NZ,L_611
002DA7 DD7EF9              A 12334    	LD	A,(IX+%FFFFFFF9)
002DAA 87                  A 12335    	ADD	A,A
002DAB 87                  A 12336    	ADD	A,A
002DAC DD77F9              A 12337    	LD	(IX+%FFFFFFF9),A
002DAF                     A 12338    L_611:
                           A 12339    ; 2921		if ((b & 0x0C) == 0x0C || (b & 0x03
                           A 12340    .LINE 2921
                           A 12341    
002DAF DD7EF9              A 12342    	LD	A,(IX+%FFFFFFF9)
002DB2 E60C                A 12343    	AND	A,%C
002DB4 FE0C                A 12344    	CP	A,%C
002DB6 28 09               A 12345    	JR	Z,L_610
002DB8 DD7EF9              A 12346    	LD	A,(IX+%FFFFFFF9)
002DBB E603                A 12347    	AND	A,%3
002DBD FE03                A 12348    	CP	A,%3
002DBF 20 08               A 12349    	JR	NZ,L_616
002DC1                     A 12350    L_610:
002DC1 DD7EFF              A 12351    	LD	A,(IX+%FFFFFFFF)
002DC4 CBCF                A 12352    	SET	%1,A
002DC6 DD77FF              A 12353    	LD	(IX+%FFFFFFFF),A
002DC9                     A 12354    L_616:
                           A 12355    ; 2922		if (!(cf & NS_LFN)) {				
                           A 12356    .LINE 2922
                           A 12357    
002DC9 DD7EFF              A 12358    	LD	A,(IX+%FFFFFFFF)
002DCC E602                A 12359    	AND	A,%2
002DCE 20 1E               A 12360    	JR	NZ,L_617
                           A 12361    ; 2923			if (b & 0x01) cf |= NS_EXT;		
                           A 12362    .LINE 2923
                           A 12363    
002DD0 DD7EF9              A 12364    	LD	A,(IX+%FFFFFFF9)
002DD3 E601                A 12365    	AND	A,%1
002DD5 28 08               A 12366    	JR	Z,L_614
002DD7 DD7EFF              A 12367    	LD	A,(IX+%FFFFFFFF)
002DDA CBE7                A 12368    	SET	%4,A
002DDC DD77FF              A 12369    	LD	(IX+%FFFFFFFF),A
002DDF                     A 12370    L_614:
                           A 12371    ; 2924			if (b & 0x04) cf |= NS_BODY;	
                           A 12372    .LINE 2924
                           A 12373    
002DDF DD7EF9              A 12374    	LD	A,(IX+%FFFFFFF9)
002DE2 E604                A 12375    	AND	A,%4
002DE4 28 08               A 12376    	JR	Z,L_617
002DE6 DD7EFF              A 12377    	LD	A,(IX+%FFFFFFFF)
002DE9 CBDF                A 12378    	SET	%3,A
002DEB DD77FF              A 12379    	LD	(IX+%FFFFFFFF),A
                           A 12380    ; 2925		}
002DEE                     A 12381    L_617:
                           A 12382    .LINE 2925
                           A 12383    
                           A 12384    ; 2926	
                           A 12385    ; 2927		dp->fn[NSFLAG] = cf;	/* SFN is c
                           A 12386    .LINE 2927
                           A 12387    
002DEE DD31DA              A 12388    	LD	IY,(IX+%FFFFFFDA)
002DF1 ED230B              A 12389    	LEA	HL,IY+%B
002DF4 DD7EFF              A 12390    	LD	A,(IX+%FFFFFFFF)
002DF7 77                  A 12391    	LD	(HL),A
                           A 12392    ; 2928	
                           A 12393    ; 2929		return FR_OK;
                           A 12394    .LINE 2929
                           A 12395    
002DF8 B7                  A 12396    	OR	A,A
002DF9 ED62                A 12397    	SBC	HL,HL
                           A 12398    ; 2930	
                           A 12399    ; 2931	
                           A 12400    ; 2932	#else	/* FF_USE_LFN : Non-LFN configu
                           A 12401    ; 2933		BYTE c, d, *sfn;
                           A 12402    ; 2934		UINT ni, si, i;
                           A 12403    ; 2935		const char *p;
                           A 12404    ; 2936	
                           A 12405    ; 2937		/* Create file name in directory fo
                           A 12406    ; 2938		p = *path; sfn = dp->fn;
                           A 12407    ; 2939		memset(sfn, ' ', 11);
                           A 12408    ; 2940		si = i = 0; ni = 8;
                           A 12409    ; 2941	#if FF_FS_RPATH != 0
                           A 12410    ; 2942		if (p[si] == '.') { /* Is this a do
                           A 12411    ; 2943			for (;;) {
                           A 12412    ; 2944				c = (BYTE)p[si++];
                           A 12413    ; 2945				if (c != '.' || si >= 3) br
                           A 12414    ; 2946				sfn[i++] = c;
                           A 12415    ; 2947			}
                           A 12416    ; 2948			if (!IsSeparator(c) && c > ' ')
                           A 12417    ; 2949			*path = p + si;					
                           A 12418    ; 2950			sfn[NSFLAG] = (c <= ' ') ? NS_L
                           A 12419    ; 2951			return FR_OK;
                           A 12420    ; 2952		}
                           A 12421    ; 2953	#endif
                           A 12422    ; 2954		for (;;) {
                           A 12423    ; 2955			c = (BYTE)p[si++];				
                           A 12424    ; 2956			if (c <= ' ') break; 			
                           A 12425    ; 2957			if (IsSeparator(c)) {			
                           A 12426    ; 2958				while (IsSeparator(p[si])) 
                           A 12427    ; 2959				break;
                           A 12428    ; 2960			}
                           A 12429    ; 2961			if (c == '.' || i >= ni) {		
                           A 12430    ; 2962				if (ni == 11 || c != '.') r
                           A 12431    ; 2963				i = 8; ni = 11;				
                           A 12432    ; 2964				continue;
                           A 12433    ; 2965			}
                           A 12434    ; 2966	#if FF_CODE_PAGE == 0
                           A 12435    ; 2967			if (ExCvt && c >= 0x80) {		
                           A 12436    ; 2968				c = ExCvt[c & 0x7F];		
                           A 12437    ; 2969			}
                           A 12438    ; 2970	#elif FF_CODE_PAGE < 900
                           A 12439    ; 2971			if (c >= 0x80) {				
                           A 12440    ; 2972				c = ExCvt[c & 0x7F];		
                           A 12441    ; 2973			}
                           A 12442    ; 2974	#endif
                           A 12443    ; 2975			if (dbc_1st(c)) {				
                           A 12444    ; 2976				d = (BYTE)p[si++];			
                           A 12445    ; 2977				if (!dbc_2nd(d) || i >= ni 
                           A 12446    ; 2978				sfn[i++] = c;
                           A 12447    ; 2979				sfn[i++] = d;
                           A 12448    ; 2980			} else {						
                           A 12449    ; 2981				if (strchr("*+,:;<=>[]|\"\?
                           A 12450    ; 2982				if (IsLower(c)) c -= 0x20;	
                           A 12451    ; 2983				sfn[i++] = c;
                           A 12452    ; 2984			}
                           A 12453    ; 2985		}
                           A 12454    ; 2986		*path = &p[si];						
                           A 12455    ; 2987		if (i == 0) return FR_INVALID_NAME;
                           A 12456    ; 2988	
                           A 12457    ; 2989		if (sfn[0] == DDEM) sfn[0] = RDDEM;
                           A 12458    ; 2990		sfn[NSFLAG] = (c <= ' ' || p[si] <=
                           A 12459    ; 2991	
                           A 12460    ; 2992		return FR_OK;
                           A 12461    ; 2993	#endif /* FF_USE_LFN */
                           A 12462    ; 2994	}
002DFB                     A 12463    L_618:
                           A 12464    .LINE 2994
                           A 12465    
002DFB DDF9                A 12466    	LD	SP,IX
002DFD DDE1                A 12467    	POP	IX
002DFF C9                  A 12468    	RET	
                           A 12469    
                           A 12470    
                           A 12471    ;**************************** _create_name ****
                           A 12472    ;Name                         Addr/Register   S
                           A 12473    ;_ExCvt                              STATIC    
                           A 12474    ;_ff_uni2oem                         IMPORT  --
                           A 12475    ;_memset                             IMPORT  --
                           A 12476    ;_strchr                             IMPORT  --
                           A 12477    ;G_34                                 IX-38    
                           A 12478    ;G_32                                 IX-35    
                           A 12479    ;G_31                                 IX-32    
                           A 12480    ;G_30                                 IX-29    
                           A 12481    ;ni                                   IX-26    
                           A 12482    ;lfn                                  IX-23    
                           A 12483    ;p                                    IX-20    
                           A 12484    ;i                                    IX-17    
                           A 12485    ;uc                                   IX-14    
                           A 12486    ;si                                   IX-10    
                           A 12487    ;b                                     IX-7    
                           A 12488    ;di                                    IX-6    
                           A 12489    ;wc                                    IX-3    
                           A 12490    ;cf                                    IX-1    
                           A 12491    ;path                                  IX+9    
                           A 12492    ;dp                                    IX+6    
                           A 12493    
                           A 12494    
                           A 12495    ; Stack Frame Size: 53 (bytes)
                           A 12496    ;       Spill Code: -2 (instruction)
                           A 12497    
                           A 12498    
                           A 12499    .ENDFUNC "create_name",2994,"_create_name"
                           A 12500    	SEGMENT STRSECT
000000                     A 12501    L__274:
000000 2A3A3C3E 7C223F     A 12502    	DB	"*:<>|\"?"
000007 7F00                A 12503    	DB	127,0
000009                     A 12504    L__304:
000009 2B2C3B3D 5B5D       A 12505    	DB	"+,;=[]"
00000F 00                  A 12506    	DB	0
                           A 12507    	SEGMENT CODE
                           A 12508    ; 2995	
                           A 12509    ; 2996	
                           A 12510    ; 2997	
                           A 12511    ; 2998	
                           A 12512    ; 2999	/*-------------------------------------
                           A 12513    ; 3000	/* Follow a file path                  
                           A 12514    ; 3001	/*-------------------------------------
                           A 12515    ; 3002	
                           A 12516    ; 3003	static FRESULT follow_path (	/* FR_O
                           A 12517    ; 3004		DIR* dp,					/* Dire
                           A 12518    ; 3005		const TCHAR* path			/* Full
                           A 12519    ; 3006	)
                           A 12520    ; 3007	{
002E00                     A 12521    _follow_path:
                           A 12522    .DEFINE "_follow_path"
                           A 12523    
                           A 12524    .VALUE _follow_path
                           A 12525    
                           A 12526    .CLASS 3
                           A 12527    
                           A 12528    .TYPE 68
                           A 12529    
                           A 12530    .ENDEF
                           A 12531    
                           A 12532    .BEGFUNC "follow_path",3007,"_follow_path"
                           A 12533    
                           A 12534    .LINE 3007
                           A 12535    
                           A 12536    .DEFINE "dp"
                           A 12537    
                           A 12538    .CLASS 65
                           A 12539    
                           A 12540    .VALUE 6
                           A 12541    
                           A 12542    .TAG "NONAME3"
                           A 12543    
                           A 12544    .TYPE 40
                           A 12545    
                           A 12546    .ENDEF
                           A 12547    
                           A 12548    .DEFINE "path"
                           A 12549    
                           A 12550    .CLASS 65
                           A 12551    
                           A 12552    .VALUE 9
                           A 12553    
                           A 12554    .TYPE 194
                           A 12555    
                           A 12556    .ENDEF
                           A 12557    
                           A 12558    .DEFINE "res"
                           A 12559    
                           A 12560    .CLASS 65
                           A 12561    
                           A 12562    .VALUE -3
                           A 12563    
                           A 12564    .TYPE 4
                           A 12565    
                           A 12566    .ENDEF
                           A 12567    
                           A 12568    .DEFINE "ns"
                           A 12569    
                           A 12570    .CLASS 65
                           A 12571    
                           A 12572    .VALUE -4
                           A 12573    
                           A 12574    .TYPE 12
                           A 12575    
                           A 12576    .ENDEF
                           A 12577    
                           A 12578    .DEFINE "fs"
                           A 12579    
                           A 12580    .CLASS 65
                           A 12581    
                           A 12582    .VALUE -7
                           A 12583    
                           A 12584    .TAG "NONAME0"
                           A 12585    
                           A 12586    .TYPE 40
                           A 12587    
                           A 12588    .ENDEF
                           A 12589    
002E00 DDE5                A 12590    	PUSH	IX
002E02 DD210000 00         A 12591    	LD	IX,0
002E07 DD39                A 12592    	ADD	IX,SP
002E09 C5                  A 12593    	PUSH	BC
002E0A C5                  A 12594    	PUSH	BC
002E0B C5                  A 12595    	PUSH	BC
002E0C 3B                  A 12596    	DEC	SP
                           A 12597    ; 3008		FRESULT res;
                           A 12598    ; 3009		BYTE ns;
                           A 12599    ; 3010		FATFS *fs = dp->obj.fs;
                           A 12600    .LINE 3010
                           A 12601    
002E0D DD3106              A 12602    	LD	IY,(IX+%6)
002E10 FD0700              A 12603    	LD	BC,(IY+%0)
002E13 DD0FF9              A 12604    	LD	(IX+%FFFFFFF9),BC
                           A 12605    ; 3011	
                           A 12606    ; 3012	
                           A 12607    ; 3013	#if FF_FS_RPATH != 0
                           A 12608    ; 3014		if (!IsSeparator(*path) && (FF_STR_
                           A 12609    ; 3015			dp->obj.sclust = fs->cdir;		
                           A 12610    ; 3016		} else
                           A 12611    ; 3017	#endif
                           A 12612    ; 3018		{									
                           A 12613    ; 3019			while (IsSeparator(*path)) path
                           A 12614    .LINE 3019
                           A 12615    
002E16 18 0D               A 12616    	JR	L_621
002E18                     A 12617    L_622:
002E18 DD0709              A 12618    	LD	BC,(IX+%9)
002E1B DD0FF6              A 12619    	LD	(IX+%FFFFFFF6),BC
002E1E DD0709              A 12620    	LD	BC,(IX+%9)
002E21 03                  A 12621    	INC	BC
002E22 DD0F09              A 12622    	LD	(IX+%9),BC
002E25                     A 12623    L_621:
002E25 DD2709              A 12624    	LD	HL,(IX+%9)
002E28 7E                  A 12625    	LD	A,(HL)
002E29 47                  A 12626    	LD	B,A
002E2A 17ED62              A 12627    	SEXT	HL
002E2D 68                  A 12628    	LD	L,B
002E2E 012F0000            A 12629    	LD	BC,47
002E32 B7                  A 12630    	OR	A,A
002E33 ED42                A 12631    	SBC	HL,BC
002E35 28 E1               A 12632    	JR	Z,L_622
002E37 DD2709              A 12633    	LD	HL,(IX+%9)
002E3A 7E                  A 12634    	LD	A,(HL)
002E3B 47                  A 12635    	LD	B,A
002E3C 17ED62              A 12636    	SEXT	HL
002E3F 68                  A 12637    	LD	L,B
002E40 015C0000            A 12638    	LD	BC,92
002E44 B7                  A 12639    	OR	A,A
002E45 ED42                A 12640    	SBC	HL,BC
002E47 28 CF               A 12641    	JR	Z,L_622
                           A 12642    ; 3020			dp->obj.sclust = 0;				
                           A 12643    .LINE 3020
                           A 12644    
002E49 01000000            A 12645    	LD	BC,0
002E4D DD3106              A 12646    	LD	IY,(IX+%6)
002E50 FD0F07              A 12647    	LD	(IY+%7),BC
002E53 FD360A00            A 12648    	LD	(IY+%A),%0
                           A 12649    ; 3021		}
                           A 12650    ; 3022	#if FF_FS_EXFAT
                           A 12651    ; 3023		dp->obj.n_frag = 0;	/* Invalidate l
                           A 12652    ; 3024	#if FF_FS_RPATH != 0
                           A 12653    ; 3025		if (fs->fs_type == FS_EXFAT && dp->
                           A 12654    ; 3026			DIR dj;
                           A 12655    ; 3027	
                           A 12656    ; 3028			dp->obj.c_scl = fs->cdc_scl;
                           A 12657    ; 3029			dp->obj.c_size = fs->cdc_size;
                           A 12658    ; 3030			dp->obj.c_ofs = fs->cdc_ofs;
                           A 12659    ; 3031			res = load_obj_xdir(&dj, &dp->o
                           A 12660    ; 3032			if (res != FR_OK) return res;
                           A 12661    ; 3033			dp->obj.objsize = ld_dword(fs->
                           A 12662    ; 3034			dp->obj.stat = fs->dirbuf[XDIR_
                           A 12663    ; 3035		}
                           A 12664    ; 3036	#endif
                           A 12665    ; 3037	#endif
                           A 12666    ; 3038	
                           A 12667    ; 3039		if ((UINT)*path < ' ') {			
                           A 12668    .LINE 3039
                           A 12669    
002E57 DD2709              A 12670    	LD	HL,(IX+%9)
002E5A 7E                  A 12671    	LD	A,(HL)
002E5B 47                  A 12672    	LD	B,A
002E5C 17ED62              A 12673    	SEXT	HL
002E5F 68                  A 12674    	LD	L,B
002E60 01200000            A 12675    	LD	BC,32
002E64 B7                  A 12676    	OR	A,A
002E65 ED42                A 12677    	SBC	HL,BC
002E67 30 20               A 12678    	JR	NC,L_639
                           A 12679    ; 3040			dp->fn[NSFLAG] = NS_NONAME;
                           A 12680    .LINE 3040
                           A 12681    
002E69 DD3106              A 12682    	LD	IY,(IX+%6)
002E6C ED2329              A 12683    	LEA	HL,IY+%29
002E6F 3680                A 12684    	LD	(HL),%80
                           A 12685    ; 3041			res = dir_sdi(dp, 0);
                           A 12686    .LINE 3041
                           A 12687    
002E71 01000000            A 12688    	LD	BC,0
002E75 C5                  A 12689    	PUSH	BC
002E76 C5                  A 12690    	PUSH	BC
002E77 DD0706              A 12691    	LD	BC,(IX+%6)
002E7A C5                  A 12692    	PUSH	BC
002E7B CD 50 12 00         A 12693    	CALL	_dir_sdi
002E7F C1                  A 12694    	POP	BC
002E80 C1                  A 12695    	POP	BC
002E81 C1                  A 12696    	POP	BC
002E82 DD2FFD              A 12697    	LD	(IX+%FFFFFFFD),HL
                           A 12698    ; 3042	
                           A 12699    ; 3043		} else {							
                           A 12700    .LINE 3043
                           A 12701    
002E85 C3 32 2F 00         A 12702    	JR	L_643
                           A 12703    ; 3044			for (;;) {
002E89                     A 12704    L_639:
                           A 12705    .LINE 3044
                           A 12706    
                           A 12707    ; 3045				res = create_name(dp, &path
                           A 12708    .LINE 3045
                           A 12709    
002E89 ED6509              A 12710    	PEA	IX+%9
002E8C DD0706              A 12711    	LD	BC,(IX+%6)
002E8F C5                  A 12712    	PUSH	BC
002E90 CD D9 28 00         A 12713    	CALL	_create_name
002E94 C1                  A 12714    	POP	BC
002E95 C1                  A 12715    	POP	BC
002E96 DD2FFD              A 12716    	LD	(IX+%FFFFFFFD),HL
                           A 12717    ; 3046				if (res != FR_OK) break;
                           A 12718    .LINE 3046
                           A 12719    
002E99 01000000            A 12720    	LD	BC,0
002E9D DD27FD              A 12721    	LD	HL,(IX+%FFFFFFFD)
002EA0 B7                  A 12722    	OR	A,A
002EA1 ED42                A 12723    	SBC	HL,BC
002EA3 C2 32 2F 00         A 12724    	JR	NZ,L_643
                           A 12725    ; 3047				res = dir_find(dp);			
                           A 12726    .LINE 3047
                           A 12727    
002EA7 DD0706              A 12728    	LD	BC,(IX+%6)
002EAA C5                  A 12729    	PUSH	BC
002EAB CD FF 1F 00         A 12730    	CALL	_dir_find
002EAF C1                  A 12731    	POP	BC
002EB0 DD2FFD              A 12732    	LD	(IX+%FFFFFFFD),HL
                           A 12733    ; 3048				ns = dp->fn[NSFLAG];
                           A 12734    .LINE 3048
                           A 12735    
002EB3 DD3106              A 12736    	LD	IY,(IX+%6)
002EB6 ED2329              A 12737    	LEA	HL,IY+%29
002EB9 7E                  A 12738    	LD	A,(HL)
002EBA DD77FC              A 12739    	LD	(IX+%FFFFFFFC),A
                           A 12740    ; 3049				if (res != FR_OK) {			
                           A 12741    .LINE 3049
                           A 12742    
002EBD 01000000            A 12743    	LD	BC,0
002EC1 DD27FD              A 12744    	LD	HL,(IX+%FFFFFFFD)
002EC4 B7                  A 12745    	OR	A,A
002EC5 ED42                A 12746    	SBC	HL,BC
002EC7 28 1C               A 12747    	JR	Z,L_635
                           A 12748    ; 3050					if (res == FR_NO_FILE) 
                           A 12749    .LINE 3050
                           A 12750    
002EC9 01040000            A 12751    	LD	BC,4
002ECD DD27FD              A 12752    	LD	HL,(IX+%FFFFFFFD)
002ED0 B7                  A 12753    	OR	A,A
002ED1 ED42                A 12754    	SBC	HL,BC
002ED3 20 5D               A 12755    	JR	NZ,L_643
                           A 12756    ; 3051						if (FF_FS_RPATH && 
                           A 12757    ; 3052							if (!(ns & NS_L
                           A 12758    ; 3053							dp->fn[NSFLAG] 
                           A 12759    ; 3054							res = FR_OK;
                           A 12760    ; 3055						} else {			
                           A 12761    ; 3056							if (!(ns & NS_L
                           A 12762    .LINE 3056
                           A 12763    
002ED5 DD7EFC              A 12764    	LD	A,(IX+%FFFFFFFC)
002ED8 E604                A 12765    	AND	A,%4
002EDA 20 56               A 12766    	JR	NZ,L_643
002EDC 01050000            A 12767    	LD	BC,5
002EE0 DD0FFD              A 12768    	LD	(IX+%FFFFFFFD),BC
                           A 12769    ; 3057						}
                           A 12770    ; 3058					}
                           A 12771    ; 3059					break;
                           A 12772    .LINE 3059
                           A 12773    
002EE3 18 4D               A 12774    	JR	L_643
                           A 12775    ; 3060				}
002EE5                     A 12776    L_635:
                           A 12777    .LINE 3060
                           A 12778    
                           A 12779    ; 3061				if (ns & NS_LAST) break;	
                           A 12780    .LINE 3061
                           A 12781    
002EE5 DD7EFC              A 12782    	LD	A,(IX+%FFFFFFFC)
002EE8 E604                A 12783    	AND	A,%4
002EEA 20 46               A 12784    	JR	NZ,L_643
                           A 12785    ; 3062				/* Get into the sub-directo
                           A 12786    ; 3063				if (!(dp->obj.attr & AM_DIR
                           A 12787    .LINE 3063
                           A 12788    
002EEC DD3106              A 12789    	LD	IY,(IX+%6)
002EEF FD7E05              A 12790    	LD	A,(IY+%5)
002EF2 E610                A 12791    	AND	A,%10
002EF4 20 09               A 12792    	JR	NZ,L_638
                           A 12793    ; 3064					res = FR_NO_PATH; break
                           A 12794    .LINE 3064
                           A 12795    
002EF6 01050000            A 12796    	LD	BC,5
002EFA DD0FFD              A 12797    	LD	(IX+%FFFFFFFD),BC
002EFD 18 33               A 12798    	JR	L_643
                           A 12799    ; 3065				}
002EFF                     A 12800    L_638:
                           A 12801    .LINE 3065
                           A 12802    
                           A 12803    ; 3066	#if FF_FS_EXFAT
                           A 12804    ; 3067				if (fs->fs_type == FS_EXFAT
                           A 12805    ; 3068					dp->obj.c_scl = dp->obj
                           A 12806    ; 3069					dp->obj.c_size = ((DWOR
                           A 12807    ; 3070					dp->obj.c_ofs = dp->blk
                           A 12808    ; 3071					init_alloc_info(fs, &dp
                           A 12809    ; 3072				} else
                           A 12810    ; 3073	#endif
                           A 12811    ; 3074				{
                           A 12812    ; 3075					dp->obj.sclust = ld_clu
                           A 12813    .LINE 3075
                           A 12814    
002EFF DD3106              A 12815    	LD	IY,(IX+%6)
002F02 FD270F              A 12816    	LD	HL,(IY+%F)
002F05 FD5E12              A 12817    	LD	E,(IY+%12)
002F08 01FF0100            A 12818    	LD	BC,511
002F0C AF                  A 12819    	XOR	A,A
002F0D CD 00 00 00         A 12820    	CALL	__land
002F11 E5C1                A 12821    	LD	BC,HL
002F13 DD31F9              A 12822    	LD	IY,(IX+%FFFFFFF9)
002F16 ED2332              A 12823    	LEA	HL,IY+%32
002F19 09                  A 12824    	ADD	HL,BC
002F1A E5                  A 12825    	PUSH	HL
002F1B DD07F9              A 12826    	LD	BC,(IX+%FFFFFFF9)
002F1E C5                  A 12827    	PUSH	BC
002F1F CD EE 17 00         A 12828    	CALL	_ld_clust
002F23 C1                  A 12829    	POP	BC
002F24 C1                  A 12830    	POP	BC
002F25 DD3106              A 12831    	LD	IY,(IX+%6)
002F28 FD2F07              A 12832    	LD	(IY+%7),HL
002F2B FD730A              A 12833    	LD	(IY+%A),E
                           A 12834    ; 3076				}
                           A 12835    ; 3077			}
                           A 12836    .LINE 3077
                           A 12837    
002F2E C3 89 2E 00         A 12838    	JR	L_639
                           A 12839    ; 3078		}
002F32                     A 12840    L_643:
                           A 12841    .LINE 3078
                           A 12842    
                           A 12843    ; 3079	
                           A 12844    ; 3080		return res;
                           A 12845    .LINE 3080
                           A 12846    
002F32 DD27FD              A 12847    	LD	HL,(IX+%FFFFFFFD)
                           A 12848    ; 3081	}
                           A 12849    .LINE 3081
                           A 12850    
002F35 DDF9                A 12851    	LD	SP,IX
002F37 DDE1                A 12852    	POP	IX
002F39 C9                  A 12853    	RET	
                           A 12854    
                           A 12855    
                           A 12856    ;**************************** _follow_path ****
                           A 12857    ;Name                         Addr/Register   S
                           A 12858    ;fs                                    IX-7    
                           A 12859    ;ns                                    IX-4    
                           A 12860    ;res                                   IX-3    
                           A 12861    ;path                                  IX+9    
                           A 12862    ;dp                                    IX+6    
                           A 12863    
                           A 12864    
                           A 12865    ; Stack Frame Size: 22 (bytes)
                           A 12866    ;       Spill Code: -2 (instruction)
                           A 12867    
                           A 12868    
                           A 12869    .ENDFUNC "follow_path",3081,"_follow_path"
                           A 12870    ; 3082	
                           A 12871    ; 3083	
                           A 12872    ; 3084	
                           A 12873    ; 3085	
                           A 12874    ; 3086	/*-------------------------------------
                           A 12875    ; 3087	/* Get logical drive number from path n
                           A 12876    ; 3088	/*-------------------------------------
                           A 12877    ; 3089	
                           A 12878    ; 3090	static int get_ldnumber (	/* Returns 
                           A 12879    ; 3091		const TCHAR** path		/* Pointer 
                           A 12880    ; 3092	)
                           A 12881    ; 3093	{
002F3A                     A 12882    _get_ldnumber:
                           A 12883    .DEFINE "_get_ldnumber"
                           A 12884    
                           A 12885    .VALUE _get_ldnumber
                           A 12886    
                           A 12887    .CLASS 3
                           A 12888    
                           A 12889    .TYPE 68
                           A 12890    
                           A 12891    .ENDEF
                           A 12892    
                           A 12893    .BEGFUNC "get_ldnumber",3093,"_get_ldnumber"
                           A 12894    
                           A 12895    .LINE 3093
                           A 12896    
                           A 12897    .DEFINE "path"
                           A 12898    
                           A 12899    .CLASS 65
                           A 12900    
                           A 12901    .VALUE 6
                           A 12902    
                           A 12903    .TYPE 1570
                           A 12904    
                           A 12905    .ENDEF
                           A 12906    
                           A 12907    .DEFINE "tp"
                           A 12908    
                           A 12909    .CLASS 65
                           A 12910    
                           A 12911    .VALUE -3
                           A 12912    
                           A 12913    .TYPE 194
                           A 12914    
                           A 12915    .ENDEF
                           A 12916    
                           A 12917    .DEFINE "tt"
                           A 12918    
                           A 12919    .CLASS 65
                           A 12920    
                           A 12921    .VALUE -6
                           A 12922    
                           A 12923    .TYPE 194
                           A 12924    
                           A 12925    .ENDEF
                           A 12926    
                           A 12927    .DEFINE "tc"
                           A 12928    
                           A 12929    .CLASS 65
                           A 12930    
                           A 12931    .VALUE -7
                           A 12932    
                           A 12933    .TYPE 2
                           A 12934    
                           A 12935    .ENDEF
                           A 12936    
                           A 12937    .DEFINE "i"
                           A 12938    
                           A 12939    .CLASS 65
                           A 12940    
                           A 12941    .VALUE -10
                           A 12942    
                           A 12943    .TYPE 4
                           A 12944    
                           A 12945    .ENDEF
                           A 12946    
                           A 12947    .DEFINE "vol"
                           A 12948    
                           A 12949    .CLASS 65
                           A 12950    
                           A 12951    .VALUE -13
                           A 12952    
                           A 12953    .TYPE 4
                           A 12954    
                           A 12955    .ENDEF
                           A 12956    
002F3A DDE5                A 12957    	PUSH	IX
002F3C DD210000 00         A 12958    	LD	IX,0
002F41 DD39                A 12959    	ADD	IX,SP
002F43 ED22F0              A 12960    	LEA	HL,IX+%FFFFFFF0
002F46 F9                  A 12961    	LD	SP,HL
                           A 12962    ; 3094		const TCHAR *tp, *tt;
                           A 12963    ; 3095		TCHAR tc;
                           A 12964    ; 3096		int i;
                           A 12965    ; 3097		int vol = -1;
                           A 12966    .LINE 3097
                           A 12967    
002F47 01FFFFFF            A 12968    	LD	BC,16777215
002F4B DD0FF3              A 12969    	LD	(IX+%FFFFFFF3),BC
                           A 12970    ; 3098	#if FF_STR_VOLUME_ID		/* Find str
                           A 12971    ; 3099		const char *sp;
                           A 12972    ; 3100		char c;
                           A 12973    ; 3101	#endif
                           A 12974    ; 3102	
                           A 12975    ; 3103		tt = tp = *path;
                           A 12976    .LINE 3103
                           A 12977    
002F4E DD2706              A 12978    	LD	HL,(IX+%6)
002F51 ED07                A 12979    	LD	BC,(HL)
002F53 DD0FFD              A 12980    	LD	(IX+%FFFFFFFD),BC
002F56 DD0FFA              A 12981    	LD	(IX+%FFFFFFFA),BC
                           A 12982    ; 3104		if (!tp) return vol;	/* Invalid 
                           A 12983    .LINE 3104
                           A 12984    
002F59 01000000            A 12985    	LD	BC,0
002F5D DD27FD              A 12986    	LD	HL,(IX+%FFFFFFFD)
002F60 B7                  A 12987    	OR	A,A
002F61 ED42                A 12988    	SBC	HL,BC
002F63 20 08               A 12989    	JR	NZ,L_648
002F65 21FFFFFF            A 12990    	LD	HL,16777215
002F69 C3 27 30 00         A 12991    	JR	L_660
                           A 12992    ; 3105		do tc = *tt++; while (!IsTerminator
002F6D                     A 12993    L_648:
                           A 12994    .LINE 3105
                           A 12995    
002F6D DD07FA              A 12996    	LD	BC,(IX+%FFFFFFFA)
002F70 DD0FF0              A 12997    	LD	(IX+%FFFFFFF0),BC
002F73 C5E1                A 12998    	LD	HL,BC
002F75 7E                  A 12999    	LD	A,(HL)
002F76 DD77F9              A 13000    	LD	(IX+%FFFFFFF9),A
002F79 DD07FA              A 13001    	LD	BC,(IX+%FFFFFFFA)
002F7C 03                  A 13002    	INC	BC
002F7D DD0FFA              A 13003    	LD	(IX+%FFFFFFFA),BC
002F80 DD7EF9              A 13004    	LD	A,(IX+%FFFFFFF9)
002F83 FE20                A 13005    	CP	A,%20
002F85 38 07               A 13006    	JR	C,L_658
002F87 DD7EF9              A 13007    	LD	A,(IX+%FFFFFFF9)
002F8A FE3A                A 13008    	CP	A,%3A
002F8C 20 DF               A 13009    	JR	NZ,L_648
002F8E                     A 13010    L_658:
                           A 13011    ; 3106	
                           A 13012    ; 3107		if (tc == ':') {	/* DOS/Windows 
                           A 13013    .LINE 3107
                           A 13014    
002F8E DD7EF9              A 13015    	LD	A,(IX+%FFFFFFF9)
002F91 FE3A                A 13016    	CP	A,%3A
002F93 C2 1D 30 00         A 13017    	JR	NZ,L_659
                           A 13018    ; 3108			i = FF_VOLUMES;
                           A 13019    .LINE 3108
                           A 13020    
002F97 01010000            A 13021    	LD	BC,1
002F9B DD0FF6              A 13022    	LD	(IX+%FFFFFFF6),BC
                           A 13023    ; 3109			if (IsDigit(*tp) && tp + 2 == t
                           A 13024    .LINE 3109
                           A 13025    
002F9E DD27FD              A 13026    	LD	HL,(IX+%FFFFFFFD)
002FA1 7E                  A 13027    	LD	A,(HL)
002FA2 47                  A 13028    	LD	B,A
002FA3 17ED62              A 13029    	SEXT	HL
002FA6 68                  A 13030    	LD	L,B
002FA7 01300000            A 13031    	LD	BC,48
002FAB B7                  A 13032    	OR	A,A
002FAC ED42                A 13033    	SBC	HL,BC
002FAE FA F2 2F 00         A 13034    	JP	M,L_655
002FB2 DD27FD              A 13035    	LD	HL,(IX+%FFFFFFFD)
002FB5 7E                  A 13036    	LD	A,(HL)
002FB6 47                  A 13037    	LD	B,A
002FB7 17ED62              A 13038    	SEXT	HL
002FBA 68                  A 13039    	LD	L,B
002FBB E5C1                A 13040    	LD	BC,HL
002FBD 21390000            A 13041    	LD	HL,57
002FC1 B7                  A 13042    	OR	A,A
002FC2 ED42                A 13043    	SBC	HL,BC
002FC4 FA CE 2F 00         A 13044    	JP	M,L__336
002FC8 EA F2 2F 00         A 13045    	JP	PE,L_655
002FCC 18 04               A 13046    	JR	L__337
002FCE                     A 13047    L__336:
002FCE E2 F2 2F 00         A 13048    	JP	PO,L_655
002FD2                     A 13049    L__337:
002FD2 DD31FD              A 13050    	LD	IY,(IX+%FFFFFFFD)
002FD5 ED2302              A 13051    	LEA	HL,IY+%2
002FD8 DD07FA              A 13052    	LD	BC,(IX+%FFFFFFFA)
002FDB B7                  A 13053    	OR	A,A
002FDC ED42                A 13054    	SBC	HL,BC
002FDE 20 12               A 13055    	JR	NZ,L_655
                           A 13056    ; 3110				i = (int)*tp - '0';	/* Get 
                           A 13057    .LINE 3110
                           A 13058    
002FE0 DD27FD              A 13059    	LD	HL,(IX+%FFFFFFFD)
002FE3 7E                  A 13060    	LD	A,(HL)
002FE4 47                  A 13061    	LD	B,A
002FE5 17ED62              A 13062    	SEXT	HL
002FE8 68                  A 13063    	LD	L,B
002FE9 E5FDE1              A 13064    	LD	IY,HL
002FEC ED33D0              A 13065    	LEA	IY,IY+%FFFFFFD0
002FEF DD3EF6              A 13066    	LD	(IX+%FFFFFFF6),IY
                           A 13067    ; 3111			}
002FF2                     A 13068    L_655:
                           A 13069    .LINE 3111
                           A 13070    
                           A 13071    ; 3112	#if FF_STR_VOLUME_ID == 1	/* Arbitrar
                           A 13072    ; 3113			else {
                           A 13073    ; 3114				i = 0;
                           A 13074    ; 3115				do {
                           A 13075    ; 3116					sp = VolumeStr[i]; tp =
                           A 13076    ; 3117					do {	/* Compare the 
                           A 13077    ; 3118						c = *sp++; tc = *tp
                           A 13078    ; 3119						if (IsLower(c)) c -
                           A 13079    ; 3120						if (IsLower(tc)) tc
                           A 13080    ; 3121					} while (c && (TCHAR)c 
                           A 13081    ; 3122				} while ((c || tp != tt) &&
                           A 13082    ; 3123			}
                           A 13083    ; 3124	#endif
                           A 13084    ; 3125			if (i < FF_VOLUMES) {	/* If a
                           A 13085    .LINE 3125
                           A 13086    
002FF2 01010000            A 13087    	LD	BC,1
002FF6 DD27F6              A 13088    	LD	HL,(IX+%FFFFFFF6)
002FF9 B7                  A 13089    	OR	A,A
002FFA ED42                A 13090    	SBC	HL,BC
002FFC F2 06 30 00         A 13091    	JP	P,L__338
003000 EA 18 30 00         A 13092    	JP	PE,L_656
003004 18 04               A 13093    	JR	L__339
003006                     A 13094    L__338:
003006 E2 18 30 00         A 13095    	JP	PO,L_656
00300A                     A 13096    L__339:
                           A 13097    ; 3126				vol = i;		/* Drive nu
                           A 13098    .LINE 3126
                           A 13099    
00300A DD07F6              A 13100    	LD	BC,(IX+%FFFFFFF6)
00300D DD0FF3              A 13101    	LD	(IX+%FFFFFFF3),BC
                           A 13102    ; 3127				*path = tt;		/* Snip the
                           A 13103    .LINE 3127
                           A 13104    
003010 DD2706              A 13105    	LD	HL,(IX+%6)
003013 DD07FA              A 13106    	LD	BC,(IX+%FFFFFFFA)
003016 ED0F                A 13107    	LD	(HL),BC
                           A 13108    ; 3128			}
003018                     A 13109    L_656:
                           A 13110    .LINE 3128
                           A 13111    
                           A 13112    ; 3129			return vol;
                           A 13113    .LINE 3129
                           A 13114    
003018 DD27F3              A 13115    	LD	HL,(IX+%FFFFFFF3)
00301B 18 0A               A 13116    	JR	L_660
                           A 13117    ; 3130		}
00301D                     A 13118    L_659:
                           A 13119    .LINE 3130
                           A 13120    
                           A 13121    ; 3131	#if FF_STR_VOLUME_ID == 2		/* Unix
                           A 13122    ; 3132		if (*tp == '/') {			/* Is t
                           A 13123    ; 3133			while (*(tp + 1) == '/') tp++;	
                           A 13124    ; 3134			i = 0;
                           A 13125    ; 3135			do {
                           A 13126    ; 3136				tt = tp; sp = VolumeStr[i];
                           A 13127    ; 3137				do {	/* Compare the volu
                           A 13128    ; 3138					c = *sp++; tc = *(++tt)
                           A 13129    ; 3139					if (IsLower(c)) c -= 0x
                           A 13130    ; 3140					if (IsLower(tc)) tc -= 
                           A 13131    ; 3141				} while (c && (TCHAR)c == t
                           A 13132    ; 3142			} while ((c || (tc != '/' && !I
                           A 13133    ; 3143			if (i < FF_VOLUMES) {	/* If a
                           A 13134    ; 3144				vol = i;		/* Drive nu
                           A 13135    ; 3145				*path = tt;		/* Snip the
                           A 13136    ; 3146			}
                           A 13137    ; 3147			return vol;
                           A 13138    ; 3148		}
                           A 13139    ; 3149	#endif
                           A 13140    ; 3150		/* No drive prefix is found */
                           A 13141    ; 3151	#if FF_FS_RPATH != 0
                           A 13142    ; 3152		vol = CurrVol;	/* Default drive is
                           A 13143    ; 3153	#else
                           A 13144    ; 3154		vol = 0;		/* Default drive is
                           A 13145    .LINE 3154
                           A 13146    
00301D 01000000            A 13147    	LD	BC,0
003021 DD0FF3              A 13148    	LD	(IX+%FFFFFFF3),BC
                           A 13149    ; 3155	#endif
                           A 13150    ; 3156		return vol;		/* Return the defau
                           A 13151    .LINE 3156
                           A 13152    
003024 B7                  A 13153    	OR	A,A
003025 ED62                A 13154    	SBC	HL,HL
                           A 13155    ; 3157	}
003027                     A 13156    L_660:
                           A 13157    .LINE 3157
                           A 13158    
003027 DDF9                A 13159    	LD	SP,IX
003029 DDE1                A 13160    	POP	IX
00302B C9                  A 13161    	RET	
                           A 13162    
                           A 13163    
                           A 13164    ;**************************** _get_ldnumber ***
                           A 13165    ;Name                         Addr/Register   S
                           A 13166    ;vol                                  IX-13    
                           A 13167    ;i                                    IX-10    
                           A 13168    ;tc                                    IX-7    
                           A 13169    ;tt                                    IX-6    
                           A 13170    ;tp                                    IX-3    
                           A 13171    ;path                                  IX+6    
                           A 13172    
                           A 13173    
                           A 13174    ; Stack Frame Size: 25 (bytes)
                           A 13175    ;       Spill Code: -2 (instruction)
                           A 13176    
                           A 13177    
                           A 13178    .ENDFUNC "get_ldnumber",3157,"_get_ldnumber"
                           A 13179    ; 3158	
                           A 13180    ; 3159	
                           A 13181    ; 3160	
                           A 13182    ; 3161	
                           A 13183    ; 3162	/*-------------------------------------
                           A 13184    ; 3163	/* GPT support functions               
                           A 13185    ; 3164	/*-------------------------------------
                           A 13186    ; 3165	
                           A 13187    ; 3166	#if FF_LBA64
                           A 13188    ; 3167	
                           A 13189    ; 3168	/* Calculate CRC32 in byte-by-byte */
                           A 13190    ; 3169	
                           A 13191    ; 3170	static DWORD crc32 (	/* Returns next
                           A 13192    ; 3171		DWORD crc,			/* Current CRC 
                           A 13193    ; 3172		BYTE d				/* A byte to be
                           A 13194    ; 3173	)
                           A 13195    ; 3174	{
                           A 13196    ; 3175		BYTE b;
                           A 13197    ; 3176	
                           A 13198    ; 3177	
                           A 13199    ; 3178		for (b = 1; b; b <<= 1) {
                           A 13200    ; 3179			crc ^= (d & b) ? 1 : 0;
                           A 13201    ; 3180			crc = (crc & 1) ? crc >> 1 ^ 0x
                           A 13202    ; 3181		}
                           A 13203    ; 3182		return crc;
                           A 13204    ; 3183	}
                           A 13205    ; 3184	
                           A 13206    ; 3185	
                           A 13207    ; 3186	/* Check validity of GPT header */
                           A 13208    ; 3187	
                           A 13209    ; 3188	static int test_gpt_header (	/* 0:In
                           A 13210    ; 3189		const BYTE* gpth			/* Poin
                           A 13211    ; 3190	)
                           A 13212    ; 3191	{
                           A 13213    ; 3192		UINT i;
                           A 13214    ; 3193		DWORD bcc;
                           A 13215    ; 3194	
                           A 13216    ; 3195	
                           A 13217    ; 3196		if (memcmp(gpth + GPTH_Sign, "EFI P
                           A 13218    ; 3197		for (i = 0, bcc = 0xFFFFFFFF; i < 9
                           A 13219    ; 3198			bcc = crc32(bcc, i - GPTH_Bcc <
                           A 13220    ; 3199		}
                           A 13221    ; 3200		if (~bcc != ld_dword(gpth + GPTH_Bc
                           A 13222    ; 3201		if (ld_dword(gpth + GPTH_PteSize) !
                           A 13223    ; 3202		if (ld_dword(gpth + GPTH_PtNum) > 1
                           A 13224    ; 3203	
                           A 13225    ; 3204		return 1;
                           A 13226    ; 3205	}
                           A 13227    ; 3206	
                           A 13228    ; 3207	#if !FF_FS_READONLY && FF_USE_MKFS
                           A 13229    ; 3208	
                           A 13230    ; 3209	/* Generate random value */
                           A 13231    ; 3210	static DWORD make_rand (
                           A 13232    ; 3211		DWORD seed,		/* Seed value */
                           A 13233    ; 3212		BYTE* buff,		/* Output buffer */
                           A 13234    ; 3213		UINT n			/* Data length */
                           A 13235    ; 3214	)
                           A 13236    ; 3215	{
                           A 13237    ; 3216		UINT r;
                           A 13238    ; 3217	
                           A 13239    ; 3218	
                           A 13240    ; 3219		if (seed == 0) seed = 1;
                           A 13241    ; 3220		do {
                           A 13242    ; 3221			for (r = 0; r < 8; r++) seed = 
                           A 13243    ; 3222			*buff++ = (BYTE)seed;
                           A 13244    ; 3223		} while (--n);
                           A 13245    ; 3224		return seed;
                           A 13246    ; 3225	}
                           A 13247    ; 3226	
                           A 13248    ; 3227	#endif
                           A 13249    ; 3228	#endif
                           A 13250    ; 3229	
                           A 13251    ; 3230	
                           A 13252    ; 3231	
                           A 13253    ; 3232	/*-------------------------------------
                           A 13254    ; 3233	/* Load a sector and check if it is an 
                           A 13255    ; 3234	/*-------------------------------------
                           A 13256    ; 3235	
                           A 13257    ; 3236	/* Check what the sector is */
                           A 13258    ; 3237	
                           A 13259    ; 3238	static UINT check_fs (	/* 0:FAT/FAT32 
                           A 13260    ; 3239		FATFS* fs,			/* Filesystem o
                           A 13261    ; 3240		LBA_t sect			/* Sector to lo
                           A 13262    ; 3241	)
                           A 13263    ; 3242	{
00302C                     A 13264    _check_fs:
                           A 13265    .DEFINE "_check_fs"
                           A 13266    
                           A 13267    .VALUE _check_fs
                           A 13268    
                           A 13269    .CLASS 3
                           A 13270    
                           A 13271    .TYPE 78
                           A 13272    
                           A 13273    .ENDEF
                           A 13274    
                           A 13275    .BEGFUNC "check_fs",3242,"_check_fs"
                           A 13276    
                           A 13277    .LINE 3242
                           A 13278    
                           A 13279    .DEFINE "fs"
                           A 13280    
                           A 13281    .CLASS 65
                           A 13282    
                           A 13283    .VALUE 6
                           A 13284    
                           A 13285    .TAG "NONAME0"
                           A 13286    
                           A 13287    .TYPE 40
                           A 13288    
                           A 13289    .ENDEF
                           A 13290    
                           A 13291    .DEFINE "sect"
                           A 13292    
                           A 13293    .CLASS 65
                           A 13294    
                           A 13295    .VALUE 9
                           A 13296    
                           A 13297    .TYPE 15
                           A 13298    
                           A 13299    .ENDEF
                           A 13300    
                           A 13301    .DEFINE "b"
                           A 13302    
                           A 13303    .CLASS 65
                           A 13304    
                           A 13305    .VALUE -4
                           A 13306    
                           A 13307    .TYPE 12
                           A 13308    
                           A 13309    .ENDEF
                           A 13310    
                           A 13311    .DEFINE "w"
                           A 13312    
                           A 13313    .CLASS 65
                           A 13314    
                           A 13315    .VALUE -9
                           A 13316    
                           A 13317    .TYPE 13
                           A 13318    
                           A 13319    .ENDEF
                           A 13320    
                           A 13321    .DEFINE "sign"
                           A 13322    
                           A 13323    .CLASS 65
                           A 13324    
                           A 13325    .VALUE -11
                           A 13326    
                           A 13327    .TYPE 13
                           A 13328    
                           A 13329    .ENDEF
                           A 13330    
00302C DDE5                A 13331    	PUSH	IX
00302E DD210000 00         A 13332    	LD	IX,0
003033 DD39                A 13333    	ADD	IX,SP
003035 ED22EC              A 13334    	LEA	HL,IX+%FFFFFFEC
003038 F9                  A 13335    	LD	SP,HL
                           A 13336    ; 3243		WORD w, sign;
                           A 13337    ; 3244		BYTE b;
                           A 13338    ; 3245	
                           A 13339    ; 3246	
                           A 13340    ; 3247		fs->wflag = 0; fs->winsect = (LBA_t
                           A 13341    .LINE 3247
                           A 13342    
003039 DD3106              A 13343    	LD	IY,(IX+%6)
00303C FD360300            A 13344    	LD	(IY+%3),%0
003040 01FFFFFF            A 13345    	LD	BC,16777215
003044 FD0F2E              A 13346    	LD	(IY+%2E),BC
003047 FD3631FF            A 13347    	LD	(IY+%31),%FF
                           A 13348    ; 3248		if (move_window(fs, sect) != FR_OK)
                           A 13349    .LINE 3248
                           A 13350    
00304B DD4E0C              A 13351    	LD	C,(IX+%C)
00304E 0600                A 13352    	LD	B,%0
003050 C5                  A 13353    	PUSH	BC
003051 DD0709              A 13354    	LD	BC,(IX+%9)
003054 C5                  A 13355    	PUSH	BC
003055 DD0706              A 13356    	LD	BC,(IX+%6)
003058 C5                  A 13357    	PUSH	BC
003059 CD 1E 04 00         A 13358    	CALL	_move_window
00305D C1                  A 13359    	POP	BC
00305E C1                  A 13360    	POP	BC
00305F C1                  A 13361    	POP	BC
003060 01000000            A 13362    	LD	BC,0
003064 B7                  A 13363    	OR	A,A
003065 ED42                A 13364    	SBC	HL,BC
003067 28 08               A 13365    	JR	Z,L_662
003069 21040000            A 13366    	LD	HL,4
00306D C3 1A 32 00         A 13367    	JR	L_685
003071                     A 13368    L_662:
                           A 13369    ; 3249		sign = ld_word(fs->win + BS_55AA);
                           A 13370    .LINE 3249
                           A 13371    
003071 DD3106              A 13372    	LD	IY,(IX+%6)
003074 ED0332              A 13373    	LEA	BC,IY+%32
003077 DD0FF9              A 13374    	LD	(IX+%FFFFFFF9),BC
00307A DD0FEF              A 13375    	LD	(IX+%FFFFFFEF),BC
00307D 01FE0100            A 13376    	LD	BC,510
003081 DD27F9              A 13377    	LD	HL,(IX+%FFFFFFF9)
003084 09                  A 13378    	ADD	HL,BC
003085 E5                  A 13379    	PUSH	HL
003086 CD 00 00 00         A 13380    	CALL	_ld_word
00308A C1                  A 13381    	POP	BC
00308B DD75F5              A 13382    	LD	(IX+%FFFFFFF5),L
00308E DD74F6              A 13383    	LD	(IX+%FFFFFFF6),H
                           A 13384    ; 3250	#if FF_FS_EXFAT
                           A 13385    ; 3251		if (sign == 0xAA55 && !memcmp(fs->w
                           A 13386    ; 3252	#endif
                           A 13387    ; 3253		b = fs->win[BS_JmpBoot];
                           A 13388    .LINE 3253
                           A 13389    
003091 DD27F9              A 13390    	LD	HL,(IX+%FFFFFFF9)
003094 7E                  A 13391    	LD	A,(HL)
003095 DD77FC              A 13392    	LD	(IX+%FFFFFFFC),A
                           A 13393    ; 3254		if (b == 0xEB || b == 0xE9 || b == 
                           A 13394    .LINE 3254
                           A 13395    
003098 FEEB                A 13396    	CP	A,%EB
00309A 28 10               A 13397    	JR	Z,L_679
00309C DD7EFC              A 13398    	LD	A,(IX+%FFFFFFFC)
00309F FEE9                A 13399    	CP	A,%E9
0030A1 28 09               A 13400    	JR	Z,L_679
0030A3 DD7EFC              A 13401    	LD	A,(IX+%FFFFFFFC)
0030A6 FEE8                A 13402    	CP	A,%E8
0030A8 C2 FA 31 00         A 13403    	JR	NZ,L_684
0030AC                     A 13404    L_679:
                           A 13405    ; 3255			if (sign == 0xAA55 && !memcmp(f
                           A 13406    .LINE 3255
                           A 13407    
0030AC 490155AA            A 13408    	LD.LIS	BC,43605
0030B0 DD27F5              A 13409    	LD	HL,(IX+%FFFFFFF5)
0030B3 B7                  A 13410    	OR	A,A
0030B4 40ED42              A 13411    	SBC.SIS	HL,BC
0030B7 20 2E               A 13412    	JR	NZ,L_667
0030B9 DD07F9              A 13413    	LD	BC,(IX+%FFFFFFF9)
0030BC DD0FEF              A 13414    	LD	(IX+%FFFFFFEF),BC
0030BF 01080000            A 13415    	LD	BC,8
0030C3 C5                  A 13416    	PUSH	BC
0030C4 01 10 00 00         A 13417    	LD	BC,L__346
0030C8 C5                  A 13418    	PUSH	BC
0030C9 DD31F9              A 13419    	LD	IY,(IX+%FFFFFFF9)
0030CC ED0352              A 13420    	LEA	BC,IY+%52
0030CF C5                  A 13421    	PUSH	BC
0030D0 CD 00 00 00         A 13422    	CALL	_memcmp
0030D4 C1                  A 13423    	POP	BC
0030D5 C1                  A 13424    	POP	BC
0030D6 C1                  A 13425    	POP	BC
0030D7 01000000            A 13426    	LD	BC,0
0030DB B7                  A 13427    	OR	A,A
0030DC ED42                A 13428    	SBC	HL,BC
0030DE 20 07               A 13429    	JR	NZ,L_667
                           A 13430    ; 3256				return 0;	/* It is an FAT
                           A 13431    .LINE 3256
                           A 13432    
0030E0 B7                  A 13433    	OR	A,A
0030E1 ED62                A 13434    	SBC	HL,HL
0030E3 C3 1A 32 00         A 13435    	JR	L_685
                           A 13436    ; 3257			}
0030E7                     A 13437    L_667:
                           A 13438    .LINE 3257
                           A 13439    
                           A 13440    ; 3258			/* FAT volumes formatted with e
                           A 13441    ; 3259			w = ld_word(fs->win + BPB_BytsP
                           A 13442    .LINE 3259
                           A 13443    
0030E7 DD07EF              A 13444    	LD	BC,(IX+%FFFFFFEF)
0030EA DD0FFD              A 13445    	LD	(IX+%FFFFFFFD),BC
0030ED DD31FD              A 13446    	LD	IY,(IX+%FFFFFFFD)
0030F0 ED030B              A 13447    	LEA	BC,IY+%B
0030F3 C5                  A 13448    	PUSH	BC
0030F4 CD 00 00 00         A 13449    	CALL	_ld_word
0030F8 C1                  A 13450    	POP	BC
0030F9 DD75F7              A 13451    	LD	(IX+%FFFFFFF7),L
0030FC DD74F8              A 13452    	LD	(IX+%FFFFFFF8),H
                           A 13453    ; 3260			b = fs->win[BPB_SecPerClus];
                           A 13454    .LINE 3260
                           A 13455    
0030FF DD31FD              A 13456    	LD	IY,(IX+%FFFFFFFD)
003102 ED230D              A 13457    	LEA	HL,IY+%D
003105 7E                  A 13458    	LD	A,(HL)
003106 DD77FC              A 13459    	LD	(IX+%FFFFFFFC),A
                           A 13460    ; 3261			if ((w & (w - 1)) == 0 && w >= 
                           A 13461    .LINE 3261
                           A 13462    
003109 DD07F7              A 13463    	LD	BC,(IX+%FFFFFFF7)
00310C CD 00 00 00         A 13464    	CALL	__stoiu
003110 2B                  A 13465    	DEC	HL
003111 DD07F7              A 13466    	LD	BC,(IX+%FFFFFFF7)
003114 CD 00 00 00         A 13467    	CALL	__sand
003118 49010000            A 13468    	LD.LIS	BC,0
00311C B7                  A 13469    	OR	A,A
00311D 40ED42              A 13470    	SBC.SIS	HL,BC
003120 C2 FA 31 00         A 13471    	JR	NZ,L_684
003124 49010002            A 13472    	LD.LIS	BC,512
003128 DD27F7              A 13473    	LD	HL,(IX+%FFFFFFF7)
00312B B7                  A 13474    	OR	A,A
00312C 40ED42              A 13475    	SBC.SIS	HL,BC
00312F DA FA 31 00         A 13476    	JR	C,L_684
                           A 13477    ; 3262				&& b != 0 && (b & (b - 1)) 
                           A 13478    .LINE 3262
                           A 13479    
003133 DD07F7              A 13480    	LD	BC,(IX+%FFFFFFF7)
003136 49210002            A 13481    	LD.LIS	HL,512
00313A B7                  A 13482    	OR	A,A
00313B 40ED42              A 13483    	SBC.SIS	HL,BC
00313E DA FA 31 00         A 13484    	JR	C,L_684
003142 DD7EFC              A 13485    	LD	A,(IX+%FFFFFFFC)
003145 B7                  A 13486    	OR	A,A
003146 CA FA 31 00         A 13487    	JR	Z,L_684
                           A 13488    ; 3263				&& ld_word(fs->win + BPB_Rs
                           A 13489    .LINE 3263
                           A 13490    
00314A DD7EFC              A 13491    	LD	A,(IX+%FFFFFFFC)
00314D B7ED62              A 13492    	UEXT	HL
003150 6F                  A 13493    	LD	L,A
003151 2B                  A 13494    	DEC	HL
003152 7D                  A 13495    	LD	A,L
003153 DDA6FC              A 13496    	AND	A,(IX+%FFFFFFFC)
003156 C2 FA 31 00         A 13497    	JR	NZ,L_684
                           A 13498    ; 3264				&& (UINT)fs->win[BPB_NumFAT
                           A 13499    .LINE 3264
                           A 13500    
00315A DD31FD              A 13501    	LD	IY,(IX+%FFFFFFFD)
00315D ED030E              A 13502    	LEA	BC,IY+%E
003160 C5                  A 13503    	PUSH	BC
003161 CD 00 00 00         A 13504    	CALL	_ld_word
003165 C1                  A 13505    	POP	BC
003166 49010000            A 13506    	LD.LIS	BC,0
00316A B7                  A 13507    	OR	A,A
00316B 40ED42              A 13508    	SBC.SIS	HL,BC
00316E CA FA 31 00         A 13509    	JR	Z,L_684
                           A 13510    ; 3265				&& ld_word(fs->win + BPB_Ro
                           A 13511    .LINE 3265
                           A 13512    
003172 DD31FD              A 13513    	LD	IY,(IX+%FFFFFFFD)
003175 ED2310              A 13514    	LEA	HL,IY+%10
003178 7E                  A 13515    	LD	A,(HL)
003179 B7ED62              A 13516    	UEXT	HL
00317C 6F                  A 13517    	LD	L,A
00317D E5C1                A 13518    	LD	BC,HL
00317F 0B                  A 13519    	DEC	BC
003180 21010000            A 13520    	LD	HL,1
003184 B7                  A 13521    	OR	A,A
003185 ED42                A 13522    	SBC	HL,BC
003187 38 71               A 13523    	JR	C,L_684
                           A 13524    ; 3266				&& (ld_word(fs->win + BPB_T
                           A 13525    .LINE 3266
                           A 13526    
003189 DD31FD              A 13527    	LD	IY,(IX+%FFFFFFFD)
00318C ED0311              A 13528    	LEA	BC,IY+%11
00318F C5                  A 13529    	PUSH	BC
003190 CD 00 00 00         A 13530    	CALL	_ld_word
003194 C1                  A 13531    	POP	BC
003195 49010000            A 13532    	LD.LIS	BC,0
003199 B7                  A 13533    	OR	A,A
00319A 40ED42              A 13534    	SBC.SIS	HL,BC
00319D 28 5B               A 13535    	JR	Z,L_684
00319F DD07FD              A 13536    	LD	BC,(IX+%FFFFFFFD)
0031A2 DD0FEC              A 13537    	LD	(IX+%FFFFFFEC),BC
0031A5 DD31FD              A 13538    	LD	IY,(IX+%FFFFFFFD)
0031A8 ED0313              A 13539    	LEA	BC,IY+%13
0031AB C5                  A 13540    	PUSH	BC
0031AC CD 00 00 00         A 13541    	CALL	_ld_word
0031B0 C1                  A 13542    	POP	BC
0031B1 E5C1                A 13543    	LD	BC,HL
0031B3 CD 00 00 00         A 13544    	CALL	__stoiu
0031B7 01800000            A 13545    	LD	BC,128
0031BB B7                  A 13546    	OR	A,A
0031BC ED42                A 13547    	SBC	HL,BC
0031BE F2 DF 31 00         A 13548    	JP	P,L_677
0031C2 DD07FD              A 13549    	LD	BC,(IX+%FFFFFFFD)
0031C5 DD0FEC              A 13550    	LD	(IX+%FFFFFFEC),BC
0031C8 DD31FD              A 13551    	LD	IY,(IX+%FFFFFFFD)
0031CB ED0320              A 13552    	LEA	BC,IY+%20
0031CE C5                  A 13553    	PUSH	BC
0031CF CD 3C 00 00         A 13554    	CALL	_ld_dword
0031D3 C1                  A 13555    	POP	BC
0031D4 01000001            A 13556    	LD	BC,65536
0031D8 AF                  A 13557    	XOR	A,A
0031D9 CD 00 00 00         A 13558    	CALL	__lcmpu
0031DD 38 1B               A 13559    	JR	C,L_684
                           A 13560    ; 3267				&& ld_word(fs->win + BPB_FA
0031DF                     A 13561    L_677:
                           A 13562    .LINE 3267
                           A 13563    
0031DF DD31EC              A 13564    	LD	IY,(IX+%FFFFFFEC)
0031E2 ED0316              A 13565    	LEA	BC,IY+%16
0031E5 C5                  A 13566    	PUSH	BC
0031E6 CD 00 00 00         A 13567    	CALL	_ld_word
0031EA C1                  A 13568    	POP	BC
0031EB 49010000            A 13569    	LD.LIS	BC,0
0031EF B7                  A 13570    	OR	A,A
0031F0 40ED42              A 13571    	SBC.SIS	HL,BC
0031F3 28 05               A 13572    	JR	Z,L_684
                           A 13573    ; 3268					return 0;	/* It can b
                           A 13574    .LINE 3268
                           A 13575    
0031F5 B7                  A 13576    	OR	A,A
0031F6 ED62                A 13577    	SBC	HL,HL
0031F8 18 20               A 13578    	JR	L_685
                           A 13579    ; 3269			}
                           A 13580    ; 3270		}
0031FA                     A 13581    L_684:
                           A 13582    .LINE 3270
                           A 13583    
                           A 13584    ; 3271		return sign == 0xAA55 ? 2 : 3;	/* 
                           A 13585    .LINE 3271
                           A 13586    
0031FA 490155AA            A 13587    	LD.LIS	BC,43605
0031FE DD27F5              A 13588    	LD	HL,(IX+%FFFFFFF5)
003201 B7                  A 13589    	OR	A,A
003202 40ED42              A 13590    	SBC.SIS	HL,BC
003205 20 09               A 13591    	JR	NZ,L_682
003207 01020000            A 13592    	LD	BC,2
00320B DD0FF2              A 13593    	LD	(IX+%FFFFFFF2),BC
00320E 18 07               A 13594    	JR	L_683
003210                     A 13595    L_682:
003210 01030000            A 13596    	LD	BC,3
003214 DD0FF2              A 13597    	LD	(IX+%FFFFFFF2),BC
003217                     A 13598    L_683:
003217 DD27F2              A 13599    	LD	HL,(IX+%FFFFFFF2)
                           A 13600    ; 3272	}
00321A                     A 13601    L_685:
                           A 13602    .LINE 3272
                           A 13603    
00321A DDF9                A 13604    	LD	SP,IX
00321C DDE1                A 13605    	POP	IX
00321E C9                  A 13606    	RET	
                           A 13607    
                           A 13608    
                           A 13609    ;**************************** _check_fs *******
                           A 13610    ;Name                         Addr/Register   S
                           A 13611    ;_memcmp                             IMPORT  --
                           A 13612    ;G_43                                 IX-20    
                           A 13613    ;G_37                                 IX-17    
                           A 13614    ;temp680                              IX-14    
                           A 13615    ;sign                                 IX-11    
                           A 13616    ;w                                     IX-9    
                           A 13617    ;G_36                                  IX-7    
                           A 13618    ;b                                     IX-4    
                           A 13619    ;G_38                                  IX-3    
                           A 13620    ;sect                                  IX+9    
                           A 13621    ;fs                                    IX+6    
                           A 13622    
                           A 13623    
                           A 13624    ; Stack Frame Size: 35 (bytes)
                           A 13625    ;       Spill Code: -2 (instruction)
                           A 13626    
                           A 13627    
                           A 13628    .ENDFUNC "check_fs",3272,"_check_fs"
                           A 13629    	SEGMENT STRSECT
000010                     A 13630    L__346:
000010 46415433 32202020   A 13631    	DB	"FAT32   "
000018 00                  A 13632    	DB	0
                           A 13633    	SEGMENT CODE
                           A 13634    ; 3273	
                           A 13635    ; 3274	
                           A 13636    ; 3275	/* Find an FAT volume */
                           A 13637    ; 3276	/* (It supports only generic partitioni
                           A 13638    ; 3277	
                           A 13639    ; 3278	static UINT find_volume (	/* Returns 
                           A 13640    ; 3279		FATFS* fs,		/* Filesystem objec
                           A 13641    ; 3280		UINT part		/* Partition to fin
                           A 13642    ; 3281	)
                           A 13643    ; 3282	{
00321F                     A 13644    _find_volume:
                           A 13645    .DEFINE "_find_volume"
                           A 13646    
                           A 13647    .VALUE _find_volume
                           A 13648    
                           A 13649    .CLASS 3
                           A 13650    
                           A 13651    .TYPE 78
                           A 13652    
                           A 13653    .ENDEF
                           A 13654    
                           A 13655    .BEGFUNC "find_volume",3282,"_find_volume"
                           A 13656    
                           A 13657    .LINE 3282
                           A 13658    
                           A 13659    .DEFINE "fs"
                           A 13660    
                           A 13661    .CLASS 65
                           A 13662    
                           A 13663    .VALUE 6
                           A 13664    
                           A 13665    .TAG "NONAME0"
                           A 13666    
                           A 13667    .TYPE 40
                           A 13668    
                           A 13669    .ENDEF
                           A 13670    
                           A 13671    .DEFINE "part"
                           A 13672    
                           A 13673    .CLASS 65
                           A 13674    
                           A 13675    .VALUE 9
                           A 13676    
                           A 13677    .TYPE 14
                           A 13678    
                           A 13679    .ENDEF
                           A 13680    
                           A 13681    .DEFINE "i"
                           A 13682    
                           A 13683    .CLASS 65
                           A 13684    
                           A 13685    .VALUE -3
                           A 13686    
                           A 13687    .TYPE 14
                           A 13688    
                           A 13689    .ENDEF
                           A 13690    
                           A 13691    .DEFINE "fmt"
                           A 13692    
                           A 13693    .CLASS 65
                           A 13694    
                           A 13695    .VALUE -6
                           A 13696    
                           A 13697    .TYPE 14
                           A 13698    
                           A 13699    .ENDEF
                           A 13700    
                           A 13701    .DEFINE "mbr_pt"
                           A 13702    
                           A 13703    .CLASS 65
                           A 13704    
                           A 13705    .VALUE -31
                           A 13706    
                           A 13707    .DIM 4
                           A 13708    
                           A 13709    .TYPE 111
                           A 13710    
                           A 13711    .ENDEF
                           A 13712    
00321F DDE5                A 13713    	PUSH	IX
003221 DD210000 00         A 13714    	LD	IX,0
003226 DD39                A 13715    	ADD	IX,SP
003228 ED22DB              A 13716    	LEA	HL,IX+%FFFFFFDB
00322B F9                  A 13717    	LD	SP,HL
                           A 13718    ; 3283		UINT fmt, i;
                           A 13719    ; 3284		DWORD mbr_pt[4];
                           A 13720    ; 3285	
                           A 13721    ; 3286	
                           A 13722    ; 3287		fmt = check_fs(fs, 0);				
                           A 13723    .LINE 3287
                           A 13724    
00322C 01000000            A 13725    	LD	BC,0
003230 C5                  A 13726    	PUSH	BC
003231 C5                  A 13727    	PUSH	BC
003232 DD0706              A 13728    	LD	BC,(IX+%6)
003235 C5                  A 13729    	PUSH	BC
003236 CD 2C 30 00         A 13730    	CALL	_check_fs
00323A C1                  A 13731    	POP	BC
00323B C1                  A 13732    	POP	BC
00323C C1                  A 13733    	POP	BC
00323D DD2FFA              A 13734    	LD	(IX+%FFFFFFFA),HL
                           A 13735    ; 3288		if (fmt != 2 && (fmt >= 3 || part =
                           A 13736    .LINE 3288
                           A 13737    
003240 01020000            A 13738    	LD	BC,2
003244 DD27FA              A 13739    	LD	HL,(IX+%FFFFFFFA)
003247 B7                  A 13740    	OR	A,A
003248 ED42                A 13741    	SBC	HL,BC
00324A 28 1F               A 13742    	JR	Z,L_695
00324C 01030000            A 13743    	LD	BC,3
003250 DD27FA              A 13744    	LD	HL,(IX+%FFFFFFFA)
003253 B7                  A 13745    	OR	A,A
003254 ED42                A 13746    	SBC	HL,BC
003256 30 0C               A 13747    	JR	NC,L_688
003258 01000000            A 13748    	LD	BC,0
00325C DD2709              A 13749    	LD	HL,(IX+%9)
00325F B7                  A 13750    	OR	A,A
003260 ED42                A 13751    	SBC	HL,BC
003262 20 07               A 13752    	JR	NZ,L_695
003264                     A 13753    L_688:
003264 DD27FA              A 13754    	LD	HL,(IX+%FFFFFFFA)
003267 C3 69 33 00         A 13755    	JR	L_710
                           A 13756    ; 3289	
                           A 13757    ; 3290		/* Sector 0 is not an FAT VBR or fo
                           A 13758    ; 3291	
                           A 13759    ; 3292	#if FF_LBA64
                           A 13760    ; 3293		if (fs->win[MBR_Table + PTE_System]
                           A 13761    ; 3294			DWORD n_ent, v_ent, ofs;
                           A 13762    ; 3295			QWORD pt_lba;
                           A 13763    ; 3296	
                           A 13764    ; 3297			if (move_window(fs, 1) != FR_OK
                           A 13765    ; 3298			if (!test_gpt_header(fs->win)) 
                           A 13766    ; 3299			n_ent = ld_dword(fs->win + GPTH
                           A 13767    ; 3300			pt_lba = ld_qword(fs->win + GPT
                           A 13768    ; 3301			for (v_ent = i = 0; i < n_ent; 
                           A 13769    ; 3302				if (move_window(fs, pt_lba 
                           A 13770    ; 3303				ofs = i * SZ_GPTE % SS(fs);
                           A 13771    ; 3304				if (!memcmp(fs->win + ofs +
                           A 13772    ; 3305					v_ent++;
                           A 13773    ; 3306					fmt = check_fs(fs, ld_q
                           A 13774    ; 3307					if (part == 0 && fmt <=
                           A 13775    ; 3308					if (part != 0 && v_ent 
                           A 13776    ; 3309				}
                           A 13777    ; 3310			}
                           A 13778    ; 3311			return 3;	/* Not found */
                           A 13779    ; 3312		}
                           A 13780    ; 3313	#endif
                           A 13781    ; 3314		if (FF_MULTI_PARTITION && part > 4)
00326B                     A 13782    L_695:
                           A 13783    .LINE 3314
                           A 13784    
                           A 13785    ; 3315		for (i = 0; i < 4; i++) {		/* 
                           A 13786    .LINE 3315
                           A 13787    
00326B 01000000            A 13788    	LD	BC,0
00326F DD0FFD              A 13789    	LD	(IX+%FFFFFFFD),BC
003272 18 4E               A 13790    	JR	L_694
003274                     A 13791    L_692:
                           A 13792    ; 3316			mbr_pt[i] = ld_dword(fs->win + 
                           A 13793    .LINE 3316
                           A 13794    
003274 01BE0100            A 13795    	LD	BC,446
003278 DD3106              A 13796    	LD	IY,(IX+%6)
00327B ED2332              A 13797    	LEA	HL,IY+%32
00327E 09                  A 13798    	ADD	HL,BC
00327F E5C1                A 13799    	LD	BC,HL
003281 DD27FD              A 13800    	LD	HL,(IX+%FFFFFFFD)
003284 29                  A 13801    	ADD	HL,HL
003285 29                  A 13802    	ADD	HL,HL
003286 29                  A 13803    	ADD	HL,HL
003287 29                  A 13804    	ADD	HL,HL
003288 09                  A 13805    	ADD	HL,BC
003289 E5FDE1              A 13806    	LD	IY,HL
00328C ED0308              A 13807    	LEA	BC,IY+%8
00328F C5                  A 13808    	PUSH	BC
003290 CD 3C 00 00         A 13809    	CALL	_ld_dword
003294 C1                  A 13810    	POP	BC
003295 E5C1                A 13811    	LD	BC,HL
003297 DD27FD              A 13812    	LD	HL,(IX+%FFFFFFFD)
00329A 29                  A 13813    	ADD	HL,HL
00329B 29                  A 13814    	ADD	HL,HL
00329C DD0FDE              A 13815    	LD	(IX+%FFFFFFDE),BC	; spill
00329F ED02E1              A 13816    	LEA	BC,IX+%FFFFFFE1
0032A2 DD0FDB              A 13817    	LD	(IX+%FFFFFFDB),BC	; spill
0032A5 DD07DE              A 13818    	LD	BC,(IX+%FFFFFFDE)	; unspill
0032A8 DD0FDE              A 13819    	LD	(IX+%FFFFFFDE),BC	; spill
0032AB DD07DB              A 13820    	LD	BC,(IX+%FFFFFFDB)	; unspill
0032AE 09                  A 13821    	ADD	HL,BC
0032AF DD07DE              A 13822    	LD	BC,(IX+%FFFFFFDE)	; unspill
0032B2 E5FDE1              A 13823    	LD	IY,HL
0032B5 FD0F00              A 13824    	LD	(IY),BC
0032B8 FD7303              A 13825    	LD	(IY+%3),E
0032BB DD07FD              A 13826    	LD	BC,(IX+%FFFFFFFD)
0032BE 03                  A 13827    	INC	BC
0032BF DD0FFD              A 13828    	LD	(IX+%FFFFFFFD),BC
                           A 13829    ; 3317		}
0032C2                     A 13830    L_694:
                           A 13831    .LINE 3317
                           A 13832    
0032C2 01040000            A 13833    	LD	BC,4
0032C6 DD27FD              A 13834    	LD	HL,(IX+%FFFFFFFD)
0032C9 B7                  A 13835    	OR	A,A
0032CA ED42                A 13836    	SBC	HL,BC
0032CC 38 A6               A 13837    	JR	C,L_692
                           A 13838    ; 3318		i = part ? part - 1 : 0;		/* 
                           A 13839    .LINE 3318
                           A 13840    
0032CE 01000000            A 13841    	LD	BC,0
0032D2 DD2709              A 13842    	LD	HL,(IX+%9)
0032D5 B7                  A 13843    	OR	A,A
0032D6 ED42                A 13844    	SBC	HL,BC
0032D8 28 0B               A 13845    	JR	Z,L_698
0032DA DD3109              A 13846    	LD	IY,(IX+%9)
0032DD ED33FF              A 13847    	LEA	IY,IY+%FFFFFFFF
0032E0 DD3EF7              A 13848    	LD	(IX+%FFFFFFF7),IY
0032E3 18 03               A 13849    	JR	L_699
0032E5                     A 13850    L_698:
0032E5 DD0FF7              A 13851    	LD	(IX+%FFFFFFF7),BC
0032E8                     A 13852    L_699:
0032E8 DD07F7              A 13853    	LD	BC,(IX+%FFFFFFF7)
0032EB DD0FFD              A 13854    	LD	(IX+%FFFFFFFD),BC
                           A 13855    ; 3319		do {							/* 
0032EE                     A 13856    L_707:
                           A 13857    .LINE 3319
                           A 13858    
                           A 13859    ; 3320			fmt = mbr_pt[i] ? check_fs(fs, 
                           A 13860    .LINE 3320
                           A 13861    
0032EE DD27FD              A 13862    	LD	HL,(IX+%FFFFFFFD)
0032F1 29                  A 13863    	ADD	HL,HL
0032F2 29                  A 13864    	ADD	HL,HL
0032F3 E5C1                A 13865    	LD	BC,HL
0032F5 ED22E1              A 13866    	LEA	HL,IX+%FFFFFFE1
0032F8 09                  A 13867    	ADD	HL,BC
0032F9 DD2FF1              A 13868    	LD	(IX+%FFFFFFF1),HL
0032FC DD31F1              A 13869    	LD	IY,(IX+%FFFFFFF1)
0032FF FD2700              A 13870    	LD	HL,(IY)
003302 FD5E03              A 13871    	LD	E,(IY+%3)
003305 01000000            A 13872    	LD	BC,0
003309 AF                  A 13873    	XOR	A,A
00330A CD 00 00 00         A 13874    	CALL	__lcmpu
00330E 28 1E               A 13875    	JR	Z,L_703
003310 DD31F1              A 13876    	LD	IY,(IX+%FFFFFFF1)
003313 FD0700              A 13877    	LD	BC,(IY)
003316 FD7E03              A 13878    	LD	A,(IY+%3)
003319 2600                A 13879    	LD	H,%0
00331B 6F                  A 13880    	LD	L,A
00331C E5                  A 13881    	PUSH	HL
00331D C5                  A 13882    	PUSH	BC
00331E DD0706              A 13883    	LD	BC,(IX+%6)
003321 C5                  A 13884    	PUSH	BC
003322 CD 2C 30 00         A 13885    	CALL	_check_fs
003326 C1                  A 13886    	POP	BC
003327 C1                  A 13887    	POP	BC
003328 C1                  A 13888    	POP	BC
003329 DD2FF4              A 13889    	LD	(IX+%FFFFFFF4),HL
00332C 18 07               A 13890    	JR	L_704
00332E                     A 13891    L_703:
00332E 01030000            A 13892    	LD	BC,3
003332 DD0FF4              A 13893    	LD	(IX+%FFFFFFF4),BC
003335                     A 13894    L_704:
003335 DD07F4              A 13895    	LD	BC,(IX+%FFFFFFF4)
003338 DD0FFA              A 13896    	LD	(IX+%FFFFFFFA),BC
                           A 13897    ; 3321		} while (part == 0 && fmt >= 2 && +
                           A 13898    .LINE 3321
                           A 13899    
00333B 01000000            A 13900    	LD	BC,0
00333F DD2709              A 13901    	LD	HL,(IX+%9)
003342 B7                  A 13902    	OR	A,A
003343 ED42                A 13903    	SBC	HL,BC
003345 20 1F               A 13904    	JR	NZ,L_709
003347 01020000            A 13905    	LD	BC,2
00334B DD27FA              A 13906    	LD	HL,(IX+%FFFFFFFA)
00334E B7                  A 13907    	OR	A,A
00334F ED42                A 13908    	SBC	HL,BC
003351 38 13               A 13909    	JR	C,L_709
003353 DD07FD              A 13910    	LD	BC,(IX+%FFFFFFFD)
003356 03                  A 13911    	INC	BC
003357 DD0FFD              A 13912    	LD	(IX+%FFFFFFFD),BC
00335A 01040000            A 13913    	LD	BC,4
00335E DD27FD              A 13914    	LD	HL,(IX+%FFFFFFFD)
003361 B7                  A 13915    	OR	A,A
003362 ED42                A 13916    	SBC	HL,BC
003364 38 88               A 13917    	JR	C,L_707
003366                     A 13918    L_709:
                           A 13919    ; 3322		return fmt;
                           A 13920    .LINE 3322
                           A 13921    
003366 DD27FA              A 13922    	LD	HL,(IX+%FFFFFFFA)
                           A 13923    ; 3323	}
003369                     A 13924    L_710:
                           A 13925    .LINE 3323
                           A 13926    
003369 DDF9                A 13927    	LD	SP,IX
00336B DDE1                A 13928    	POP	IX
00336D C9                  A 13929    	RET	
                           A 13930    
                           A 13931    
                           A 13932    ;**************************** _find_volume ****
                           A 13933    ;Name                         Addr/Register   S
                           A 13934    ;mbr_pt                               IX-31    
                           A 13935    ;G_44                                 IX-15    
                           A 13936    ;temp701                              IX-12    
                           A 13937    ;temp696                               IX-9    
                           A 13938    ;fmt                                   IX-6    
                           A 13939    ;i                                     IX-3    
                           A 13940    ;part                                  IX+9    
                           A 13941    ;fs                                    IX+6    
                           A 13942    
                           A 13943    
                           A 13944    ; Stack Frame Size: 49 (bytes)
                           A 13945    ;       Spill Code: -2 (instruction)
                           A 13946    
                           A 13947    
                           A 13948    .ENDFUNC "find_volume",3323,"_find_volume"
                           A 13949    ; 3324	
                           A 13950    ; 3325	
                           A 13951    ; 3326	
                           A 13952    ; 3327	
                           A 13953    ; 3328	/*-------------------------------------
                           A 13954    ; 3329	/* Determine logical drive number and m
                           A 13955    ; 3330	/*-------------------------------------
                           A 13956    ; 3331	
                           A 13957    ; 3332	static FRESULT mount_volume (	/* FR_O
                           A 13958    ; 3333		const TCHAR** path,			/* Poin
                           A 13959    ; 3334		FATFS** rfs,				/* Poin
                           A 13960    ; 3335		BYTE mode					/* !=0:
                           A 13961    ; 3336	)
                           A 13962    ; 3337	{
00336E                     A 13963    _mount_volume:
                           A 13964    .DEFINE "_mount_volume"
                           A 13965    
                           A 13966    .VALUE _mount_volume
                           A 13967    
                           A 13968    .CLASS 3
                           A 13969    
                           A 13970    .TYPE 68
                           A 13971    
                           A 13972    .ENDEF
                           A 13973    
                           A 13974    .BEGFUNC "mount_volume",3337,"_mount_volume"
                           A 13975    
                           A 13976    .LINE 3337
                           A 13977    
                           A 13978    .DEFINE "path"
                           A 13979    
                           A 13980    .CLASS 65
                           A 13981    
                           A 13982    .VALUE 6
                           A 13983    
                           A 13984    .TYPE 1570
                           A 13985    
                           A 13986    .ENDEF
                           A 13987    
                           A 13988    .DEFINE "rfs"
                           A 13989    
                           A 13990    .CLASS 65
                           A 13991    
                           A 13992    .VALUE 9
                           A 13993    
                           A 13994    .TAG "NONAME0"
                           A 13995    
                           A 13996    .TYPE 296
                           A 13997    
                           A 13998    .ENDEF
                           A 13999    
                           A 14000    .DEFINE "mode"
                           A 14001    
                           A 14002    .CLASS 65
                           A 14003    
                           A 14004    .VALUE 12
                           A 14005    
                           A 14006    .TYPE 12
                           A 14007    
                           A 14008    .ENDEF
                           A 14009    
                           A 14010    .DEFINE "fs"
                           A 14011    
                           A 14012    .CLASS 65
                           A 14013    
                           A 14014    .VALUE -3
                           A 14015    
                           A 14016    .TAG "NONAME0"
                           A 14017    
                           A 14018    .TYPE 40
                           A 14019    
                           A 14020    .ENDEF
                           A 14021    
                           A 14022    .DEFINE "fmt"
                           A 14023    
                           A 14024    .CLASS 65
                           A 14025    
                           A 14026    .VALUE -6
                           A 14027    
                           A 14028    .TYPE 14
                           A 14029    
                           A 14030    .ENDEF
                           A 14031    
                           A 14032    .DEFINE "stat"
                           A 14033    
                           A 14034    .CLASS 65
                           A 14035    
                           A 14036    .VALUE -7
                           A 14037    
                           A 14038    .TYPE 12
                           A 14039    
                           A 14040    .ENDEF
                           A 14041    
                           A 14042    .DEFINE "fasize"
                           A 14043    
                           A 14044    .CLASS 65
                           A 14045    
                           A 14046    .VALUE -11
                           A 14047    
                           A 14048    .TYPE 15
                           A 14049    
                           A 14050    .ENDEF
                           A 14051    
                           A 14052    .DEFINE "nclst"
                           A 14053    
                           A 14054    .CLASS 65
                           A 14055    
                           A 14056    .VALUE -22
                           A 14057    
                           A 14058    .TYPE 15
                           A 14059    
                           A 14060    .ENDEF
                           A 14061    
                           A 14062    .DEFINE "nrsv"
                           A 14063    
                           A 14064    .CLASS 65
                           A 14065    
                           A 14066    .VALUE -24
                           A 14067    
                           A 14068    .TYPE 13
                           A 14069    
                           A 14070    .ENDEF
                           A 14071    
                           A 14072    .DEFINE "vol"
                           A 14073    
                           A 14074    .CLASS 65
                           A 14075    
                           A 14076    .VALUE -34
                           A 14077    
                           A 14078    .TYPE 4
                           A 14079    
                           A 14080    .ENDEF
                           A 14081    
                           A 14082    .DEFINE "bsect"
                           A 14083    
                           A 14084    .CLASS 65
                           A 14085    
                           A 14086    .VALUE -38
                           A 14087    
                           A 14088    .TYPE 15
                           A 14089    
                           A 14090    .ENDEF
                           A 14091    
                           A 14092    .DEFINE "tsect"
                           A 14093    
                           A 14094    .CLASS 65
                           A 14095    
                           A 14096    .VALUE -42
                           A 14097    
                           A 14098    .TYPE 15
                           A 14099    
                           A 14100    .ENDEF
                           A 14101    
                           A 14102    .DEFINE "sysect"
                           A 14103    
                           A 14104    .CLASS 65
                           A 14105    
                           A 14106    .VALUE -55
                           A 14107    
                           A 14108    .TYPE 15
                           A 14109    
                           A 14110    .ENDEF
                           A 14111    
                           A 14112    .DEFINE "szbfat"
                           A 14113    
                           A 14114    .CLASS 65
                           A 14115    
                           A 14116    .VALUE -63
                           A 14117    
                           A 14118    .TYPE 15
                           A 14119    
                           A 14120    .ENDEF
                           A 14121    
00336E DDE5                A 14122    	PUSH	IX
003370 DD210000 00         A 14123    	LD	IX,0
003375 DD39                A 14124    	ADD	IX,SP
003377 ED22B1              A 14125    	LEA	HL,IX+%FFFFFFB1
00337A F9                  A 14126    	LD	SP,HL
                           A 14127    ; 3338		int vol;
                           A 14128    ; 3339		DSTATUS stat;
                           A 14129    ; 3340		LBA_t bsect;
                           A 14130    ; 3341		DWORD tsect, sysect, fasize, nclst,
                           A 14131    ; 3342		WORD nrsv;
                           A 14132    ; 3343		FATFS *fs;
                           A 14133    ; 3344		UINT fmt;
                           A 14134    ; 3345	
                           A 14135    ; 3346	
                           A 14136    ; 3347		/* Get logical drive number */
                           A 14137    ; 3348		*rfs = 0;
                           A 14138    .LINE 3348
                           A 14139    
00337B DD2709              A 14140    	LD	HL,(IX+%9)
00337E 01000000            A 14141    	LD	BC,0
003382 ED0F                A 14142    	LD	(HL),BC
                           A 14143    ; 3349		vol = get_ldnumber(path);
                           A 14144    .LINE 3349
                           A 14145    
003384 DD0706              A 14146    	LD	BC,(IX+%6)
003387 C5                  A 14147    	PUSH	BC
003388 CD 3A 2F 00         A 14148    	CALL	_get_ldnumber
00338C C1                  A 14149    	POP	BC
00338D DD2FDE              A 14150    	LD	(IX+%FFFFFFDE),HL
                           A 14151    ; 3350		if (vol < 0) return FR_INVALID_DRIV
                           A 14152    .LINE 3350
                           A 14153    
003390 01000000            A 14154    	LD	BC,0
003394 DD27DE              A 14155    	LD	HL,(IX+%FFFFFFDE)
003397 B7                  A 14156    	OR	A,A
003398 ED42                A 14157    	SBC	HL,BC
00339A F2 A4 33 00         A 14158    	JP	P,L__412
00339E EA B0 33 00         A 14159    	JP	PE,L_712
0033A2 18 04               A 14160    	JR	L__413
0033A4                     A 14161    L__412:
0033A4 E2 B0 33 00         A 14162    	JP	PO,L_712
0033A8                     A 14163    L__413:
0033A8 210B0000            A 14164    	LD	HL,11
0033AC C3 14 3A 00         A 14165    	JR	L_780
0033B0                     A 14166    L_712:
                           A 14167    ; 3351	
                           A 14168    ; 3352		/* Check if the filesystem object i
                           A 14169    ; 3353		fs = FatFs[vol];					
                           A 14170    .LINE 3353
                           A 14171    
0033B0 DD27DE              A 14172    	LD	HL,(IX+%FFFFFFDE)
0033B3 E5C1                A 14173    	LD	BC,HL
0033B5 29                  A 14174    	ADD	HL,HL
0033B6 09                  A 14175    	ADD	HL,BC
0033B7 01 00 00 00         A 14176    	LD	BC,_FatFs
0033BB 09                  A 14177    	ADD	HL,BC
0033BC ED07                A 14178    	LD	BC,(HL)
0033BE DD0FFD              A 14179    	LD	(IX+%FFFFFFFD),BC
                           A 14180    ; 3354		if (!fs) return FR_NOT_ENABLED;		
                           A 14181    .LINE 3354
                           A 14182    
0033C1 01000000            A 14183    	LD	BC,0
0033C5 DD27FD              A 14184    	LD	HL,(IX+%FFFFFFFD)
0033C8 B7                  A 14185    	OR	A,A
0033C9 ED42                A 14186    	SBC	HL,BC
0033CB 20 08               A 14187    	JR	NZ,L_714
0033CD 210C0000            A 14188    	LD	HL,12
0033D1 C3 14 3A 00         A 14189    	JR	L_780
0033D5                     A 14190    L_714:
                           A 14191    ; 3355	#if FF_FS_REENTRANT
                           A 14192    ; 3356		if (!lock_fs(fs)) return FR_TIMEOUT
                           A 14193    ; 3357	#endif
                           A 14194    ; 3358		*rfs = fs;							
                           A 14195    .LINE 3358
                           A 14196    
0033D5 DD2709              A 14197    	LD	HL,(IX+%9)
0033D8 DD07FD              A 14198    	LD	BC,(IX+%FFFFFFFD)
0033DB ED0F                A 14199    	LD	(HL),BC
                           A 14200    ; 3359	
                           A 14201    ; 3360		mode &= (BYTE)~FA_READ;				
                           A 14202    .LINE 3360
                           A 14203    
0033DD DD7E0C              A 14204    	LD	A,(IX+%C)
0033E0 CB87                A 14205    	RES	%0,A
0033E2 DD770C              A 14206    	LD	(IX+%C),A
                           A 14207    ; 3361		if (fs->fs_type != 0) {				
                           A 14208    .LINE 3361
                           A 14209    
0033E5 DD31FD              A 14210    	LD	IY,(IX+%FFFFFFFD)
0033E8 FD7E00              A 14211    	LD	A,(IY+%0)
0033EB B7                  A 14212    	OR	A,A
0033EC 28 31               A 14213    	JR	Z,L_720
                           A 14214    ; 3362			stat = disk_status(fs->pdrv);
                           A 14215    .LINE 3362
                           A 14216    
0033EE DD31FD              A 14217    	LD	IY,(IX+%FFFFFFFD)
0033F1 FD4E01              A 14218    	LD	C,(IY+%1)
0033F4 0600                A 14219    	LD	B,%0
0033F6 C5                  A 14220    	PUSH	BC
0033F7 CD 00 00 00         A 14221    	CALL	_disk_status
0033FB C1                  A 14222    	POP	BC
0033FC DD77F9              A 14223    	LD	(IX+%FFFFFFF9),A
                           A 14224    ; 3363			if (!(stat & STA_NOINIT)) {		
                           A 14225    .LINE 3363
                           A 14226    
0033FF E601                A 14227    	AND	A,%1
003401 20 1C               A 14228    	JR	NZ,L_720
                           A 14229    ; 3364				if (!FF_FS_READONLY && mode
                           A 14230    .LINE 3364
                           A 14231    
003403 DD7E0C              A 14232    	LD	A,(IX+%C)
003406 B7                  A 14233    	OR	A,A
003407 28 0F               A 14234    	JR	Z,L_717
003409 DD7EF9              A 14235    	LD	A,(IX+%FFFFFFF9)
00340C E604                A 14236    	AND	A,%4
00340E 28 08               A 14237    	JR	Z,L_717
                           A 14238    ; 3365					return FR_WRITE_PROTECT
                           A 14239    .LINE 3365
                           A 14240    
003410 210A0000            A 14241    	LD	HL,10
003414 C3 14 3A 00         A 14242    	JR	L_780
                           A 14243    ; 3366				}
003418                     A 14244    L_717:
                           A 14245    .LINE 3366
                           A 14246    
                           A 14247    ; 3367				return FR_OK;				
                           A 14248    .LINE 3367
                           A 14249    
003418 B7                  A 14250    	OR	A,A
003419 ED62                A 14251    	SBC	HL,HL
00341B C3 14 3A 00         A 14252    	JR	L_780
                           A 14253    ; 3368			}
                           A 14254    ; 3369		}
00341F                     A 14255    L_720:
                           A 14256    .LINE 3369
                           A 14257    
                           A 14258    ; 3370	
                           A 14259    ; 3371		/* The filesystem object is not val
                           A 14260    ; 3372		/* Following code attempts to mount
                           A 14261    ; 3373	
                           A 14262    ; 3374		fs->fs_type = 0;					
                           A 14263    .LINE 3374
                           A 14264    
00341F DD31FD              A 14265    	LD	IY,(IX+%FFFFFFFD)
003422 FD360000            A 14266    	LD	(IY+%0),%0
                           A 14267    ; 3375		fs->pdrv = LD2PD(vol);				
                           A 14268    .LINE 3375
                           A 14269    
003426 DD7EDE              A 14270    	LD	A,(IX+%FFFFFFDE)
003429 FD7701              A 14271    	LD	(IY+%1),A
                           A 14272    ; 3376		stat = disk_initialize(fs->pdrv);	
                           A 14273    .LINE 3376
                           A 14274    
00342C FD4E01              A 14275    	LD	C,(IY+%1)
00342F 0600                A 14276    	LD	B,%0
003431 C5                  A 14277    	PUSH	BC
003432 CD 00 00 00         A 14278    	CALL	_disk_initialize
003436 C1                  A 14279    	POP	BC
003437 DD77F9              A 14280    	LD	(IX+%FFFFFFF9),A
                           A 14281    ; 3377		if (stat & STA_NOINIT) { 			
                           A 14282    .LINE 3377
                           A 14283    
00343A E601                A 14284    	AND	A,%1
00343C 28 08               A 14285    	JR	Z,L_724
                           A 14286    ; 3378			return FR_NOT_READY;			
                           A 14287    .LINE 3378
                           A 14288    
00343E 21030000            A 14289    	LD	HL,3
003442 C3 14 3A 00         A 14290    	JR	L_780
                           A 14291    ; 3379		}
003446                     A 14292    L_724:
                           A 14293    .LINE 3379
                           A 14294    
                           A 14295    ; 3380		if (!FF_FS_READONLY && mode && (sta
                           A 14296    .LINE 3380
                           A 14297    
003446 DD7E0C              A 14298    	LD	A,(IX+%C)
003449 B7                  A 14299    	OR	A,A
00344A 28 0F               A 14300    	JR	Z,L_725
00344C DD7EF9              A 14301    	LD	A,(IX+%FFFFFFF9)
00344F E604                A 14302    	AND	A,%4
003451 28 08               A 14303    	JR	Z,L_725
                           A 14304    ; 3381			return FR_WRITE_PROTECTED;
                           A 14305    .LINE 3381
                           A 14306    
003453 210A0000            A 14307    	LD	HL,10
003457 C3 14 3A 00         A 14308    	JR	L_780
                           A 14309    ; 3382		}
00345B                     A 14310    L_725:
                           A 14311    .LINE 3382
                           A 14312    
                           A 14313    ; 3383	#if FF_MAX_SS != FF_MIN_SS				
                           A 14314    ; 3384		if (disk_ioctl(fs->pdrv, GET_SECTOR
                           A 14315    ; 3385		if (SS(fs) > FF_MAX_SS || SS(fs) < 
                           A 14316    ; 3386	#endif
                           A 14317    ; 3387	
                           A 14318    ; 3388		/* Find an FAT volume on the drive 
                           A 14319    ; 3389		fmt = find_volume(fs, LD2PT(vol));
                           A 14320    .LINE 3389
                           A 14321    
00345B 01000000            A 14322    	LD	BC,0
00345F C5                  A 14323    	PUSH	BC
003460 DD07FD              A 14324    	LD	BC,(IX+%FFFFFFFD)
003463 C5                  A 14325    	PUSH	BC
003464 CD 1F 32 00         A 14326    	CALL	_find_volume
003468 C1                  A 14327    	POP	BC
003469 C1                  A 14328    	POP	BC
00346A DD2FFA              A 14329    	LD	(IX+%FFFFFFFA),HL
                           A 14330    ; 3390		if (fmt == 4) return FR_DISK_ERR;	
                           A 14331    .LINE 3390
                           A 14332    
00346D 01040000            A 14333    	LD	BC,4
003471 DD27FA              A 14334    	LD	HL,(IX+%FFFFFFFA)
003474 B7                  A 14335    	OR	A,A
003475 ED42                A 14336    	SBC	HL,BC
003477 20 08               A 14337    	JR	NZ,L_728
003479 21010000            A 14338    	LD	HL,1
00347D C3 14 3A 00         A 14339    	JR	L_780
003481                     A 14340    L_728:
                           A 14341    ; 3391		if (fmt >= 2) return FR_NO_FILESYST
                           A 14342    .LINE 3391
                           A 14343    
003481 01020000            A 14344    	LD	BC,2
003485 DD27FA              A 14345    	LD	HL,(IX+%FFFFFFFA)
003488 B7                  A 14346    	OR	A,A
003489 ED42                A 14347    	SBC	HL,BC
00348B 38 08               A 14348    	JR	C,L_729
00348D 210D0000            A 14349    	LD	HL,13
003491 C3 14 3A 00         A 14350    	JR	L_780
003495                     A 14351    L_729:
                           A 14352    ; 3392		bsect = fs->winsect;				
                           A 14353    .LINE 3392
                           A 14354    
003495 DD31FD              A 14355    	LD	IY,(IX+%FFFFFFFD)
003498 FD072E              A 14356    	LD	BC,(IY+%2E)
00349B FD7E31              A 14357    	LD	A,(IY+%31)
00349E DD0FDA              A 14358    	LD	(IX+%FFFFFFDA),BC
0034A1 DD77DD              A 14359    	LD	(IX+%FFFFFFDD),A
                           A 14360    ; 3393	
                           A 14361    ; 3394		/* An FAT volume is found (bsect). 
                           A 14362    ; 3395	
                           A 14363    ; 3396	#if FF_FS_EXFAT
                           A 14364    ; 3397		if (fmt == 1) {
                           A 14365    ; 3398			QWORD maxlba;
                           A 14366    ; 3399			DWORD so, cv, bcl, i;
                           A 14367    ; 3400	
                           A 14368    ; 3401			for (i = BPB_ZeroedEx; i < BPB_
                           A 14369    ; 3402			if (i < BPB_ZeroedEx + 53) retu
                           A 14370    ; 3403	
                           A 14371    ; 3404			if (ld_word(fs->win + BPB_FSVer
                           A 14372    ; 3405	
                           A 14373    ; 3406			if (1 << fs->win[BPB_BytsPerSec
                           A 14374    ; 3407				return FR_NO_FILESYSTEM;
                           A 14375    ; 3408			}
                           A 14376    ; 3409	
                           A 14377    ; 3410			maxlba = ld_qword(fs->win + BPB
                           A 14378    ; 3411			if (!FF_LBA64 && maxlba >= 0x10
                           A 14379    ; 3412	
                           A 14380    ; 3413			fs->fsize = ld_dword(fs->win + 
                           A 14381    ; 3414	
                           A 14382    ; 3415			fs->n_fats = fs->win[BPB_NumFAT
                           A 14383    ; 3416			if (fs->n_fats != 1) return FR_
                           A 14384    ; 3417	
                           A 14385    ; 3418			fs->csize = 1 << fs->win[BPB_Se
                           A 14386    ; 3419			if (fs->csize == 0)	return FR_N
                           A 14387    ; 3420	
                           A 14388    ; 3421			nclst = ld_dword(fs->win + BPB_
                           A 14389    ; 3422			if (nclst > MAX_EXFAT) return F
                           A 14390    ; 3423			fs->n_fatent = nclst + 2;
                           A 14391    ; 3424	
                           A 14392    ; 3425			/* Boundaries and Limits */
                           A 14393    ; 3426			fs->volbase = bsect;
                           A 14394    ; 3427			fs->database = bsect + ld_dword
                           A 14395    ; 3428			fs->fatbase = bsect + ld_dword(
                           A 14396    ; 3429			if (maxlba < (QWORD)fs->databas
                           A 14397    ; 3430			fs->dirbase = ld_dword(fs->win 
                           A 14398    ; 3431	
                           A 14399    ; 3432			/* Get bitmap location and chec
                           A 14400    ; 3433			so = i = 0;
                           A 14401    ; 3434			for (;;) {	/* Find the bitmap 
                           A 14402    ; 3435				if (i == 0) {
                           A 14403    ; 3436					if (so >= fs->csize) re
                           A 14404    ; 3437					if (move_window(fs, cls
                           A 14405    ; 3438					so++;
                           A 14406    ; 3439				}
                           A 14407    ; 3440				if (fs->win[i] == ET_BITMAP
                           A 14408    ; 3441				i = (i + SZDIRE) % SS(fs);	
                           A 14409    ; 3442			}
                           A 14410    ; 3443			bcl = ld_dword(fs->win + i + 20
                           A 14411    ; 3444			if (bcl < 2 || bcl >= fs->n_fat
                           A 14412    ; 3445			fs->bitbase = fs->database + fs
                           A 14413    ; 3446			for (;;) {	/* Check if bitmap 
                           A 14414    ; 3447				if (move_window(fs, fs->fat
                           A 14415    ; 3448				cv = ld_dword(fs->win + bcl
                           A 14416    ; 3449				if (cv == 0xFFFFFFFF) break
                           A 14417    ; 3450				if (cv != ++bcl) return FR_
                           A 14418    ; 3451			}
                           A 14419    ; 3452	
                           A 14420    ; 3453	#if !FF_FS_READONLY
                           A 14421    ; 3454			fs->last_clst = fs->free_clst =
                           A 14422    ; 3455	#endif
                           A 14423    ; 3456			fmt = FS_EXFAT;			/* FAT 
                           A 14424    ; 3457		} else
                           A 14425    ; 3458	#endif	/* FF_FS_EXFAT */
                           A 14426    ; 3459		{
                           A 14427    ; 3460			if (ld_word(fs->win + BPB_BytsP
                           A 14428    .LINE 3460
                           A 14429    
0034A4 ED0332              A 14430    	LEA	BC,IY+%32
0034A7 DD0FEF              A 14431    	LD	(IX+%FFFFFFEF),BC
0034AA DD31EF              A 14432    	LD	IY,(IX+%FFFFFFEF)
0034AD ED030B              A 14433    	LEA	BC,IY+%B
0034B0 C5                  A 14434    	PUSH	BC
0034B1 CD 00 00 00         A 14435    	CALL	_ld_word
0034B5 C1                  A 14436    	POP	BC
0034B6 E5C1                A 14437    	LD	BC,HL
0034B8 CD 00 00 00         A 14438    	CALL	__stoiu
0034BC 01000200            A 14439    	LD	BC,512
0034C0 B7                  A 14440    	OR	A,A
0034C1 ED42                A 14441    	SBC	HL,BC
0034C3 28 08               A 14442    	JR	Z,L_731
0034C5 210D0000            A 14443    	LD	HL,13
0034C9 C3 14 3A 00         A 14444    	JR	L_780
0034CD                     A 14445    L_731:
                           A 14446    ; 3461	
                           A 14447    ; 3462			fasize = ld_word(fs->win + BPB_
                           A 14448    .LINE 3462
                           A 14449    
0034CD DD31EF              A 14450    	LD	IY,(IX+%FFFFFFEF)
0034D0 ED0316              A 14451    	LEA	BC,IY+%16
0034D3 C5                  A 14452    	PUSH	BC
0034D4 CD 00 00 00         A 14453    	CALL	_ld_word
0034D8 C1                  A 14454    	POP	BC
0034D9 E5C1                A 14455    	LD	BC,HL
0034DB CD 00 00 00         A 14456    	CALL	__stoiu
0034DF AF                  A 14457    	XOR	A,A
0034E0 DD2FF5              A 14458    	LD	(IX+%FFFFFFF5),HL
0034E3 DD77F8              A 14459    	LD	(IX+%FFFFFFF8),A
                           A 14460    ; 3463			if (fasize == 0) fasize = ld_dw
                           A 14461    .LINE 3463
                           A 14462    
0034E6 DD27F5              A 14463    	LD	HL,(IX+%FFFFFFF5)
0034E9 DD5EF8              A 14464    	LD	E,(IX+%FFFFFFF8)
0034EC 01000000            A 14465    	LD	BC,0
0034F0 AF                  A 14466    	XOR	A,A
0034F1 CD 00 00 00         A 14467    	CALL	__lcmpu
0034F5 20 12               A 14468    	JR	NZ,L_733
0034F7 DD31EF              A 14469    	LD	IY,(IX+%FFFFFFEF)
0034FA ED0324              A 14470    	LEA	BC,IY+%24
0034FD C5                  A 14471    	PUSH	BC
0034FE CD 3C 00 00         A 14472    	CALL	_ld_dword
003502 C1                  A 14473    	POP	BC
003503 DD2FF5              A 14474    	LD	(IX+%FFFFFFF5),HL
003506 DD73F8              A 14475    	LD	(IX+%FFFFFFF8),E
003509                     A 14476    L_733:
                           A 14477    ; 3464			fs->fsize = fasize;
                           A 14478    .LINE 3464
                           A 14479    
003509 DD07F5              A 14480    	LD	BC,(IX+%FFFFFFF5)
00350C DD7EF8              A 14481    	LD	A,(IX+%FFFFFFF8)
00350F DD31FD              A 14482    	LD	IY,(IX+%FFFFFFFD)
003512 FD0F1A              A 14483    	LD	(IY+%1A),BC
003515 FD771D              A 14484    	LD	(IY+%1D),A
                           A 14485    ; 3465	
                           A 14486    ; 3466			fs->n_fats = fs->win[BPB_NumFAT
                           A 14487    .LINE 3466
                           A 14488    
003518 FD7E42              A 14489    	LD	A,(IY+%42)
00351B FD7702              A 14490    	LD	(IY+%2),A
                           A 14491    ; 3467			if (fs->n_fats != 1 && fs->n_fa
                           A 14492    .LINE 3467
                           A 14493    
00351E FD7E02              A 14494    	LD	A,(IY+%2)
003521 DD77F4              A 14495    	LD	(IX+%FFFFFFF4),A
003524 DD77EE              A 14496    	LD	(IX+%FFFFFFEE),A
003527 DD7EF4              A 14497    	LD	A,(IX+%FFFFFFF4)
00352A FE01                A 14498    	CP	A,%1
00352C 28 15               A 14499    	JR	Z,L_736
00352E DD7EF4              A 14500    	LD	A,(IX+%FFFFFFF4)
003531 DD77EE              A 14501    	LD	(IX+%FFFFFFEE),A
003534 DD7EF4              A 14502    	LD	A,(IX+%FFFFFFF4)
003537 FE02                A 14503    	CP	A,%2
003539 28 08               A 14504    	JR	Z,L_736
00353B 210D0000            A 14505    	LD	HL,13
00353F C3 14 3A 00         A 14506    	JR	L_780
003543                     A 14507    L_736:
                           A 14508    ; 3468			fasize *= fs->n_fats;			
                           A 14509    .LINE 3468
                           A 14510    
003543 B7ED62              A 14511    	UEXT	HL
003546 DD6EEE              A 14512    	LD	L,(IX+%FFFFFFEE)
003549 E5C1                A 14513    	LD	BC,HL
00354B 7C                  A 14514    	LD	A,H
00354C DD27F5              A 14515    	LD	HL,(IX+%FFFFFFF5)
00354F DD5EF8              A 14516    	LD	E,(IX+%FFFFFFF8)
003552 CD 00 00 00         A 14517    	CALL	__lmulu
003556 DD2FF5              A 14518    	LD	(IX+%FFFFFFF5),HL
003559 DD73F8              A 14519    	LD	(IX+%FFFFFFF8),E
                           A 14520    ; 3469	
                           A 14521    ; 3470			fs->csize = fs->win[BPB_SecPerC
                           A 14522    .LINE 3470
                           A 14523    
00355C DD31FD              A 14524    	LD	IY,(IX+%FFFFFFFD)
00355F ED233F              A 14525    	LEA	HL,IY+%3F
003562 4E                  A 14526    	LD	C,(HL)
003563 FD7109              A 14527    	LD	(IY+%9),C
003566 FD360A00            A 14528    	LD	(IY+%A),%0
                           A 14529    ; 3471			if (fs->csize == 0 || (fs->csiz
                           A 14530    .LINE 3471
                           A 14531    
00356A FD0709              A 14532    	LD	BC,(IY+%9)
00356D DD71F2              A 14533    	LD	(IX+%FFFFFFF2),C
003570 DD70F3              A 14534    	LD	(IX+%FFFFFFF3),B
003573 49010000            A 14535    	LD.LIS	BC,0
003577 DD27F2              A 14536    	LD	HL,(IX+%FFFFFFF2)
00357A B7                  A 14537    	OR	A,A
00357B 40ED42              A 14538    	SBC.SIS	HL,BC
00357E 28 19               A 14539    	JR	Z,L_738
003580 DD07F2              A 14540    	LD	BC,(IX+%FFFFFFF2)
003583 CD 00 00 00         A 14541    	CALL	__stoiu
003587 2B                  A 14542    	DEC	HL
003588 DD07F2              A 14543    	LD	BC,(IX+%FFFFFFF2)
00358B CD 00 00 00         A 14544    	CALL	__sand
00358F 49010000            A 14545    	LD.LIS	BC,0
003593 B7                  A 14546    	OR	A,A
003594 40ED42              A 14547    	SBC.SIS	HL,BC
003597 28 08               A 14548    	JR	Z,L_739
003599                     A 14549    L_738:
003599 210D0000            A 14550    	LD	HL,13
00359D C3 14 3A 00         A 14551    	JR	L_780
0035A1                     A 14552    L_739:
                           A 14553    ; 3472	
                           A 14554    ; 3473			fs->n_rootdir = ld_word(fs->win
                           A 14555    .LINE 3473
                           A 14556    
0035A1 DD31FD              A 14557    	LD	IY,(IX+%FFFFFFFD)
0035A4 ED0343              A 14558    	LEA	BC,IY+%43
0035A7 C5                  A 14559    	PUSH	BC
0035A8 CD 00 00 00         A 14560    	CALL	_ld_word
0035AC C1                  A 14561    	POP	BC
0035AD DD31FD              A 14562    	LD	IY,(IX+%FFFFFFFD)
0035B0 E5C1                A 14563    	LD	BC,HL
0035B2 FD7107              A 14564    	LD	(IY+%7),C
0035B5 FD7008              A 14565    	LD	(IY+%8),B
                           A 14566    ; 3474			if (fs->n_rootdir % (SS(fs) / S
                           A 14567    .LINE 3474
                           A 14568    
0035B8 FD0707              A 14569    	LD	BC,(IY+%7)
0035BB CD 00 00 00         A 14570    	CALL	__stoiu
0035BF 7D                  A 14571    	LD	A,L
0035C0 E60F                A 14572    	AND	A,%F
0035C2 B7ED62              A 14573    	UEXT	HL
0035C5 6F                  A 14574    	LD	L,A
0035C6 01000000            A 14575    	LD	BC,0
0035CA B7                  A 14576    	OR	A,A
0035CB ED42                A 14577    	SBC	HL,BC
0035CD 28 08               A 14578    	JR	Z,L_741
0035CF 210D0000            A 14579    	LD	HL,13
0035D3 C3 14 3A 00         A 14580    	JR	L_780
0035D7                     A 14581    L_741:
                           A 14582    ; 3475	
                           A 14583    ; 3476			tsect = ld_word(fs->win + BPB_T
                           A 14584    .LINE 3476
                           A 14585    
0035D7 DD31FD              A 14586    	LD	IY,(IX+%FFFFFFFD)
0035DA ED0332              A 14587    	LEA	BC,IY+%32
0035DD DD0FE5              A 14588    	LD	(IX+%FFFFFFE5),BC
0035E0 DD0FD3              A 14589    	LD	(IX+%FFFFFFD3),BC
0035E3 DD31E5              A 14590    	LD	IY,(IX+%FFFFFFE5)
0035E6 ED0313              A 14591    	LEA	BC,IY+%13
0035E9 C5                  A 14592    	PUSH	BC
0035EA CD 00 00 00         A 14593    	CALL	_ld_word
0035EE C1                  A 14594    	POP	BC
0035EF E5C1                A 14595    	LD	BC,HL
0035F1 CD 00 00 00         A 14596    	CALL	__stoiu
0035F5 AF                  A 14597    	XOR	A,A
0035F6 DD2FD6              A 14598    	LD	(IX+%FFFFFFD6),HL
0035F9 DD77D9              A 14599    	LD	(IX+%FFFFFFD9),A
                           A 14600    ; 3477			if (tsect == 0) tsect = ld_dwor
                           A 14601    .LINE 3477
                           A 14602    
0035FC DD27D6              A 14603    	LD	HL,(IX+%FFFFFFD6)
0035FF DD5ED9              A 14604    	LD	E,(IX+%FFFFFFD9)
003602 01000000            A 14605    	LD	BC,0
003606 AF                  A 14606    	XOR	A,A
003607 CD 00 00 00         A 14607    	CALL	__lcmpu
00360B 20 18               A 14608    	JR	NZ,L_743
00360D DD07E5              A 14609    	LD	BC,(IX+%FFFFFFE5)
003610 DD0FD3              A 14610    	LD	(IX+%FFFFFFD3),BC
003613 DD31E5              A 14611    	LD	IY,(IX+%FFFFFFE5)
003616 ED0320              A 14612    	LEA	BC,IY+%20
003619 C5                  A 14613    	PUSH	BC
00361A CD 3C 00 00         A 14614    	CALL	_ld_dword
00361E C1                  A 14615    	POP	BC
00361F DD2FD6              A 14616    	LD	(IX+%FFFFFFD6),HL
003622 DD73D9              A 14617    	LD	(IX+%FFFFFFD9),E
003625                     A 14618    L_743:
                           A 14619    ; 3478	
                           A 14620    ; 3479			nrsv = ld_word(fs->win + BPB_Rs
                           A 14621    .LINE 3479
                           A 14622    
003625 DD31D3              A 14623    	LD	IY,(IX+%FFFFFFD3)
003628 ED030E              A 14624    	LEA	BC,IY+%E
00362B C5                  A 14625    	PUSH	BC
00362C CD 00 00 00         A 14626    	CALL	_ld_word
003630 C1                  A 14627    	POP	BC
003631 DD75E8              A 14628    	LD	(IX+%FFFFFFE8),L
003634 DD74E9              A 14629    	LD	(IX+%FFFFFFE9),H
                           A 14630    ; 3480			if (nrsv == 0) return FR_NO_FIL
                           A 14631    .LINE 3480
                           A 14632    
003637 49010000            A 14633    	LD.LIS	BC,0
00363B DD27E8              A 14634    	LD	HL,(IX+%FFFFFFE8)
00363E B7                  A 14635    	OR	A,A
00363F 40ED42              A 14636    	SBC.SIS	HL,BC
003642 20 08               A 14637    	JR	NZ,L_745
003644 210D0000            A 14638    	LD	HL,13
003648 C3 14 3A 00         A 14639    	JR	L_780
00364C                     A 14640    L_745:
                           A 14641    ; 3481	
                           A 14642    ; 3482			/* Determine the FAT sub type *
                           A 14643    ; 3483			sysect = nrsv + fasize + fs->n_
                           A 14644    .LINE 3483
                           A 14645    
00364C DD31FD              A 14646    	LD	IY,(IX+%FFFFFFFD)
00364F FD0707              A 14647    	LD	BC,(IY+%7)
003652 CD 00 00 00         A 14648    	CALL	__stoiu
003656 3E04                A 14649    	LD	A,%4
003658 CD 00 00 00         A 14650    	CALL	__ishru_b
00365C AF                  A 14651    	XOR	A,A
00365D DD77B4              A 14652    	LD	(IX+%FFFFFFB4),A
003660 DD2FB1              A 14653    	LD	(IX+%FFFFFFB1),HL
003663 DD07E8              A 14654    	LD	BC,(IX+%FFFFFFE8)
003666 CD 00 00 00         A 14655    	CALL	__stoiu
00366A E5C1                A 14656    	LD	BC,HL
00366C AF                  A 14657    	XOR	A,A
00366D DD27F5              A 14658    	LD	HL,(IX+%FFFFFFF5)
003670 DD5EF8              A 14659    	LD	E,(IX+%FFFFFFF8)
003673 CD 00 00 00         A 14660    	CALL	__ladd
003677 7B                  A 14661    	LD	A,E
003678 E5C1                A 14662    	LD	BC,HL
00367A DD5EB4              A 14663    	LD	E,(IX+%FFFFFFB4)
00367D DD27B1              A 14664    	LD	HL,(IX+%FFFFFFB1)
003680 CD 00 00 00         A 14665    	CALL	__ladd
003684 DD2FC9              A 14666    	LD	(IX+%FFFFFFC9),HL
003687 DD73CC              A 14667    	LD	(IX+%FFFFFFCC),E
                           A 14668    ; 3484			if (tsect < sysect) return FR_N
                           A 14669    .LINE 3484
                           A 14670    
00368A DD27D6              A 14671    	LD	HL,(IX+%FFFFFFD6)
00368D DD5ED9              A 14672    	LD	E,(IX+%FFFFFFD9)
003690 DD07C9              A 14673    	LD	BC,(IX+%FFFFFFC9)
003693 DD7ECC              A 14674    	LD	A,(IX+%FFFFFFCC)
003696 CD 00 00 00         A 14675    	CALL	__lcmpu
00369A 30 08               A 14676    	JR	NC,L_747
00369C 210D0000            A 14677    	LD	HL,13
0036A0 C3 14 3A 00         A 14678    	JR	L_780
0036A4                     A 14679    L_747:
                           A 14680    ; 3485			nclst = (tsect - sysect) / fs->
                           A 14681    .LINE 3485
                           A 14682    
0036A4 DD27D6              A 14683    	LD	HL,(IX+%FFFFFFD6)
0036A7 DD5ED9              A 14684    	LD	E,(IX+%FFFFFFD9)
0036AA DD07C9              A 14685    	LD	BC,(IX+%FFFFFFC9)
0036AD DD7ECC              A 14686    	LD	A,(IX+%FFFFFFCC)
0036B0 CD 00 00 00         A 14687    	CALL	__lsub
0036B4 DD2FB5              A 14688    	LD	(IX+%FFFFFFB5),HL
0036B7 DD31FD              A 14689    	LD	IY,(IX+%FFFFFFFD)
0036BA FD0709              A 14690    	LD	BC,(IY+%9)
0036BD CD 00 00 00         A 14691    	CALL	__stoiu
0036C1 E5C1                A 14692    	LD	BC,HL
0036C3 AF                  A 14693    	XOR	A,A
0036C4 DD27B5              A 14694    	LD	HL,(IX+%FFFFFFB5)
0036C7 CD 00 00 00         A 14695    	CALL	__ldivu
0036CB DD2FEA              A 14696    	LD	(IX+%FFFFFFEA),HL
0036CE DD73ED              A 14697    	LD	(IX+%FFFFFFED),E
                           A 14698    ; 3486			if (nclst == 0) return FR_NO_FI
                           A 14699    .LINE 3486
                           A 14700    
0036D1 DD27EA              A 14701    	LD	HL,(IX+%FFFFFFEA)
0036D4 DD5EED              A 14702    	LD	E,(IX+%FFFFFFED)
0036D7 01000000            A 14703    	LD	BC,0
0036DB AF                  A 14704    	XOR	A,A
0036DC CD 00 00 00         A 14705    	CALL	__lcmpu
0036E0 20 08               A 14706    	JR	NZ,L_749
0036E2 210D0000            A 14707    	LD	HL,13
0036E6 C3 14 3A 00         A 14708    	JR	L_780
0036EA                     A 14709    L_749:
                           A 14710    ; 3487			fmt = 0;
                           A 14711    .LINE 3487
                           A 14712    
0036EA DD0FFA              A 14713    	LD	(IX+%FFFFFFFA),BC
                           A 14714    ; 3488			if (nclst <= MAX_FAT32) fmt = F
                           A 14715    .LINE 3488
                           A 14716    
0036ED 21F5FFFF            A 14717    	LD	HL,16777205
0036F1 1E0F                A 14718    	LD	E,%F
0036F3 DD07EA              A 14719    	LD	BC,(IX+%FFFFFFEA)
0036F6 DD7EED              A 14720    	LD	A,(IX+%FFFFFFED)
0036F9 CD 00 00 00         A 14721    	CALL	__lcmpu
0036FD 38 07               A 14722    	JR	C,L_752
0036FF 01030000            A 14723    	LD	BC,3
003703 DD0FFA              A 14724    	LD	(IX+%FFFFFFFA),BC
003706                     A 14725    L_752:
                           A 14726    ; 3489			if (nclst <= MAX_FAT16) fmt = F
                           A 14727    .LINE 3489
                           A 14728    
003706 21F5FF00            A 14729    	LD	HL,65525
00370A 1E00                A 14730    	LD	E,%0
00370C DD07EA              A 14731    	LD	BC,(IX+%FFFFFFEA)
00370F DD7EED              A 14732    	LD	A,(IX+%FFFFFFED)
003712 CD 00 00 00         A 14733    	CALL	__lcmpu
003716 38 07               A 14734    	JR	C,L_754
003718 01020000            A 14735    	LD	BC,2
00371C DD0FFA              A 14736    	LD	(IX+%FFFFFFFA),BC
00371F                     A 14737    L_754:
                           A 14738    ; 3490			if (nclst <= MAX_FAT12) fmt = F
                           A 14739    .LINE 3490
                           A 14740    
00371F 21F50F00            A 14741    	LD	HL,4085
003723 DD07EA              A 14742    	LD	BC,(IX+%FFFFFFEA)
003726 DD7EED              A 14743    	LD	A,(IX+%FFFFFFED)
003729 CD 00 00 00         A 14744    	CALL	__lcmpu
00372D 38 07               A 14745    	JR	C,L_756
00372F 01010000            A 14746    	LD	BC,1
003733 DD0FFA              A 14747    	LD	(IX+%FFFFFFFA),BC
003736                     A 14748    L_756:
                           A 14749    ; 3491			if (fmt == 0) return FR_NO_FILE
                           A 14750    .LINE 3491
                           A 14751    
003736 01000000            A 14752    	LD	BC,0
00373A DD27FA              A 14753    	LD	HL,(IX+%FFFFFFFA)
00373D B7                  A 14754    	OR	A,A
00373E ED42                A 14755    	SBC	HL,BC
003740 20 08               A 14756    	JR	NZ,L_757
003742 210D0000            A 14757    	LD	HL,13
003746 C3 14 3A 00         A 14758    	JR	L_780
00374A                     A 14759    L_757:
                           A 14760    ; 3492	
                           A 14761    ; 3493			/* Boundaries and Limits */
                           A 14762    ; 3494			fs->n_fatent = nclst + 2;		
                           A 14763    .LINE 3494
                           A 14764    
00374A DD27EA              A 14765    	LD	HL,(IX+%FFFFFFEA)
00374D DD5EED              A 14766    	LD	E,(IX+%FFFFFFED)
003750 3E02                A 14767    	LD	A,%2
003752 CD 00 00 00         A 14768    	CALL	__ladd_b
003756 DD31FD              A 14769    	LD	IY,(IX+%FFFFFFFD)
003759 FD2F16              A 14770    	LD	(IY+%16),HL
00375C FD7319              A 14771    	LD	(IY+%19),E
                           A 14772    ; 3495			fs->volbase = bsect;			
                           A 14773    .LINE 3495
                           A 14774    
00375F DD07DA              A 14775    	LD	BC,(IX+%FFFFFFDA)
003762 DD7EDD              A 14776    	LD	A,(IX+%FFFFFFDD)
003765 FD0F1E              A 14777    	LD	(IY+%1E),BC
003768 FD7721              A 14778    	LD	(IY+%21),A
                           A 14779    ; 3496			fs->fatbase = bsect + nrsv; 	
                           A 14780    .LINE 3496
                           A 14781    
00376B DD07E8              A 14782    	LD	BC,(IX+%FFFFFFE8)
00376E CD 00 00 00         A 14783    	CALL	__stoiu
003772 E5C1                A 14784    	LD	BC,HL
003774 AF                  A 14785    	XOR	A,A
003775 DD27DA              A 14786    	LD	HL,(IX+%FFFFFFDA)
003778 DD5EDD              A 14787    	LD	E,(IX+%FFFFFFDD)
00377B CD 00 00 00         A 14788    	CALL	__ladd
00377F FD2F22              A 14789    	LD	(IY+%22),HL
003782 FD7325              A 14790    	LD	(IY+%25),E
                           A 14791    ; 3497			fs->database = bsect + sysect;	
                           A 14792    .LINE 3497
                           A 14793    
003785 DD27C9              A 14794    	LD	HL,(IX+%FFFFFFC9)
003788 DD5ECC              A 14795    	LD	E,(IX+%FFFFFFCC)
00378B DD07DA              A 14796    	LD	BC,(IX+%FFFFFFDA)
00378E DD7EDD              A 14797    	LD	A,(IX+%FFFFFFDD)
003791 CD 00 00 00         A 14798    	CALL	__ladd
003795 FD2F2A              A 14799    	LD	(IY+%2A),HL
003798 FD732D              A 14800    	LD	(IY+%2D),E
                           A 14801    ; 3498			if (fmt == FS_FAT32) {
                           A 14802    .LINE 3498
                           A 14803    
00379B 01030000            A 14804    	LD	BC,3
00379F DD27FA              A 14805    	LD	HL,(IX+%FFFFFFFA)
0037A2 B7                  A 14806    	OR	A,A
0037A3 ED42                A 14807    	SBC	HL,BC
0037A5 28 04               A 14808    	JR	Z,L__398
0037A7 3E01                A 14809    	LD	A,%1
0037A9 18 01               A 14810    	JR	L__399
0037AB                     A 14811    L__398:
0037AB AF                  A 14812    	XOR	A,A
0037AC                     A 14813    L__399:
0037AC DD77E4              A 14814    	LD	(IX+%FFFFFFE4),A
0037AF B7                  A 14815    	OR	A,A
0037B0 20 69               A 14816    	JR	NZ,L_769
                           A 14817    ; 3499				if (ld_word(fs->win + BPB_F
                           A 14818    .LINE 3499
                           A 14819    
0037B2 DD31FD              A 14820    	LD	IY,(IX+%FFFFFFFD)
0037B5 ED0332              A 14821    	LEA	BC,IY+%32
0037B8 DD0FD0              A 14822    	LD	(IX+%FFFFFFD0),BC
0037BB DD31D0              A 14823    	LD	IY,(IX+%FFFFFFD0)
0037BE ED032A              A 14824    	LEA	BC,IY+%2A
0037C1 C5                  A 14825    	PUSH	BC
0037C2 CD 00 00 00         A 14826    	CALL	_ld_word
0037C6 C1                  A 14827    	POP	BC
0037C7 49010000            A 14828    	LD.LIS	BC,0
0037CB B7                  A 14829    	OR	A,A
0037CC 40ED42              A 14830    	SBC.SIS	HL,BC
0037CF 28 08               A 14831    	JR	Z,L_760
0037D1 210D0000            A 14832    	LD	HL,13
0037D5 C3 14 3A 00         A 14833    	JR	L_780
0037D9                     A 14834    L_760:
                           A 14835    ; 3500				if (fs->n_rootdir != 0) ret
                           A 14836    .LINE 3500
                           A 14837    
0037D9 DD31FD              A 14838    	LD	IY,(IX+%FFFFFFFD)
0037DC FD2707              A 14839    	LD	HL,(IY+%7)
0037DF B7                  A 14840    	OR	A,A
0037E0 40ED42              A 14841    	SBC.SIS	HL,BC
0037E3 28 08               A 14842    	JR	Z,L_761
0037E5 210D0000            A 14843    	LD	HL,13
0037E9 C3 14 3A 00         A 14844    	JR	L_780
0037ED                     A 14845    L_761:
                           A 14846    ; 3501				fs->dirbase = ld_dword(fs->
                           A 14847    .LINE 3501
                           A 14848    
0037ED DD31D0              A 14849    	LD	IY,(IX+%FFFFFFD0)
0037F0 ED032C              A 14850    	LEA	BC,IY+%2C
0037F3 C5                  A 14851    	PUSH	BC
0037F4 CD 3C 00 00         A 14852    	CALL	_ld_dword
0037F8 C1                  A 14853    	POP	BC
0037F9 DD31FD              A 14854    	LD	IY,(IX+%FFFFFFFD)
0037FC FD2F26              A 14855    	LD	(IY+%26),HL
0037FF FD7329              A 14856    	LD	(IY+%29),E
                           A 14857    ; 3502				szbfat = fs->n_fatent * 4;	
                           A 14858    .LINE 3502
                           A 14859    
003802 FD2716              A 14860    	LD	HL,(IY+%16)
003805 FD5E19              A 14861    	LD	E,(IY+%19)
003808 01040000            A 14862    	LD	BC,4
00380C AF                  A 14863    	XOR	A,A
00380D CD 00 00 00         A 14864    	CALL	__lmulu
003811 DD2FC1              A 14865    	LD	(IX+%FFFFFFC1),HL
003814 DD73C4              A 14866    	LD	(IX+%FFFFFFC4),E
                           A 14867    ; 3503			} else {
                           A 14868    .LINE 3503
                           A 14869    
003817 C3 C7 38 00         A 14870    	JR	L_771
00381B                     A 14871    L_769:
                           A 14872    ; 3504				if (fs->n_rootdir == 0)	ret
                           A 14873    .LINE 3504
                           A 14874    
00381B 49010000            A 14875    	LD.LIS	BC,0
00381F DD31FD              A 14876    	LD	IY,(IX+%FFFFFFFD)
003822 FD2707              A 14877    	LD	HL,(IY+%7)
003825 B7                  A 14878    	OR	A,A
003826 40ED42              A 14879    	SBC.SIS	HL,BC
003829 20 08               A 14880    	JR	NZ,L_763
00382B 210D0000            A 14881    	LD	HL,13
00382F C3 14 3A 00         A 14882    	JR	L_780
003833                     A 14883    L_763:
                           A 14884    ; 3505				fs->dirbase = fs->fatbase +
                           A 14885    .LINE 3505
                           A 14886    
003833 DD31FD              A 14887    	LD	IY,(IX+%FFFFFFFD)
003836 FD2722              A 14888    	LD	HL,(IY+%22)
003839 FD5E25              A 14889    	LD	E,(IY+%25)
00383C DD07F5              A 14890    	LD	BC,(IX+%FFFFFFF5)
00383F DD7EF8              A 14891    	LD	A,(IX+%FFFFFFF8)
003842 CD 00 00 00         A 14892    	CALL	__ladd
003846 FD2F26              A 14893    	LD	(IY+%26),HL
003849 FD7329              A 14894    	LD	(IY+%29),E
                           A 14895    ; 3506				szbfat = (fmt == FS_FAT16) 
                           A 14896    .LINE 3506
                           A 14897    
00384C 01020000            A 14898    	LD	BC,2
003850 DD27FA              A 14899    	LD	HL,(IX+%FFFFFFFA)
003853 B7                  A 14900    	OR	A,A
003854 ED42                A 14901    	SBC	HL,BC
003856 20 16               A 14902    	JR	NZ,L_766
                           A 14903    ; 3507					fs->n_fatent * 2 : fs->
                           A 14904    .LINE 3507
                           A 14905    
003858 DD31FD              A 14906    	LD	IY,(IX+%FFFFFFFD)
00385B FD2716              A 14907    	LD	HL,(IY+%16)
00385E FD5E19              A 14908    	LD	E,(IY+%19)
003861 AF                  A 14909    	XOR	A,A
003862 CD 00 00 00         A 14910    	CALL	__lmulu
003866 DD2FC5              A 14911    	LD	(IX+%FFFFFFC5),HL
003869 DD73C8              A 14912    	LD	(IX+%FFFFFFC8),E
00386C 18 4D               A 14913    	JR	L_767
00386E                     A 14914    L_766:
00386E DD31FD              A 14915    	LD	IY,(IX+%FFFFFFFD)
003871 FD1716              A 14916    	LD	DE,(IY+%16)
003874 DD1FBB              A 14917    	LD	(IX+%FFFFFFBB),DE	; spill
003877 FD5E19              A 14918    	LD	E,(IY+%19)
00387A DD1FBE              A 14919    	LD	(IX+%FFFFFFBE),DE	; spill
00387D DD27BB              A 14920    	LD	HL,(IX+%FFFFFFBB)
003880 DD17BE              A 14921    	LD	DE,(IX+%FFFFFFBE)	; unspill
003883 01030000            A 14922    	LD	BC,3
003887 AF                  A 14923    	XOR	A,A
003888 CD 00 00 00         A 14924    	CALL	__lmulu
00388C 7B                  A 14925    	LD	A,E
00388D E5C1                A 14926    	LD	BC,HL
00388F 2E01                A 14927    	LD	L,%1
003891 CD 00 00 00         A 14928    	CALL	__lshru
003895 DD0FB8              A 14929    	LD	(IX+%FFFFFFB8),BC
003898 5F                  A 14930    	LD	E,A
003899 DD1FBE              A 14931    	LD	(IX+%FFFFFFBE),DE	; spill
00389C DD17BB              A 14932    	LD	DE,(IX+%FFFFFFBB)	; unspill
00389F D5C1                A 14933    	LD	BC,DE
0038A1 DD17BE              A 14934    	LD	DE,(IX+%FFFFFFBE)	; unspill
0038A4 79                  A 14935    	LD	A,C
0038A5 E601                A 14936    	AND	A,%1
0038A7 B7ED62              A 14937    	UEXT	HL
0038AA 6F                  A 14938    	LD	L,A
0038AB E5C1                A 14939    	LD	BC,HL
0038AD 7C                  A 14940    	LD	A,H
0038AE DD27B8              A 14941    	LD	HL,(IX+%FFFFFFB8)
0038B1 CD 00 00 00         A 14942    	CALL	__ladd
0038B5 DD2FC5              A 14943    	LD	(IX+%FFFFFFC5),HL
0038B8 DD73C8              A 14944    	LD	(IX+%FFFFFFC8),E
0038BB                     A 14945    L_767:
0038BB DD07C5              A 14946    	LD	BC,(IX+%FFFFFFC5)
0038BE DD7EC8              A 14947    	LD	A,(IX+%FFFFFFC8)
0038C1 DD0FC1              A 14948    	LD	(IX+%FFFFFFC1),BC
0038C4 DD77C4              A 14949    	LD	(IX+%FFFFFFC4),A
                           A 14950    ; 3508			}
0038C7                     A 14951    L_771:
                           A 14952    .LINE 3508
                           A 14953    
                           A 14954    ; 3509			if (fs->fsize < (szbfat + (SS(f
                           A 14955    .LINE 3509
                           A 14956    
0038C7 DD27C1              A 14957    	LD	HL,(IX+%FFFFFFC1)
0038CA DD5EC4              A 14958    	LD	E,(IX+%FFFFFFC4)
0038CD 01FF0100            A 14959    	LD	BC,511
0038D1 AF                  A 14960    	XOR	A,A
0038D2 CD 00 00 00         A 14961    	CALL	__ladd
0038D6 7B                  A 14962    	LD	A,E
0038D7 E5C1                A 14963    	LD	BC,HL
0038D9 2E09                A 14964    	LD	L,%9
0038DB CD 00 00 00         A 14965    	CALL	__lshru
0038DF DD31FD              A 14966    	LD	IY,(IX+%FFFFFFFD)
0038E2 FD271A              A 14967    	LD	HL,(IY+%1A)
0038E5 FD5E1D              A 14968    	LD	E,(IY+%1D)
0038E8 CD 00 00 00         A 14969    	CALL	__lcmpu
0038EC 30 08               A 14970    	JR	NC,L_772
0038EE 210D0000            A 14971    	LD	HL,13
0038F2 C3 14 3A 00         A 14972    	JR	L_780
0038F6                     A 14973    L_772:
                           A 14974    ; 3510	
                           A 14975    ; 3511	#if !FF_FS_READONLY
                           A 14976    ; 3512			/* Get FSInfo if available */
                           A 14977    ; 3513			fs->last_clst = fs->free_clst =
                           A 14978    .LINE 3513
                           A 14979    
0038F6 01FFFFFF            A 14980    	LD	BC,16777215
0038FA DD31FD              A 14981    	LD	IY,(IX+%FFFFFFFD)
0038FD FD0F12              A 14982    	LD	(IY+%12),BC
003900 FD3615FF            A 14983    	LD	(IY+%15),%FF
003904 FD0712              A 14984    	LD	BC,(IY+%12)
003907 FD7E15              A 14985    	LD	A,(IY+%15)
00390A FD0F0E              A 14986    	LD	(IY+%E),BC
00390D FD7711              A 14987    	LD	(IY+%11),A
                           A 14988    ; 3514			fs->fsi_flag = 0x80;
                           A 14989    .LINE 3514
                           A 14990    
003910 FD360480            A 14991    	LD	(IY+%4),%80
                           A 14992    ; 3515	#if (FF_FS_NOFSINFO & 3) != 3
                           A 14993    ; 3516			if (fmt == FS_FAT32				
                           A 14994    ; 3517				&& ld_word(fs->win + BPB_FS
                           A 14995    .LINE 3517
                           A 14996    
003914 DD7EE4              A 14997    	LD	A,(IX+%FFFFFFE4)
003917 B7                  A 14998    	OR	A,A
003918 C2 F0 39 00         A 14999    	JR	NZ,L_779
                           A 15000    ; 3518				&& move_window(fs, bsect + 
                           A 15001    .LINE 3518
                           A 15002    
00391C DD31FD              A 15003    	LD	IY,(IX+%FFFFFFFD)
00391F ED0362              A 15004    	LEA	BC,IY+%62
003922 C5                  A 15005    	PUSH	BC
003923 CD 00 00 00         A 15006    	CALL	_ld_word
003927 C1                  A 15007    	POP	BC
003928 E5C1                A 15008    	LD	BC,HL
00392A CD 00 00 00         A 15009    	CALL	__stoiu
00392E 01010000            A 15010    	LD	BC,1
003932 B7                  A 15011    	OR	A,A
003933 ED42                A 15012    	SBC	HL,BC
003935 C2 F0 39 00         A 15013    	JR	NZ,L_779
003939 DD27DA              A 15014    	LD	HL,(IX+%FFFFFFDA)
00393C DD5EDD              A 15015    	LD	E,(IX+%FFFFFFDD)
00393F 3E01                A 15016    	LD	A,%1
003941 CD 00 00 00         A 15017    	CALL	__ladd_b
003945 4B                  A 15018    	LD	C,E
003946 0600                A 15019    	LD	B,%0
003948 C5                  A 15020    	PUSH	BC
003949 E5                  A 15021    	PUSH	HL
00394A DD07FD              A 15022    	LD	BC,(IX+%FFFFFFFD)
00394D C5                  A 15023    	PUSH	BC
00394E CD 1E 04 00         A 15024    	CALL	_move_window
003952 C1                  A 15025    	POP	BC
003953 C1                  A 15026    	POP	BC
003954 C1                  A 15027    	POP	BC
003955 01000000            A 15028    	LD	BC,0
003959 B7                  A 15029    	OR	A,A
00395A ED42                A 15030    	SBC	HL,BC
00395C C2 F0 39 00         A 15031    	JR	NZ,L_779
                           A 15032    ; 3519			{
                           A 15033    ; 3520				fs->fsi_flag = 0;
                           A 15034    .LINE 3520
                           A 15035    
003960 DD31FD              A 15036    	LD	IY,(IX+%FFFFFFFD)
003963 FD360400            A 15037    	LD	(IY+%4),%0
                           A 15038    ; 3521				if (ld_word(fs->win + BS_55
                           A 15039    ; 3522					&& ld_dword(fs->win + F
                           A 15040    .LINE 3522
                           A 15041    
003967 ED0332              A 15042    	LEA	BC,IY+%32
00396A DD0FCD              A 15043    	LD	(IX+%FFFFFFCD),BC
00396D 01FE0100            A 15044    	LD	BC,510
003971 DD27CD              A 15045    	LD	HL,(IX+%FFFFFFCD)
003974 09                  A 15046    	ADD	HL,BC
003975 E5                  A 15047    	PUSH	HL
003976 CD 00 00 00         A 15048    	CALL	_ld_word
00397A C1                  A 15049    	POP	BC
00397B E5C1                A 15050    	LD	BC,HL
00397D CD 00 00 00         A 15051    	CALL	__stoiu
003981 0155AA00            A 15052    	LD	BC,43605
003985 B7                  A 15053    	OR	A,A
003986 ED42                A 15054    	SBC	HL,BC
003988 20 66               A 15055    	JR	NZ,L_779
                           A 15056    ; 3523					&& ld_dword(fs->win + F
                           A 15057    .LINE 3523
                           A 15058    
00398A DD07CD              A 15059    	LD	BC,(IX+%FFFFFFCD)
00398D C5                  A 15060    	PUSH	BC
00398E CD 3C 00 00         A 15061    	CALL	_ld_dword
003992 C1                  A 15062    	POP	BC
003993 01525261            A 15063    	LD	BC,6378066
003997 3E41                A 15064    	LD	A,%41
003999 CD 00 00 00         A 15065    	CALL	__lcmpu
00399D 20 51               A 15066    	JR	NZ,L_779
00399F DD31FD              A 15067    	LD	IY,(IX+%FFFFFFFD)
0039A2 ED0332              A 15068    	LEA	BC,IY+%32
0039A5 DD0FE1              A 15069    	LD	(IX+%FFFFFFE1),BC
0039A8 01E40100            A 15070    	LD	BC,484
0039AC DD27E1              A 15071    	LD	HL,(IX+%FFFFFFE1)
0039AF 09                  A 15072    	ADD	HL,BC
0039B0 E5                  A 15073    	PUSH	HL
0039B1 CD 3C 00 00         A 15074    	CALL	_ld_dword
0039B5 C1                  A 15075    	POP	BC
0039B6 01727241            A 15076    	LD	BC,4289138
0039BA 3E61                A 15077    	LD	A,%61
0039BC CD 00 00 00         A 15078    	CALL	__lcmpu
0039C0 20 2E               A 15079    	JR	NZ,L_779
                           A 15080    ; 3524				{
                           A 15081    ; 3525	#if (FF_FS_NOFSINFO & 1) == 0
                           A 15082    ; 3526					fs->free_clst = ld_dwor
                           A 15083    .LINE 3526
                           A 15084    
0039C2 01E80100            A 15085    	LD	BC,488
0039C6 DD27E1              A 15086    	LD	HL,(IX+%FFFFFFE1)
0039C9 09                  A 15087    	ADD	HL,BC
0039CA E5                  A 15088    	PUSH	HL
0039CB CD 3C 00 00         A 15089    	CALL	_ld_dword
0039CF C1                  A 15090    	POP	BC
0039D0 DD31FD              A 15091    	LD	IY,(IX+%FFFFFFFD)
0039D3 FD2F12              A 15092    	LD	(IY+%12),HL
0039D6 FD7315              A 15093    	LD	(IY+%15),E
                           A 15094    ; 3527	#endif
                           A 15095    ; 3528	#if (FF_FS_NOFSINFO & 2) == 0
                           A 15096    ; 3529					fs->last_clst = ld_dwor
                           A 15097    .LINE 3529
                           A 15098    
0039D9 01EC0100            A 15099    	LD	BC,492
0039DD DD27E1              A 15100    	LD	HL,(IX+%FFFFFFE1)
0039E0 09                  A 15101    	ADD	HL,BC
0039E1 E5                  A 15102    	PUSH	HL
0039E2 CD 3C 00 00         A 15103    	CALL	_ld_dword
0039E6 C1                  A 15104    	POP	BC
0039E7 DD31FD              A 15105    	LD	IY,(IX+%FFFFFFFD)
0039EA FD2F0E              A 15106    	LD	(IY+%E),HL
0039ED FD7311              A 15107    	LD	(IY+%11),E
                           A 15108    ; 3530	#endif
                           A 15109    ; 3531				}
                           A 15110    ; 3532			}
                           A 15111    ; 3533	#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
                           A 15112    ; 3534	#endif	/* !FF_FS_READONLY */
                           A 15113    ; 3535		}
0039F0                     A 15114    L_779:
                           A 15115    .LINE 3535
                           A 15116    
                           A 15117    ; 3536	
                           A 15118    ; 3537		fs->fs_type = (BYTE)fmt;/* FAT sub-
                           A 15119    .LINE 3537
                           A 15120    
0039F0 DD7EFA              A 15121    	LD	A,(IX+%FFFFFFFA)
0039F3 DD31FD              A 15122    	LD	IY,(IX+%FFFFFFFD)
0039F6 FD7700              A 15123    	LD	(IY+%0),A
                           A 15124    ; 3538		fs->id = ++Fsid;		/* Volume m
                           A 15125    .LINE 3538
                           A 15126    
0039F9 ED4B 03 00 00       A 15127    	LD	BC,(_Fsid)
0039FE 03                  A 15128    	INC	BC
0039FF 21 03 00 00         A 15129    	LD	HL,_Fsid
003A03 71                  A 15130    	LD	(HL),C
003A04 23                  A 15131    	INC	HL
003A05 70                  A 15132    	LD	(HL),B
003A06 ED4B 03 00 00       A 15133    	LD	BC,(_Fsid)
003A0B FD7105              A 15134    	LD	(IY+%5),C
003A0E FD7006              A 15135    	LD	(IY+%6),B
                           A 15136    ; 3539	#if FF_USE_LFN == 1
                           A 15137    ; 3540		fs->lfnbuf = LfnBuf;	/* Static L
                           A 15138    ; 3541	#if FF_FS_EXFAT
                           A 15139    ; 3542		fs->dirbuf = DirBuf;	/* Static d
                           A 15140    ; 3543	#endif
                           A 15141    ; 3544	#endif
                           A 15142    ; 3545	#if FF_FS_RPATH != 0
                           A 15143    ; 3546		fs->cdir = 0;			/* Initiali
                           A 15144    ; 3547	#endif
                           A 15145    ; 3548	#if FF_FS_LOCK != 0			/* Clear fi
                           A 15146    ; 3549		clear_lock(fs);
                           A 15147    ; 3550	#endif
                           A 15148    ; 3551		return FR_OK;
                           A 15149    .LINE 3551
                           A 15150    
003A11 B7                  A 15151    	OR	A,A
003A12 ED62                A 15152    	SBC	HL,HL
                           A 15153    ; 3552	}
003A14                     A 15154    L_780:
                           A 15155    .LINE 3552
                           A 15156    
003A14 DDF9                A 15157    	LD	SP,IX
003A16 DDE1                A 15158    	POP	IX
003A18 C9                  A 15159    	RET	
                           A 15160    
                           A 15161    
                           A 15162    ;**************************** _mount_volume ***
                           A 15163    ;Name                         Addr/Register   S
                           A 15164    ;_Fsid                               STATIC    
                           A 15165    ;_disk_initialize                    IMPORT  --
                           A 15166    ;_disk_status                        IMPORT  --
                           A 15167    ;_FatFs                              STATIC    
                           A 15168    ;szbfat                               IX-63    
                           A 15169    ;temp764                              IX-59    
                           A 15170    ;sysect                               IX-55    
                           A 15171    ;G_54                                 IX-51    
                           A 15172    ;G_52                                 IX-48    
                           A 15173    ;G_51                                 IX-45    
                           A 15174    ;tsect                                IX-42    
                           A 15175    ;bsect                                IX-38    
                           A 15176    ;vol                                  IX-34    
                           A 15177    ;G_55                                 IX-31    
                           A 15178    ;G_53                                 IX-28    
                           A 15179    ;G_50                                 IX-27    
                           A 15180    ;nrsv                                 IX-24    
                           A 15181    ;nclst                                IX-22    
                           A 15182    ;G_48                                 IX-18    
                           A 15183    ;G_45                                 IX-17    
                           A 15184    ;G_49                                 IX-14    
                           A 15185    ;G_47                                 IX-12    
                           A 15186    ;fasize                               IX-11    
                           A 15187    ;stat                                  IX-7    
                           A 15188    ;fmt                                   IX-6    
                           A 15189    ;fs                                    IX-3    
                           A 15190    ;mode                                 IX+12    
                           A 15191    ;rfs                                   IX+9    
                           A 15192    ;path                                  IX+6    
                           A 15193    
                           A 15194    
                           A 15195    ; Stack Frame Size: 94 (bytes)
                           A 15196    ;       Spill Code: -3 (instruction)
                           A 15197    
                           A 15198    
                           A 15199    .ENDFUNC "mount_volume",3552,"_mount_volume"
                           A 15200    ; 3553	
                           A 15201    ; 3554	
                           A 15202    ; 3555	
                           A 15203    ; 3556	
                           A 15204    ; 3557	/*-------------------------------------
                           A 15205    ; 3558	/* Check if the file/directory object i
                           A 15206    ; 3559	/*-------------------------------------
                           A 15207    ; 3560	
                           A 15208    ; 3561	static FRESULT validate (	/* Returns 
                           A 15209    ; 3562		FFOBJID* obj,			/* Pointer 
                           A 15210    ; 3563		FATFS** rfs				/* Pointer 
                           A 15211    ; 3564	)
                           A 15212    ; 3565	{
003A19                     A 15213    _validate:
                           A 15214    .DEFINE "_validate"
                           A 15215    
                           A 15216    .VALUE _validate
                           A 15217    
                           A 15218    .CLASS 3
                           A 15219    
                           A 15220    .TYPE 68
                           A 15221    
                           A 15222    .ENDEF
                           A 15223    
                           A 15224    .BEGFUNC "validate",3565,"_validate"
                           A 15225    
                           A 15226    .LINE 3565
                           A 15227    
                           A 15228    .DEFINE "obj"
                           A 15229    
                           A 15230    .CLASS 65
                           A 15231    
                           A 15232    .VALUE 6
                           A 15233    
                           A 15234    .TAG "NONAME1"
                           A 15235    
                           A 15236    .TYPE 40
                           A 15237    
                           A 15238    .ENDEF
                           A 15239    
                           A 15240    .DEFINE "rfs"
                           A 15241    
                           A 15242    .CLASS 65
                           A 15243    
                           A 15244    .VALUE 9
                           A 15245    
                           A 15246    .TAG "NONAME0"
                           A 15247    
                           A 15248    .TYPE 296
                           A 15249    
                           A 15250    .ENDEF
                           A 15251    
                           A 15252    .DEFINE "res"
                           A 15253    
                           A 15254    .CLASS 65
                           A 15255    
                           A 15256    .VALUE -6
                           A 15257    
                           A 15258    .TYPE 4
                           A 15259    
                           A 15260    .ENDEF
                           A 15261    
003A19 DDE5                A 15262    	PUSH	IX
003A1B DD210000 00         A 15263    	LD	IX,0
003A20 DD39                A 15264    	ADD	IX,SP
003A22 C5                  A 15265    	PUSH	BC
003A23 C5                  A 15266    	PUSH	BC
003A24 C5                  A 15267    	PUSH	BC
                           A 15268    ; 3566		FRESULT res = FR_INVALID_OBJECT;
                           A 15269    .LINE 3566
                           A 15270    
003A25 01090000            A 15271    	LD	BC,9
003A29 DD0FFA              A 15272    	LD	(IX+%FFFFFFFA),BC
                           A 15273    ; 3567	
                           A 15274    ; 3568	
                           A 15275    ; 3569		if (obj && obj->fs && obj->fs->fs_t
                           A 15276    .LINE 3569
                           A 15277    
003A2C 01000000            A 15278    	LD	BC,0
003A30 DD2706              A 15279    	LD	HL,(IX+%6)
003A33 B7                  A 15280    	OR	A,A
003A34 ED42                A 15281    	SBC	HL,BC
003A36 28 49               A 15282    	JR	Z,L_790
003A38 DD3106              A 15283    	LD	IY,(IX+%6)
003A3B FD0700              A 15284    	LD	BC,(IY+%0)
003A3E DD0FFD              A 15285    	LD	(IX+%FFFFFFFD),BC
003A41 01000000            A 15286    	LD	BC,0
003A45 DD27FD              A 15287    	LD	HL,(IX+%FFFFFFFD)
003A48 B7                  A 15288    	OR	A,A
003A49 ED42                A 15289    	SBC	HL,BC
003A4B 28 34               A 15290    	JR	Z,L_790
003A4D DD31FD              A 15291    	LD	IY,(IX+%FFFFFFFD)
003A50 FD7E00              A 15292    	LD	A,(IY+%0)
003A53 B7                  A 15293    	OR	A,A
003A54 28 2B               A 15294    	JR	Z,L_790
003A56 DD31FD              A 15295    	LD	IY,(IX+%FFFFFFFD)
003A59 FD0705              A 15296    	LD	BC,(IY+%5)
003A5C DD3106              A 15297    	LD	IY,(IX+%6)
003A5F FD2703              A 15298    	LD	HL,(IY+%3)
003A62 B7                  A 15299    	OR	A,A
003A63 40ED42              A 15300    	SBC.SIS	HL,BC
003A66 20 19               A 15301    	JR	NZ,L_790
                           A 15302    ; 3570	#if FF_FS_REENTRANT
                           A 15303    ; 3571			if (lock_fs(obj->fs)) {	/* Obta
                           A 15304    ; 3572				if (!(disk_status(obj->fs->
                           A 15305    ; 3573					res = FR_OK;
                           A 15306    ; 3574				} else {
                           A 15307    ; 3575					unlock_fs(obj->fs, FR_O
                           A 15308    ; 3576				}
                           A 15309    ; 3577			} else {
                           A 15310    ; 3578				res = FR_TIMEOUT;
                           A 15311    ; 3579			}
                           A 15312    ; 3580	#else
                           A 15313    ; 3581			if (!(disk_status(obj->fs->pdrv
                           A 15314    .LINE 3581
                           A 15315    
003A68 DD31FD              A 15316    	LD	IY,(IX+%FFFFFFFD)
003A6B FD4E01              A 15317    	LD	C,(IY+%1)
003A6E 0600                A 15318    	LD	B,%0
003A70 C5                  A 15319    	PUSH	BC
003A71 CD 00 00 00         A 15320    	CALL	_disk_status
003A75 C1                  A 15321    	POP	BC
003A76 E601                A 15322    	AND	A,%1
003A78 20 07               A 15323    	JR	NZ,L_790
                           A 15324    ; 3582				res = FR_OK;
                           A 15325    .LINE 3582
                           A 15326    
003A7A 01000000            A 15327    	LD	BC,0
003A7E DD0FFA              A 15328    	LD	(IX+%FFFFFFFA),BC
                           A 15329    ; 3583			}
                           A 15330    ; 3584	#endif
                           A 15331    ; 3585		}
003A81                     A 15332    L_790:
                           A 15333    .LINE 3585
                           A 15334    
                           A 15335    ; 3586		*rfs = (res == FR_OK) ? obj->fs : 0
                           A 15336    .LINE 3586
                           A 15337    
003A81 01000000            A 15338    	LD	BC,0
003A85 DD27FA              A 15339    	LD	HL,(IX+%FFFFFFFA)
003A88 B7                  A 15340    	OR	A,A
003A89 ED42                A 15341    	SBC	HL,BC
003A8B 20 0B               A 15342    	JR	NZ,L_788
003A8D DD3106              A 15343    	LD	IY,(IX+%6)
003A90 FD0700              A 15344    	LD	BC,(IY+%0)
003A93 DD0FF7              A 15345    	LD	(IX+%FFFFFFF7),BC
003A96 18 03               A 15346    	JR	L_789
003A98                     A 15347    L_788:
003A98 DD0FF7              A 15348    	LD	(IX+%FFFFFFF7),BC
003A9B                     A 15349    L_789:
003A9B DD2709              A 15350    	LD	HL,(IX+%9)
003A9E DD07F7              A 15351    	LD	BC,(IX+%FFFFFFF7)
003AA1 ED0F                A 15352    	LD	(HL),BC
                           A 15353    ; 3587		return res;
                           A 15354    .LINE 3587
                           A 15355    
003AA3 DD27FA              A 15356    	LD	HL,(IX+%FFFFFFFA)
                           A 15357    ; 3588	}
                           A 15358    .LINE 3588
                           A 15359    
003AA6 DDF9                A 15360    	LD	SP,IX
003AA8 DDE1                A 15361    	POP	IX
003AAA C9                  A 15362    	RET	
                           A 15363    
                           A 15364    
                           A 15365    ;**************************** _validate *******
                           A 15366    ;Name                         Addr/Register   S
                           A 15367    ;_disk_status                        IMPORT  --
                           A 15368    ;temp786                               IX-9    
                           A 15369    ;res                                   IX-6    
                           A 15370    ;G_56                                  IX-3    
                           A 15371    ;rfs                                   IX+9    
                           A 15372    ;obj                                   IX+6    
                           A 15373    
                           A 15374    
                           A 15375    ; Stack Frame Size: 21 (bytes)
                           A 15376    ;       Spill Code: -3 (instruction)
                           A 15377    
                           A 15378    
                           A 15379    .ENDFUNC "validate",3588,"_validate"
                           A 15380    ; 3589	
                           A 15381    ; 3590	
                           A 15382    ; 3591	
                           A 15383    ; 3592	
                           A 15384    ; 3593	/*-------------------------------------
                           A 15385    ; 3594	
                           A 15386    ; 3595	   Public Functions (FatFs API)
                           A 15387    ; 3596	
                           A 15388    ; 3597	---------------------------------------
                           A 15389    ; 3598	
                           A 15390    ; 3599	
                           A 15391    ; 3600	
                           A 15392    ; 3601	/*-------------------------------------
                           A 15393    ; 3602	/* Mount/Unmount a Logical Drive       
                           A 15394    ; 3603	/*-------------------------------------
                           A 15395    ; 3604	
                           A 15396    ; 3605	FRESULT f_mount (
                           A 15397    ; 3606		FATFS* fs,			/* Pointer to t
                           A 15398    ; 3607		const TCHAR* path,	/* Logical driv
                           A 15399    ; 3608		BYTE opt			/* Mount option
                           A 15400    ; 3609	)
                           A 15401    ; 3610	{
003AAB                     A 15402    _f_mount:
                           A 15403    .DEFINE "_f_mount"
                           A 15404    
                           A 15405    .VALUE _f_mount
                           A 15406    
                           A 15407    .CLASS 2
                           A 15408    
                           A 15409    .TYPE 68
                           A 15410    
                           A 15411    .ENDEF
                           A 15412    
                           A 15413    .BEGFUNC "f_mount",3610,"_f_mount"
                           A 15414    
                           A 15415    .LINE 3610
                           A 15416    
                           A 15417    .DEFINE "fs"
                           A 15418    
                           A 15419    .CLASS 65
                           A 15420    
                           A 15421    .VALUE 6
                           A 15422    
                           A 15423    .TAG "NONAME0"
                           A 15424    
                           A 15425    .TYPE 40
                           A 15426    
                           A 15427    .ENDEF
                           A 15428    
                           A 15429    .DEFINE "path"
                           A 15430    
                           A 15431    .CLASS 65
                           A 15432    
                           A 15433    .VALUE 9
                           A 15434    
                           A 15435    .TYPE 194
                           A 15436    
                           A 15437    .ENDEF
                           A 15438    
                           A 15439    .DEFINE "opt"
                           A 15440    
                           A 15441    .CLASS 65
                           A 15442    
                           A 15443    .VALUE 12
                           A 15444    
                           A 15445    .TYPE 12
                           A 15446    
                           A 15447    .ENDEF
                           A 15448    
                           A 15449    .DEFINE "cfs"
                           A 15450    
                           A 15451    .CLASS 65
                           A 15452    
                           A 15453    .VALUE -3
                           A 15454    
                           A 15455    .TAG "NONAME0"
                           A 15456    
                           A 15457    .TYPE 40
                           A 15458    
                           A 15459    .ENDEF
                           A 15460    
                           A 15461    .DEFINE "vol"
                           A 15462    
                           A 15463    .CLASS 65
                           A 15464    
                           A 15465    .VALUE -6
                           A 15466    
                           A 15467    .TYPE 4
                           A 15468    
                           A 15469    .ENDEF
                           A 15470    
                           A 15471    .DEFINE "res"
                           A 15472    
                           A 15473    .CLASS 65
                           A 15474    
                           A 15475    .VALUE -12
                           A 15476    
                           A 15477    .TYPE 4
                           A 15478    
                           A 15479    .ENDEF
                           A 15480    
                           A 15481    .DEFINE "rp"
                           A 15482    
                           A 15483    .CLASS 65
                           A 15484    
                           A 15485    .VALUE -15
                           A 15486    
                           A 15487    .TYPE 194
                           A 15488    
                           A 15489    .ENDEF
                           A 15490    
003AAB DDE5                A 15491    	PUSH	IX
003AAD DD210000 00         A 15492    	LD	IX,0
003AB2 DD39                A 15493    	ADD	IX,SP
003AB4 ED22F1              A 15494    	LEA	HL,IX+%FFFFFFF1
003AB7 F9                  A 15495    	LD	SP,HL
                           A 15496    ; 3611		FATFS *cfs;
                           A 15497    ; 3612		int vol;
                           A 15498    ; 3613		FRESULT res;
                           A 15499    ; 3614		const TCHAR *rp = path;
                           A 15500    .LINE 3614
                           A 15501    
003AB8 DD0709              A 15502    	LD	BC,(IX+%9)
003ABB DD0FF1              A 15503    	LD	(IX+%FFFFFFF1),BC
                           A 15504    ; 3615	
                           A 15505    ; 3616	
                           A 15506    ; 3617		/* Get logical drive number */
                           A 15507    ; 3618		vol = get_ldnumber(&rp);
                           A 15508    .LINE 3618
                           A 15509    
003ABE ED65F1              A 15510    	PEA	IX+%FFFFFFF1
003AC1 CD 3A 2F 00         A 15511    	CALL	_get_ldnumber
003AC5 C1                  A 15512    	POP	BC
003AC6 DD2FFA              A 15513    	LD	(IX+%FFFFFFFA),HL
                           A 15514    ; 3619		if (vol < 0) return FR_INVALID_DRIV
                           A 15515    .LINE 3619
                           A 15516    
003AC9 01000000            A 15517    	LD	BC,0
003ACD DD27FA              A 15518    	LD	HL,(IX+%FFFFFFFA)
003AD0 B7                  A 15519    	OR	A,A
003AD1 ED42                A 15520    	SBC	HL,BC
003AD3 F2 DD 3A 00         A 15521    	JP	P,L_793
003AD7 210B0000            A 15522    	LD	HL,11
003ADB 18 5E               A 15523    	JR	L_800
003ADD                     A 15524    L_793:
                           A 15525    ; 3620		cfs = FatFs[vol];					
                           A 15526    .LINE 3620
                           A 15527    
003ADD DD27FA              A 15528    	LD	HL,(IX+%FFFFFFFA)
003AE0 E5C1                A 15529    	LD	BC,HL
003AE2 29                  A 15530    	ADD	HL,HL
003AE3 09                  A 15531    	ADD	HL,BC
003AE4 01 00 00 00         A 15532    	LD	BC,_FatFs
003AE8 09                  A 15533    	ADD	HL,BC
003AE9 DD2FF7              A 15534    	LD	(IX+%FFFFFFF7),HL
003AEC ED07                A 15535    	LD	BC,(HL)
003AEE DD0FFD              A 15536    	LD	(IX+%FFFFFFFD),BC
                           A 15537    ; 3621	
                           A 15538    ; 3622		if (cfs) {
                           A 15539    .LINE 3622
                           A 15540    
003AF1 01000000            A 15541    	LD	BC,0
003AF5 DD27FD              A 15542    	LD	HL,(IX+%FFFFFFFD)
003AF8 B7                  A 15543    	OR	A,A
003AF9 ED42                A 15544    	SBC	HL,BC
003AFB 28 07               A 15545    	JR	Z,L_796
                           A 15546    ; 3623	#if FF_FS_LOCK != 0
                           A 15547    ; 3624			clear_lock(cfs);
                           A 15548    ; 3625	#endif
                           A 15549    ; 3626	#if FF_FS_REENTRANT						
                           A 15550    ; 3627			if (!ff_del_syncobj(cfs->sobj))
                           A 15551    ; 3628	#endif
                           A 15552    ; 3629			cfs->fs_type = 0;				
                           A 15553    .LINE 3629
                           A 15554    
003AFD DD31FD              A 15555    	LD	IY,(IX+%FFFFFFFD)
003B00 FD360000            A 15556    	LD	(IY+%0),%0
                           A 15557    ; 3630		}
003B04                     A 15558    L_796:
                           A 15559    .LINE 3630
                           A 15560    
                           A 15561    ; 3631	
                           A 15562    ; 3632		if (fs) {
                           A 15563    .LINE 3632
                           A 15564    
003B04 DD2706              A 15565    	LD	HL,(IX+%6)
003B07 B7                  A 15566    	OR	A,A
003B08 ED42                A 15567    	SBC	HL,BC
003B0A 28 07               A 15568    	JR	Z,L_797
                           A 15569    ; 3633			fs->fs_type = 0;				
                           A 15570    .LINE 3633
                           A 15571    
003B0C DD3106              A 15572    	LD	IY,(IX+%6)
003B0F FD360000            A 15573    	LD	(IY+%0),%0
                           A 15574    ; 3634	#if FF_FS_REENTRANT						
                           A 15575    ; 3635			if (!ff_cre_syncobj((BYTE)vol, 
                           A 15576    ; 3636	#endif
                           A 15577    ; 3637		}
003B13                     A 15578    L_797:
                           A 15579    .LINE 3637
                           A 15580    
                           A 15581    ; 3638		FatFs[vol] = fs;					
                           A 15582    .LINE 3638
                           A 15583    
003B13 DD27F7              A 15584    	LD	HL,(IX+%FFFFFFF7)
003B16 DD0706              A 15585    	LD	BC,(IX+%6)
003B19 ED0F                A 15586    	LD	(HL),BC
                           A 15587    ; 3639	
                           A 15588    ; 3640		if (opt == 0) return FR_OK;			
                           A 15589    .LINE 3640
                           A 15590    
003B1B DD7E0C              A 15591    	LD	A,(IX+%C)
003B1E B7                  A 15592    	OR	A,A
003B1F 20 05               A 15593    	JR	NZ,L_799
003B21 B7                  A 15594    	OR	A,A
003B22 ED62                A 15595    	SBC	HL,HL
003B24 18 15               A 15596    	JR	L_800
003B26                     A 15597    L_799:
                           A 15598    ; 3641	
                           A 15599    ; 3642		res = mount_volume(&path, &fs, 0);	
                           A 15600    .LINE 3642
                           A 15601    
003B26 01000000            A 15602    	LD	BC,0
003B2A C5                  A 15603    	PUSH	BC
003B2B ED6506              A 15604    	PEA	IX+%6
003B2E ED6509              A 15605    	PEA	IX+%9
003B31 CD 6E 33 00         A 15606    	CALL	_mount_volume
003B35 C1                  A 15607    	POP	BC
003B36 C1                  A 15608    	POP	BC
003B37 C1                  A 15609    	POP	BC
003B38 DD2FF4              A 15610    	LD	(IX+%FFFFFFF4),HL
                           A 15611    ; 3643		LEAVE_FF(fs, res);
                           A 15612    .LINE 3643
                           A 15613    
                           A 15614    ; 3644	}
003B3B                     A 15615    L_800:
                           A 15616    .LINE 3644
                           A 15617    
003B3B DDF9                A 15618    	LD	SP,IX
003B3D DDE1                A 15619    	POP	IX
003B3F C9                  A 15620    	RET	
                           A 15621    
                           A 15622    
                           A 15623    ;**************************** _f_mount ********
                           A 15624    ;Name                         Addr/Register   S
                           A 15625    ;_FatFs                              STATIC    
                           A 15626    ;rp                                   IX-15    
                           A 15627    ;res                                  IX-12    
                           A 15628    ;G_59                                  IX-9    
                           A 15629    ;vol                                   IX-6    
                           A 15630    ;cfs                                   IX-3    
                           A 15631    ;opt                                  IX+12    
                           A 15632    ;path                                  IX+9    
                           A 15633    ;fs                                    IX+6    
                           A 15634    
                           A 15635    
                           A 15636    ; Stack Frame Size: 30 (bytes)
                           A 15637    ;       Spill Code: -3 (instruction)
                           A 15638    
                           A 15639    
                           A 15640    .ENDFUNC "f_mount",3644,"_f_mount"
                           A 15641    ; 3645	
                           A 15642    ; 3646	
                           A 15643    ; 3647	
                           A 15644    ; 3648	
                           A 15645    ; 3649	/*-------------------------------------
                           A 15646    ; 3650	/* Open or Create a File               
                           A 15647    ; 3651	/*-------------------------------------
                           A 15648    ; 3652	
                           A 15649    ; 3653	FRESULT f_open (
                           A 15650    ; 3654		FIL* fp,			/* Pointer to t
                           A 15651    ; 3655		const TCHAR* path,	/* Pointer to t
                           A 15652    ; 3656		BYTE mode			/* Access mode 
                           A 15653    ; 3657	)
                           A 15654    ; 3658	{
003B40                     A 15655    _f_open:
                           A 15656    .DEFINE "_f_open"
                           A 15657    
                           A 15658    .VALUE _f_open
                           A 15659    
                           A 15660    .CLASS 2
                           A 15661    
                           A 15662    .TYPE 68
                           A 15663    
                           A 15664    .ENDEF
                           A 15665    
                           A 15666    .BEGFUNC "f_open",3658,"_f_open"
                           A 15667    
                           A 15668    .LINE 3658
                           A 15669    
                           A 15670    .DEFINE "fp"
                           A 15671    
                           A 15672    .CLASS 65
                           A 15673    
                           A 15674    .VALUE 6
                           A 15675    
                           A 15676    .TAG "NONAME2"
                           A 15677    
                           A 15678    .TYPE 40
                           A 15679    
                           A 15680    .ENDEF
                           A 15681    
                           A 15682    .DEFINE "path"
                           A 15683    
                           A 15684    .CLASS 65
                           A 15685    
                           A 15686    .VALUE 9
                           A 15687    
                           A 15688    .TYPE 194
                           A 15689    
                           A 15690    .ENDEF
                           A 15691    
                           A 15692    .DEFINE "mode"
                           A 15693    
                           A 15694    .CLASS 65
                           A 15695    
                           A 15696    .VALUE 12
                           A 15697    
                           A 15698    .TYPE 12
                           A 15699    
                           A 15700    .ENDEF
                           A 15701    
                           A 15702    .DEFINE "res"
                           A 15703    
                           A 15704    .CLASS 65
                           A 15705    
                           A 15706    .VALUE -3
                           A 15707    
                           A 15708    .TYPE 4
                           A 15709    
                           A 15710    .ENDEF
                           A 15711    
                           A 15712    .DEFINE "fs"
                           A 15713    
                           A 15714    .CLASS 65
                           A 15715    
                           A 15716    .VALUE -6
                           A 15717    
                           A 15718    .TAG "NONAME0"
                           A 15719    
                           A 15720    .TYPE 40
                           A 15721    
                           A 15722    .ENDEF
                           A 15723    
                           A 15724    .DEFINE "clst"
                           A 15725    
                           A 15726    .CLASS 65
                           A 15727    
                           A 15728    .VALUE -10
                           A 15729    
                           A 15730    .TYPE 15
                           A 15731    
                           A 15732    .ENDEF
                           A 15733    
                           A 15734    .DEFINE "ofs"
                           A 15735    
                           A 15736    .CLASS 65
                           A 15737    
                           A 15738    .VALUE -14
                           A 15739    
                           A 15740    .TYPE 15
                           A 15741    
                           A 15742    .ENDEF
                           A 15743    
                           A 15744    .DEFINE "sc"
                           A 15745    
                           A 15746    .CLASS 65
                           A 15747    
                           A 15748    .VALUE -18
                           A 15749    
                           A 15750    .TYPE 15
                           A 15751    
                           A 15752    .ENDEF
                           A 15753    
                           A 15754    .DEFINE "cl"
                           A 15755    
                           A 15756    .CLASS 65
                           A 15757    
                           A 15758    .VALUE -28
                           A 15759    
                           A 15760    .TYPE 15
                           A 15761    
                           A 15762    .ENDEF
                           A 15763    
                           A 15764    .DEFINE "bcs"
                           A 15765    
                           A 15766    .CLASS 65
                           A 15767    
                           A 15768    .VALUE -32
                           A 15769    
                           A 15770    .TYPE 15
                           A 15771    
                           A 15772    .ENDEF
                           A 15773    
                           A 15774    .DEFINE "dj"
                           A 15775    
                           A 15776    .CLASS 65
                           A 15777    
                           A 15778    .VALUE -78
                           A 15779    
                           A 15780    .TAG "NONAME3"
                           A 15781    
                           A 15782    .TYPE 8
                           A 15783    
                           A 15784    .ENDEF
                           A 15785    
                           A 15786    .DEFINE "lbuf"
                           A 15787    
                           A 15788    .CLASS 65
                           A 15789    
                           A 15790    .VALUE -590
                           A 15791    
                           A 15792    .DIM 256
                           A 15793    
                           A 15794    .TYPE 109
                           A 15795    
                           A 15796    .ENDEF
                           A 15797    
003B40 DDE5                A 15798    	PUSH	IX
003B42 DD210000 00         A 15799    	LD	IX,0
003B47 DD39                A 15800    	ADD	IX,SP
003B49 21ACFDFF            A 15801    	LD	HL,-596
003B4D 39                  A 15802    	ADD	HL,SP
003B4E F9                  A 15803    	LD	SP,HL
                           A 15804    ; 3659		FRESULT res;
                           A 15805    ; 3660		DIR dj;
                           A 15806    ; 3661		FATFS *fs;
                           A 15807    ; 3662	#if !FF_FS_READONLY
                           A 15808    ; 3663		DWORD cl, bcs, clst, tm;
                           A 15809    ; 3664		LBA_t sc;
                           A 15810    ; 3665		FSIZE_t ofs;
                           A 15811    ; 3666	#endif
                           A 15812    ; 3667		DEF_NAMBUF
                           A 15813    ; 3668	
                           A 15814    ; 3669	
                           A 15815    ; 3670		if (!fp) return FR_INVALID_OBJECT;
                           A 15816    .LINE 3670
                           A 15817    
003B4F 01000000            A 15818    	LD	BC,0
003B53 DD2706              A 15819    	LD	HL,(IX+%6)
003B56 B7                  A 15820    	OR	A,A
003B57 ED42                A 15821    	SBC	HL,BC
003B59 20 08               A 15822    	JR	NZ,L_802
003B5B 21090000            A 15823    	LD	HL,9
003B5F C3 50 40 00         A 15824    	JR	L_851
003B63                     A 15825    L_802:
                           A 15826    ; 3671	
                           A 15827    ; 3672		/* Get logical drive number */
                           A 15828    ; 3673		mode &= FF_FS_READONLY ? FA_READ : 
                           A 15829    .LINE 3673
                           A 15830    
003B63 DD7E0C              A 15831    	LD	A,(IX+%C)
003B66 E63F                A 15832    	AND	A,%3F
003B68 DD770C              A 15833    	LD	(IX+%C),A
                           A 15834    ; 3674		res = mount_volume(&path, &fs, mode
                           A 15835    .LINE 3674
                           A 15836    
003B6B DD4E0C              A 15837    	LD	C,(IX+%C)
003B6E 0600                A 15838    	LD	B,%0
003B70 C5                  A 15839    	PUSH	BC
003B71 ED65FA              A 15840    	PEA	IX+%FFFFFFFA
003B74 ED6509              A 15841    	PEA	IX+%9
003B77 CD 6E 33 00         A 15842    	CALL	_mount_volume
003B7B C1                  A 15843    	POP	BC
003B7C C1                  A 15844    	POP	BC
003B7D C1                  A 15845    	POP	BC
003B7E DD2FFD              A 15846    	LD	(IX+%FFFFFFFD),HL
                           A 15847    ; 3675		if (res == FR_OK) {
                           A 15848    .LINE 3675
                           A 15849    
003B81 01000000            A 15850    	LD	BC,0
003B85 DD27FD              A 15851    	LD	HL,(IX+%FFFFFFFD)
003B88 B7                  A 15852    	OR	A,A
003B89 ED42                A 15853    	SBC	HL,BC
003B8B C2 3B 40 00         A 15854    	JR	NZ,L_849
                           A 15855    ; 3676			dj.obj.fs = fs;
                           A 15856    .LINE 3676
                           A 15857    
003B8F DD07FA              A 15858    	LD	BC,(IX+%FFFFFFFA)
003B92 DD0FB2              A 15859    	LD	(IX+%FFFFFFB2),BC
                           A 15860    ; 3677			INIT_NAMBUF(fs);
                           A 15861    .LINE 3677
                           A 15862    
003B95 DDE5E1              A 15863    	LD	HL,IX
003B98 01B2FDFF            A 15864    	LD	BC,-590
003B9C 09                  A 15865    	ADD	HL,BC
003B9D DD31FA              A 15866    	LD	IY,(IX+%FFFFFFFA)
003BA0 FD2F0B              A 15867    	LD	(IY+%B),HL
                           A 15868    ; 3678			res = follow_path(&dj, path);	
                           A 15869    .LINE 3678
                           A 15870    
003BA3 DD0709              A 15871    	LD	BC,(IX+%9)
003BA6 C5                  A 15872    	PUSH	BC
003BA7 ED65B2              A 15873    	PEA	IX+%FFFFFFB2
003BAA CD 00 2E 00         A 15874    	CALL	_follow_path
003BAE C1                  A 15875    	POP	BC
003BAF C1                  A 15876    	POP	BC
003BB0 DD2FFD              A 15877    	LD	(IX+%FFFFFFFD),HL
                           A 15878    ; 3679	#if !FF_FS_READONLY	/* Read/Write confi
                           A 15879    ; 3680			if (res == FR_OK) {
                           A 15880    .LINE 3680
                           A 15881    
003BB3 01000000            A 15882    	LD	BC,0
003BB7 DD27FD              A 15883    	LD	HL,(IX+%FFFFFFFD)
003BBA B7                  A 15884    	OR	A,A
003BBB ED42                A 15885    	SBC	HL,BC
003BBD 20 11               A 15886    	JR	NZ,L_824
                           A 15887    ; 3681				if (dj.fn[NSFLAG] & NS_NONA
                           A 15888    .LINE 3681
                           A 15889    
003BBF ED55D0              A 15890    	LEA	IY,IX+%FFFFFFD0
003BC2 FD7E0B              A 15891    	LD	A,(IY+%B)
003BC5 E680                A 15892    	AND	A,%80
003BC7 28 07               A 15893    	JR	Z,L_824
                           A 15894    ; 3682					res = FR_INVALID_NAME;
                           A 15895    .LINE 3682
                           A 15896    
003BC9 01060000            A 15897    	LD	BC,6
003BCD DD0FFD              A 15898    	LD	(IX+%FFFFFFFD),BC
                           A 15899    ; 3683				}
                           A 15900    ; 3684	#if FF_FS_LOCK != 0
                           A 15901    ; 3685				else {
                           A 15902    ; 3686					res = chk_lock(&dj, (mo
                           A 15903    ; 3687				}
                           A 15904    ; 3688	#endif
                           A 15905    ; 3689			}
003BD0                     A 15906    L_824:
                           A 15907    .LINE 3689
                           A 15908    
                           A 15909    ; 3690			/* Create or Open a file */
                           A 15910    ; 3691			if (mode & (FA_CREATE_ALWAYS | 
                           A 15911    .LINE 3691
                           A 15912    
003BD0 DD7E0C              A 15913    	LD	A,(IX+%C)
003BD3 E61C                A 15914    	AND	A,%1C
003BD5 CA 37 3D 00         A 15915    	JR	Z,L_823
                           A 15916    ; 3692				if (res != FR_OK) {			
                           A 15917    .LINE 3692
                           A 15918    
003BD9 01000000            A 15919    	LD	BC,0
003BDD DD27FD              A 15920    	LD	HL,(IX+%FFFFFFFD)
003BE0 B7                  A 15921    	OR	A,A
003BE1 ED42                A 15922    	SBC	HL,BC
003BE3 28 21               A 15923    	JR	Z,L_811
                           A 15924    ; 3693					if (res == FR_NO_FILE) 
                           A 15925    .LINE 3693
                           A 15926    
003BE5 01040000            A 15927    	LD	BC,4
003BE9 DD27FD              A 15928    	LD	HL,(IX+%FFFFFFFD)
003BEC B7                  A 15929    	OR	A,A
003BED ED42                A 15930    	SBC	HL,BC
003BEF 20 0B               A 15931    	JR	NZ,L_806
                           A 15932    ; 3694	#if FF_FS_LOCK != 0
                           A 15933    ; 3695						res = enq_lock() ? 
                           A 15934    ; 3696	#else
                           A 15935    ; 3697						res = dir_register(
                           A 15936    .LINE 3697
                           A 15937    
003BF1 ED65B2              A 15938    	PEA	IX+%FFFFFFB2
003BF4 CD ED 21 00         A 15939    	CALL	_dir_register
003BF8 C1                  A 15940    	POP	BC
003BF9 DD2FFD              A 15941    	LD	(IX+%FFFFFFFD),HL
                           A 15942    ; 3698	#endif
                           A 15943    ; 3699					}
003BFC                     A 15944    L_806:
                           A 15945    .LINE 3699
                           A 15946    
                           A 15947    ; 3700					mode |= FA_CREATE_ALWAY
                           A 15948    .LINE 3700
                           A 15949    
003BFC DD7E0C              A 15950    	LD	A,(IX+%C)
003BFF CBDF                A 15951    	SET	%3,A
003C01 DD770C              A 15952    	LD	(IX+%C),A
                           A 15953    ; 3701				}
                           A 15954    ; 3702				else {						
                           A 15955    .LINE 3702
                           A 15956    
003C04 18 1E               A 15957    	JR	L_816
003C06                     A 15958    L_811:
                           A 15959    ; 3703					if (dj.obj.attr & (AM_R
                           A 15960    .LINE 3703
                           A 15961    
003C06 DD7EB7              A 15962    	LD	A,(IX+%FFFFFFB7)
003C09 E611                A 15963    	AND	A,%11
003C0B 28 09               A 15964    	JR	Z,L_809
                           A 15965    ; 3704						res = FR_DENIED;
                           A 15966    .LINE 3704
                           A 15967    
003C0D 01070000            A 15968    	LD	BC,7
003C11 DD0FFD              A 15969    	LD	(IX+%FFFFFFFD),BC
                           A 15970    ; 3705					} else {
                           A 15971    .LINE 3705
                           A 15972    
003C14 18 0E               A 15973    	JR	L_816
003C16                     A 15974    L_809:
                           A 15975    ; 3706						if (mode & FA_CREAT
                           A 15976    .LINE 3706
                           A 15977    
003C16 DD7E0C              A 15978    	LD	A,(IX+%C)
003C19 E604                A 15979    	AND	A,%4
003C1B 28 07               A 15980    	JR	Z,L_816
003C1D 01080000            A 15981    	LD	BC,8
003C21 DD0FFD              A 15982    	LD	(IX+%FFFFFFFD),BC
                           A 15983    ; 3707					}
                           A 15984    ; 3708				}
003C24                     A 15985    L_816:
                           A 15986    .LINE 3708
                           A 15987    
                           A 15988    ; 3709				if (res == FR_OK && (mode &
                           A 15989    .LINE 3709
                           A 15990    
003C24 01000000            A 15991    	LD	BC,0
003C28 DD27FD              A 15992    	LD	HL,(IX+%FFFFFFFD)
003C2B B7                  A 15993    	OR	A,A
003C2C ED42                A 15994    	SBC	HL,BC
003C2E C2 74 3D 00         A 15995    	JR	NZ,L_828
003C32 DD7E0C              A 15996    	LD	A,(IX+%C)
003C35 E608                A 15997    	AND	A,%8
003C37 CA 74 3D 00         A 15998    	JR	Z,L_828
                           A 15999    ; 3710	#if FF_FS_EXFAT
                           A 16000    ; 3711					if (fs->fs_type == FS_E
                           A 16001    ; 3712						/* Get current allo
                           A 16002    ; 3713						fp->obj.fs = fs;
                           A 16003    ; 3714						init_alloc_info(fs,
                           A 16004    ; 3715						/* Set directory en
                           A 16005    ; 3716						memset(fs->dirbuf +
                           A 16006    ; 3717						memset(fs->dirbuf +
                           A 16007    ; 3718						fs->dirbuf[XDIR_Att
                           A 16008    ; 3719						st_dword(fs->dirbuf
                           A 16009    ; 3720						fs->dirbuf[XDIR_Gen
                           A 16010    ; 3721						res = store_xdir(&d
                           A 16011    ; 3722						if (res == FR_OK &&
                           A 16012    ; 3723							res = remove_ch
                           A 16013    ; 3724							fs->last_clst =
                           A 16014    ; 3725						}
                           A 16015    ; 3726					} else
                           A 16016    ; 3727	#endif
                           A 16017    ; 3728					{
                           A 16018    ; 3729						/* Set directory en
                           A 16019    ; 3730						tm = GET_FATTIME();
                           A 16020    ; 3731						st_dword(dj.dir + D
                           A 16021    .LINE 3731
                           A 16022    
003C3B 01500000            A 16023    	LD	BC,80
003C3F C5                  A 16024    	PUSH	BC
003C40 01000021            A 16025    	LD	BC,2162688
003C44 C5                  A 16026    	PUSH	BC
003C45 DD31CD              A 16027    	LD	IY,(IX+%FFFFFFCD)
003C48 ED030E              A 16028    	LEA	BC,IY+%E
003C4B C5                  A 16029    	PUSH	BC
003C4C CD 45 01 00         A 16030    	CALL	_st_dword
003C50 C1                  A 16031    	POP	BC
003C51 C1                  A 16032    	POP	BC
003C52 C1                  A 16033    	POP	BC
                           A 16034    ; 3732						st_dword(dj.dir + D
                           A 16035    .LINE 3732
                           A 16036    
003C53 01500000            A 16037    	LD	BC,80
003C57 C5                  A 16038    	PUSH	BC
003C58 01000021            A 16039    	LD	BC,2162688
003C5C C5                  A 16040    	PUSH	BC
003C5D DD31CD              A 16041    	LD	IY,(IX+%FFFFFFCD)
003C60 ED0316              A 16042    	LEA	BC,IY+%16
003C63 C5                  A 16043    	PUSH	BC
003C64 CD 45 01 00         A 16044    	CALL	_st_dword
003C68 C1                  A 16045    	POP	BC
003C69 C1                  A 16046    	POP	BC
003C6A C1                  A 16047    	POP	BC
                           A 16048    ; 3733						cl = ld_clust(fs, d
                           A 16049    .LINE 3733
                           A 16050    
003C6B DD07CD              A 16051    	LD	BC,(IX+%FFFFFFCD)
003C6E C5                  A 16052    	PUSH	BC
003C6F DD07FA              A 16053    	LD	BC,(IX+%FFFFFFFA)
003C72 C5                  A 16054    	PUSH	BC
003C73 CD EE 17 00         A 16055    	CALL	_ld_clust
003C77 C1                  A 16056    	POP	BC
003C78 C1                  A 16057    	POP	BC
003C79 DD2FE4              A 16058    	LD	(IX+%FFFFFFE4),HL
003C7C DD73E7              A 16059    	LD	(IX+%FFFFFFE7),E
                           A 16060    ; 3734						dj.dir[DIR_Attr] = 
                           A 16061    .LINE 3734
                           A 16062    
003C7F DD31CD              A 16063    	LD	IY,(IX+%FFFFFFCD)
003C82 ED230B              A 16064    	LEA	HL,IY+%B
003C85 3620                A 16065    	LD	(HL),%20
                           A 16066    ; 3735						st_clust(fs, dj.dir
                           A 16067    .LINE 3735
                           A 16068    
003C87 01000000            A 16069    	LD	BC,0
003C8B C5                  A 16070    	PUSH	BC
003C8C C5                  A 16071    	PUSH	BC
003C8D DD07CD              A 16072    	LD	BC,(IX+%FFFFFFCD)
003C90 C5                  A 16073    	PUSH	BC
003C91 DD07FA              A 16074    	LD	BC,(IX+%FFFFFFFA)
003C94 C5                  A 16075    	PUSH	BC
003C95 CD 5C 18 00         A 16076    	CALL	_st_clust
003C99 C1                  A 16077    	POP	BC
003C9A C1                  A 16078    	POP	BC
003C9B C1                  A 16079    	POP	BC
003C9C C1                  A 16080    	POP	BC
                           A 16081    ; 3736						st_dword(dj.dir + D
                           A 16082    .LINE 3736
                           A 16083    
003C9D 01000000            A 16084    	LD	BC,0
003CA1 C5                  A 16085    	PUSH	BC
003CA2 C5                  A 16086    	PUSH	BC
003CA3 DD31CD              A 16087    	LD	IY,(IX+%FFFFFFCD)
003CA6 ED031C              A 16088    	LEA	BC,IY+%1C
003CA9 C5                  A 16089    	PUSH	BC
003CAA CD 45 01 00         A 16090    	CALL	_st_dword
003CAE C1                  A 16091    	POP	BC
003CAF C1                  A 16092    	POP	BC
003CB0 C1                  A 16093    	POP	BC
                           A 16094    ; 3737						fs->wflag = 1;
                           A 16095    .LINE 3737
                           A 16096    
003CB1 DD31FA              A 16097    	LD	IY,(IX+%FFFFFFFA)
003CB4 FD360301            A 16098    	LD	(IY+%3),%1
                           A 16099    ; 3738						if (cl != 0) {		
                           A 16100    .LINE 3738
                           A 16101    
003CB8 DD27E4              A 16102    	LD	HL,(IX+%FFFFFFE4)
003CBB DD5EE7              A 16103    	LD	E,(IX+%FFFFFFE7)
003CBE 01000000            A 16104    	LD	BC,0
003CC2 AF                  A 16105    	XOR	A,A
003CC3 CD 00 00 00         A 16106    	CALL	__lcmpu
003CC7 CA 74 3D 00         A 16107    	JR	Z,L_828
                           A 16108    ; 3739							sc = fs->winsec
                           A 16109    .LINE 3739
                           A 16110    
003CCB DD31FA              A 16111    	LD	IY,(IX+%FFFFFFFA)
003CCE FD072E              A 16112    	LD	BC,(IY+%2E)
003CD1 FD7E31              A 16113    	LD	A,(IY+%31)
003CD4 DD0FEE              A 16114    	LD	(IX+%FFFFFFEE),BC
003CD7 DD77F1              A 16115    	LD	(IX+%FFFFFFF1),A
                           A 16116    ; 3740							res = remove_ch
                           A 16117    .LINE 3740
                           A 16118    
003CDA 01000000            A 16119    	LD	BC,0
003CDE C5                  A 16120    	PUSH	BC
003CDF C5                  A 16121    	PUSH	BC
003CE0 DD4EE7              A 16122    	LD	C,(IX+%FFFFFFE7)
003CE3 0600                A 16123    	LD	B,%0
003CE5 C5                  A 16124    	PUSH	BC
003CE6 DD07E4              A 16125    	LD	BC,(IX+%FFFFFFE4)
003CE9 C5                  A 16126    	PUSH	BC
003CEA ED65B2              A 16127    	PEA	IX+%FFFFFFB2
003CED CD F4 0B 00         A 16128    	CALL	_remove_chain
003CF1 C1                  A 16129    	POP	BC
003CF2 C1                  A 16130    	POP	BC
003CF3 C1                  A 16131    	POP	BC
003CF4 C1                  A 16132    	POP	BC
003CF5 C1                  A 16133    	POP	BC
003CF6 DD2FFD              A 16134    	LD	(IX+%FFFFFFFD),HL
                           A 16135    ; 3741							if (res == FR_O
                           A 16136    .LINE 3741
                           A 16137    
003CF9 01000000            A 16138    	LD	BC,0
003CFD DD27FD              A 16139    	LD	HL,(IX+%FFFFFFFD)
003D00 B7                  A 16140    	OR	A,A
003D01 ED42                A 16141    	SBC	HL,BC
003D03 20 6F               A 16142    	JR	NZ,L_828
                           A 16143    ; 3742								res = move_
                           A 16144    .LINE 3742
                           A 16145    
003D05 DD4EF1              A 16146    	LD	C,(IX+%FFFFFFF1)
003D08 0600                A 16147    	LD	B,%0
003D0A C5                  A 16148    	PUSH	BC
003D0B DD07EE              A 16149    	LD	BC,(IX+%FFFFFFEE)
003D0E C5                  A 16150    	PUSH	BC
003D0F DD07FA              A 16151    	LD	BC,(IX+%FFFFFFFA)
003D12 C5                  A 16152    	PUSH	BC
003D13 CD 1E 04 00         A 16153    	CALL	_move_window
003D17 C1                  A 16154    	POP	BC
003D18 C1                  A 16155    	POP	BC
003D19 C1                  A 16156    	POP	BC
003D1A DD2FFD              A 16157    	LD	(IX+%FFFFFFFD),HL
                           A 16158    ; 3743								fs->last_cl
                           A 16159    .LINE 3743
                           A 16160    
003D1D DD27E4              A 16161    	LD	HL,(IX+%FFFFFFE4)
003D20 DD5EE7              A 16162    	LD	E,(IX+%FFFFFFE7)
003D23 01010000            A 16163    	LD	BC,1
003D27 AF                  A 16164    	XOR	A,A
003D28 CD 00 00 00         A 16165    	CALL	__lsub
003D2C DD31FA              A 16166    	LD	IY,(IX+%FFFFFFFA)
003D2F FD2F0E              A 16167    	LD	(IY+%E),HL
003D32 FD7311              A 16168    	LD	(IY+%11),E
                           A 16169    ; 3744							}
                           A 16170    ; 3745						}
                           A 16171    ; 3746					}
                           A 16172    ; 3747				}
                           A 16173    ; 3748			}
                           A 16174    ; 3749			else {	/* Open an existing fil
                           A 16175    .LINE 3749
                           A 16176    
003D35 18 3D               A 16177    	JR	L_828
003D37                     A 16178    L_823:
                           A 16179    ; 3750				if (res == FR_OK) {			
                           A 16180    .LINE 3750
                           A 16181    
003D37 01000000            A 16182    	LD	BC,0
003D3B DD27FD              A 16183    	LD	HL,(IX+%FFFFFFFD)
003D3E B7                  A 16184    	OR	A,A
003D3F ED42                A 16185    	SBC	HL,BC
003D41 20 31               A 16186    	JR	NZ,L_828
                           A 16187    ; 3751					if (dj.obj.attr & AM_DI
                           A 16188    .LINE 3751
                           A 16189    
003D43 ED02B2              A 16190    	LEA	BC,IX+%FFFFFFB2
003D46 DD0FEB              A 16191    	LD	(IX+%FFFFFFEB),BC
003D49 DD31EB              A 16192    	LD	IY,(IX+%FFFFFFEB)
003D4C FD7E05              A 16193    	LD	A,(IY+%5)
003D4F E610                A 16194    	AND	A,%10
003D51 28 09               A 16195    	JR	Z,L_820
                           A 16196    ; 3752						res = FR_NO_FILE;
                           A 16197    .LINE 3752
                           A 16198    
003D53 01040000            A 16199    	LD	BC,4
003D57 DD0FFD              A 16200    	LD	(IX+%FFFFFFFD),BC
                           A 16201    ; 3753					} else {
                           A 16202    .LINE 3753
                           A 16203    
003D5A 18 18               A 16204    	JR	L_828
003D5C                     A 16205    L_820:
                           A 16206    ; 3754						if ((mode & FA_WRIT
                           A 16207    .LINE 3754
                           A 16208    
003D5C DD7E0C              A 16209    	LD	A,(IX+%C)
003D5F E602                A 16210    	AND	A,%2
003D61 28 11               A 16211    	JR	Z,L_828
003D63 DD31EB              A 16212    	LD	IY,(IX+%FFFFFFEB)
003D66 FD7E05              A 16213    	LD	A,(IY+%5)
003D69 E601                A 16214    	AND	A,%1
003D6B 28 07               A 16215    	JR	Z,L_828
                           A 16216    ; 3755							res = FR_DENIED
                           A 16217    .LINE 3755
                           A 16218    
003D6D 01070000            A 16219    	LD	BC,7
003D71 DD0FFD              A 16220    	LD	(IX+%FFFFFFFD),BC
                           A 16221    ; 3756						}
                           A 16222    ; 3757					}
                           A 16223    ; 3758				}
                           A 16224    ; 3759			}
003D74                     A 16225    L_828:
                           A 16226    .LINE 3759
                           A 16227    
                           A 16228    ; 3760			if (res == FR_OK) {
                           A 16229    .LINE 3760
                           A 16230    
003D74 01000000            A 16231    	LD	BC,0
003D78 DD27FD              A 16232    	LD	HL,(IX+%FFFFFFFD)
003D7B B7                  A 16233    	OR	A,A
003D7C ED42                A 16234    	SBC	HL,BC
003D7E 20 27               A 16235    	JR	NZ,L_845
                           A 16236    ; 3761				if (mode & FA_CREATE_ALWAYS
                           A 16237    .LINE 3761
                           A 16238    
003D80 DD7E0C              A 16239    	LD	A,(IX+%C)
003D83 E608                A 16240    	AND	A,%8
003D85 28 08               A 16241    	JR	Z,L_826
003D87 DD7E0C              A 16242    	LD	A,(IX+%C)
003D8A CBF7                A 16243    	SET	%6,A
003D8C DD770C              A 16244    	LD	(IX+%C),A
003D8F                     A 16245    L_826:
                           A 16246    ; 3762				fp->dir_sect = fs->winsect;
                           A 16247    .LINE 3762
                           A 16248    
003D8F DD31FA              A 16249    	LD	IY,(IX+%FFFFFFFA)
003D92 FD072E              A 16250    	LD	BC,(IY+%2E)
003D95 FD7E31              A 16251    	LD	A,(IY+%31)
003D98 DD3106              A 16252    	LD	IY,(IX+%6)
003D9B FD0F1D              A 16253    	LD	(IY+%1D),BC
003D9E FD7720              A 16254    	LD	(IY+%20),A
                           A 16255    ; 3763				fp->dir_ptr = dj.dir;
                           A 16256    .LINE 3763
                           A 16257    
003DA1 DD07CD              A 16258    	LD	BC,(IX+%FFFFFFCD)
003DA4 FD0F21              A 16259    	LD	(IY+%21),BC
                           A 16260    ; 3764	#if FF_FS_LOCK != 0
                           A 16261    ; 3765				fp->obj.lockid = inc_lock(&
                           A 16262    ; 3766				if (fp->obj.lockid == 0) re
                           A 16263    ; 3767	#endif
                           A 16264    ; 3768			}
003DA7                     A 16265    L_845:
                           A 16266    .LINE 3768
                           A 16267    
                           A 16268    ; 3769	#else		/* R/O configuration */
                           A 16269    ; 3770			if (res == FR_OK) {
                           A 16270    ; 3771				if (dj.fn[NSFLAG] & NS_NONA
                           A 16271    ; 3772					res = FR_INVALID_NAME;
                           A 16272    ; 3773				} else {
                           A 16273    ; 3774					if (dj.obj.attr & AM_DI
                           A 16274    ; 3775						res = FR_NO_FILE;
                           A 16275    ; 3776					}
                           A 16276    ; 3777				}
                           A 16277    ; 3778			}
                           A 16278    ; 3779	#endif
                           A 16279    ; 3780	
                           A 16280    ; 3781			if (res == FR_OK) {
                           A 16281    .LINE 3781
                           A 16282    
003DA7 01000000            A 16283    	LD	BC,0
003DAB DD27FD              A 16284    	LD	HL,(IX+%FFFFFFFD)
003DAE B7                  A 16285    	OR	A,A
003DAF ED42                A 16286    	SBC	HL,BC
003DB1 C2 3B 40 00         A 16287    	JR	NZ,L_846
                           A 16288    ; 3782	#if FF_FS_EXFAT
                           A 16289    ; 3783				if (fs->fs_type == FS_EXFAT
                           A 16290    ; 3784					fp->obj.c_scl = dj.obj.
                           A 16291    ; 3785					fp->obj.c_size = ((DWOR
                           A 16292    ; 3786					fp->obj.c_ofs = dj.blk_
                           A 16293    ; 3787					init_alloc_info(fs, &fp
                           A 16294    ; 3788				} else
                           A 16295    ; 3789	#endif
                           A 16296    ; 3790				{
                           A 16297    ; 3791					fp->obj.sclust = ld_clu
                           A 16298    .LINE 3791
                           A 16299    
003DB5 DD3106              A 16300    	LD	IY,(IX+%6)
003DB8 ED0300              A 16301    	LEA	BC,IY+%0
003DBB 21AFFDFF            A 16302    	LD	HL,-593
003DBF DDE5D1              A 16303    	LD	DE,IX
003DC2 19                  A 16304    	ADD	HL,DE
003DC3 ED0F                A 16305    	LD	(HL),BC
003DC5 DD07CD              A 16306    	LD	BC,(IX+%FFFFFFCD)
003DC8 C5                  A 16307    	PUSH	BC
003DC9 DD07FA              A 16308    	LD	BC,(IX+%FFFFFFFA)
003DCC C5                  A 16309    	PUSH	BC
003DCD CD EE 17 00         A 16310    	CALL	_ld_clust
003DD1 C1                  A 16311    	POP	BC
003DD2 C1                  A 16312    	POP	BC
003DD3 FD21AFFD FF         A 16313    	LD	IY,-593
003DD8 DDE5C1              A 16314    	LD	BC,IX
003DDB FD09                A 16315    	ADD	IY,BC
003DDD FD3700              A 16316    	LD	IY,(IY)
003DE0 FD2F07              A 16317    	LD	(IY+%7),HL
003DE3 FD730A              A 16318    	LD	(IY+%A),E
                           A 16319    ; 3792					fp->obj.objsize = ld_dw
                           A 16320    .LINE 3792
                           A 16321    
003DE6 DD31CD              A 16322    	LD	IY,(IX+%FFFFFFCD)
003DE9 ED031C              A 16323    	LEA	BC,IY+%1C
003DEC C5                  A 16324    	PUSH	BC
003DED CD 3C 00 00         A 16325    	CALL	_ld_dword
003DF1 C1                  A 16326    	POP	BC
003DF2 FD21AFFD FF         A 16327    	LD	IY,-593
003DF7 DDE5C1              A 16328    	LD	BC,IX
003DFA FD09                A 16329    	ADD	IY,BC
003DFC FD3700              A 16330    	LD	IY,(IY)
003DFF FD2F0B              A 16331    	LD	(IY+%B),HL
003E02 FD730E              A 16332    	LD	(IY+%E),E
                           A 16333    ; 3793				}
                           A 16334    ; 3794	#if FF_USE_FASTSEEK
                           A 16335    ; 3795				fp->cltbl = 0;		/* Disa
                           A 16336    ; 3796	#endif
                           A 16337    ; 3797				fp->obj.fs = fs;	/* Vali
                           A 16338    .LINE 3797
                           A 16339    
003E05 21AFFDFF            A 16340    	LD	HL,-593
003E09 DDE5C1              A 16341    	LD	BC,IX
003E0C 09                  A 16342    	ADD	HL,BC
003E0D ED31                A 16343    	LD	IY,(HL)
003E0F DD07FA              A 16344    	LD	BC,(IX+%FFFFFFFA)
003E12 FD0F00              A 16345    	LD	(IY+%0),BC
                           A 16346    ; 3798				fp->obj.id = fs->id;
                           A 16347    .LINE 3798
                           A 16348    
003E15 21AFFDFF            A 16349    	LD	HL,-593
003E19 DDE5C1              A 16350    	LD	BC,IX
003E1C 09                  A 16351    	ADD	HL,BC
003E1D ED17                A 16352    	LD	DE,(HL)
003E1F DD31FA              A 16353    	LD	IY,(IX+%FFFFFFFA)
003E22 FD0705              A 16354    	LD	BC,(IY+%5)
003E25 D5FDE1              A 16355    	LD	IY,DE
003E28 FD7103              A 16356    	LD	(IY+%3),C
003E2B FD7004              A 16357    	LD	(IY+%4),B
                           A 16358    ; 3799				fp->flag = mode;	/* Set 
                           A 16359    .LINE 3799
                           A 16360    
003E2E DD7E0C              A 16361    	LD	A,(IX+%C)
003E31 DD3106              A 16362    	LD	IY,(IX+%6)
003E34 FD770F              A 16363    	LD	(IY+%F),A
                           A 16364    ; 3800				fp->err = 0;		/* Clea
                           A 16365    .LINE 3800
                           A 16366    
003E37 FD361000            A 16367    	LD	(IY+%10),%0
                           A 16368    ; 3801				fp->sect = 0;		/* Inva
                           A 16369    .LINE 3801
                           A 16370    
003E3B 01000000            A 16371    	LD	BC,0
003E3F FD0F19              A 16372    	LD	(IY+%19),BC
003E42 FD361C00            A 16373    	LD	(IY+%1C),%0
                           A 16374    ; 3802				fp->fptr = 0;		/* Set 
                           A 16375    .LINE 3802
                           A 16376    
003E46 FD0F11              A 16377    	LD	(IY+%11),BC
003E49 FD361400            A 16378    	LD	(IY+%14),%0
                           A 16379    ; 3803	#if !FF_FS_READONLY
                           A 16380    ; 3804	#if !FF_FS_TINY
                           A 16381    ; 3805				memset(fp->buf, 0, sizeof f
                           A 16382    .LINE 3805
                           A 16383    
003E4D 01000200            A 16384    	LD	BC,512
003E51 C5                  A 16385    	PUSH	BC
003E52 01000000            A 16386    	LD	BC,0
003E56 C5                  A 16387    	PUSH	BC
003E57 ED6624              A 16388    	PEA	IY+%24
003E5A CD 00 00 00         A 16389    	CALL	_memset
003E5E C1                  A 16390    	POP	BC
003E5F C1                  A 16391    	POP	BC
003E60 C1                  A 16392    	POP	BC
                           A 16393    ; 3806	#endif
                           A 16394    ; 3807				if ((mode & FA_SEEKEND) && 
                           A 16395    .LINE 3807
                           A 16396    
003E61 DD7E0C              A 16397    	LD	A,(IX+%C)
003E64 E620                A 16398    	AND	A,%20
003E66 CA 3B 40 00         A 16399    	JR	Z,L_846
003E6A DD3106              A 16400    	LD	IY,(IX+%6)
003E6D ED0300              A 16401    	LEA	BC,IY+%0
003E70 DD0FE8              A 16402    	LD	(IX+%FFFFFFE8),BC
003E73 B7                  A 16403    	OR	A,A
003E74 ED62                A 16404    	SBC	HL,HL
003E76 1E00                A 16405    	LD	E,%0
003E78 DD31E8              A 16406    	LD	IY,(IX+%FFFFFFE8)
003E7B FD070B              A 16407    	LD	BC,(IY+%B)
003E7E FD7E0E              A 16408    	LD	A,(IY+%E)
003E81 CD 00 00 00         A 16409    	CALL	__lcmpu
003E85 D2 3B 40 00         A 16410    	JR	NC,L_846
                           A 16411    ; 3808					fp->fptr = fp->obj.objs
                           A 16412    .LINE 3808
                           A 16413    
003E89 DD31E8              A 16414    	LD	IY,(IX+%FFFFFFE8)
003E8C FD070B              A 16415    	LD	BC,(IY+%B)
003E8F FD7E0E              A 16416    	LD	A,(IY+%E)
003E92 DD3106              A 16417    	LD	IY,(IX+%6)
003E95 FD0F11              A 16418    	LD	(IY+%11),BC
003E98 FD7714              A 16419    	LD	(IY+%14),A
                           A 16420    ; 3809					bcs = (DWORD)fs->csize 
                           A 16421    .LINE 3809
                           A 16422    
003E9B DD31FA              A 16423    	LD	IY,(IX+%FFFFFFFA)
003E9E FD0709              A 16424    	LD	BC,(IY+%9)
003EA1 CD 00 00 00         A 16425    	CALL	__stoiu
003EA5 01000200            A 16426    	LD	BC,512
003EA9 AF                  A 16427    	XOR	A,A
003EAA CD 00 00 00         A 16428    	CALL	__lmulu
003EAE DD2FE0              A 16429    	LD	(IX+%FFFFFFE0),HL
003EB1 DD73E3              A 16430    	LD	(IX+%FFFFFFE3),E
                           A 16431    ; 3810					clst = fp->obj.sclust;	
                           A 16432    .LINE 3810
                           A 16433    
003EB4 DD3106              A 16434    	LD	IY,(IX+%6)
003EB7 ED0300              A 16435    	LEA	BC,IY+%0
003EBA 21ACFDFF            A 16436    	LD	HL,-596
003EBE DDE5D1              A 16437    	LD	DE,IX
003EC1 19                  A 16438    	ADD	HL,DE
003EC2 ED0F                A 16439    	LD	(HL),BC
003EC4 21ACFDFF            A 16440    	LD	HL,-596
003EC8 DDE5C1              A 16441    	LD	BC,IX
003ECB 09                  A 16442    	ADD	HL,BC
003ECC ED31                A 16443    	LD	IY,(HL)
003ECE FD0707              A 16444    	LD	BC,(IY+%7)
003ED1 FD7E0A              A 16445    	LD	A,(IY+%A)
003ED4 DD0FF6              A 16446    	LD	(IX+%FFFFFFF6),BC
003ED7 DD77F9              A 16447    	LD	(IX+%FFFFFFF9),A
                           A 16448    ; 3811					for (ofs = fp->obj.objs
                           A 16449    .LINE 3811
                           A 16450    
003EDA 21ACFDFF            A 16451    	LD	HL,-596
003EDE DDE5C1              A 16452    	LD	BC,IX
003EE1 09                  A 16453    	ADD	HL,BC
003EE2 ED31                A 16454    	LD	IY,(HL)
003EE4 FD070B              A 16455    	LD	BC,(IY+%B)
003EE7 FD7E0E              A 16456    	LD	A,(IY+%E)
003EEA DD0FF2              A 16457    	LD	(IX+%FFFFFFF2),BC
003EED DD77F5              A 16458    	LD	(IX+%FFFFFFF5),A
003EF0 18 64               A 16459    	JR	L_836
003EF2                     A 16460    L_834:
                           A 16461    ; 3812						clst = get_fat(&fp-
                           A 16462    .LINE 3812
                           A 16463    
003EF2 DD4EF9              A 16464    	LD	C,(IX+%FFFFFFF9)
003EF5 0600                A 16465    	LD	B,%0
003EF7 C5                  A 16466    	PUSH	BC
003EF8 DD07F6              A 16467    	LD	BC,(IX+%FFFFFFF6)
003EFB C5                  A 16468    	PUSH	BC
003EFC DD3106              A 16469    	LD	IY,(IX+%6)
003EFF ED6600              A 16470    	PEA	IY+%0
003F02 CD 64 06 00         A 16471    	CALL	_get_fat
003F06 C1                  A 16472    	POP	BC
003F07 C1                  A 16473    	POP	BC
003F08 C1                  A 16474    	POP	BC
003F09 E5C1                A 16475    	LD	BC,HL
003F0B DD0FF6              A 16476    	LD	(IX+%FFFFFFF6),BC
003F0E DD73F9              A 16477    	LD	(IX+%FFFFFFF9),E
                           A 16478    ; 3813						if (clst <= 1) res 
                           A 16479    .LINE 3813
                           A 16480    
003F11 21010000            A 16481    	LD	HL,1
003F15 1E00                A 16482    	LD	E,%0
003F17 DD7EF9              A 16483    	LD	A,(IX+%FFFFFFF9)
003F1A CD 00 00 00         A 16484    	CALL	__lcmpu
003F1E 38 07               A 16485    	JR	C,L_833
003F20 01020000            A 16486    	LD	BC,2
003F24 DD0FFD              A 16487    	LD	(IX+%FFFFFFFD),BC
003F27                     A 16488    L_833:
                           A 16489    ; 3814						if (clst == 0xFFFFF
                           A 16490    .LINE 3814
                           A 16491    
003F27 DD27F6              A 16492    	LD	HL,(IX+%FFFFFFF6)
003F2A DD5EF9              A 16493    	LD	E,(IX+%FFFFFFF9)
003F2D 01FFFFFF            A 16494    	LD	BC,16777215
003F31 3EFF                A 16495    	LD	A,%FF
003F33 CD 00 00 00         A 16496    	CALL	__lcmpu
003F37 20 07               A 16497    	JR	NZ,L_835
003F39 01010000            A 16498    	LD	BC,1
003F3D DD0FFD              A 16499    	LD	(IX+%FFFFFFFD),BC
                           A 16500    ; 3815					}
003F40                     A 16501    L_835:
                           A 16502    .LINE 3815
                           A 16503    
003F40 DD27F2              A 16504    	LD	HL,(IX+%FFFFFFF2)
003F43 DD5EF5              A 16505    	LD	E,(IX+%FFFFFFF5)
003F46 DD07E0              A 16506    	LD	BC,(IX+%FFFFFFE0)
003F49 DD7EE3              A 16507    	LD	A,(IX+%FFFFFFE3)
003F4C CD 00 00 00         A 16508    	CALL	__lsub
003F50 DD2FF2              A 16509    	LD	(IX+%FFFFFFF2),HL
003F53 DD73F5              A 16510    	LD	(IX+%FFFFFFF5),E
003F56                     A 16511    L_836:
003F56 01000000            A 16512    	LD	BC,0
003F5A DD27FD              A 16513    	LD	HL,(IX+%FFFFFFFD)
003F5D B7                  A 16514    	OR	A,A
003F5E ED42                A 16515    	SBC	HL,BC
003F60 20 14               A 16516    	JR	NZ,L_837
003F62 DD27E0              A 16517    	LD	HL,(IX+%FFFFFFE0)
003F65 DD5EE3              A 16518    	LD	E,(IX+%FFFFFFE3)
003F68 DD07F2              A 16519    	LD	BC,(IX+%FFFFFFF2)
003F6B DD7EF5              A 16520    	LD	A,(IX+%FFFFFFF5)
003F6E CD 00 00 00         A 16521    	CALL	__lcmpu
003F72 DA F2 3E 00         A 16522    	JR	C,L_834
003F76                     A 16523    L_837:
                           A 16524    ; 3816					fp->clust = clst;
                           A 16525    .LINE 3816
                           A 16526    
003F76 DD07F6              A 16527    	LD	BC,(IX+%FFFFFFF6)
003F79 DD7EF9              A 16528    	LD	A,(IX+%FFFFFFF9)
003F7C DD3106              A 16529    	LD	IY,(IX+%6)
003F7F FD0F15              A 16530    	LD	(IY+%15),BC
003F82 FD7718              A 16531    	LD	(IY+%18),A
                           A 16532    ; 3817					if (res == FR_OK && ofs
                           A 16533    .LINE 3817
                           A 16534    
003F85 01000000            A 16535    	LD	BC,0
003F89 DD27FD              A 16536    	LD	HL,(IX+%FFFFFFFD)
003F8C B7                  A 16537    	OR	A,A
003F8D ED42                A 16538    	SBC	HL,BC
003F8F C2 3B 40 00         A 16539    	JR	NZ,L_846
003F93 DD27F2              A 16540    	LD	HL,(IX+%FFFFFFF2)
003F96 DD5EF5              A 16541    	LD	E,(IX+%FFFFFFF5)
003F99 01FF0100            A 16542    	LD	BC,511
003F9D AF                  A 16543    	XOR	A,A
003F9E CD 00 00 00         A 16544    	CALL	__land
003FA2 01000000            A 16545    	LD	BC,0
003FA6 AF                  A 16546    	XOR	A,A
003FA7 CD 00 00 00         A 16547    	CALL	__lcmpu
003FAB CA 3B 40 00         A 16548    	JR	Z,L_846
                           A 16549    ; 3818						sc = clst2sect(fs, 
                           A 16550    .LINE 3818
                           A 16551    
003FAF DD4EF9              A 16552    	LD	C,(IX+%FFFFFFF9)
003FB2 0600                A 16553    	LD	B,%0
003FB4 C5                  A 16554    	PUSH	BC
003FB5 DD07F6              A 16555    	LD	BC,(IX+%FFFFFFF6)
003FB8 C5                  A 16556    	PUSH	BC
003FB9 DD07FA              A 16557    	LD	BC,(IX+%FFFFFFFA)
003FBC C5                  A 16558    	PUSH	BC
003FBD CD F9 05 00         A 16559    	CALL	_clst2sect
003FC1 C1                  A 16560    	POP	BC
003FC2 C1                  A 16561    	POP	BC
003FC3 C1                  A 16562    	POP	BC
003FC4 DD2FEE              A 16563    	LD	(IX+%FFFFFFEE),HL
003FC7 DD73F1              A 16564    	LD	(IX+%FFFFFFF1),E
                           A 16565    ; 3819						if (sc == 0) {
                           A 16566    .LINE 3819
                           A 16567    
003FCA DD27EE              A 16568    	LD	HL,(IX+%FFFFFFEE)
003FCD DD5EF1              A 16569    	LD	E,(IX+%FFFFFFF1)
003FD0 01000000            A 16570    	LD	BC,0
003FD4 AF                  A 16571    	XOR	A,A
003FD5 CD 00 00 00         A 16572    	CALL	__lcmpu
003FD9 20 09               A 16573    	JR	NZ,L_841
                           A 16574    ; 3820							res = FR_INT_ER
                           A 16575    .LINE 3820
                           A 16576    
003FDB 01020000            A 16577    	LD	BC,2
003FDF DD0FFD              A 16578    	LD	(IX+%FFFFFFFD),BC
                           A 16579    ; 3821						} else {
                           A 16580    .LINE 3821
                           A 16581    
003FE2 18 57               A 16582    	JR	L_846
003FE4                     A 16583    L_841:
                           A 16584    ; 3822							fp->sect = sc +
                           A 16585    .LINE 3822
                           A 16586    
003FE4 DD07F2              A 16587    	LD	BC,(IX+%FFFFFFF2)
003FE7 DD7EF5              A 16588    	LD	A,(IX+%FFFFFFF5)
003FEA 2E09                A 16589    	LD	L,%9
003FEC CD 00 00 00         A 16590    	CALL	__lshru
003FF0 5F                  A 16591    	LD	E,A
003FF1 C5E1                A 16592    	LD	HL,BC
003FF3 DD07EE              A 16593    	LD	BC,(IX+%FFFFFFEE)
003FF6 DD7EF1              A 16594    	LD	A,(IX+%FFFFFFF1)
003FF9 CD 00 00 00         A 16595    	CALL	__ladd
003FFD DD3106              A 16596    	LD	IY,(IX+%6)
004000 FD2F19              A 16597    	LD	(IY+%19),HL
004003 FD731C              A 16598    	LD	(IY+%1C),E
                           A 16599    ; 3823	#if !FF_FS_TINY
                           A 16600    ; 3824							if (disk_read(f
                           A 16601    .LINE 3824
                           A 16602    
004006 01010000            A 16603    	LD	BC,1
00400A C5                  A 16604    	PUSH	BC
00400B FD0719              A 16605    	LD	BC,(IY+%19)
00400E FD7E1C              A 16606    	LD	A,(IY+%1C)
004011 2600                A 16607    	LD	H,%0
004013 6F                  A 16608    	LD	L,A
004014 E5                  A 16609    	PUSH	HL
004015 C5                  A 16610    	PUSH	BC
004016 ED6624              A 16611    	PEA	IY+%24
004019 DD31FA              A 16612    	LD	IY,(IX+%FFFFFFFA)
00401C FD4E01              A 16613    	LD	C,(IY+%1)
00401F 0600                A 16614    	LD	B,%0
004021 C5                  A 16615    	PUSH	BC
004022 CD 00 00 00         A 16616    	CALL	_disk_read
004026 C1                  A 16617    	POP	BC
004027 C1                  A 16618    	POP	BC
004028 C1                  A 16619    	POP	BC
004029 C1                  A 16620    	POP	BC
00402A C1                  A 16621    	POP	BC
00402B 01000000            A 16622    	LD	BC,0
00402F B7                  A 16623    	OR	A,A
004030 ED42                A 16624    	SBC	HL,BC
004032 28 07               A 16625    	JR	Z,L_846
004034 01010000            A 16626    	LD	BC,1
004038 DD0FFD              A 16627    	LD	(IX+%FFFFFFFD),BC
                           A 16628    ; 3825	#endif
                           A 16629    ; 3826						}
                           A 16630    ; 3827					}
                           A 16631    ; 3828	#if FF_FS_LOCK != 0
                           A 16632    ; 3829					if (res != FR_OK) dec_l
                           A 16633    ; 3830	#endif
                           A 16634    ; 3831				}
                           A 16635    ; 3832	#endif
                           A 16636    ; 3833			}
00403B                     A 16637    L_846:
                           A 16638    .LINE 3833
                           A 16639    
                           A 16640    ; 3834	
                           A 16641    ; 3835			FREE_NAMBUF();
                           A 16642    ; 3836		}
00403B                     A 16643    L_849:
                           A 16644    .LINE 3836
                           A 16645    
                           A 16646    ; 3837	
                           A 16647    ; 3838		if (res != FR_OK) fp->obj.fs = 0;	
                           A 16648    .LINE 3838
                           A 16649    
00403B 01000000            A 16650    	LD	BC,0
00403F DD27FD              A 16651    	LD	HL,(IX+%FFFFFFFD)
004042 B7                  A 16652    	OR	A,A
004043 ED42                A 16653    	SBC	HL,BC
004045 28 06               A 16654    	JR	Z,L_850
004047 DD3106              A 16655    	LD	IY,(IX+%6)
00404A FD0F00              A 16656    	LD	(IY+%0),BC
00404D                     A 16657    L_850:
                           A 16658    ; 3839	
                           A 16659    ; 3840		LEAVE_FF(fs, res);
                           A 16660    .LINE 3840
                           A 16661    
00404D DD27FD              A 16662    	LD	HL,(IX+%FFFFFFFD)
                           A 16663    ; 3841	}
004050                     A 16664    L_851:
                           A 16665    .LINE 3841
                           A 16666    
004050 DDF9                A 16667    	LD	SP,IX
004052 DDE1                A 16668    	POP	IX
004054 C9                  A 16669    	RET	
                           A 16670    
                           A 16671    
                           A 16672    ;**************************** _f_open *********
                           A 16673    ;Name                         Addr/Register   S
                           A 16674    ;_disk_read                          IMPORT  --
                           A 16675    ;_memset                             IMPORT  --
                           A 16676    ;lbuf                                IX-590    
                           A 16677    ;dj                                   IX-78    
                           A 16678    ;bcs                                  IX-32    
                           A 16679    ;cl                                   IX-28    
                           A 16680    ;G_61                                 IX-24    
                           A 16681    ;G_60                                 IX-21    
                           A 16682    ;sc                                   IX-18    
                           A 16683    ;ofs                                  IX-14    
                           A 16684    ;clst                                 IX-10    
                           A 16685    ;fs                                    IX-6    
                           A 16686    ;res                                   IX-3    
                           A 16687    ;mode                                 IX+12    
                           A 16688    ;path                                  IX+9    
                           A 16689    ;fp                                    IX+6    
                           A 16690    
                           A 16691    
                           A 16692    ; Stack Frame Size: 611 (bytes)
                           A 16693    ;       Spill Code: -3 (instruction)
                           A 16694    
                           A 16695    
                           A 16696    .ENDFUNC "f_open",3841,"_f_open"
                           A 16697    ; 3842	
                           A 16698    ; 3843	
                           A 16699    ; 3844	
                           A 16700    ; 3845	
                           A 16701    ; 3846	/*-------------------------------------
                           A 16702    ; 3847	/* Read File                           
                           A 16703    ; 3848	/*-------------------------------------
                           A 16704    ; 3849	
                           A 16705    ; 3850	FRESULT f_read (
                           A 16706    ; 3851		FIL* fp, 	/* Open file to be read
                           A 16707    ; 3852		void* buff,	/* Data buffer to store
                           A 16708    ; 3853		UINT btr,	/* Number of bytes to r
                           A 16709    ; 3854		UINT* br	/* Number of bytes read
                           A 16710    ; 3855	)
                           A 16711    ; 3856	{
004055                     A 16712    _f_read:
                           A 16713    .DEFINE "_f_read"
                           A 16714    
                           A 16715    .VALUE _f_read
                           A 16716    
                           A 16717    .CLASS 2
                           A 16718    
                           A 16719    .TYPE 68
                           A 16720    
                           A 16721    .ENDEF
                           A 16722    
                           A 16723    .BEGFUNC "f_read",3856,"_f_read"
                           A 16724    
                           A 16725    .LINE 3856
                           A 16726    
                           A 16727    .DEFINE "fp"
                           A 16728    
                           A 16729    .CLASS 65
                           A 16730    
                           A 16731    .VALUE 6
                           A 16732    
                           A 16733    .TAG "NONAME2"
                           A 16734    
                           A 16735    .TYPE 40
                           A 16736    
                           A 16737    .ENDEF
                           A 16738    
                           A 16739    .DEFINE "buff"
                           A 16740    
                           A 16741    .CLASS 65
                           A 16742    
                           A 16743    .VALUE 9
                           A 16744    
                           A 16745    .TYPE 33
                           A 16746    
                           A 16747    .ENDEF
                           A 16748    
                           A 16749    .DEFINE "btr"
                           A 16750    
                           A 16751    .CLASS 65
                           A 16752    
                           A 16753    .VALUE 12
                           A 16754    
                           A 16755    .TYPE 14
                           A 16756    
                           A 16757    .ENDEF
                           A 16758    
                           A 16759    .DEFINE "br"
                           A 16760    
                           A 16761    .CLASS 65
                           A 16762    
                           A 16763    .VALUE 15
                           A 16764    
                           A 16765    .TYPE 46
                           A 16766    
                           A 16767    .ENDEF
                           A 16768    
                           A 16769    .DEFINE "rcnt"
                           A 16770    
                           A 16771    .CLASS 65
                           A 16772    
                           A 16773    .VALUE -3
                           A 16774    
                           A 16775    .TYPE 14
                           A 16776    
                           A 16777    .ENDEF
                           A 16778    
                           A 16779    .DEFINE "fs"
                           A 16780    
                           A 16781    .CLASS 65
                           A 16782    
                           A 16783    .VALUE -6
                           A 16784    
                           A 16785    .TAG "NONAME0"
                           A 16786    
                           A 16787    .TYPE 40
                           A 16788    
                           A 16789    .ENDEF
                           A 16790    
                           A 16791    .DEFINE "sect"
                           A 16792    
                           A 16793    .CLASS 65
                           A 16794    
                           A 16795    .VALUE -10
                           A 16796    
                           A 16797    .TYPE 15
                           A 16798    
                           A 16799    .ENDEF
                           A 16800    
                           A 16801    .DEFINE "cc"
                           A 16802    
                           A 16803    .CLASS 65
                           A 16804    
                           A 16805    .VALUE -13
                           A 16806    
                           A 16807    .TYPE 14
                           A 16808    
                           A 16809    .ENDEF
                           A 16810    
                           A 16811    .DEFINE "rbuff"
                           A 16812    
                           A 16813    .CLASS 65
                           A 16814    
                           A 16815    .VALUE -16
                           A 16816    
                           A 16817    .TYPE 44
                           A 16818    
                           A 16819    .ENDEF
                           A 16820    
                           A 16821    .DEFINE "csect"
                           A 16822    
                           A 16823    .CLASS 65
                           A 16824    
                           A 16825    .VALUE -19
                           A 16826    
                           A 16827    .TYPE 14
                           A 16828    
                           A 16829    .ENDEF
                           A 16830    
                           A 16831    .DEFINE "res"
                           A 16832    
                           A 16833    .CLASS 65
                           A 16834    
                           A 16835    .VALUE -22
                           A 16836    
                           A 16837    .TYPE 4
                           A 16838    
                           A 16839    .ENDEF
                           A 16840    
                           A 16841    .DEFINE "clst"
                           A 16842    
                           A 16843    .CLASS 65
                           A 16844    
                           A 16845    .VALUE -26
                           A 16846    
                           A 16847    .TYPE 15
                           A 16848    
                           A 16849    .ENDEF
                           A 16850    
                           A 16851    .DEFINE "remain"
                           A 16852    
                           A 16853    .CLASS 65
                           A 16854    
                           A 16855    .VALUE -34
                           A 16856    
                           A 16857    .TYPE 15
                           A 16858    
                           A 16859    .ENDEF
                           A 16860    
004055 DDE5                A 16861    	PUSH	IX
004057 DD210000 00         A 16862    	LD	IX,0
00405C DD39                A 16863    	ADD	IX,SP
00405E ED22CE              A 16864    	LEA	HL,IX+%FFFFFFCE
004061 F9                  A 16865    	LD	SP,HL
                           A 16866    ; 3857		FRESULT res;
                           A 16867    ; 3858		FATFS *fs;
                           A 16868    ; 3859		DWORD clst;
                           A 16869    ; 3860		LBA_t sect;
                           A 16870    ; 3861		FSIZE_t remain;
                           A 16871    ; 3862		UINT rcnt, cc, csect;
                           A 16872    ; 3863		BYTE *rbuff = (BYTE*)buff;
                           A 16873    .LINE 3863
                           A 16874    
004062 DD0709              A 16875    	LD	BC,(IX+%9)
004065 DD0FF0              A 16876    	LD	(IX+%FFFFFFF0),BC
                           A 16877    ; 3864	
                           A 16878    ; 3865	
                           A 16879    ; 3866		*br = 0;	/* Clear read byte coun
                           A 16880    .LINE 3866
                           A 16881    
004068 DD270F              A 16882    	LD	HL,(IX+%F)
00406B 01000000            A 16883    	LD	BC,0
00406F ED0F                A 16884    	LD	(HL),BC
                           A 16885    ; 3867		res = validate(&fp->obj, &fs);		
                           A 16886    .LINE 3867
                           A 16887    
004071 ED65FA              A 16888    	PEA	IX+%FFFFFFFA
004074 DD3106              A 16889    	LD	IY,(IX+%6)
004077 ED6600              A 16890    	PEA	IY+%0
00407A CD 19 3A 00         A 16891    	CALL	_validate
00407E C1                  A 16892    	POP	BC
00407F C1                  A 16893    	POP	BC
004080 DD2FEA              A 16894    	LD	(IX+%FFFFFFEA),HL
                           A 16895    ; 3868		if (res != FR_OK || (res = (FRESULT
                           A 16896    .LINE 3868
                           A 16897    
004083 01000000            A 16898    	LD	BC,0
004087 DD27EA              A 16899    	LD	HL,(IX+%FFFFFFEA)
00408A B7                  A 16900    	OR	A,A
00408B ED42                A 16901    	SBC	HL,BC
00408D 20 15               A 16902    	JR	NZ,L_853
00408F DD3106              A 16903    	LD	IY,(IX+%6)
004092 FD7E10              A 16904    	LD	A,(IY+%10)
004095 B7ED62              A 16905    	UEXT	HL
004098 6F                  A 16906    	LD	L,A
004099 DD2FEA              A 16907    	LD	(IX+%FFFFFFEA),HL
00409C DD27EA              A 16908    	LD	HL,(IX+%FFFFFFEA)
00409F B7                  A 16909    	OR	A,A
0040A0 ED42                A 16910    	SBC	HL,BC
0040A2 28 07               A 16911    	JR	Z,L_855
0040A4                     A 16912    L_853:
0040A4 DD27EA              A 16913    	LD	HL,(IX+%FFFFFFEA)
0040A7 C3 93 44 00         A 16914    	JR	L_895
0040AB                     A 16915    L_855:
                           A 16916    ; 3869		if (!(fp->flag & FA_READ)) LEAVE_FF
                           A 16917    .LINE 3869
                           A 16918    
0040AB DD3106              A 16919    	LD	IY,(IX+%6)
0040AE FD7E0F              A 16920    	LD	A,(IY+%F)
0040B1 E601                A 16921    	AND	A,%1
0040B3 20 08               A 16922    	JR	NZ,L_856
0040B5 21070000            A 16923    	LD	HL,7
0040B9 C3 93 44 00         A 16924    	JR	L_895
0040BD                     A 16925    L_856:
                           A 16926    ; 3870		remain = fp->obj.objsize - fp->fptr
                           A 16927    .LINE 3870
                           A 16928    
0040BD DD3106              A 16929    	LD	IY,(IX+%6)
0040C0 FD270B              A 16930    	LD	HL,(IY+%B)
0040C3 FD5E0E              A 16931    	LD	E,(IY+%E)
0040C6 FD0711              A 16932    	LD	BC,(IY+%11)
0040C9 FD7E14              A 16933    	LD	A,(IY+%14)
0040CC CD 00 00 00         A 16934    	CALL	__lsub
0040D0 DD2FDE              A 16935    	LD	(IX+%FFFFFFDE),HL
0040D3 DD73E1              A 16936    	LD	(IX+%FFFFFFE1),E
                           A 16937    ; 3871		if (btr > remain) btr = (UINT)remai
                           A 16938    .LINE 3871
                           A 16939    
0040D6 DD070C              A 16940    	LD	BC,(IX+%C)
0040D9 AF                  A 16941    	XOR	A,A
0040DA DD27DE              A 16942    	LD	HL,(IX+%FFFFFFDE)
0040DD DD5EE1              A 16943    	LD	E,(IX+%FFFFFFE1)
0040E0 CD 00 00 00         A 16944    	CALL	__lcmpu
0040E4 D2 83 44 00         A 16945    	JR	NC,L_892
0040E8 DD07DE              A 16946    	LD	BC,(IX+%FFFFFFDE)
0040EB DD0F0C              A 16947    	LD	(IX+%C),BC
                           A 16948    ; 3872	
                           A 16949    ; 3873		for ( ; btr > 0; btr -= rcnt, *br +
                           A 16950    .LINE 3873
                           A 16951    
0040EE C3 83 44 00         A 16952    	JR	L_892
0040F2                     A 16953    L_890:
                           A 16954    ; 3874			if (fp->fptr % SS(fs) == 0) {	
                           A 16955    .LINE 3874
                           A 16956    
0040F2 DD3106              A 16957    	LD	IY,(IX+%6)
0040F5 FD0711              A 16958    	LD	BC,(IY+%11)
0040F8 FD7E14              A 16959    	LD	A,(IY+%14)
0040FB DD0FE2              A 16960    	LD	(IX+%FFFFFFE2),BC
0040FE DD77E5              A 16961    	LD	(IX+%FFFFFFE5),A
004101 C5E1                A 16962    	LD	HL,BC
004103 DD5EE5              A 16963    	LD	E,(IX+%FFFFFFE5)
004106 01FF0100            A 16964    	LD	BC,511
00410A AF                  A 16965    	XOR	A,A
00410B CD 00 00 00         A 16966    	CALL	__land
00410F 01000000            A 16967    	LD	BC,0
004113 AF                  A 16968    	XOR	A,A
004114 CD 00 00 00         A 16969    	CALL	__lcmpu
004118 C2 E4 43 00         A 16970    	JR	NZ,L_887
                           A 16971    ; 3875				csect = (UINT)(fp->fptr / S
                           A 16972    .LINE 3875
                           A 16973    
00411C DD31FA              A 16974    	LD	IY,(IX+%FFFFFFFA)
00411F FD0709              A 16975    	LD	BC,(IY+%9)
004122 CD 00 00 00         A 16976    	CALL	__stoiu
004126 2B                  A 16977    	DEC	HL
004127 E5C1                A 16978    	LD	BC,HL
004129 CD 00 00 00         A 16979    	CALL	__itol
00412D DD0FCF              A 16980    	LD	(IX+%FFFFFFCF),BC
004130 5F                  A 16981    	LD	E,A
004131 DD07E2              A 16982    	LD	BC,(IX+%FFFFFFE2)
004134 DD7EE5              A 16983    	LD	A,(IX+%FFFFFFE5)
004137 2E09                A 16984    	LD	L,%9
004139 CD 00 00 00         A 16985    	CALL	__lshru
00413D DD27CF              A 16986    	LD	HL,(IX+%FFFFFFCF)
004140 CD 00 00 00         A 16987    	CALL	__land
004144 DD2FED              A 16988    	LD	(IX+%FFFFFFED),HL
                           A 16989    ; 3876				if (csect == 0) {			
                           A 16990    .LINE 3876
                           A 16991    
004147 01000000            A 16992    	LD	BC,0
00414B DD27ED              A 16993    	LD	HL,(IX+%FFFFFFED)
00414E B7                  A 16994    	OR	A,A
00414F ED42                A 16995    	SBC	HL,BC
004151 C2 E1 41 00         A 16996    	JR	NZ,L_866
                           A 16997    ; 3877					if (fp->fptr == 0) {	
                           A 16998    .LINE 3877
                           A 16999    
004155 DD27E2              A 17000    	LD	HL,(IX+%FFFFFFE2)
004158 DD5EE5              A 17001    	LD	E,(IX+%FFFFFFE5)
00415B AF                  A 17002    	XOR	A,A
00415C CD 00 00 00         A 17003    	CALL	__lcmpu
004160 20 11               A 17004    	JR	NZ,L_859
                           A 17005    ; 3878						clst = fp->obj.sclu
                           A 17006    .LINE 3878
                           A 17007    
004162 DD3106              A 17008    	LD	IY,(IX+%6)
004165 FD0707              A 17009    	LD	BC,(IY+%7)
004168 FD7E0A              A 17010    	LD	A,(IY+%A)
00416B DD0FE6              A 17011    	LD	(IX+%FFFFFFE6),BC
00416E DD77E9              A 17012    	LD	(IX+%FFFFFFE9),A
                           A 17013    ; 3879					} else {				
                           A 17014    .LINE 3879
                           A 17015    
004171 18 1E               A 17016    	JR	L_861
004173                     A 17017    L_859:
                           A 17018    ; 3880	#if FF_USE_FASTSEEK
                           A 17019    ; 3881						if (fp->cltbl) {
                           A 17020    ; 3882							clst = clmt_clu
                           A 17021    ; 3883						} else
                           A 17022    ; 3884	#endif
                           A 17023    ; 3885						{
                           A 17024    ; 3886							clst = get_fat(
                           A 17025    .LINE 3886
                           A 17026    
004173 DD3106              A 17027    	LD	IY,(IX+%6)
004176 FD0715              A 17028    	LD	BC,(IY+%15)
004179 FD7E18              A 17029    	LD	A,(IY+%18)
00417C 2600                A 17030    	LD	H,%0
00417E 6F                  A 17031    	LD	L,A
00417F E5                  A 17032    	PUSH	HL
004180 C5                  A 17033    	PUSH	BC
004181 ED6600              A 17034    	PEA	IY+%0
004184 CD 64 06 00         A 17035    	CALL	_get_fat
004188 C1                  A 17036    	POP	BC
004189 C1                  A 17037    	POP	BC
00418A C1                  A 17038    	POP	BC
00418B DD2FE6              A 17039    	LD	(IX+%FFFFFFE6),HL
00418E DD73E9              A 17040    	LD	(IX+%FFFFFFE9),E
                           A 17041    ; 3887						}
                           A 17042    ; 3888					}
004191                     A 17043    L_861:
                           A 17044    .LINE 3888
                           A 17045    
                           A 17046    ; 3889					if (clst < 2) ABORT(fs,
                           A 17047    .LINE 3889
                           A 17048    
004191 DD27E6              A 17049    	LD	HL,(IX+%FFFFFFE6)
004194 DD5EE9              A 17050    	LD	E,(IX+%FFFFFFE9)
004197 01020000            A 17051    	LD	BC,2
00419B AF                  A 17052    	XOR	A,A
00419C CD 00 00 00         A 17053    	CALL	__lcmpu
0041A0 30 0F               A 17054    	JR	NC,L_862
0041A2 DD3106              A 17055    	LD	IY,(IX+%6)
0041A5 FD361002            A 17056    	LD	(IY+%10),%2
0041A9 21020000            A 17057    	LD	HL,2
0041AD C3 93 44 00         A 17058    	JR	L_895
0041B1                     A 17059    L_862:
                           A 17060    ; 3890					if (clst == 0xFFFFFFFF)
                           A 17061    .LINE 3890
                           A 17062    
0041B1 DD27E6              A 17063    	LD	HL,(IX+%FFFFFFE6)
0041B4 DD5EE9              A 17064    	LD	E,(IX+%FFFFFFE9)
0041B7 01FFFFFF            A 17065    	LD	BC,16777215
0041BB 3EFF                A 17066    	LD	A,%FF
0041BD CD 00 00 00         A 17067    	CALL	__lcmpu
0041C1 20 0F               A 17068    	JR	NZ,L_864
0041C3 DD3106              A 17069    	LD	IY,(IX+%6)
0041C6 FD361001            A 17070    	LD	(IY+%10),%1
0041CA 21010000            A 17071    	LD	HL,1
0041CE C3 93 44 00         A 17072    	JR	L_895
0041D2                     A 17073    L_864:
                           A 17074    ; 3891					fp->clust = clst;		
                           A 17075    .LINE 3891
                           A 17076    
0041D2 DD07E6              A 17077    	LD	BC,(IX+%FFFFFFE6)
0041D5 DD7EE9              A 17078    	LD	A,(IX+%FFFFFFE9)
0041D8 DD3106              A 17079    	LD	IY,(IX+%6)
0041DB FD0F15              A 17080    	LD	(IY+%15),BC
0041DE FD7718              A 17081    	LD	(IY+%18),A
                           A 17082    ; 3892				}
0041E1                     A 17083    L_866:
                           A 17084    .LINE 3892
                           A 17085    
                           A 17086    ; 3893				sect = clst2sect(fs, fp->cl
                           A 17087    .LINE 3893
                           A 17088    
0041E1 DD3106              A 17089    	LD	IY,(IX+%6)
0041E4 FD0715              A 17090    	LD	BC,(IY+%15)
0041E7 FD7E18              A 17091    	LD	A,(IY+%18)
0041EA 2600                A 17092    	LD	H,%0
0041EC 6F                  A 17093    	LD	L,A
0041ED E5                  A 17094    	PUSH	HL
0041EE C5                  A 17095    	PUSH	BC
0041EF DD07FA              A 17096    	LD	BC,(IX+%FFFFFFFA)
0041F2 C5                  A 17097    	PUSH	BC
0041F3 CD F9 05 00         A 17098    	CALL	_clst2sect
0041F7 C1                  A 17099    	POP	BC
0041F8 C1                  A 17100    	POP	BC
0041F9 C1                  A 17101    	POP	BC
0041FA DD2FF6              A 17102    	LD	(IX+%FFFFFFF6),HL
0041FD DD73F9              A 17103    	LD	(IX+%FFFFFFF9),E
                           A 17104    ; 3894				if (sect == 0) ABORT(fs, FR
                           A 17105    .LINE 3894
                           A 17106    
004200 DD27F6              A 17107    	LD	HL,(IX+%FFFFFFF6)
004203 DD5EF9              A 17108    	LD	E,(IX+%FFFFFFF9)
004206 01000000            A 17109    	LD	BC,0
00420A AF                  A 17110    	XOR	A,A
00420B CD 00 00 00         A 17111    	CALL	__lcmpu
00420F 20 0F               A 17112    	JR	NZ,L_868
004211 DD3106              A 17113    	LD	IY,(IX+%6)
004214 FD361002            A 17114    	LD	(IY+%10),%2
004218 21020000            A 17115    	LD	HL,2
00421C C3 93 44 00         A 17116    	JR	L_895
004220                     A 17117    L_868:
                           A 17118    ; 3895				sect += csect;
                           A 17119    .LINE 3895
                           A 17120    
004220 DD07ED              A 17121    	LD	BC,(IX+%FFFFFFED)
004223 AF                  A 17122    	XOR	A,A
004224 DD27F6              A 17123    	LD	HL,(IX+%FFFFFFF6)
004227 DD5EF9              A 17124    	LD	E,(IX+%FFFFFFF9)
00422A CD 00 00 00         A 17125    	CALL	__ladd
00422E DD2FF6              A 17126    	LD	(IX+%FFFFFFF6),HL
004231 DD73F9              A 17127    	LD	(IX+%FFFFFFF9),E
                           A 17128    ; 3896				cc = btr / SS(fs);			
                           A 17129    .LINE 3896
                           A 17130    
004234 DD270C              A 17131    	LD	HL,(IX+%C)
004237 3E09                A 17132    	LD	A,%9
004239 CD 00 00 00         A 17133    	CALL	__ishru_b
00423D DD2FF3              A 17134    	LD	(IX+%FFFFFFF3),HL
                           A 17135    ; 3897				if (cc > 0) {				
                           A 17136    .LINE 3897
                           A 17137    
004240 E5C1                A 17138    	LD	BC,HL
004242 B7                  A 17139    	OR	A,A
004243 ED62                A 17140    	SBC	HL,HL
004245 B7                  A 17141    	OR	A,A
004246 ED42                A 17142    	SBC	HL,BC
004248 D2 1C 43 00         A 17143    	JR	NC,L_884
                           A 17144    ; 3898					if (csect + cc > fs->cs
                           A 17145    .LINE 3898
                           A 17146    
00424C DD31FA              A 17147    	LD	IY,(IX+%FFFFFFFA)
00424F FD0709              A 17148    	LD	BC,(IY+%9)
004252 CD 00 00 00         A 17149    	CALL	__stoiu
004256 E5C1                A 17150    	LD	BC,HL
004258 DD17F3              A 17151    	LD	DE,(IX+%FFFFFFF3)
00425B DD27ED              A 17152    	LD	HL,(IX+%FFFFFFED)
00425E 19                  A 17153    	ADD	HL,DE
00425F E5D1                A 17154    	LD	DE,HL
004261 C5E1                A 17155    	LD	HL,BC
004263 B7                  A 17156    	OR	A,A
004264 ED52                A 17157    	SBC	HL,DE
004266 30 13               A 17158    	JR	NC,L_871
                           A 17159    ; 3899						cc = fs->csize - cs
                           A 17160    .LINE 3899
                           A 17161    
004268 DD31FA              A 17162    	LD	IY,(IX+%FFFFFFFA)
00426B FD0709              A 17163    	LD	BC,(IY+%9)
00426E CD 00 00 00         A 17164    	CALL	__stoiu
004272 DD07ED              A 17165    	LD	BC,(IX+%FFFFFFED)
004275 B7                  A 17166    	OR	A,A
004276 ED42                A 17167    	SBC	HL,BC
004278 DD2FF3              A 17168    	LD	(IX+%FFFFFFF3),HL
                           A 17169    ; 3900					}
00427B                     A 17170    L_871:
                           A 17171    .LINE 3900
                           A 17172    
                           A 17173    ; 3901					if (disk_read(fs->pdrv,
                           A 17174    .LINE 3901
                           A 17175    
00427B DD07F3              A 17176    	LD	BC,(IX+%FFFFFFF3)
00427E C5                  A 17177    	PUSH	BC
00427F DD4EF9              A 17178    	LD	C,(IX+%FFFFFFF9)
004282 0600                A 17179    	LD	B,%0
004284 C5                  A 17180    	PUSH	BC
004285 DD07F6              A 17181    	LD	BC,(IX+%FFFFFFF6)
004288 C5                  A 17182    	PUSH	BC
004289 DD07F0              A 17183    	LD	BC,(IX+%FFFFFFF0)
00428C C5                  A 17184    	PUSH	BC
00428D DD31FA              A 17185    	LD	IY,(IX+%FFFFFFFA)
004290 FD4E01              A 17186    	LD	C,(IY+%1)
004293 0600                A 17187    	LD	B,%0
004295 C5                  A 17188    	PUSH	BC
004296 CD 00 00 00         A 17189    	CALL	_disk_read
00429A C1                  A 17190    	POP	BC
00429B C1                  A 17191    	POP	BC
00429C C1                  A 17192    	POP	BC
00429D C1                  A 17193    	POP	BC
00429E C1                  A 17194    	POP	BC
00429F 01000000            A 17195    	LD	BC,0
0042A3 B7                  A 17196    	OR	A,A
0042A4 ED42                A 17197    	SBC	HL,BC
0042A6 28 0F               A 17198    	JR	Z,L_872
0042A8 DD3106              A 17199    	LD	IY,(IX+%6)
0042AB FD361001            A 17200    	LD	(IY+%10),%1
0042AF 21010000            A 17201    	LD	HL,1
0042B3 C3 93 44 00         A 17202    	JR	L_895
0042B7                     A 17203    L_872:
                           A 17204    ; 3902	#if !FF_FS_READONLY && FF_FS_MINIMIZE <
                           A 17205    ; 3903	#if FF_FS_TINY
                           A 17206    ; 3904					if (fs->wflag && fs->wi
                           A 17207    ; 3905						memcpy(rbuff + ((fs
                           A 17208    ; 3906					}
                           A 17209    ; 3907	#else
                           A 17210    ; 3908					if ((fp->flag & FA_DIRT
                           A 17211    .LINE 3908
                           A 17212    
0042B7 DD3106              A 17213    	LD	IY,(IX+%6)
0042BA FD7E0F              A 17214    	LD	A,(IY+%F)
0042BD E680                A 17215    	AND	A,%80
0042BF 28 4B               A 17216    	JR	Z,L_875
0042C1 DD3106              A 17217    	LD	IY,(IX+%6)
0042C4 FD2719              A 17218    	LD	HL,(IY+%19)
0042C7 FD5E1C              A 17219    	LD	E,(IY+%1C)
0042CA DD07F6              A 17220    	LD	BC,(IX+%FFFFFFF6)
0042CD DD7EF9              A 17221    	LD	A,(IX+%FFFFFFF9)
0042D0 CD 00 00 00         A 17222    	CALL	__lsub
0042D4 DD2FDA              A 17223    	LD	(IX+%FFFFFFDA),HL
0042D7 DD73DD              A 17224    	LD	(IX+%FFFFFFDD),E
0042DA DD07F3              A 17225    	LD	BC,(IX+%FFFFFFF3)
0042DD AF                  A 17226    	XOR	A,A
0042DE DD27DA              A 17227    	LD	HL,(IX+%FFFFFFDA)
0042E1 DD5EDD              A 17228    	LD	E,(IX+%FFFFFFDD)
0042E4 CD 00 00 00         A 17229    	CALL	__lcmpu
0042E8 30 22               A 17230    	JR	NC,L_875
                           A 17231    ; 3909						memcpy(rbuff + ((fp
                           A 17232    .LINE 3909
                           A 17233    
0042EA 01000200            A 17234    	LD	BC,512
0042EE C5                  A 17235    	PUSH	BC
0042EF DD3106              A 17236    	LD	IY,(IX+%6)
0042F2 ED6624              A 17237    	PEA	IY+%24
0042F5 DD27DA              A 17238    	LD	HL,(IX+%FFFFFFDA)
0042F8 DD5EDD              A 17239    	LD	E,(IX+%FFFFFFDD)
0042FB AF                  A 17240    	XOR	A,A
0042FC CD 00 00 00         A 17241    	CALL	__lmulu
004300 DD07F0              A 17242    	LD	BC,(IX+%FFFFFFF0)
004303 09                  A 17243    	ADD	HL,BC
004304 E5                  A 17244    	PUSH	HL
004305 CD 00 00 00         A 17245    	CALL	_memcpy
004309 C1                  A 17246    	POP	BC
00430A C1                  A 17247    	POP	BC
00430B C1                  A 17248    	POP	BC
                           A 17249    ; 3910					}
00430C                     A 17250    L_875:
                           A 17251    .LINE 3910
                           A 17252    
                           A 17253    ; 3911	#endif
                           A 17254    ; 3912	#endif
                           A 17255    ; 3913					rcnt = SS(fs) * cc;		
                           A 17256    .LINE 3913
                           A 17257    
00430C DD27F3              A 17258    	LD	HL,(IX+%FFFFFFF3)
00430F 3E09                A 17259    	LD	A,%9
004311 CD 00 00 00         A 17260    	CALL	__ishl_b
004315 DD2FFD              A 17261    	LD	(IX+%FFFFFFFD),HL
                           A 17262    ; 3914					continue;
                           A 17263    .LINE 3914
                           A 17264    
004318 C3 47 44 00         A 17265    	JR	L_891
                           A 17266    ; 3915				}
00431C                     A 17267    L_884:
                           A 17268    .LINE 3915
                           A 17269    
                           A 17270    ; 3916	#if !FF_FS_TINY
                           A 17271    ; 3917				if (fp->sect != sect) {		
                           A 17272    .LINE 3917
                           A 17273    
00431C DD3106              A 17274    	LD	IY,(IX+%6)
00431F FD0719              A 17275    	LD	BC,(IY+%19)
004322 FD7E1C              A 17276    	LD	A,(IY+%1C)
004325 DD0FD6              A 17277    	LD	(IX+%FFFFFFD6),BC
004328 DD77D9              A 17278    	LD	(IX+%FFFFFFD9),A
00432B DD27F6              A 17279    	LD	HL,(IX+%FFFFFFF6)
00432E DD5EF9              A 17280    	LD	E,(IX+%FFFFFFF9)
004331 DD7ED9              A 17281    	LD	A,(IX+%FFFFFFD9)
004334 CD 00 00 00         A 17282    	CALL	__lcmpu
004338 CA D5 43 00         A 17283    	JR	Z,L_885
                           A 17284    ; 3918	#if !FF_FS_READONLY
                           A 17285    ; 3919					if (fp->flag & FA_DIRTY
                           A 17286    .LINE 3919
                           A 17287    
00433C DD3106              A 17288    	LD	IY,(IX+%6)
00433F FD7E0F              A 17289    	LD	A,(IY+%F)
004342 E680                A 17290    	AND	A,%80
004344 28 4A               A 17291    	JR	Z,L_881
                           A 17292    ; 3920						if (disk_write(fs->
                           A 17293    .LINE 3920
                           A 17294    
004346 01010000            A 17295    	LD	BC,1
00434A C5                  A 17296    	PUSH	BC
00434B DD4ED9              A 17297    	LD	C,(IX+%FFFFFFD9)
00434E 0600                A 17298    	LD	B,%0
004350 C5                  A 17299    	PUSH	BC
004351 DD07D6              A 17300    	LD	BC,(IX+%FFFFFFD6)
004354 C5                  A 17301    	PUSH	BC
004355 DD3106              A 17302    	LD	IY,(IX+%6)
004358 ED6624              A 17303    	PEA	IY+%24
00435B DD31FA              A 17304    	LD	IY,(IX+%FFFFFFFA)
00435E FD4E01              A 17305    	LD	C,(IY+%1)
004361 0600                A 17306    	LD	B,%0
004363 C5                  A 17307    	PUSH	BC
004364 CD 00 00 00         A 17308    	CALL	_disk_write
004368 C1                  A 17309    	POP	BC
004369 C1                  A 17310    	POP	BC
00436A C1                  A 17311    	POP	BC
00436B C1                  A 17312    	POP	BC
00436C C1                  A 17313    	POP	BC
00436D 01000000            A 17314    	LD	BC,0
004371 B7                  A 17315    	OR	A,A
004372 ED42                A 17316    	SBC	HL,BC
004374 28 0F               A 17317    	JR	Z,L_878
004376 DD3106              A 17318    	LD	IY,(IX+%6)
004379 FD361001            A 17319    	LD	(IY+%10),%1
00437D 21010000            A 17320    	LD	HL,1
004381 C3 93 44 00         A 17321    	JR	L_895
004385                     A 17322    L_878:
                           A 17323    ; 3921						fp->flag &= (BYTE)~
                           A 17324    .LINE 3921
                           A 17325    
004385 DD3106              A 17326    	LD	IY,(IX+%6)
004388 FD7E0F              A 17327    	LD	A,(IY+%F)
00438B CBBF                A 17328    	RES	%7,A
00438D FD770F              A 17329    	LD	(IY+%F),A
                           A 17330    ; 3922					}
004390                     A 17331    L_881:
                           A 17332    .LINE 3922
                           A 17333    
                           A 17334    ; 3923	#endif
                           A 17335    ; 3924					if (disk_read(fs->pdrv,
                           A 17336    .LINE 3924
                           A 17337    
004390 01010000            A 17338    	LD	BC,1
004394 C5                  A 17339    	PUSH	BC
004395 DD4EF9              A 17340    	LD	C,(IX+%FFFFFFF9)
004398 0600                A 17341    	LD	B,%0
00439A C5                  A 17342    	PUSH	BC
00439B DD07F6              A 17343    	LD	BC,(IX+%FFFFFFF6)
00439E C5                  A 17344    	PUSH	BC
00439F DD3106              A 17345    	LD	IY,(IX+%6)
0043A2 ED6624              A 17346    	PEA	IY+%24
0043A5 DD31FA              A 17347    	LD	IY,(IX+%FFFFFFFA)
0043A8 FD4E01              A 17348    	LD	C,(IY+%1)
0043AB 0600                A 17349    	LD	B,%0
0043AD C5                  A 17350    	PUSH	BC
0043AE DD77CE              A 17351    	LD	(IX+%FFFFFFCE),A
0043B1 CD 00 00 00         A 17352    	CALL	_disk_read
0043B5 DD7ECE              A 17353    	LD	A,(IX+%FFFFFFCE)
0043B8 C1                  A 17354    	POP	BC
0043B9 C1                  A 17355    	POP	BC
0043BA C1                  A 17356    	POP	BC
0043BB C1                  A 17357    	POP	BC
0043BC C1                  A 17358    	POP	BC
0043BD 01000000            A 17359    	LD	BC,0
0043C1 B7                  A 17360    	OR	A,A
0043C2 ED42                A 17361    	SBC	HL,BC
0043C4 28 0F               A 17362    	JR	Z,L_885
0043C6 DD3106              A 17363    	LD	IY,(IX+%6)
0043C9 FD361001            A 17364    	LD	(IY+%10),%1
0043CD 21010000            A 17365    	LD	HL,1
0043D1 C3 93 44 00         A 17366    	JR	L_895
                           A 17367    ; 3925				}
0043D5                     A 17368    L_885:
                           A 17369    .LINE 3925
                           A 17370    
                           A 17371    ; 3926	#endif
                           A 17372    ; 3927				fp->sect = sect;
                           A 17373    .LINE 3927
                           A 17374    
0043D5 DD07F6              A 17375    	LD	BC,(IX+%FFFFFFF6)
0043D8 DD56F9              A 17376    	LD	D,(IX+%FFFFFFF9)
0043DB DD3106              A 17377    	LD	IY,(IX+%6)
0043DE FD0F19              A 17378    	LD	(IY+%19),BC
0043E1 FD721C              A 17379    	LD	(IY+%1C),D
                           A 17380    ; 3928			}
0043E4                     A 17381    L_887:
                           A 17382    .LINE 3928
                           A 17383    
                           A 17384    ; 3929			rcnt = SS(fs) - (UINT)fp->fptr 
                           A 17385    .LINE 3929
                           A 17386    
0043E4 DD3106              A 17387    	LD	IY,(IX+%6)
0043E7 FD0711              A 17388    	LD	BC,(IY+%11)
0043EA FD5614              A 17389    	LD	D,(IY+%14)
0043ED DD0FD2              A 17390    	LD	(IX+%FFFFFFD2),BC
0043F0 DD72D5              A 17391    	LD	(IX+%FFFFFFD5),D
0043F3 C5E1                A 17392    	LD	HL,BC
0043F5 01FF0100            A 17393    	LD	BC,511
0043F9 CD 00 00 00         A 17394    	CALL	__iand
0043FD E5C1                A 17395    	LD	BC,HL
0043FF 21000200            A 17396    	LD	HL,512
004403 B7                  A 17397    	OR	A,A
004404 ED42                A 17398    	SBC	HL,BC
004406 DD2FFD              A 17399    	LD	(IX+%FFFFFFFD),HL
                           A 17400    ; 3930			if (rcnt > btr) rcnt = btr;		
                           A 17401    .LINE 3930
                           A 17402    
004409 E5C1                A 17403    	LD	BC,HL
00440B DD270C              A 17404    	LD	HL,(IX+%C)
00440E B7                  A 17405    	OR	A,A
00440F ED42                A 17406    	SBC	HL,BC
004411 30 06               A 17407    	JR	NC,L_889
004413 DD070C              A 17408    	LD	BC,(IX+%C)
004416 DD0FFD              A 17409    	LD	(IX+%FFFFFFFD),BC
004419                     A 17410    L_889:
                           A 17411    ; 3931	#if FF_FS_TINY
                           A 17412    ; 3932			if (move_window(fs, fp->sect) !
                           A 17413    ; 3933			memcpy(rbuff, fs->win + fp->fpt
                           A 17414    ; 3934	#else
                           A 17415    ; 3935			memcpy(rbuff, fp->buf + fp->fpt
                           A 17416    .LINE 3935
                           A 17417    
004419 DD07FD              A 17418    	LD	BC,(IX+%FFFFFFFD)
00441C C5                  A 17419    	PUSH	BC
00441D DD27D2              A 17420    	LD	HL,(IX+%FFFFFFD2)
004420 DD5ED5              A 17421    	LD	E,(IX+%FFFFFFD5)
004423 01FF0100            A 17422    	LD	BC,511
004427 AF                  A 17423    	XOR	A,A
004428 CD 00 00 00         A 17424    	CALL	__land
00442C E5C1                A 17425    	LD	BC,HL
00442E DD3106              A 17426    	LD	IY,(IX+%6)
004431 ED2324              A 17427    	LEA	HL,IY+%24
004434 09                  A 17428    	ADD	HL,BC
004435 E5                  A 17429    	PUSH	HL
004436 DD07F0              A 17430    	LD	BC,(IX+%FFFFFFF0)
004439 C5                  A 17431    	PUSH	BC
00443A DD77CE              A 17432    	LD	(IX+%FFFFFFCE),A
00443D CD 00 00 00         A 17433    	CALL	_memcpy
004441 DD7ECE              A 17434    	LD	A,(IX+%FFFFFFCE)
004444 C1                  A 17435    	POP	BC
004445 C1                  A 17436    	POP	BC
004446 C1                  A 17437    	POP	BC
                           A 17438    ; 3936	#endif
                           A 17439    ; 3937		}
004447                     A 17440    L_891:
                           A 17441    .LINE 3937
                           A 17442    
004447 DD07FD              A 17443    	LD	BC,(IX+%FFFFFFFD)
00444A DD270C              A 17444    	LD	HL,(IX+%C)
00444D B7                  A 17445    	OR	A,A
00444E ED42                A 17446    	SBC	HL,BC
004450 DD2F0C              A 17447    	LD	(IX+%C),HL
004453 DD270F              A 17448    	LD	HL,(IX+%F)
004456 DD310F              A 17449    	LD	IY,(IX+%F)
004459 DD07FD              A 17450    	LD	BC,(IX+%FFFFFFFD)
00445C ED27                A 17451    	LD	HL,(HL)
00445E 09                  A 17452    	ADD	HL,BC
00445F FD2F00              A 17453    	LD	(IY),HL
004462 DD07FD              A 17454    	LD	BC,(IX+%FFFFFFFD)
004465 DD27F0              A 17455    	LD	HL,(IX+%FFFFFFF0)
004468 09                  A 17456    	ADD	HL,BC
004469 DD2FF0              A 17457    	LD	(IX+%FFFFFFF0),HL
00446C DD07FD              A 17458    	LD	BC,(IX+%FFFFFFFD)
00446F AF                  A 17459    	XOR	A,A
004470 DD3106              A 17460    	LD	IY,(IX+%6)
004473 FD2711              A 17461    	LD	HL,(IY+%11)
004476 FD5E14              A 17462    	LD	E,(IY+%14)
004479 CD 00 00 00         A 17463    	CALL	__ladd
00447D FD2F11              A 17464    	LD	(IY+%11),HL
004480 FD7314              A 17465    	LD	(IY+%14),E
004483                     A 17466    L_892:
004483 DD070C              A 17467    	LD	BC,(IX+%C)
004486 B7                  A 17468    	OR	A,A
004487 ED62                A 17469    	SBC	HL,HL
004489 B7                  A 17470    	OR	A,A
00448A ED42                A 17471    	SBC	HL,BC
00448C DA F2 40 00         A 17472    	JR	C,L_890
                           A 17473    ; 3938	
                           A 17474    ; 3939		LEAVE_FF(fs, FR_OK);
                           A 17475    .LINE 3939
                           A 17476    
004490 B7                  A 17477    	OR	A,A
004491 ED62                A 17478    	SBC	HL,HL
                           A 17479    ; 3940	}
004493                     A 17480    L_895:
                           A 17481    .LINE 3940
                           A 17482    
004493 DDF9                A 17483    	LD	SP,IX
004495 DDE1                A 17484    	POP	IX
004497 C9                  A 17485    	RET	
                           A 17486    
                           A 17487    
                           A 17488    ;**************************** _f_read *********
                           A 17489    ;Name                         Addr/Register   S
                           A 17490    ;_disk_write                         IMPORT  --
                           A 17491    ;_memcpy                             IMPORT  --
                           A 17492    ;_disk_read                          IMPORT  --
                           A 17493    ;G_66                                 IX-46    
                           A 17494    ;G_65                                 IX-42    
                           A 17495    ;G_64                                 IX-38    
                           A 17496    ;remain                               IX-34    
                           A 17497    ;G_62                                 IX-30    
                           A 17498    ;clst                                 IX-26    
                           A 17499    ;res                                  IX-22    
                           A 17500    ;csect                                IX-19    
                           A 17501    ;rbuff                                IX-16    
                           A 17502    ;cc                                   IX-13    
                           A 17503    ;sect                                 IX-10    
                           A 17504    ;fs                                    IX-6    
                           A 17505    ;rcnt                                  IX-3    
                           A 17506    ;br                                   IX+15    
                           A 17507    ;btr                                  IX+12    
                           A 17508    ;buff                                  IX+9    
                           A 17509    ;fp                                    IX+6    
                           A 17510    
                           A 17511    
                           A 17512    ; Stack Frame Size: 68 (bytes)
                           A 17513    ;       Spill Code: -3 (instruction)
                           A 17514    
                           A 17515    
                           A 17516    .ENDFUNC "f_read",3940,"_f_read"
                           A 17517    ; 3941	
                           A 17518    ; 3942	
                           A 17519    ; 3943	
                           A 17520    ; 3944	
                           A 17521    ; 3945	#if !FF_FS_READONLY
                           A 17522    ; 3946	/*-------------------------------------
                           A 17523    ; 3947	/* Write File                          
                           A 17524    ; 3948	/*-------------------------------------
                           A 17525    ; 3949	
                           A 17526    ; 3950	FRESULT f_write (
                           A 17527    ; 3951		FIL* fp,			/* Open file to
                           A 17528    ; 3952		const void* buff,	/* Data to be w
                           A 17529    ; 3953		UINT btw,			/* Number of by
                           A 17530    ; 3954		UINT* bw			/* Number of by
                           A 17531    ; 3955	)
                           A 17532    ; 3956	{
004498                     A 17533    _f_write:
                           A 17534    .DEFINE "_f_write"
                           A 17535    
                           A 17536    .VALUE _f_write
                           A 17537    
                           A 17538    .CLASS 2
                           A 17539    
                           A 17540    .TYPE 68
                           A 17541    
                           A 17542    .ENDEF
                           A 17543    
                           A 17544    .BEGFUNC "f_write",3956,"_f_write"
                           A 17545    
                           A 17546    .LINE 3956
                           A 17547    
                           A 17548    .DEFINE "fp"
                           A 17549    
                           A 17550    .CLASS 65
                           A 17551    
                           A 17552    .VALUE 6
                           A 17553    
                           A 17554    .TAG "NONAME2"
                           A 17555    
                           A 17556    .TYPE 40
                           A 17557    
                           A 17558    .ENDEF
                           A 17559    
                           A 17560    .DEFINE "buff"
                           A 17561    
                           A 17562    .CLASS 65
                           A 17563    
                           A 17564    .VALUE 9
                           A 17565    
                           A 17566    .TYPE 193
                           A 17567    
                           A 17568    .ENDEF
                           A 17569    
                           A 17570    .DEFINE "btw"
                           A 17571    
                           A 17572    .CLASS 65
                           A 17573    
                           A 17574    .VALUE 12
                           A 17575    
                           A 17576    .TYPE 14
                           A 17577    
                           A 17578    .ENDEF
                           A 17579    
                           A 17580    .DEFINE "bw"
                           A 17581    
                           A 17582    .CLASS 65
                           A 17583    
                           A 17584    .VALUE 15
                           A 17585    
                           A 17586    .TYPE 46
                           A 17587    
                           A 17588    .ENDEF
                           A 17589    
                           A 17590    .DEFINE "wcnt"
                           A 17591    
                           A 17592    .CLASS 65
                           A 17593    
                           A 17594    .VALUE -3
                           A 17595    
                           A 17596    .TYPE 14
                           A 17597    
                           A 17598    .ENDEF
                           A 17599    
                           A 17600    .DEFINE "fs"
                           A 17601    
                           A 17602    .CLASS 65
                           A 17603    
                           A 17604    .VALUE -6
                           A 17605    
                           A 17606    .TAG "NONAME0"
                           A 17607    
                           A 17608    .TYPE 40
                           A 17609    
                           A 17610    .ENDEF
                           A 17611    
                           A 17612    .DEFINE "clst"
                           A 17613    
                           A 17614    .CLASS 65
                           A 17615    
                           A 17616    .VALUE -10
                           A 17617    
                           A 17618    .TYPE 15
                           A 17619    
                           A 17620    .ENDEF
                           A 17621    
                           A 17622    .DEFINE "sect"
                           A 17623    
                           A 17624    .CLASS 65
                           A 17625    
                           A 17626    .VALUE -14
                           A 17627    
                           A 17628    .TYPE 15
                           A 17629    
                           A 17630    .ENDEF
                           A 17631    
                           A 17632    .DEFINE "cc"
                           A 17633    
                           A 17634    .CLASS 65
                           A 17635    
                           A 17636    .VALUE -17
                           A 17637    
                           A 17638    .TYPE 14
                           A 17639    
                           A 17640    .ENDEF
                           A 17641    
                           A 17642    .DEFINE "wbuff"
                           A 17643    
                           A 17644    .CLASS 65
                           A 17645    
                           A 17646    .VALUE -20
                           A 17647    
                           A 17648    .TYPE 204
                           A 17649    
                           A 17650    .ENDEF
                           A 17651    
                           A 17652    .DEFINE "csect"
                           A 17653    
                           A 17654    .CLASS 65
                           A 17655    
                           A 17656    .VALUE -23
                           A 17657    
                           A 17658    .TYPE 14
                           A 17659    
                           A 17660    .ENDEF
                           A 17661    
                           A 17662    .DEFINE "res"
                           A 17663    
                           A 17664    .CLASS 65
                           A 17665    
                           A 17666    .VALUE -26
                           A 17667    
                           A 17668    .TYPE 4
                           A 17669    
                           A 17670    .ENDEF
                           A 17671    
004498 DDE5                A 17672    	PUSH	IX
00449A DD210000 00         A 17673    	LD	IX,0
00449F DD39                A 17674    	ADD	IX,SP
0044A1 ED22C1              A 17675    	LEA	HL,IX+%FFFFFFC1
0044A4 F9                  A 17676    	LD	SP,HL
                           A 17677    ; 3957		FRESULT res;
                           A 17678    ; 3958		FATFS *fs;
                           A 17679    ; 3959		DWORD clst;
                           A 17680    ; 3960		LBA_t sect;
                           A 17681    ; 3961		UINT wcnt, cc, csect;
                           A 17682    ; 3962		const BYTE *wbuff = (const BYTE*)bu
                           A 17683    .LINE 3962
                           A 17684    
0044A5 DD0709              A 17685    	LD	BC,(IX+%9)
0044A8 DD0FEC              A 17686    	LD	(IX+%FFFFFFEC),BC
                           A 17687    ; 3963	
                           A 17688    ; 3964	
                           A 17689    ; 3965		*bw = 0;	/* Clear write byte cou
                           A 17690    .LINE 3965
                           A 17691    
0044AB DD270F              A 17692    	LD	HL,(IX+%F)
0044AE 01000000            A 17693    	LD	BC,0
0044B2 ED0F                A 17694    	LD	(HL),BC
                           A 17695    ; 3966		res = validate(&fp->obj, &fs);		
                           A 17696    .LINE 3966
                           A 17697    
0044B4 ED65FA              A 17698    	PEA	IX+%FFFFFFFA
0044B7 DD3106              A 17699    	LD	IY,(IX+%6)
0044BA ED6600              A 17700    	PEA	IY+%0
0044BD CD 19 3A 00         A 17701    	CALL	_validate
0044C1 C1                  A 17702    	POP	BC
0044C2 C1                  A 17703    	POP	BC
0044C3 DD2FE6              A 17704    	LD	(IX+%FFFFFFE6),HL
                           A 17705    ; 3967		if (res != FR_OK || (res = (FRESULT
                           A 17706    .LINE 3967
                           A 17707    
0044C6 01000000            A 17708    	LD	BC,0
0044CA DD27E6              A 17709    	LD	HL,(IX+%FFFFFFE6)
0044CD B7                  A 17710    	OR	A,A
0044CE ED42                A 17711    	SBC	HL,BC
0044D0 20 15               A 17712    	JR	NZ,L_897
0044D2 DD3106              A 17713    	LD	IY,(IX+%6)
0044D5 FD7E10              A 17714    	LD	A,(IY+%10)
0044D8 B7ED62              A 17715    	UEXT	HL
0044DB 6F                  A 17716    	LD	L,A
0044DC DD2FE6              A 17717    	LD	(IX+%FFFFFFE6),HL
0044DF DD27E6              A 17718    	LD	HL,(IX+%FFFFFFE6)
0044E2 B7                  A 17719    	OR	A,A
0044E3 ED42                A 17720    	SBC	HL,BC
0044E5 28 07               A 17721    	JR	Z,L_899
0044E7                     A 17722    L_897:
0044E7 DD27E6              A 17723    	LD	HL,(IX+%FFFFFFE6)
0044EA C3 AF 49 00         A 17724    	JR	L_946
0044EE                     A 17725    L_899:
                           A 17726    ; 3968		if (!(fp->flag & FA_WRITE)) LEAVE_F
                           A 17727    .LINE 3968
                           A 17728    
0044EE DD3106              A 17729    	LD	IY,(IX+%6)
0044F1 FD7E0F              A 17730    	LD	A,(IY+%F)
0044F4 E602                A 17731    	AND	A,%2
0044F6 20 08               A 17732    	JR	NZ,L_901
0044F8 21070000            A 17733    	LD	HL,7
0044FC C3 AF 49 00         A 17734    	JR	L_946
004500                     A 17735    L_901:
                           A 17736    ; 3969	
                           A 17737    ; 3970		/* Check fptr wrap-around (file siz
                           A 17738    ; 3971		if ((!FF_FS_EXFAT || fs->fs_type !=
                           A 17739    .LINE 3971
                           A 17740    
004500 DD3106              A 17741    	LD	IY,(IX+%6)
004503 FD0711              A 17742    	LD	BC,(IY+%11)
004506 FD7E14              A 17743    	LD	A,(IY+%14)
004509 DD0FDB              A 17744    	LD	(IX+%FFFFFFDB),BC
00450C DD77DE              A 17745    	LD	(IX+%FFFFFFDE),A
00450F AF                  A 17746    	XOR	A,A
004510 5F                  A 17747    	LD	E,A
004511 DD270C              A 17748    	LD	HL,(IX+%C)
004514 DD7EDE              A 17749    	LD	A,(IX+%FFFFFFDE)
004517 CD 00 00 00         A 17750    	CALL	__ladd
00451B DD07DB              A 17751    	LD	BC,(IX+%FFFFFFDB)
00451E DD7EDE              A 17752    	LD	A,(IX+%FFFFFFDE)
004521 CD 00 00 00         A 17753    	CALL	__lcmpu
004525 D2 94 49 00         A 17754    	JR	NC,L_943
                           A 17755    ; 3972			btw = (UINT)(0xFFFFFFFF - (DWOR
                           A 17756    .LINE 3972
                           A 17757    
004529 DD07DB              A 17758    	LD	BC,(IX+%FFFFFFDB)
00452C 21FFFFFF            A 17759    	LD	HL,16777215
004530 B7                  A 17760    	OR	A,A
004531 ED42                A 17761    	SBC	HL,BC
004533 DD2F0C              A 17762    	LD	(IX+%C),HL
                           A 17763    ; 3973		}
                           A 17764    .LINE 3973
                           A 17765    
                           A 17766    ; 3974	
                           A 17767    ; 3975		for ( ; btw > 0; btw -= wcnt, *bw +
                           A 17768    .LINE 3975
                           A 17769    
004536 C3 94 49 00         A 17770    	JR	L_943
00453A                     A 17771    L_941:
                           A 17772    ; 3976			if (fp->fptr % SS(fs) == 0) {	
                           A 17773    .LINE 3976
                           A 17774    
00453A DD3106              A 17775    	LD	IY,(IX+%6)
00453D FD0711              A 17776    	LD	BC,(IY+%11)
004540 FD7E14              A 17777    	LD	A,(IY+%14)
004543 DD0FDF              A 17778    	LD	(IX+%FFFFFFDF),BC
004546 DD77E2              A 17779    	LD	(IX+%FFFFFFE2),A
004549 C5E1                A 17780    	LD	HL,BC
00454B DD5EE2              A 17781    	LD	E,(IX+%FFFFFFE2)
00454E 01FF0100            A 17782    	LD	BC,511
004552 AF                  A 17783    	XOR	A,A
004553 CD 00 00 00         A 17784    	CALL	__land
004557 01000000            A 17785    	LD	BC,0
00455B AF                  A 17786    	XOR	A,A
00455C CD 00 00 00         A 17787    	CALL	__lcmpu
004560 C2 97 48 00         A 17788    	JR	NZ,L_938
                           A 17789    ; 3977				csect = (UINT)(fp->fptr / S
                           A 17790    .LINE 3977
                           A 17791    
004564 DD31FA              A 17792    	LD	IY,(IX+%FFFFFFFA)
004567 FD0709              A 17793    	LD	BC,(IY+%9)
00456A CD 00 00 00         A 17794    	CALL	__stoiu
00456E E5D1                A 17795    	LD	DE,HL
004570 1B                  A 17796    	DEC	DE
004571 DD07DF              A 17797    	LD	BC,(IX+%FFFFFFDF)
004574 DD7EE2              A 17798    	LD	A,(IX+%FFFFFFE2)
004577 2E09                A 17799    	LD	L,%9
004579 CD 00 00 00         A 17800    	CALL	__lshru
00457D D5E1                A 17801    	LD	HL,DE
00457F CD 00 00 00         A 17802    	CALL	__iand
004583 DD2FE9              A 17803    	LD	(IX+%FFFFFFE9),HL
                           A 17804    ; 3978				if (csect == 0) {			
                           A 17805    .LINE 3978
                           A 17806    
004586 01000000            A 17807    	LD	BC,0
00458A DD27E9              A 17808    	LD	HL,(IX+%FFFFFFE9)
00458D B7                  A 17809    	OR	A,A
00458E ED42                A 17810    	SBC	HL,BC
004590 C2 88 46 00         A 17811    	JR	NZ,L_921
                           A 17812    ; 3979					if (fp->fptr == 0) {	
                           A 17813    .LINE 3979
                           A 17814    
004594 DD27DF              A 17815    	LD	HL,(IX+%FFFFFFDF)
004597 DD5EE2              A 17816    	LD	E,(IX+%FFFFFFE2)
00459A AF                  A 17817    	XOR	A,A
00459B CD 00 00 00         A 17818    	CALL	__lcmpu
00459F 20 3D               A 17819    	JR	NZ,L_908
                           A 17820    ; 3980						clst = fp->obj.sclu
                           A 17821    .LINE 3980
                           A 17822    
0045A1 DD3106              A 17823    	LD	IY,(IX+%6)
0045A4 ED0300              A 17824    	LEA	BC,IY+%0
0045A7 DD0FD8              A 17825    	LD	(IX+%FFFFFFD8),BC
0045AA DD31D8              A 17826    	LD	IY,(IX+%FFFFFFD8)
0045AD FD0707              A 17827    	LD	BC,(IY+%7)
0045B0 FD7E0A              A 17828    	LD	A,(IY+%A)
0045B3 DD0FF6              A 17829    	LD	(IX+%FFFFFFF6),BC
0045B6 DD77F9              A 17830    	LD	(IX+%FFFFFFF9),A
                           A 17831    ; 3981						if (clst == 0) {	
                           A 17832    .LINE 3981
                           A 17833    
0045B9 C5E1                A 17834    	LD	HL,BC
0045BB DD5EF9              A 17835    	LD	E,(IX+%FFFFFFF9)
0045BE 01000000            A 17836    	LD	BC,0
0045C2 AF                  A 17837    	XOR	A,A
0045C3 CD 00 00 00         A 17838    	CALL	__lcmpu
0045C7 20 33               A 17839    	JR	NZ,L_910
                           A 17840    ; 3982							clst = create_c
                           A 17841    .LINE 3982
                           A 17842    
0045C9 C5                  A 17843    	PUSH	BC
0045CA C5                  A 17844    	PUSH	BC
0045CB DD07D8              A 17845    	LD	BC,(IX+%FFFFFFD8)
0045CE C5                  A 17846    	PUSH	BC
0045CF CD 8E 0D 00         A 17847    	CALL	_create_chain
0045D3 C1                  A 17848    	POP	BC
0045D4 C1                  A 17849    	POP	BC
0045D5 C1                  A 17850    	POP	BC
0045D6 DD2FF6              A 17851    	LD	(IX+%FFFFFFF6),HL
0045D9 DD73F9              A 17852    	LD	(IX+%FFFFFFF9),E
                           A 17853    ; 3983						}
                           A 17854    ; 3984					} else {				
                           A 17855    .LINE 3984
                           A 17856    
0045DC 18 1E               A 17857    	JR	L_910
0045DE                     A 17858    L_908:
                           A 17859    ; 3985	#if FF_USE_FASTSEEK
                           A 17860    ; 3986						if (fp->cltbl) {
                           A 17861    ; 3987							clst = clmt_clu
                           A 17862    ; 3988						} else
                           A 17863    ; 3989	#endif
                           A 17864    ; 3990						{
                           A 17865    ; 3991							clst = create_c
                           A 17866    .LINE 3991
                           A 17867    
0045DE DD3106              A 17868    	LD	IY,(IX+%6)
0045E1 FD0715              A 17869    	LD	BC,(IY+%15)
0045E4 FD7E18              A 17870    	LD	A,(IY+%18)
0045E7 2600                A 17871    	LD	H,%0
0045E9 6F                  A 17872    	LD	L,A
0045EA E5                  A 17873    	PUSH	HL
0045EB C5                  A 17874    	PUSH	BC
0045EC ED6600              A 17875    	PEA	IY+%0
0045EF CD 8E 0D 00         A 17876    	CALL	_create_chain
0045F3 C1                  A 17877    	POP	BC
0045F4 C1                  A 17878    	POP	BC
0045F5 C1                  A 17879    	POP	BC
0045F6 DD2FF6              A 17880    	LD	(IX+%FFFFFFF6),HL
0045F9 DD73F9              A 17881    	LD	(IX+%FFFFFFF9),E
                           A 17882    ; 3992						}
                           A 17883    ; 3993					}
0045FC                     A 17884    L_910:
                           A 17885    .LINE 3993
                           A 17886    
                           A 17887    ; 3994					if (clst == 0) break;	
                           A 17888    .LINE 3994
                           A 17889    
0045FC DD27F6              A 17890    	LD	HL,(IX+%FFFFFFF6)
0045FF DD5EF9              A 17891    	LD	E,(IX+%FFFFFFF9)
004602 01000000            A 17892    	LD	BC,0
004606 AF                  A 17893    	XOR	A,A
004607 CD 00 00 00         A 17894    	CALL	__lcmpu
00460B CA A1 49 00         A 17895    	JR	Z,L_945
                           A 17896    ; 3995					if (clst == 1) ABORT(fs
                           A 17897    .LINE 3995
                           A 17898    
00460F DD27F6              A 17899    	LD	HL,(IX+%FFFFFFF6)
004612 DD5EF9              A 17900    	LD	E,(IX+%FFFFFFF9)
004615 01010000            A 17901    	LD	BC,1
004619 AF                  A 17902    	XOR	A,A
00461A CD 00 00 00         A 17903    	CALL	__lcmpu
00461E 20 0F               A 17904    	JR	NZ,L_913
004620 DD3106              A 17905    	LD	IY,(IX+%6)
004623 FD361002            A 17906    	LD	(IY+%10),%2
004627 21020000            A 17907    	LD	HL,2
00462B C3 AF 49 00         A 17908    	JR	L_946
00462F                     A 17909    L_913:
                           A 17910    ; 3996					if (clst == 0xFFFFFFFF)
                           A 17911    .LINE 3996
                           A 17912    
00462F DD27F6              A 17913    	LD	HL,(IX+%FFFFFFF6)
004632 DD5EF9              A 17914    	LD	E,(IX+%FFFFFFF9)
004635 01FFFFFF            A 17915    	LD	BC,16777215
004639 3EFF                A 17916    	LD	A,%FF
00463B CD 00 00 00         A 17917    	CALL	__lcmpu
00463F 20 0F               A 17918    	JR	NZ,L_915
004641 DD3106              A 17919    	LD	IY,(IX+%6)
004644 FD361001            A 17920    	LD	(IY+%10),%1
004648 21010000            A 17921    	LD	HL,1
00464C C3 AF 49 00         A 17922    	JR	L_946
004650                     A 17923    L_915:
                           A 17924    ; 3997					fp->clust = clst;		
                           A 17925    .LINE 3997
                           A 17926    
004650 DD07F6              A 17927    	LD	BC,(IX+%FFFFFFF6)
004653 DD7EF9              A 17928    	LD	A,(IX+%FFFFFFF9)
004656 DD3106              A 17929    	LD	IY,(IX+%6)
004659 FD0F15              A 17930    	LD	(IY+%15),BC
00465C FD7718              A 17931    	LD	(IY+%18),A
                           A 17932    ; 3998					if (fp->obj.sclust == 0
                           A 17933    .LINE 3998
                           A 17934    
00465F ED0300              A 17935    	LEA	BC,IY+%0
004662 DD0FD5              A 17936    	LD	(IX+%FFFFFFD5),BC
004665 DD31D5              A 17937    	LD	IY,(IX+%FFFFFFD5)
004668 FD2707              A 17938    	LD	HL,(IY+%7)
00466B FD5E0A              A 17939    	LD	E,(IY+%A)
00466E 01000000            A 17940    	LD	BC,0
004672 AF                  A 17941    	XOR	A,A
004673 CD 00 00 00         A 17942    	CALL	__lcmpu
004677 20 0F               A 17943    	JR	NZ,L_921
004679 DD07F6              A 17944    	LD	BC,(IX+%FFFFFFF6)
00467C DD7EF9              A 17945    	LD	A,(IX+%FFFFFFF9)
00467F DD31D5              A 17946    	LD	IY,(IX+%FFFFFFD5)
004682 FD0F07              A 17947    	LD	(IY+%7),BC
004685 FD770A              A 17948    	LD	(IY+%A),A
                           A 17949    ; 3999				}
004688                     A 17950    L_921:
                           A 17951    .LINE 3999
                           A 17952    
                           A 17953    ; 4000	#if FF_FS_TINY
                           A 17954    ; 4001				if (fs->winsect == fp->sect
                           A 17955    ; 4002	#else
                           A 17956    ; 4003				if (fp->flag & FA_DIRTY) {	
                           A 17957    .LINE 4003
                           A 17958    
004688 DD3106              A 17959    	LD	IY,(IX+%6)
00468B FD7E0F              A 17960    	LD	A,(IY+%F)
00468E E680                A 17961    	AND	A,%80
004690 28 4B               A 17962    	JR	Z,L_922
                           A 17963    ; 4004					if (disk_write(fs->pdrv
                           A 17964    .LINE 4004
                           A 17965    
004692 01010000            A 17966    	LD	BC,1
004696 C5                  A 17967    	PUSH	BC
004697 DD3106              A 17968    	LD	IY,(IX+%6)
00469A FD0719              A 17969    	LD	BC,(IY+%19)
00469D FD7E1C              A 17970    	LD	A,(IY+%1C)
0046A0 2600                A 17971    	LD	H,%0
0046A2 6F                  A 17972    	LD	L,A
0046A3 E5                  A 17973    	PUSH	HL
0046A4 C5                  A 17974    	PUSH	BC
0046A5 ED6624              A 17975    	PEA	IY+%24
0046A8 DD31FA              A 17976    	LD	IY,(IX+%FFFFFFFA)
0046AB FD4E01              A 17977    	LD	C,(IY+%1)
0046AE 0600                A 17978    	LD	B,%0
0046B0 C5                  A 17979    	PUSH	BC
0046B1 CD 00 00 00         A 17980    	CALL	_disk_write
0046B5 C1                  A 17981    	POP	BC
0046B6 C1                  A 17982    	POP	BC
0046B7 C1                  A 17983    	POP	BC
0046B8 C1                  A 17984    	POP	BC
0046B9 C1                  A 17985    	POP	BC
0046BA 01000000            A 17986    	LD	BC,0
0046BE B7                  A 17987    	OR	A,A
0046BF ED42                A 17988    	SBC	HL,BC
0046C1 28 0F               A 17989    	JR	Z,L_919
0046C3 DD3106              A 17990    	LD	IY,(IX+%6)
0046C6 FD361001            A 17991    	LD	(IY+%10),%1
0046CA 21010000            A 17992    	LD	HL,1
0046CE C3 AF 49 00         A 17993    	JR	L_946
0046D2                     A 17994    L_919:
                           A 17995    ; 4005					fp->flag &= (BYTE)~FA_D
                           A 17996    .LINE 4005
                           A 17997    
0046D2 DD3106              A 17998    	LD	IY,(IX+%6)
0046D5 FD7E0F              A 17999    	LD	A,(IY+%F)
0046D8 CBBF                A 18000    	RES	%7,A
0046DA FD770F              A 18001    	LD	(IY+%F),A
                           A 18002    ; 4006				}
0046DD                     A 18003    L_922:
                           A 18004    .LINE 4006
                           A 18005    
                           A 18006    ; 4007	#endif
                           A 18007    ; 4008				sect = clst2sect(fs, fp->cl
                           A 18008    .LINE 4008
                           A 18009    
0046DD DD3106              A 18010    	LD	IY,(IX+%6)
0046E0 FD0715              A 18011    	LD	BC,(IY+%15)
0046E3 FD7E18              A 18012    	LD	A,(IY+%18)
0046E6 2600                A 18013    	LD	H,%0
0046E8 6F                  A 18014    	LD	L,A
0046E9 E5                  A 18015    	PUSH	HL
0046EA C5                  A 18016    	PUSH	BC
0046EB DD07FA              A 18017    	LD	BC,(IX+%FFFFFFFA)
0046EE C5                  A 18018    	PUSH	BC
0046EF CD F9 05 00         A 18019    	CALL	_clst2sect
0046F3 C1                  A 18020    	POP	BC
0046F4 C1                  A 18021    	POP	BC
0046F5 C1                  A 18022    	POP	BC
0046F6 DD2FF2              A 18023    	LD	(IX+%FFFFFFF2),HL
0046F9 DD73F5              A 18024    	LD	(IX+%FFFFFFF5),E
                           A 18025    ; 4009				if (sect == 0) ABORT(fs, FR
                           A 18026    .LINE 4009
                           A 18027    
0046FC DD27F2              A 18028    	LD	HL,(IX+%FFFFFFF2)
0046FF DD5EF5              A 18029    	LD	E,(IX+%FFFFFFF5)
004702 01000000            A 18030    	LD	BC,0
004706 AF                  A 18031    	XOR	A,A
004707 CD 00 00 00         A 18032    	CALL	__lcmpu
00470B 20 0F               A 18033    	JR	NZ,L_924
00470D DD3106              A 18034    	LD	IY,(IX+%6)
004710 FD361002            A 18035    	LD	(IY+%10),%2
004714 21020000            A 18036    	LD	HL,2
004718 C3 AF 49 00         A 18037    	JR	L_946
00471C                     A 18038    L_924:
                           A 18039    ; 4010				sect += csect;
                           A 18040    .LINE 4010
                           A 18041    
00471C DD07E9              A 18042    	LD	BC,(IX+%FFFFFFE9)
00471F AF                  A 18043    	XOR	A,A
004720 DD27F2              A 18044    	LD	HL,(IX+%FFFFFFF2)
004723 DD5EF5              A 18045    	LD	E,(IX+%FFFFFFF5)
004726 CD 00 00 00         A 18046    	CALL	__ladd
00472A DD2FF2              A 18047    	LD	(IX+%FFFFFFF2),HL
00472D DD73F5              A 18048    	LD	(IX+%FFFFFFF5),E
                           A 18049    ; 4011				cc = btw / SS(fs);			
                           A 18050    .LINE 4011
                           A 18051    
004730 DD270C              A 18052    	LD	HL,(IX+%C)
004733 3E09                A 18053    	LD	A,%9
004735 CD 00 00 00         A 18054    	CALL	__ishru_b
004739 DD2FEF              A 18055    	LD	(IX+%FFFFFFEF),HL
                           A 18056    ; 4012				if (cc > 0) {				
                           A 18057    .LINE 4012
                           A 18058    
00473C E5C1                A 18059    	LD	BC,HL
00473E B7                  A 18060    	OR	A,A
00473F ED62                A 18061    	SBC	HL,HL
004741 B7                  A 18062    	OR	A,A
004742 ED42                A 18063    	SBC	HL,BC
004744 D2 19 48 00         A 18064    	JR	NC,L_935
                           A 18065    ; 4013					if (csect + cc > fs->cs
                           A 18066    .LINE 4013
                           A 18067    
004748 DD31FA              A 18068    	LD	IY,(IX+%FFFFFFFA)
00474B FD0709              A 18069    	LD	BC,(IY+%9)
00474E CD 00 00 00         A 18070    	CALL	__stoiu
004752 E5C1                A 18071    	LD	BC,HL
004754 DD17EF              A 18072    	LD	DE,(IX+%FFFFFFEF)
004757 DD27E9              A 18073    	LD	HL,(IX+%FFFFFFE9)
00475A 19                  A 18074    	ADD	HL,DE
00475B E5D1                A 18075    	LD	DE,HL
00475D C5E1                A 18076    	LD	HL,BC
00475F B7                  A 18077    	OR	A,A
004760 ED52                A 18078    	SBC	HL,DE
004762 30 13               A 18079    	JR	NC,L_927
                           A 18080    ; 4014						cc = fs->csize - cs
                           A 18081    .LINE 4014
                           A 18082    
004764 DD31FA              A 18083    	LD	IY,(IX+%FFFFFFFA)
004767 FD0709              A 18084    	LD	BC,(IY+%9)
00476A CD 00 00 00         A 18085    	CALL	__stoiu
00476E DD07E9              A 18086    	LD	BC,(IX+%FFFFFFE9)
004771 B7                  A 18087    	OR	A,A
004772 ED42                A 18088    	SBC	HL,BC
004774 DD2FEF              A 18089    	LD	(IX+%FFFFFFEF),HL
                           A 18090    ; 4015					}
004777                     A 18091    L_927:
                           A 18092    .LINE 4015
                           A 18093    
                           A 18094    ; 4016					if (disk_write(fs->pdrv
                           A 18095    .LINE 4016
                           A 18096    
004777 DD07EF              A 18097    	LD	BC,(IX+%FFFFFFEF)
00477A C5                  A 18098    	PUSH	BC
00477B DD4EF5              A 18099    	LD	C,(IX+%FFFFFFF5)
00477E 0600                A 18100    	LD	B,%0
004780 C5                  A 18101    	PUSH	BC
004781 DD07F2              A 18102    	LD	BC,(IX+%FFFFFFF2)
004784 C5                  A 18103    	PUSH	BC
004785 DD07EC              A 18104    	LD	BC,(IX+%FFFFFFEC)
004788 C5                  A 18105    	PUSH	BC
004789 DD31FA              A 18106    	LD	IY,(IX+%FFFFFFFA)
00478C FD4E01              A 18107    	LD	C,(IY+%1)
00478F 0600                A 18108    	LD	B,%0
004791 C5                  A 18109    	PUSH	BC
004792 CD 00 00 00         A 18110    	CALL	_disk_write
004796 C1                  A 18111    	POP	BC
004797 C1                  A 18112    	POP	BC
004798 C1                  A 18113    	POP	BC
004799 C1                  A 18114    	POP	BC
00479A C1                  A 18115    	POP	BC
00479B 01000000            A 18116    	LD	BC,0
00479F B7                  A 18117    	OR	A,A
0047A0 ED42                A 18118    	SBC	HL,BC
0047A2 28 0F               A 18119    	JR	Z,L_928
0047A4 DD3106              A 18120    	LD	IY,(IX+%6)
0047A7 FD361001            A 18121    	LD	(IY+%10),%1
0047AB 21010000            A 18122    	LD	HL,1
0047AF C3 AF 49 00         A 18123    	JR	L_946
0047B3                     A 18124    L_928:
                           A 18125    ; 4017	#if FF_FS_MINIMIZE <= 2
                           A 18126    ; 4018	#if FF_FS_TINY
                           A 18127    ; 4019					if (fs->winsect - sect 
                           A 18128    ; 4020						memcpy(fs->win, wbu
                           A 18129    ; 4021						fs->wflag = 0;
                           A 18130    ; 4022					}
                           A 18131    ; 4023	#else
                           A 18132    ; 4024					if (fp->sect - sect < c
                           A 18133    .LINE 4024
                           A 18134    
0047B3 DD3106              A 18135    	LD	IY,(IX+%6)
0047B6 FD2719              A 18136    	LD	HL,(IY+%19)
0047B9 FD5E1C              A 18137    	LD	E,(IY+%1C)
0047BC DD07F2              A 18138    	LD	BC,(IX+%FFFFFFF2)
0047BF DD7EF5              A 18139    	LD	A,(IX+%FFFFFFF5)
0047C2 CD 00 00 00         A 18140    	CALL	__lsub
0047C6 DD2FC6              A 18141    	LD	(IX+%FFFFFFC6),HL
0047C9 DD73C9              A 18142    	LD	(IX+%FFFFFFC9),E
0047CC DD07EF              A 18143    	LD	BC,(IX+%FFFFFFEF)
0047CF AF                  A 18144    	XOR	A,A
0047D0 DD27C6              A 18145    	LD	HL,(IX+%FFFFFFC6)
0047D3 DD5EC9              A 18146    	LD	E,(IX+%FFFFFFC9)
0047D6 CD 00 00 00         A 18147    	CALL	__lcmpu
0047DA 30 2D               A 18148    	JR	NC,L_930
                           A 18149    ; 4025						memcpy(fp->buf, wbu
                           A 18150    .LINE 4025
                           A 18151    
0047DC 01000200            A 18152    	LD	BC,512
0047E0 C5                  A 18153    	PUSH	BC
0047E1 DD27C6              A 18154    	LD	HL,(IX+%FFFFFFC6)
0047E4 DD5EC9              A 18155    	LD	E,(IX+%FFFFFFC9)
0047E7 AF                  A 18156    	XOR	A,A
0047E8 CD 00 00 00         A 18157    	CALL	__lmulu
0047EC DD07EC              A 18158    	LD	BC,(IX+%FFFFFFEC)
0047EF 09                  A 18159    	ADD	HL,BC
0047F0 E5                  A 18160    	PUSH	HL
0047F1 DD3106              A 18161    	LD	IY,(IX+%6)
0047F4 ED6624              A 18162    	PEA	IY+%24
0047F7 CD 00 00 00         A 18163    	CALL	_memcpy
0047FB C1                  A 18164    	POP	BC
0047FC C1                  A 18165    	POP	BC
0047FD C1                  A 18166    	POP	BC
                           A 18167    ; 4026						fp->flag &= (BYTE)~
                           A 18168    .LINE 4026
                           A 18169    
0047FE DD3106              A 18170    	LD	IY,(IX+%6)
004801 FD7E0F              A 18171    	LD	A,(IY+%F)
004804 CBBF                A 18172    	RES	%7,A
004806 FD770F              A 18173    	LD	(IY+%F),A
                           A 18174    ; 4027					}
004809                     A 18175    L_930:
                           A 18176    .LINE 4027
                           A 18177    
                           A 18178    ; 4028	#endif
                           A 18179    ; 4029	#endif
                           A 18180    ; 4030					wcnt = SS(fs) * cc;		
                           A 18181    .LINE 4030
                           A 18182    
004809 DD27EF              A 18183    	LD	HL,(IX+%FFFFFFEF)
00480C 3E09                A 18184    	LD	A,%9
00480E CD 00 00 00         A 18185    	CALL	__ishl_b
004812 DD2FFD              A 18186    	LD	(IX+%FFFFFFFD),HL
                           A 18187    ; 4031					continue;
                           A 18188    .LINE 4031
                           A 18189    
004815 C3 FF 48 00         A 18190    	JR	L_942
                           A 18191    ; 4032				}
004819                     A 18192    L_935:
                           A 18193    .LINE 4032
                           A 18194    
                           A 18195    ; 4033	#if FF_FS_TINY
                           A 18196    ; 4034				if (fp->fptr >= fp->obj.obj
                           A 18197    ; 4035					if (sync_window(fs) != 
                           A 18198    ; 4036					fs->winsect = sect;
                           A 18199    ; 4037				}
                           A 18200    ; 4038	#else
                           A 18201    ; 4039				if (fp->sect != sect && 	
                           A 18202    .LINE 4039
                           A 18203    
004819 DD3106              A 18204    	LD	IY,(IX+%6)
00481C FD2719              A 18205    	LD	HL,(IY+%19)
00481F FD5E1C              A 18206    	LD	E,(IY+%1C)
004822 DD07F2              A 18207    	LD	BC,(IX+%FFFFFFF2)
004825 DD7EF5              A 18208    	LD	A,(IX+%FFFFFFF5)
004828 CD 00 00 00         A 18209    	CALL	__lcmpu
00482C 28 5A               A 18210    	JR	Z,L_936
                           A 18211    ; 4040					fp->fptr < fp->obj.objs
                           A 18212    .LINE 4040
                           A 18213    
00482E DD3106              A 18214    	LD	IY,(IX+%6)
004831 FD2711              A 18215    	LD	HL,(IY+%11)
004834 FD5E14              A 18216    	LD	E,(IY+%14)
004837 FD070B              A 18217    	LD	BC,(IY+%B)
00483A FD7E0E              A 18218    	LD	A,(IY+%E)
00483D CD 00 00 00         A 18219    	CALL	__lcmpu
004841 30 45               A 18220    	JR	NC,L_936
                           A 18221    ; 4041					disk_read(fs->pdrv, fp-
                           A 18222    .LINE 4041
                           A 18223    
004843 01010000            A 18224    	LD	BC,1
004847 C5                  A 18225    	PUSH	BC
004848 DD4EF5              A 18226    	LD	C,(IX+%FFFFFFF5)
00484B 0600                A 18227    	LD	B,%0
00484D C5                  A 18228    	PUSH	BC
00484E DD07F2              A 18229    	LD	BC,(IX+%FFFFFFF2)
004851 C5                  A 18230    	PUSH	BC
004852 DD3106              A 18231    	LD	IY,(IX+%6)
004855 ED6624              A 18232    	PEA	IY+%24
004858 DD31FA              A 18233    	LD	IY,(IX+%FFFFFFFA)
00485B FD4E01              A 18234    	LD	C,(IY+%1)
00485E 0600                A 18235    	LD	B,%0
004860 C5                  A 18236    	PUSH	BC
004861 DD77C1              A 18237    	LD	(IX+%FFFFFFC1),A
004864 CD 00 00 00         A 18238    	CALL	_disk_read
004868 DD7EC1              A 18239    	LD	A,(IX+%FFFFFFC1)
00486B C1                  A 18240    	POP	BC
00486C C1                  A 18241    	POP	BC
00486D C1                  A 18242    	POP	BC
00486E C1                  A 18243    	POP	BC
00486F C1                  A 18244    	POP	BC
004870 01000000            A 18245    	LD	BC,0
004874 B7                  A 18246    	OR	A,A
004875 ED42                A 18247    	SBC	HL,BC
004877 28 0F               A 18248    	JR	Z,L_936
                           A 18249    ; 4042						ABORT(fs, FR_DISK_E
                           A 18250    .LINE 4042
                           A 18251    
004879 DD3106              A 18252    	LD	IY,(IX+%6)
00487C FD361001            A 18253    	LD	(IY+%10),%1
004880 21010000            A 18254    	LD	HL,1
004884 C3 AF 49 00         A 18255    	JR	L_946
                           A 18256    ; 4043				}
004888                     A 18257    L_936:
                           A 18258    .LINE 4043
                           A 18259    
                           A 18260    ; 4044	#endif
                           A 18261    ; 4045				fp->sect = sect;
                           A 18262    .LINE 4045
                           A 18263    
004888 DD07F2              A 18264    	LD	BC,(IX+%FFFFFFF2)
00488B DD56F5              A 18265    	LD	D,(IX+%FFFFFFF5)
00488E DD3106              A 18266    	LD	IY,(IX+%6)
004891 FD0F19              A 18267    	LD	(IY+%19),BC
004894 FD721C              A 18268    	LD	(IY+%1C),D
                           A 18269    ; 4046			}
004897                     A 18270    L_938:
                           A 18271    .LINE 4046
                           A 18272    
                           A 18273    ; 4047			wcnt = SS(fs) - (UINT)fp->fptr 
                           A 18274    .LINE 4047
                           A 18275    
004897 DD3106              A 18276    	LD	IY,(IX+%6)
00489A FD0711              A 18277    	LD	BC,(IY+%11)
00489D FD5614              A 18278    	LD	D,(IY+%14)
0048A0 DD0FCE              A 18279    	LD	(IX+%FFFFFFCE),BC
0048A3 DD72D1              A 18280    	LD	(IX+%FFFFFFD1),D
0048A6 C5E1                A 18281    	LD	HL,BC
0048A8 01FF0100            A 18282    	LD	BC,511
0048AC CD 00 00 00         A 18283    	CALL	__iand
0048B0 E5C1                A 18284    	LD	BC,HL
0048B2 21000200            A 18285    	LD	HL,512
0048B6 B7                  A 18286    	OR	A,A
0048B7 ED42                A 18287    	SBC	HL,BC
0048B9 DD2FFD              A 18288    	LD	(IX+%FFFFFFFD),HL
                           A 18289    ; 4048			if (wcnt > btw) wcnt = btw;		
                           A 18290    .LINE 4048
                           A 18291    
0048BC E5C1                A 18292    	LD	BC,HL
0048BE DD270C              A 18293    	LD	HL,(IX+%C)
0048C1 B7                  A 18294    	OR	A,A
0048C2 ED42                A 18295    	SBC	HL,BC
0048C4 30 06               A 18296    	JR	NC,L_940
0048C6 DD070C              A 18297    	LD	BC,(IX+%C)
0048C9 DD0FFD              A 18298    	LD	(IX+%FFFFFFFD),BC
0048CC                     A 18299    L_940:
                           A 18300    ; 4049	#if FF_FS_TINY
                           A 18301    ; 4050			if (move_window(fs, fp->sect) !
                           A 18302    ; 4051			memcpy(fs->win + fp->fptr % SS(
                           A 18303    ; 4052			fs->wflag = 1;
                           A 18304    ; 4053	#else
                           A 18305    ; 4054			memcpy(fp->buf + fp->fptr % SS(
                           A 18306    .LINE 4054
                           A 18307    
0048CC DD07FD              A 18308    	LD	BC,(IX+%FFFFFFFD)
0048CF C5                  A 18309    	PUSH	BC
0048D0 DD07EC              A 18310    	LD	BC,(IX+%FFFFFFEC)
0048D3 C5                  A 18311    	PUSH	BC
0048D4 DD27CE              A 18312    	LD	HL,(IX+%FFFFFFCE)
0048D7 DD5ED1              A 18313    	LD	E,(IX+%FFFFFFD1)
0048DA 01FF0100            A 18314    	LD	BC,511
0048DE AF                  A 18315    	XOR	A,A
0048DF CD 00 00 00         A 18316    	CALL	__land
0048E3 E5C1                A 18317    	LD	BC,HL
0048E5 DD3106              A 18318    	LD	IY,(IX+%6)
0048E8 ED2324              A 18319    	LEA	HL,IY+%24
0048EB 09                  A 18320    	ADD	HL,BC
0048EC E5                  A 18321    	PUSH	HL
0048ED CD 00 00 00         A 18322    	CALL	_memcpy
0048F1 C1                  A 18323    	POP	BC
0048F2 C1                  A 18324    	POP	BC
0048F3 C1                  A 18325    	POP	BC
                           A 18326    ; 4055			fp->flag |= FA_DIRTY;
                           A 18327    .LINE 4055
                           A 18328    
0048F4 DD3106              A 18329    	LD	IY,(IX+%6)
0048F7 FD7E0F              A 18330    	LD	A,(IY+%F)
0048FA CBFF                A 18331    	SET	%7,A
0048FC FD770F              A 18332    	LD	(IY+%F),A
                           A 18333    ; 4056	#endif
                           A 18334    ; 4057		}
0048FF                     A 18335    L_942:
                           A 18336    .LINE 4057
                           A 18337    
0048FF DD07FD              A 18338    	LD	BC,(IX+%FFFFFFFD)
004902 DD270C              A 18339    	LD	HL,(IX+%C)
004905 B7                  A 18340    	OR	A,A
004906 ED42                A 18341    	SBC	HL,BC
004908 DD2F0C              A 18342    	LD	(IX+%C),HL
00490B DD270F              A 18343    	LD	HL,(IX+%F)
00490E DD310F              A 18344    	LD	IY,(IX+%F)
004911 DD07FD              A 18345    	LD	BC,(IX+%FFFFFFFD)
004914 ED27                A 18346    	LD	HL,(HL)
004916 09                  A 18347    	ADD	HL,BC
004917 FD2F00              A 18348    	LD	(IY),HL
00491A DD07FD              A 18349    	LD	BC,(IX+%FFFFFFFD)
00491D DD27EC              A 18350    	LD	HL,(IX+%FFFFFFEC)
004920 09                  A 18351    	ADD	HL,BC
004921 DD2FEC              A 18352    	LD	(IX+%FFFFFFEC),HL
004924 DD07FD              A 18353    	LD	BC,(IX+%FFFFFFFD)
004927 AF                  A 18354    	XOR	A,A
004928 DD3106              A 18355    	LD	IY,(IX+%6)
00492B FD2711              A 18356    	LD	HL,(IY+%11)
00492E FD5E14              A 18357    	LD	E,(IY+%14)
004931 CD 00 00 00         A 18358    	CALL	__ladd
004935 FD2F11              A 18359    	LD	(IY+%11),HL
004938 FD7314              A 18360    	LD	(IY+%14),E
00493B FD0711              A 18361    	LD	BC,(IY+%11)
00493E FD7E14              A 18362    	LD	A,(IY+%14)
004941 DD0FC2              A 18363    	LD	(IX+%FFFFFFC2),BC
004944 DD77C5              A 18364    	LD	(IX+%FFFFFFC5),A
004947 ED1300              A 18365    	LEA	DE,IY+%0
00494A DD1FE3              A 18366    	LD	(IX+%FFFFFFE3),DE
00494D DD1FD2              A 18367    	LD	(IX+%FFFFFFD2),DE
004950 DD31E3              A 18368    	LD	IY,(IX+%FFFFFFE3)
004953 FD270B              A 18369    	LD	HL,(IY+%B)
004956 FD5E0E              A 18370    	LD	E,(IY+%E)
004959 DD7EC5              A 18371    	LD	A,(IX+%FFFFFFC5)
00495C CD 00 00 00         A 18372    	CALL	__lcmpu
004960 30 0E               A 18373    	JR	NC,L_904
004962 DD07C2              A 18374    	LD	BC,(IX+%FFFFFFC2)
004965 DD7EC5              A 18375    	LD	A,(IX+%FFFFFFC5)
004968 DD0FCA              A 18376    	LD	(IX+%FFFFFFCA),BC
00496B DD77CD              A 18377    	LD	(IX+%FFFFFFCD),A
00496E 18 15               A 18378    	JR	L_905
004970                     A 18379    L_904:
004970 DD07E3              A 18380    	LD	BC,(IX+%FFFFFFE3)
004973 DD0FD2              A 18381    	LD	(IX+%FFFFFFD2),BC
004976 DD31E3              A 18382    	LD	IY,(IX+%FFFFFFE3)
004979 FD070B              A 18383    	LD	BC,(IY+%B)
00497C FD7E0E              A 18384    	LD	A,(IY+%E)
00497F DD0FCA              A 18385    	LD	(IX+%FFFFFFCA),BC
004982 DD77CD              A 18386    	LD	(IX+%FFFFFFCD),A
004985                     A 18387    L_905:
004985 DD07CA              A 18388    	LD	BC,(IX+%FFFFFFCA)
004988 DD7ECD              A 18389    	LD	A,(IX+%FFFFFFCD)
00498B DD31D2              A 18390    	LD	IY,(IX+%FFFFFFD2)
00498E FD0F0B              A 18391    	LD	(IY+%B),BC
004991 FD770E              A 18392    	LD	(IY+%E),A
004994                     A 18393    L_943:
004994 DD070C              A 18394    	LD	BC,(IX+%C)
004997 B7                  A 18395    	OR	A,A
004998 ED62                A 18396    	SBC	HL,HL
00499A B7                  A 18397    	OR	A,A
00499B ED42                A 18398    	SBC	HL,BC
00499D DA 3A 45 00         A 18399    	JR	C,L_941
0049A1                     A 18400    L_945:
                           A 18401    ; 4058	
                           A 18402    ; 4059		fp->flag |= FA_MODIFIED;			
                           A 18403    .LINE 4059
                           A 18404    
0049A1 DD3106              A 18405    	LD	IY,(IX+%6)
0049A4 FD7E0F              A 18406    	LD	A,(IY+%F)
0049A7 CBF7                A 18407    	SET	%6,A
0049A9 FD770F              A 18408    	LD	(IY+%F),A
                           A 18409    ; 4060	
                           A 18410    ; 4061		LEAVE_FF(fs, FR_OK);
                           A 18411    .LINE 4061
                           A 18412    
0049AC B7                  A 18413    	OR	A,A
0049AD ED62                A 18414    	SBC	HL,HL
                           A 18415    ; 4062	}
0049AF                     A 18416    L_946:
                           A 18417    .LINE 4062
                           A 18418    
0049AF DDF9                A 18419    	LD	SP,IX
0049B1 DDE1                A 18420    	POP	IX
0049B3 C9                  A 18421    	RET	
                           A 18422    
                           A 18423    
                           A 18424    ;**************************** _f_write ********
                           A 18425    ;Name                         Addr/Register   S
                           A 18426    ;_disk_read                          IMPORT  --
                           A 18427    ;_memcpy                             IMPORT  --
                           A 18428    ;_disk_write                         IMPORT  --
                           A 18429    ;G_74                                 IX-62    
                           A 18430    ;G_72                                 IX-58    
                           A 18431    ;temp902                              IX-54    
                           A 18432    ;G_73                                 IX-50    
                           A 18433    ;G_76                                 IX-46    
                           A 18434    ;G_71                                 IX-43    
                           A 18435    ;G_70                                 IX-40    
                           A 18436    ;G_67                                 IX-37    
                           A 18437    ;G_68                                 IX-33    
                           A 18438    ;G_75                                 IX-29    
                           A 18439    ;res                                  IX-26    
                           A 18440    ;csect                                IX-23    
                           A 18441    ;wbuff                                IX-20    
                           A 18442    ;cc                                   IX-17    
                           A 18443    ;sect                                 IX-14    
                           A 18444    ;clst                                 IX-10    
                           A 18445    ;fs                                    IX-6    
                           A 18446    ;wcnt                                  IX-3    
                           A 18447    ;bw                                   IX+15    
                           A 18448    ;btw                                  IX+12    
                           A 18449    ;buff                                  IX+9    
                           A 18450    ;fp                                    IX+6    
                           A 18451    
                           A 18452    
                           A 18453    ; Stack Frame Size: 81 (bytes)
                           A 18454    ;       Spill Code: -3 (instruction)
                           A 18455    
                           A 18456    
                           A 18457    .ENDFUNC "f_write",4062,"_f_write"
                           A 18458    ; 4063	
                           A 18459    ; 4064	
                           A 18460    ; 4065	
                           A 18461    ; 4066	
                           A 18462    ; 4067	/*-------------------------------------
                           A 18463    ; 4068	/* Synchronize the File                
                           A 18464    ; 4069	/*-------------------------------------
                           A 18465    ; 4070	
                           A 18466    ; 4071	FRESULT f_sync (
                           A 18467    ; 4072		FIL* fp		/* Open file to be sync
                           A 18468    ; 4073	)
                           A 18469    ; 4074	{
0049B4                     A 18470    _f_sync:
                           A 18471    .DEFINE "_f_sync"
                           A 18472    
                           A 18473    .VALUE _f_sync
                           A 18474    
                           A 18475    .CLASS 2
                           A 18476    
                           A 18477    .TYPE 68
                           A 18478    
                           A 18479    .ENDEF
                           A 18480    
                           A 18481    .BEGFUNC "f_sync",4074,"_f_sync"
                           A 18482    
                           A 18483    .LINE 4074
                           A 18484    
                           A 18485    .DEFINE "fp"
                           A 18486    
                           A 18487    .CLASS 65
                           A 18488    
                           A 18489    .VALUE 6
                           A 18490    
                           A 18491    .TAG "NONAME2"
                           A 18492    
                           A 18493    .TYPE 40
                           A 18494    
                           A 18495    .ENDEF
                           A 18496    
                           A 18497    .DEFINE "dir"
                           A 18498    
                           A 18499    .CLASS 65
                           A 18500    
                           A 18501    .VALUE -3
                           A 18502    
                           A 18503    .TYPE 44
                           A 18504    
                           A 18505    .ENDEF
                           A 18506    
                           A 18507    .DEFINE "res"
                           A 18508    
                           A 18509    .CLASS 65
                           A 18510    
                           A 18511    .VALUE -6
                           A 18512    
                           A 18513    .TYPE 4
                           A 18514    
                           A 18515    .ENDEF
                           A 18516    
                           A 18517    .DEFINE "fs"
                           A 18518    
                           A 18519    .CLASS 65
                           A 18520    
                           A 18521    .VALUE -9
                           A 18522    
                           A 18523    .TAG "NONAME0"
                           A 18524    
                           A 18525    .TYPE 40
                           A 18526    
                           A 18527    .ENDEF
                           A 18528    
0049B4 DDE5                A 18529    	PUSH	IX
0049B6 DD210000 00         A 18530    	LD	IX,0
0049BB DD39                A 18531    	ADD	IX,SP
0049BD ED22F3              A 18532    	LEA	HL,IX+%FFFFFFF3
0049C0 F9                  A 18533    	LD	SP,HL
                           A 18534    ; 4075		FRESULT res;
                           A 18535    ; 4076		FATFS *fs;
                           A 18536    ; 4077		DWORD tm;
                           A 18537    ; 4078		BYTE *dir;
                           A 18538    ; 4079	
                           A 18539    ; 4080	
                           A 18540    ; 4081		res = validate(&fp->obj, &fs);	/* 
                           A 18541    .LINE 4081
                           A 18542    
0049C1 ED65F7              A 18543    	PEA	IX+%FFFFFFF7
0049C4 DD3106              A 18544    	LD	IY,(IX+%6)
0049C7 ED6600              A 18545    	PEA	IY+%0
0049CA CD 19 3A 00         A 18546    	CALL	_validate
0049CE C1                  A 18547    	POP	BC
0049CF C1                  A 18548    	POP	BC
0049D0 DD2FFA              A 18549    	LD	(IX+%FFFFFFFA),HL
                           A 18550    ; 4082		if (res == FR_OK) {
                           A 18551    .LINE 4082
                           A 18552    
0049D3 01000000            A 18553    	LD	BC,0
0049D7 DD27FA              A 18554    	LD	HL,(IX+%FFFFFFFA)
0049DA B7                  A 18555    	OR	A,A
0049DB ED42                A 18556    	SBC	HL,BC
0049DD C2 06 4B 00         A 18557    	JR	NZ,L_954
                           A 18558    ; 4083			if (fp->flag & FA_MODIFIED) {	
                           A 18559    .LINE 4083
                           A 18560    
0049E1 DD3106              A 18561    	LD	IY,(IX+%6)
0049E4 FD7E0F              A 18562    	LD	A,(IY+%F)
0049E7 DD77F6              A 18563    	LD	(IX+%FFFFFFF6),A
0049EA E640                A 18564    	AND	A,%40
0049EC CA 06 4B 00         A 18565    	JR	Z,L_954
                           A 18566    ; 4084	#if !FF_FS_TINY
                           A 18567    ; 4085				if (fp->flag & FA_DIRTY) {	
                           A 18568    .LINE 4085
                           A 18569    
0049F0 DD7EF6              A 18570    	LD	A,(IX+%FFFFFFF6)
0049F3 E680                A 18571    	AND	A,%80
0049F5 28 44               A 18572    	JR	Z,L_950
                           A 18573    ; 4086					if (disk_write(fs->pdrv
                           A 18574    .LINE 4086
                           A 18575    
0049F7 01010000            A 18576    	LD	BC,1
0049FB C5                  A 18577    	PUSH	BC
0049FC DD3106              A 18578    	LD	IY,(IX+%6)
0049FF FD0719              A 18579    	LD	BC,(IY+%19)
004A02 FD7E1C              A 18580    	LD	A,(IY+%1C)
004A05 2600                A 18581    	LD	H,%0
004A07 6F                  A 18582    	LD	L,A
004A08 E5                  A 18583    	PUSH	HL
004A09 C5                  A 18584    	PUSH	BC
004A0A ED6624              A 18585    	PEA	IY+%24
004A0D DD31F7              A 18586    	LD	IY,(IX+%FFFFFFF7)
004A10 FD4E01              A 18587    	LD	C,(IY+%1)
004A13 0600                A 18588    	LD	B,%0
004A15 C5                  A 18589    	PUSH	BC
004A16 CD 00 00 00         A 18590    	CALL	_disk_write
004A1A C1                  A 18591    	POP	BC
004A1B C1                  A 18592    	POP	BC
004A1C C1                  A 18593    	POP	BC
004A1D C1                  A 18594    	POP	BC
004A1E C1                  A 18595    	POP	BC
004A1F 01000000            A 18596    	LD	BC,0
004A23 B7                  A 18597    	OR	A,A
004A24 ED42                A 18598    	SBC	HL,BC
004A26 28 08               A 18599    	JR	Z,L_948
004A28 21010000            A 18600    	LD	HL,1
004A2C C3 09 4B 00         A 18601    	JR	L_955
004A30                     A 18602    L_948:
                           A 18603    ; 4087					fp->flag &= (BYTE)~FA_D
                           A 18604    .LINE 4087
                           A 18605    
004A30 DD3106              A 18606    	LD	IY,(IX+%6)
004A33 FD7E0F              A 18607    	LD	A,(IY+%F)
004A36 CBBF                A 18608    	RES	%7,A
004A38 FD770F              A 18609    	LD	(IY+%F),A
                           A 18610    ; 4088				}
004A3B                     A 18611    L_950:
                           A 18612    .LINE 4088
                           A 18613    
                           A 18614    ; 4089	#endif
                           A 18615    ; 4090				/* Update the directory ent
                           A 18616    ; 4091				tm = GET_FATTIME();			
                           A 18617    ; 4092	#if FF_FS_EXFAT
                           A 18618    ; 4093				if (fs->fs_type == FS_EXFAT
                           A 18619    ; 4094					res = fill_first_frag(&
                           A 18620    ; 4095					if (res == FR_OK) {
                           A 18621    ; 4096						res = fill_last_fra
                           A 18622    ; 4097					}
                           A 18623    ; 4098					if (res == FR_OK) {
                           A 18624    ; 4099						DIR dj;
                           A 18625    ; 4100						DEF_NAMBUF
                           A 18626    ; 4101	
                           A 18627    ; 4102						INIT_NAMBUF(fs);
                           A 18628    ; 4103						res = load_obj_xdir
                           A 18629    ; 4104						if (res == FR_OK) {
                           A 18630    ; 4105							fs->dirbuf[XDIR
                           A 18631    ; 4106							fs->dirbuf[XDIR
                           A 18632    ; 4107							st_dword(fs->di
                           A 18633    ; 4108							st_qword(fs->di
                           A 18634    ; 4109							st_qword(fs->di
                           A 18635    ; 4110							st_dword(fs->di
                           A 18636    ; 4111							fs->dirbuf[XDIR
                           A 18637    ; 4112							st_dword(fs->di
                           A 18638    ; 4113							res = store_xdi
                           A 18639    ; 4114							if (res == FR_O
                           A 18640    ; 4115								res = sync_
                           A 18641    ; 4116								fp->flag &=
                           A 18642    ; 4117							}
                           A 18643    ; 4118						}
                           A 18644    ; 4119						FREE_NAMBUF();
                           A 18645    ; 4120					}
                           A 18646    ; 4121				} else
                           A 18647    ; 4122	#endif
                           A 18648    ; 4123				{
                           A 18649    ; 4124					res = move_window(fs, f
                           A 18650    .LINE 4124
                           A 18651    
004A3B DD3106              A 18652    	LD	IY,(IX+%6)
004A3E FD071D              A 18653    	LD	BC,(IY+%1D)
004A41 FD7E20              A 18654    	LD	A,(IY+%20)
004A44 2600                A 18655    	LD	H,%0
004A46 6F                  A 18656    	LD	L,A
004A47 E5                  A 18657    	PUSH	HL
004A48 C5                  A 18658    	PUSH	BC
004A49 DD07F7              A 18659    	LD	BC,(IX+%FFFFFFF7)
004A4C C5                  A 18660    	PUSH	BC
004A4D CD 1E 04 00         A 18661    	CALL	_move_window
004A51 C1                  A 18662    	POP	BC
004A52 C1                  A 18663    	POP	BC
004A53 C1                  A 18664    	POP	BC
004A54 DD2FFA              A 18665    	LD	(IX+%FFFFFFFA),HL
                           A 18666    ; 4125					if (res == FR_OK) {
                           A 18667    .LINE 4125
                           A 18668    
004A57 01000000            A 18669    	LD	BC,0
004A5B DD27FA              A 18670    	LD	HL,(IX+%FFFFFFFA)
004A5E B7                  A 18671    	OR	A,A
004A5F ED42                A 18672    	SBC	HL,BC
004A61 C2 06 4B 00         A 18673    	JR	NZ,L_954
                           A 18674    ; 4126						dir = fp->dir_ptr;
                           A 18675    .LINE 4126
                           A 18676    
004A65 DD3106              A 18677    	LD	IY,(IX+%6)
004A68 FD0721              A 18678    	LD	BC,(IY+%21)
004A6B DD0FFD              A 18679    	LD	(IX+%FFFFFFFD),BC
                           A 18680    ; 4127						dir[DIR_Attr] |= AM
                           A 18681    .LINE 4127
                           A 18682    
004A6E DD31FD              A 18683    	LD	IY,(IX+%FFFFFFFD)
004A71 ED230B              A 18684    	LEA	HL,IY+%B
004A74 7E                  A 18685    	LD	A,(HL)
004A75 CBEF                A 18686    	SET	%5,A
004A77 ED230B              A 18687    	LEA	HL,IY+%B
004A7A 77                  A 18688    	LD	(HL),A
                           A 18689    ; 4128						st_clust(fp->obj.fs
                           A 18690    .LINE 4128
                           A 18691    
004A7B DD3106              A 18692    	LD	IY,(IX+%6)
004A7E ED0300              A 18693    	LEA	BC,IY+%0
004A81 DD0FF3              A 18694    	LD	(IX+%FFFFFFF3),BC
004A84 DD31F3              A 18695    	LD	IY,(IX+%FFFFFFF3)
004A87 FD0707              A 18696    	LD	BC,(IY+%7)
004A8A FD7E0A              A 18697    	LD	A,(IY+%A)
004A8D 2600                A 18698    	LD	H,%0
004A8F 6F                  A 18699    	LD	L,A
004A90 E5                  A 18700    	PUSH	HL
004A91 C5                  A 18701    	PUSH	BC
004A92 DD07FD              A 18702    	LD	BC,(IX+%FFFFFFFD)
004A95 C5                  A 18703    	PUSH	BC
004A96 FD0700              A 18704    	LD	BC,(IY+%0)
004A99 C5                  A 18705    	PUSH	BC
004A9A CD 5C 18 00         A 18706    	CALL	_st_clust
004A9E C1                  A 18707    	POP	BC
004A9F C1                  A 18708    	POP	BC
004AA0 C1                  A 18709    	POP	BC
004AA1 C1                  A 18710    	POP	BC
                           A 18711    ; 4129						st_dword(dir + DIR_
                           A 18712    .LINE 4129
                           A 18713    
004AA2 DD31F3              A 18714    	LD	IY,(IX+%FFFFFFF3)
004AA5 FD070B              A 18715    	LD	BC,(IY+%B)
004AA8 FD7E0E              A 18716    	LD	A,(IY+%E)
004AAB 2600                A 18717    	LD	H,%0
004AAD 6F                  A 18718    	LD	L,A
004AAE E5                  A 18719    	PUSH	HL
004AAF C5                  A 18720    	PUSH	BC
004AB0 DD31FD              A 18721    	LD	IY,(IX+%FFFFFFFD)
004AB3 ED031C              A 18722    	LEA	BC,IY+%1C
004AB6 C5                  A 18723    	PUSH	BC
004AB7 CD 45 01 00         A 18724    	CALL	_st_dword
004ABB C1                  A 18725    	POP	BC
004ABC C1                  A 18726    	POP	BC
004ABD C1                  A 18727    	POP	BC
                           A 18728    ; 4130						st_dword(dir + DIR_
                           A 18729    .LINE 4130
                           A 18730    
004ABE 01500000            A 18731    	LD	BC,80
004AC2 C5                  A 18732    	PUSH	BC
004AC3 01000021            A 18733    	LD	BC,2162688
004AC7 C5                  A 18734    	PUSH	BC
004AC8 DD31FD              A 18735    	LD	IY,(IX+%FFFFFFFD)
004ACB ED0316              A 18736    	LEA	BC,IY+%16
004ACE C5                  A 18737    	PUSH	BC
004ACF CD 45 01 00         A 18738    	CALL	_st_dword
004AD3 C1                  A 18739    	POP	BC
004AD4 C1                  A 18740    	POP	BC
004AD5 C1                  A 18741    	POP	BC
                           A 18742    ; 4131						st_word(dir + DIR_L
                           A 18743    .LINE 4131
                           A 18744    
004AD6 01000000            A 18745    	LD	BC,0
004ADA C5                  A 18746    	PUSH	BC
004ADB DD31FD              A 18747    	LD	IY,(IX+%FFFFFFFD)
004ADE ED0312              A 18748    	LEA	BC,IY+%12
004AE1 C5                  A 18749    	PUSH	BC
004AE2 CD 06 01 00         A 18750    	CALL	_st_word
004AE6 C1                  A 18751    	POP	BC
004AE7 C1                  A 18752    	POP	BC
                           A 18753    ; 4132						fs->wflag = 1;
                           A 18754    .LINE 4132
                           A 18755    
004AE8 DD31F7              A 18756    	LD	IY,(IX+%FFFFFFF7)
004AEB FD360301            A 18757    	LD	(IY+%3),%1
                           A 18758    ; 4133						res = sync_fs(fs);	
                           A 18759    .LINE 4133
                           A 18760    
004AEF DD07F7              A 18761    	LD	BC,(IX+%FFFFFFF7)
004AF2 C5                  A 18762    	PUSH	BC
004AF3 CD B3 04 00         A 18763    	CALL	_sync_fs
004AF7 C1                  A 18764    	POP	BC
004AF8 DD2FFA              A 18765    	LD	(IX+%FFFFFFFA),HL
                           A 18766    ; 4134						fp->flag &= (BYTE)~
                           A 18767    .LINE 4134
                           A 18768    
004AFB DD3106              A 18769    	LD	IY,(IX+%6)
004AFE FD7E0F              A 18770    	LD	A,(IY+%F)
004B01 CBB7                A 18771    	RES	%6,A
004B03 FD770F              A 18772    	LD	(IY+%F),A
                           A 18773    ; 4135					}
                           A 18774    ; 4136				}
                           A 18775    ; 4137			}
                           A 18776    ; 4138		}
004B06                     A 18777    L_954:
                           A 18778    .LINE 4138
                           A 18779    
                           A 18780    ; 4139	
                           A 18781    ; 4140		LEAVE_FF(fs, res);
                           A 18782    .LINE 4140
                           A 18783    
004B06 DD27FA              A 18784    	LD	HL,(IX+%FFFFFFFA)
                           A 18785    ; 4141	}
004B09                     A 18786    L_955:
                           A 18787    .LINE 4141
                           A 18788    
004B09 DDF9                A 18789    	LD	SP,IX
004B0B DDE1                A 18790    	POP	IX
004B0D C9                  A 18791    	RET	
                           A 18792    
                           A 18793    
                           A 18794    ;**************************** _f_sync *********
                           A 18795    ;Name                         Addr/Register   S
                           A 18796    ;_disk_write                         IMPORT  --
                           A 18797    ;G_78                                 IX-13    
                           A 18798    ;G_77                                 IX-10    
                           A 18799    ;fs                                    IX-9    
                           A 18800    ;res                                   IX-6    
                           A 18801    ;dir                                   IX-3    
                           A 18802    ;fp                                    IX+6    
                           A 18803    
                           A 18804    
                           A 18805    ; Stack Frame Size: 22 (bytes)
                           A 18806    ;       Spill Code: -3 (instruction)
                           A 18807    
                           A 18808    
                           A 18809    .ENDFUNC "f_sync",4141,"_f_sync"
                           A 18810    ; 4142	
                           A 18811    ; 4143	#endif /* !FF_FS_READONLY */
                           A 18812    ; 4144	
                           A 18813    ; 4145	
                           A 18814    ; 4146	
                           A 18815    ; 4147	
                           A 18816    ; 4148	/*-------------------------------------
                           A 18817    ; 4149	/* Close File                          
                           A 18818    ; 4150	/*-------------------------------------
                           A 18819    ; 4151	
                           A 18820    ; 4152	FRESULT f_close (
                           A 18821    ; 4153		FIL* fp		/* Open file to be clos
                           A 18822    ; 4154	)
                           A 18823    ; 4155	{
004B0E                     A 18824    _f_close:
                           A 18825    .DEFINE "_f_close"
                           A 18826    
                           A 18827    .VALUE _f_close
                           A 18828    
                           A 18829    .CLASS 2
                           A 18830    
                           A 18831    .TYPE 68
                           A 18832    
                           A 18833    .ENDEF
                           A 18834    
                           A 18835    .BEGFUNC "f_close",4155,"_f_close"
                           A 18836    
                           A 18837    .LINE 4155
                           A 18838    
                           A 18839    .DEFINE "fp"
                           A 18840    
                           A 18841    .CLASS 65
                           A 18842    
                           A 18843    .VALUE 6
                           A 18844    
                           A 18845    .TAG "NONAME2"
                           A 18846    
                           A 18847    .TYPE 40
                           A 18848    
                           A 18849    .ENDEF
                           A 18850    
                           A 18851    .DEFINE "res"
                           A 18852    
                           A 18853    .CLASS 65
                           A 18854    
                           A 18855    .VALUE -3
                           A 18856    
                           A 18857    .TYPE 4
                           A 18858    
                           A 18859    .ENDEF
                           A 18860    
                           A 18861    .DEFINE "fs"
                           A 18862    
                           A 18863    .CLASS 65
                           A 18864    
                           A 18865    .VALUE -6
                           A 18866    
                           A 18867    .TAG "NONAME0"
                           A 18868    
                           A 18869    .TYPE 40
                           A 18870    
                           A 18871    .ENDEF
                           A 18872    
004B0E DDE5                A 18873    	PUSH	IX
004B10 DD210000 00         A 18874    	LD	IX,0
004B15 DD39                A 18875    	ADD	IX,SP
004B17 C5                  A 18876    	PUSH	BC
004B18 C5                  A 18877    	PUSH	BC
                           A 18878    ; 4156		FRESULT res;
                           A 18879    ; 4157		FATFS *fs;
                           A 18880    ; 4158	
                           A 18881    ; 4159	#if !FF_FS_READONLY
                           A 18882    ; 4160		res = f_sync(fp);					
                           A 18883    .LINE 4160
                           A 18884    
004B19 DD0706              A 18885    	LD	BC,(IX+%6)
004B1C C5                  A 18886    	PUSH	BC
004B1D CD B4 49 00         A 18887    	CALL	_f_sync
004B21 C1                  A 18888    	POP	BC
004B22 DD2FFD              A 18889    	LD	(IX+%FFFFFFFD),HL
                           A 18890    ; 4161		if (res == FR_OK)
                           A 18891    .LINE 4161
                           A 18892    
004B25 01000000            A 18893    	LD	BC,0
004B29 DD27FD              A 18894    	LD	HL,(IX+%FFFFFFFD)
004B2C B7                  A 18895    	OR	A,A
004B2D ED42                A 18896    	SBC	HL,BC
004B2F 20 24               A 18897    	JR	NZ,L_958
                           A 18898    ; 4162	#endif
                           A 18899    ; 4163		{
                           A 18900    ; 4164			res = validate(&fp->obj, &fs);	
                           A 18901    .LINE 4164
                           A 18902    
004B31 ED65FA              A 18903    	PEA	IX+%FFFFFFFA
004B34 DD3106              A 18904    	LD	IY,(IX+%6)
004B37 ED6600              A 18905    	PEA	IY+%0
004B3A CD 19 3A 00         A 18906    	CALL	_validate
004B3E C1                  A 18907    	POP	BC
004B3F C1                  A 18908    	POP	BC
004B40 DD2FFD              A 18909    	LD	(IX+%FFFFFFFD),HL
                           A 18910    ; 4165			if (res == FR_OK) {
                           A 18911    .LINE 4165
                           A 18912    
004B43 01000000            A 18913    	LD	BC,0
004B47 DD27FD              A 18914    	LD	HL,(IX+%FFFFFFFD)
004B4A B7                  A 18915    	OR	A,A
004B4B ED42                A 18916    	SBC	HL,BC
004B4D 20 06               A 18917    	JR	NZ,L_958
                           A 18918    ; 4166	#if FF_FS_LOCK != 0
                           A 18919    ; 4167				res = dec_lock(fp->obj.lock
                           A 18920    ; 4168				if (res == FR_OK) fp->obj.f
                           A 18921    ; 4169	#else
                           A 18922    ; 4170				fp->obj.fs = 0;	/* Invalida
                           A 18923    .LINE 4170
                           A 18924    
004B4F DD3106              A 18925    	LD	IY,(IX+%6)
004B52 FD0F00              A 18926    	LD	(IY+%0),BC
                           A 18927    ; 4171	#endif
                           A 18928    ; 4172	#if FF_FS_REENTRANT
                           A 18929    ; 4173				unlock_fs(fs, FR_OK);		
                           A 18930    ; 4174	#endif
                           A 18931    ; 4175			}
                           A 18932    ; 4176		}
004B55                     A 18933    L_958:
                           A 18934    .LINE 4176
                           A 18935    
                           A 18936    ; 4177		return res;
                           A 18937    .LINE 4177
                           A 18938    
004B55 DD27FD              A 18939    	LD	HL,(IX+%FFFFFFFD)
                           A 18940    ; 4178	}
                           A 18941    .LINE 4178
                           A 18942    
004B58 DDF9                A 18943    	LD	SP,IX
004B5A DDE1                A 18944    	POP	IX
004B5C C9                  A 18945    	RET	
                           A 18946    
                           A 18947    
                           A 18948    ;**************************** _f_close ********
                           A 18949    ;Name                         Addr/Register   S
                           A 18950    ;_f_sync                             IMPORT  --
                           A 18951    ;fs                                    IX-6    
                           A 18952    ;res                                   IX-3    
                           A 18953    ;fp                                    IX+6    
                           A 18954    
                           A 18955    
                           A 18956    ; Stack Frame Size: 15 (bytes)
                           A 18957    ;       Spill Code: -3 (instruction)
                           A 18958    
                           A 18959    
                           A 18960    .ENDFUNC "f_close",4178,"_f_close"
                           A 18961    ; 4179	
                           A 18962    ; 4180	
                           A 18963    ; 4181	
                           A 18964    ; 4182	
                           A 18965    ; 4183	#if FF_FS_RPATH >= 1
                           A 18966    ; 4184	/*-------------------------------------
                           A 18967    ; 4185	/* Change Current Directory or Current 
                           A 18968    ; 4186	/*-------------------------------------
                           A 18969    ; 4187	
                           A 18970    ; 4188	FRESULT f_chdrive (
                           A 18971    ; 4189		const TCHAR* path		/* Drive nu
                           A 18972    ; 4190	)
                           A 18973    ; 4191	{
                           A 18974    ; 4192		int vol;
                           A 18975    ; 4193	
                           A 18976    ; 4194	
                           A 18977    ; 4195		/* Get logical drive number */
                           A 18978    ; 4196		vol = get_ldnumber(&path);
                           A 18979    ; 4197		if (vol < 0) return FR_INVALID_DRIV
                           A 18980    ; 4198		CurrVol = (BYTE)vol;	/* Set it a
                           A 18981    ; 4199	
                           A 18982    ; 4200		return FR_OK;
                           A 18983    ; 4201	}
                           A 18984    ; 4202	
                           A 18985    ; 4203	
                           A 18986    ; 4204	
                           A 18987    ; 4205	FRESULT f_chdir (
                           A 18988    ; 4206		const TCHAR* path	/* Pointer to t
                           A 18989    ; 4207	)
                           A 18990    ; 4208	{
                           A 18991    ; 4209	#if FF_STR_VOLUME_ID == 2
                           A 18992    ; 4210		UINT i;
                           A 18993    ; 4211	#endif
                           A 18994    ; 4212		FRESULT res;
                           A 18995    ; 4213		DIR dj;
                           A 18996    ; 4214		FATFS *fs;
                           A 18997    ; 4215		DEF_NAMBUF
                           A 18998    ; 4216	
                           A 18999    ; 4217	
                           A 19000    ; 4218		/* Get logical drive */
                           A 19001    ; 4219		res = mount_volume(&path, &fs, 0);
                           A 19002    ; 4220		if (res == FR_OK) {
                           A 19003    ; 4221			dj.obj.fs = fs;
                           A 19004    ; 4222			INIT_NAMBUF(fs);
                           A 19005    ; 4223			res = follow_path(&dj, path);	
                           A 19006    ; 4224			if (res == FR_OK) {				
                           A 19007    ; 4225				if (dj.fn[NSFLAG] & NS_NONA
                           A 19008    ; 4226					fs->cdir = dj.obj.sclus
                           A 19009    ; 4227	#if FF_FS_EXFAT
                           A 19010    ; 4228					if (fs->fs_type == FS_E
                           A 19011    ; 4229						fs->cdc_scl = dj.ob
                           A 19012    ; 4230						fs->cdc_size = dj.o
                           A 19013    ; 4231						fs->cdc_ofs = dj.ob
                           A 19014    ; 4232					}
                           A 19015    ; 4233	#endif
                           A 19016    ; 4234				} else {
                           A 19017    ; 4235					if (dj.obj.attr & AM_DI
                           A 19018    ; 4236	#if FF_FS_EXFAT
                           A 19019    ; 4237						if (fs->fs_type == 
                           A 19020    ; 4238							fs->cdir = ld_d
                           A 19021    ; 4239							fs->cdc_scl = d
                           A 19022    ; 4240							fs->cdc_size = 
                           A 19023    ; 4241							fs->cdc_ofs = d
                           A 19024    ; 4242						} else
                           A 19025    ; 4243	#endif
                           A 19026    ; 4244						{
                           A 19027    ; 4245							fs->cdir = ld_c
                           A 19028    ; 4246						}
                           A 19029    ; 4247					} else {
                           A 19030    ; 4248						res = FR_NO_PATH;	
                           A 19031    ; 4249					}
                           A 19032    ; 4250				}
                           A 19033    ; 4251			}
                           A 19034    ; 4252			FREE_NAMBUF();
                           A 19035    ; 4253			if (res == FR_NO_FILE) res = FR
                           A 19036    ; 4254	#if FF_STR_VOLUME_ID == 2	/* Also cur
                           A 19037    ; 4255			if (res == FR_OK) {
                           A 19038    ; 4256				for (i = FF_VOLUMES - 1; i 
                           A 19039    ; 4257				CurrVol = (BYTE)i;
                           A 19040    ; 4258			}
                           A 19041    ; 4259	#endif
                           A 19042    ; 4260		}
                           A 19043    ; 4261	
                           A 19044    ; 4262		LEAVE_FF(fs, res);
                           A 19045    ; 4263	}
                           A 19046    ; 4264	
                           A 19047    ; 4265	
                           A 19048    ; 4266	#if FF_FS_RPATH >= 2
                           A 19049    ; 4267	FRESULT f_getcwd (
                           A 19050    ; 4268		TCHAR* buff,	/* Pointer to the d
                           A 19051    ; 4269		UINT len		/* Size of buff in 
                           A 19052    ; 4270	)
                           A 19053    ; 4271	{
                           A 19054    ; 4272		FRESULT res;
                           A 19055    ; 4273		DIR dj;
                           A 19056    ; 4274		FATFS *fs;
                           A 19057    ; 4275		UINT i, n;
                           A 19058    ; 4276		DWORD ccl;
                           A 19059    ; 4277		TCHAR *tp = buff;
                           A 19060    ; 4278	#if FF_VOLUMES >= 2
                           A 19061    ; 4279		UINT vl;
                           A 19062    ; 4280	#if FF_STR_VOLUME_ID
                           A 19063    ; 4281		const char *vp;
                           A 19064    ; 4282	#endif
                           A 19065    ; 4283	#endif
                           A 19066    ; 4284		FILINFO fno;
                           A 19067    ; 4285		DEF_NAMBUF
                           A 19068    ; 4286	
                           A 19069    ; 4287	
                           A 19070    ; 4288		/* Get logical drive */
                           A 19071    ; 4289		buff[0] = 0;	/* Set null string 
                           A 19072    ; 4290		res = mount_volume((const TCHAR**)&
                           A 19073    ; 4291		if (res == FR_OK) {
                           A 19074    ; 4292			dj.obj.fs = fs;
                           A 19075    ; 4293			INIT_NAMBUF(fs);
                           A 19076    ; 4294	
                           A 19077    ; 4295			/* Follow parent directories an
                           A 19078    ; 4296			i = len;			/* Bottom o
                           A 19079    ; 4297			if (!FF_FS_EXFAT || fs->fs_type
                           A 19080    ; 4298				dj.obj.sclust = fs->cdir;	
                           A 19081    ; 4299				while ((ccl = dj.obj.sclust
                           A 19082    ; 4300					res = dir_sdi(&dj, 1 * 
                           A 19083    ; 4301					if (res != FR_OK) break
                           A 19084    ; 4302					res = move_window(fs, d
                           A 19085    ; 4303					if (res != FR_OK) break
                           A 19086    ; 4304					dj.obj.sclust = ld_clus
                           A 19087    ; 4305					res = dir_sdi(&dj, 0);
                           A 19088    ; 4306					if (res != FR_OK) break
                           A 19089    ; 4307					do {					
                           A 19090    ; 4308						res = DIR_READ_FILE
                           A 19091    ; 4309						if (res != FR_OK) b
                           A 19092    ; 4310						if (ccl == ld_clust
                           A 19093    ; 4311						res = dir_next(&dj,
                           A 19094    ; 4312					} while (res == FR_OK);
                           A 19095    ; 4313					if (res == FR_NO_FILE) 
                           A 19096    ; 4314					if (res != FR_OK) break
                           A 19097    ; 4315					get_fileinfo(&dj, &fno)
                           A 19098    ; 4316					for (n = 0; fno.fname[n
                           A 19099    ; 4317					if (i < n + 1) {	/* 
                           A 19100    ; 4318						res = FR_NOT_ENOUGH
                           A 19101    ; 4319					}
                           A 19102    ; 4320					while (n) buff[--i] = f
                           A 19103    ; 4321					buff[--i] = '/';
                           A 19104    ; 4322				}
                           A 19105    ; 4323			}
                           A 19106    ; 4324			if (res == FR_OK) {
                           A 19107    ; 4325				if (i == len) buff[--i] = '
                           A 19108    ; 4326	#if FF_VOLUMES >= 2			/* Put driv
                           A 19109    ; 4327				vl = 0;
                           A 19110    ; 4328	#if FF_STR_VOLUME_ID >= 1	/* String v
                           A 19111    ; 4329				for (n = 0, vp = (const cha
                           A 19112    ; 4330				if (i >= n + 2) {
                           A 19113    ; 4331					if (FF_STR_VOLUME_ID ==
                           A 19114    ; 4332					for (vl = 0; vl < n; *t
                           A 19115    ; 4333					if (FF_STR_VOLUME_ID ==
                           A 19116    ; 4334					vl++;
                           A 19117    ; 4335				}
                           A 19118    ; 4336	#else						/* Numeric 
                           A 19119    ; 4337				if (i >= 3) {
                           A 19120    ; 4338					*tp++ = (TCHAR)'0' + Cu
                           A 19121    ; 4339					*tp++ = (TCHAR)':';
                           A 19122    ; 4340					vl = 2;
                           A 19123    ; 4341				}
                           A 19124    ; 4342	#endif
                           A 19125    ; 4343				if (vl == 0) res = FR_NOT_E
                           A 19126    ; 4344	#endif
                           A 19127    ; 4345				/* Add current directory pa
                           A 19128    ; 4346				if (res == FR_OK) {
                           A 19129    ; 4347					do *tp++ = buff[i++]; w
                           A 19130    ; 4348				}
                           A 19131    ; 4349			}
                           A 19132    ; 4350			FREE_NAMBUF();
                           A 19133    ; 4351		}
                           A 19134    ; 4352	
                           A 19135    ; 4353		*tp = 0;
                           A 19136    ; 4354		LEAVE_FF(fs, res);
                           A 19137    ; 4355	}
                           A 19138    ; 4356	
                           A 19139    ; 4357	#endif /* FF_FS_RPATH >= 2 */
                           A 19140    ; 4358	#endif /* FF_FS_RPATH >= 1 */
                           A 19141    ; 4359	
                           A 19142    ; 4360	
                           A 19143    ; 4361	
                           A 19144    ; 4362	#if FF_FS_MINIMIZE <= 2
                           A 19145    ; 4363	/*-------------------------------------
                           A 19146    ; 4364	/* Seek File Read/Write Pointer        
                           A 19147    ; 4365	/*-------------------------------------
                           A 19148    ; 4366	
                           A 19149    ; 4367	FRESULT f_lseek (
                           A 19150    ; 4368		FIL* fp,		/* Pointer to the f
                           A 19151    ; 4369		FSIZE_t ofs		/* File pointer fro
                           A 19152    ; 4370	)
                           A 19153    ; 4371	{
004B5D                     A 19154    _f_lseek:
                           A 19155    .DEFINE "_f_lseek"
                           A 19156    
                           A 19157    .VALUE _f_lseek
                           A 19158    
                           A 19159    .CLASS 2
                           A 19160    
                           A 19161    .TYPE 68
                           A 19162    
                           A 19163    .ENDEF
                           A 19164    
                           A 19165    .BEGFUNC "f_lseek",4371,"_f_lseek"
                           A 19166    
                           A 19167    .LINE 4371
                           A 19168    
                           A 19169    .DEFINE "fp"
                           A 19170    
                           A 19171    .CLASS 65
                           A 19172    
                           A 19173    .VALUE 6
                           A 19174    
                           A 19175    .TAG "NONAME2"
                           A 19176    
                           A 19177    .TYPE 40
                           A 19178    
                           A 19179    .ENDEF
                           A 19180    
                           A 19181    .DEFINE "ofs"
                           A 19182    
                           A 19183    .CLASS 65
                           A 19184    
                           A 19185    .VALUE 9
                           A 19186    
                           A 19187    .TYPE 15
                           A 19188    
                           A 19189    .ENDEF
                           A 19190    
                           A 19191    .DEFINE "clst"
                           A 19192    
                           A 19193    .CLASS 65
                           A 19194    
                           A 19195    .VALUE -4
                           A 19196    
                           A 19197    .TYPE 15
                           A 19198    
                           A 19199    .ENDEF
                           A 19200    
                           A 19201    .DEFINE "nsect"
                           A 19202    
                           A 19203    .CLASS 65
                           A 19204    
                           A 19205    .VALUE -8
                           A 19206    
                           A 19207    .TYPE 15
                           A 19208    
                           A 19209    .ENDEF
                           A 19210    
                           A 19211    .DEFINE "res"
                           A 19212    
                           A 19213    .CLASS 65
                           A 19214    
                           A 19215    .VALUE -11
                           A 19216    
                           A 19217    .TYPE 4
                           A 19218    
                           A 19219    .ENDEF
                           A 19220    
                           A 19221    .DEFINE "bcs"
                           A 19222    
                           A 19223    .CLASS 65
                           A 19224    
                           A 19225    .VALUE -15
                           A 19226    
                           A 19227    .TYPE 15
                           A 19228    
                           A 19229    .ENDEF
                           A 19230    
                           A 19231    .DEFINE "fs"
                           A 19232    
                           A 19233    .CLASS 65
                           A 19234    
                           A 19235    .VALUE -18
                           A 19236    
                           A 19237    .TAG "NONAME0"
                           A 19238    
                           A 19239    .TYPE 40
                           A 19240    
                           A 19241    .ENDEF
                           A 19242    
                           A 19243    .DEFINE "ifptr"
                           A 19244    
                           A 19245    .CLASS 65
                           A 19246    
                           A 19247    .VALUE -28
                           A 19248    
                           A 19249    .TYPE 15
                           A 19250    
                           A 19251    .ENDEF
                           A 19252    
004B5D DDE5                A 19253    	PUSH	IX
004B5F DD210000 00         A 19254    	LD	IX,0
004B64 DD39                A 19255    	ADD	IX,SP
004B66 ED22D4              A 19256    	LEA	HL,IX+%FFFFFFD4
004B69 F9                  A 19257    	LD	SP,HL
                           A 19258    ; 4372		FRESULT res;
                           A 19259    ; 4373		FATFS *fs;
                           A 19260    ; 4374		DWORD clst, bcs;
                           A 19261    ; 4375		LBA_t nsect;
                           A 19262    ; 4376		FSIZE_t ifptr;
                           A 19263    ; 4377	#if FF_USE_FASTSEEK
                           A 19264    ; 4378		DWORD cl, pcl, ncl, tcl, tlen, ulen
                           A 19265    ; 4379		DWORD *tbl;
                           A 19266    ; 4380		LBA_t dsc;
                           A 19267    ; 4381	#endif
                           A 19268    ; 4382	
                           A 19269    ; 4383		res = validate(&fp->obj, &fs);		
                           A 19270    .LINE 4383
                           A 19271    
004B6A ED65EE              A 19272    	PEA	IX+%FFFFFFEE
004B6D DD3106              A 19273    	LD	IY,(IX+%6)
004B70 ED6600              A 19274    	PEA	IY+%0
004B73 CD 19 3A 00         A 19275    	CALL	_validate
004B77 C1                  A 19276    	POP	BC
004B78 C1                  A 19277    	POP	BC
004B79 DD2FF5              A 19278    	LD	(IX+%FFFFFFF5),HL
                           A 19279    ; 4384		if (res == FR_OK) res = (FRESULT)fp
                           A 19280    .LINE 4384
                           A 19281    
004B7C 01000000            A 19282    	LD	BC,0
004B80 DD27F5              A 19283    	LD	HL,(IX+%FFFFFFF5)
004B83 B7                  A 19284    	OR	A,A
004B84 ED42                A 19285    	SBC	HL,BC
004B86 20 0D               A 19286    	JR	NZ,L_962
004B88 DD3106              A 19287    	LD	IY,(IX+%6)
004B8B FD7E10              A 19288    	LD	A,(IY+%10)
004B8E B7ED62              A 19289    	UEXT	HL
004B91 6F                  A 19290    	LD	L,A
004B92 DD2FF5              A 19291    	LD	(IX+%FFFFFFF5),HL
004B95                     A 19292    L_962:
                           A 19293    ; 4385	#if FF_FS_EXFAT && !FF_FS_READONLY
                           A 19294    ; 4386		if (res == FR_OK && fs->fs_type == 
                           A 19295    ; 4387			res = fill_last_frag(&fp->obj, 
                           A 19296    ; 4388		}
                           A 19297    ; 4389	#endif
                           A 19298    ; 4390		if (res != FR_OK) LEAVE_FF(fs, res)
                           A 19299    .LINE 4390
                           A 19300    
004B95 DD27F5              A 19301    	LD	HL,(IX+%FFFFFFF5)
004B98 B7                  A 19302    	OR	A,A
004B99 ED42                A 19303    	SBC	HL,BC
004B9B 28 07               A 19304    	JR	Z,L_1006
004B9D DD27F5              A 19305    	LD	HL,(IX+%FFFFFFF5)
004BA0 C3 36 50 00         A 19306    	JR	L_1008
004BA4                     A 19307    L_1006:
                           A 19308    ; 4391	
                           A 19309    ; 4392	#if FF_USE_FASTSEEK
                           A 19310    ; 4393		if (fp->cltbl) {	/* Fast seek */
                           A 19311    ; 4394			if (ofs == CREATE_LINKMAP) {	
                           A 19312    ; 4395				tbl = fp->cltbl;
                           A 19313    ; 4396				tlen = *tbl++; ulen = 2;	
                           A 19314    ; 4397				cl = fp->obj.sclust;		
                           A 19315    ; 4398				if (cl != 0) {
                           A 19316    ; 4399					do {
                           A 19317    ; 4400						/* Get a fragment *
                           A 19318    ; 4401						tcl = cl; ncl = 0; 
                           A 19319    ; 4402						do {
                           A 19320    ; 4403							pcl = cl; ncl++
                           A 19321    ; 4404							cl = get_fat(&f
                           A 19322    ; 4405							if (cl <= 1) AB
                           A 19323    ; 4406							if (cl == 0xFFF
                           A 19324    ; 4407						} while (cl == pcl 
                           A 19325    ; 4408						if (ulen <= tlen) {
                           A 19326    ; 4409							*tbl++ = ncl; *
                           A 19327    ; 4410						}
                           A 19328    ; 4411					} while (cl < fs->n_fat
                           A 19329    ; 4412				}
                           A 19330    ; 4413				*fp->cltbl = ulen;	/* Numb
                           A 19331    ; 4414				if (ulen <= tlen) {
                           A 19332    ; 4415					*tbl = 0;		/* Term
                           A 19333    ; 4416				} else {
                           A 19334    ; 4417					res = FR_NOT_ENOUGH_COR
                           A 19335    ; 4418				}
                           A 19336    ; 4419			} else {						
                           A 19337    ; 4420				if (ofs > fp->obj.objsize) 
                           A 19338    ; 4421				fp->fptr = ofs;				
                           A 19339    ; 4422				if (ofs > 0) {
                           A 19340    ; 4423					fp->clust = clmt_clust(
                           A 19341    ; 4424					dsc = clst2sect(fs, fp-
                           A 19342    ; 4425					if (dsc == 0) ABORT(fs,
                           A 19343    ; 4426					dsc += (DWORD)((ofs - 1
                           A 19344    ; 4427					if (fp->fptr % SS(fs) &
                           A 19345    ; 4428	#if !FF_FS_TINY
                           A 19346    ; 4429	#if !FF_FS_READONLY
                           A 19347    ; 4430						if (fp->flag & FA_D
                           A 19348    ; 4431							if (disk_write(
                           A 19349    ; 4432							fp->flag &= (BY
                           A 19350    ; 4433						}
                           A 19351    ; 4434	#endif
                           A 19352    ; 4435						if (disk_read(fs->p
                           A 19353    ; 4436	#endif
                           A 19354    ; 4437						fp->sect = dsc;
                           A 19355    ; 4438					}
                           A 19356    ; 4439				}
                           A 19357    ; 4440			}
                           A 19358    ; 4441		} else
                           A 19359    ; 4442	#endif
                           A 19360    ; 4443	
                           A 19361    ; 4444		/* Normal Seek */
                           A 19362    ; 4445		{
                           A 19363    ; 4446	#if FF_FS_EXFAT
                           A 19364    ; 4447			if (fs->fs_type != FS_EXFAT && 
                           A 19365    ; 4448	#endif
                           A 19366    ; 4449			if (ofs > fp->obj.objsize && (F
                           A 19367    .LINE 4449
                           A 19368    
004BA4 DD3106              A 19369    	LD	IY,(IX+%6)
004BA7 FD270B              A 19370    	LD	HL,(IY+%B)
004BAA FD5E0E              A 19371    	LD	E,(IY+%E)
004BAD DD0709              A 19372    	LD	BC,(IX+%9)
004BB0 DD7E0C              A 19373    	LD	A,(IX+%C)
004BB3 CD 00 00 00         A 19374    	CALL	__lcmpu
004BB7 30 19               A 19375    	JR	NC,L_965
004BB9 DD3106              A 19376    	LD	IY,(IX+%6)
004BBC FD7E0F              A 19377    	LD	A,(IY+%F)
004BBF E602                A 19378    	AND	A,%2
004BC1 20 0F               A 19379    	JR	NZ,L_965
                           A 19380    ; 4450				ofs = fp->obj.objsize;
                           A 19381    .LINE 4450
                           A 19382    
004BC3 DD3106              A 19383    	LD	IY,(IX+%6)
004BC6 FD070B              A 19384    	LD	BC,(IY+%B)
004BC9 FD7E0E              A 19385    	LD	A,(IY+%E)
004BCC DD0F09              A 19386    	LD	(IX+%9),BC
004BCF DD770C              A 19387    	LD	(IX+%C),A
                           A 19388    ; 4451			}
004BD2                     A 19389    L_965:
                           A 19390    .LINE 4451
                           A 19391    
                           A 19392    ; 4452			ifptr = fp->fptr;
                           A 19393    .LINE 4452
                           A 19394    
004BD2 DD3106              A 19395    	LD	IY,(IX+%6)
004BD5 FD0711              A 19396    	LD	BC,(IY+%11)
004BD8 FD7E14              A 19397    	LD	A,(IY+%14)
004BDB DD0FE4              A 19398    	LD	(IX+%FFFFFFE4),BC
004BDE DD77E7              A 19399    	LD	(IX+%FFFFFFE7),A
                           A 19400    ; 4453			fp->fptr = nsect = 0;
                           A 19401    .LINE 4453
                           A 19402    
004BE1 01000000            A 19403    	LD	BC,0
004BE5 AF                  A 19404    	XOR	A,A
004BE6 DD0FF8              A 19405    	LD	(IX+%FFFFFFF8),BC
004BE9 DD77FB              A 19406    	LD	(IX+%FFFFFFFB),A
004BEC FD0F11              A 19407    	LD	(IY+%11),BC
004BEF FD361400            A 19408    	LD	(IY+%14),%0
                           A 19409    ; 4454			if (ofs > 0) {
                           A 19410    .LINE 4454
                           A 19411    
004BF3 B7                  A 19412    	OR	A,A
004BF4 ED62                A 19413    	SBC	HL,HL
004BF6 1E00                A 19414    	LD	E,%0
004BF8 DD0709              A 19415    	LD	BC,(IX+%9)
004BFB DD7E0C              A 19416    	LD	A,(IX+%C)
004BFE CD 00 00 00         A 19417    	CALL	__lcmpu
004C02 D2 15 4F 00         A 19418    	JR	NC,L_996
                           A 19419    ; 4455				bcs = (DWORD)fs->csize * SS
                           A 19420    .LINE 4455
                           A 19421    
004C06 DD31EE              A 19422    	LD	IY,(IX+%FFFFFFEE)
004C09 FD0709              A 19423    	LD	BC,(IY+%9)
004C0C CD 00 00 00         A 19424    	CALL	__stoiu
004C10 01000200            A 19425    	LD	BC,512
004C14 AF                  A 19426    	XOR	A,A
004C15 CD 00 00 00         A 19427    	CALL	__lmulu
004C19 DD2FF1              A 19428    	LD	(IX+%FFFFFFF1),HL
004C1C DD73F4              A 19429    	LD	(IX+%FFFFFFF4),E
                           A 19430    ; 4456				if (ifptr > 0 &&
                           A 19431    .LINE 4456
                           A 19432    
004C1F B7                  A 19433    	OR	A,A
004C20 ED62                A 19434    	SBC	HL,HL
004C22 1E00                A 19435    	LD	E,%0
004C24 DD07E4              A 19436    	LD	BC,(IX+%FFFFFFE4)
004C27 DD7EE7              A 19437    	LD	A,(IX+%FFFFFFE7)
004C2A CD 00 00 00         A 19438    	CALL	__lcmpu
004C2E D2 D1 4C 00         A 19439    	JR	NC,L_974
                           A 19440    ; 4457					(ofs - 1) / bcs >= (ifp
                           A 19441    .LINE 4457
                           A 19442    
004C32 DD27E4              A 19443    	LD	HL,(IX+%FFFFFFE4)
004C35 DD5EE7              A 19444    	LD	E,(IX+%FFFFFFE7)
004C38 01010000            A 19445    	LD	BC,1
004C3C AF                  A 19446    	XOR	A,A
004C3D CD 00 00 00         A 19447    	CALL	__lsub
004C41 DD2FDC              A 19448    	LD	(IX+%FFFFFFDC),HL
004C44 DD73DF              A 19449    	LD	(IX+%FFFFFFDF),E
004C47 DD2709              A 19450    	LD	HL,(IX+%9)
004C4A DD5E0C              A 19451    	LD	E,(IX+%C)
004C4D 01010000            A 19452    	LD	BC,1
004C51 AF                  A 19453    	XOR	A,A
004C52 CD 00 00 00         A 19454    	CALL	__lsub
004C56 DD07F1              A 19455    	LD	BC,(IX+%FFFFFFF1)
004C59 DD7EF4              A 19456    	LD	A,(IX+%FFFFFFF4)
004C5C CD 00 00 00         A 19457    	CALL	__ldivu
004C60 DD73D7              A 19458    	LD	(IX+%FFFFFFD7),E
004C63 DD2FD4              A 19459    	LD	(IX+%FFFFFFD4),HL
004C66 DD27DC              A 19460    	LD	HL,(IX+%FFFFFFDC)
004C69 DD5EDF              A 19461    	LD	E,(IX+%FFFFFFDF)
004C6C DD07F1              A 19462    	LD	BC,(IX+%FFFFFFF1)
004C6F DD7EF4              A 19463    	LD	A,(IX+%FFFFFFF4)
004C72 CD 00 00 00         A 19464    	CALL	__ldivu
004C76 7B                  A 19465    	LD	A,E
004C77 E5C1                A 19466    	LD	BC,HL
004C79 DD5ED7              A 19467    	LD	E,(IX+%FFFFFFD7)
004C7C DD27D4              A 19468    	LD	HL,(IX+%FFFFFFD4)
004C7F CD 00 00 00         A 19469    	CALL	__lcmpu
004C83 38 4C               A 19470    	JR	C,L_974
                           A 19471    ; 4458					fp->fptr = (ifptr - 1) 
                           A 19472    .LINE 4458
                           A 19473    
004C85 DD27F1              A 19474    	LD	HL,(IX+%FFFFFFF1)
004C88 DD5EF4              A 19475    	LD	E,(IX+%FFFFFFF4)
004C8B 01010000            A 19476    	LD	BC,1
004C8F AF                  A 19477    	XOR	A,A
004C90 CD 00 00 00         A 19478    	CALL	__lsub
004C94 CD 00 00 00         A 19479    	CALL	__lnot
004C98 DD07DC              A 19480    	LD	BC,(IX+%FFFFFFDC)
004C9B DD7EDF              A 19481    	LD	A,(IX+%FFFFFFDF)
004C9E CD 00 00 00         A 19482    	CALL	__land
004CA2 DD3106              A 19483    	LD	IY,(IX+%6)
004CA5 FD2F11              A 19484    	LD	(IY+%11),HL
004CA8 FD7314              A 19485    	LD	(IY+%14),E
                           A 19486    ; 4459					ofs -= fp->fptr;
                           A 19487    .LINE 4459
                           A 19488    
004CAB DD2709              A 19489    	LD	HL,(IX+%9)
004CAE DD5E0C              A 19490    	LD	E,(IX+%C)
004CB1 FD0711              A 19491    	LD	BC,(IY+%11)
004CB4 FD7E14              A 19492    	LD	A,(IY+%14)
004CB7 CD 00 00 00         A 19493    	CALL	__lsub
004CBB DD2F09              A 19494    	LD	(IX+%9),HL
004CBE DD730C              A 19495    	LD	(IX+%C),E
                           A 19496    ; 4460					clst = fp->clust;
                           A 19497    .LINE 4460
                           A 19498    
004CC1 FD0715              A 19499    	LD	BC,(IY+%15)
004CC4 FD7E18              A 19500    	LD	A,(IY+%18)
004CC7 DD0FFC              A 19501    	LD	(IX+%FFFFFFFC),BC
004CCA DD77FF              A 19502    	LD	(IX+%FFFFFFFF),A
                           A 19503    ; 4461				} else {					
                           A 19504    .LINE 4461
                           A 19505    
004CCD C3 6B 4D 00         A 19506    	JR	L_993
004CD1                     A 19507    L_974:
                           A 19508    ; 4462					clst = fp->obj.sclust;	
                           A 19509    .LINE 4462
                           A 19510    
004CD1 DD3106              A 19511    	LD	IY,(IX+%6)
004CD4 ED0300              A 19512    	LEA	BC,IY+%0
004CD7 DD0FEB              A 19513    	LD	(IX+%FFFFFFEB),BC
004CDA DD31EB              A 19514    	LD	IY,(IX+%FFFFFFEB)
004CDD FD0707              A 19515    	LD	BC,(IY+%7)
004CE0 FD7E0A              A 19516    	LD	A,(IY+%A)
004CE3 DD0FFC              A 19517    	LD	(IX+%FFFFFFFC),BC
004CE6 DD77FF              A 19518    	LD	(IX+%FFFFFFFF),A
                           A 19519    ; 4463	#if !FF_FS_READONLY
                           A 19520    ; 4464					if (clst == 0) {		
                           A 19521    .LINE 4464
                           A 19522    
004CE9 C5E1                A 19523    	LD	HL,BC
004CEB DD5EFF              A 19524    	LD	E,(IX+%FFFFFFFF)
004CEE 01000000            A 19525    	LD	BC,0
004CF2 AF                  A 19526    	XOR	A,A
004CF3 CD 00 00 00         A 19527    	CALL	__lcmpu
004CF7 20 63               A 19528    	JR	NZ,L_972
                           A 19529    ; 4465						clst = create_chain
                           A 19530    .LINE 4465
                           A 19531    
004CF9 C5                  A 19532    	PUSH	BC
004CFA C5                  A 19533    	PUSH	BC
004CFB DD07EB              A 19534    	LD	BC,(IX+%FFFFFFEB)
004CFE C5                  A 19535    	PUSH	BC
004CFF CD 8E 0D 00         A 19536    	CALL	_create_chain
004D03 C1                  A 19537    	POP	BC
004D04 C1                  A 19538    	POP	BC
004D05 C1                  A 19539    	POP	BC
004D06 DD2FFC              A 19540    	LD	(IX+%FFFFFFFC),HL
004D09 DD73FF              A 19541    	LD	(IX+%FFFFFFFF),E
                           A 19542    ; 4466						if (clst == 1) ABOR
                           A 19543    .LINE 4466
                           A 19544    
004D0C DD27FC              A 19545    	LD	HL,(IX+%FFFFFFFC)
004D0F DD5EFF              A 19546    	LD	E,(IX+%FFFFFFFF)
004D12 01010000            A 19547    	LD	BC,1
004D16 AF                  A 19548    	XOR	A,A
004D17 CD 00 00 00         A 19549    	CALL	__lcmpu
004D1B 20 0F               A 19550    	JR	NZ,L_968
004D1D DD3106              A 19551    	LD	IY,(IX+%6)
004D20 FD361002            A 19552    	LD	(IY+%10),%2
004D24 21020000            A 19553    	LD	HL,2
004D28 C3 36 50 00         A 19554    	JR	L_1008
004D2C                     A 19555    L_968:
                           A 19556    ; 4467						if (clst == 0xFFFFF
                           A 19557    .LINE 4467
                           A 19558    
004D2C DD27FC              A 19559    	LD	HL,(IX+%FFFFFFFC)
004D2F DD5EFF              A 19560    	LD	E,(IX+%FFFFFFFF)
004D32 01FFFFFF            A 19561    	LD	BC,16777215
004D36 3EFF                A 19562    	LD	A,%FF
004D38 CD 00 00 00         A 19563    	CALL	__lcmpu
004D3C 20 0F               A 19564    	JR	NZ,L_970
004D3E DD3106              A 19565    	LD	IY,(IX+%6)
004D41 FD361001            A 19566    	LD	(IY+%10),%1
004D45 21010000            A 19567    	LD	HL,1
004D49 C3 36 50 00         A 19568    	JR	L_1008
004D4D                     A 19569    L_970:
                           A 19570    ; 4468						fp->obj.sclust = cl
                           A 19571    .LINE 4468
                           A 19572    
004D4D DD07FC              A 19573    	LD	BC,(IX+%FFFFFFFC)
004D50 DD7EFF              A 19574    	LD	A,(IX+%FFFFFFFF)
004D53 DD3106              A 19575    	LD	IY,(IX+%6)
004D56 FD0F07              A 19576    	LD	(IY+%7),BC
004D59 FD770A              A 19577    	LD	(IY+%A),A
                           A 19578    ; 4469					}
004D5C                     A 19579    L_972:
                           A 19580    .LINE 4469
                           A 19581    
                           A 19582    ; 4470	#endif
                           A 19583    ; 4471					fp->clust = clst;
                           A 19584    .LINE 4471
                           A 19585    
004D5C DD07FC              A 19586    	LD	BC,(IX+%FFFFFFFC)
004D5F DD7EFF              A 19587    	LD	A,(IX+%FFFFFFFF)
004D62 DD3106              A 19588    	LD	IY,(IX+%6)
004D65 FD0F15              A 19589    	LD	(IY+%15),BC
004D68 FD7718              A 19590    	LD	(IY+%18),A
                           A 19591    ; 4472				}
004D6B                     A 19592    L_993:
                           A 19593    .LINE 4472
                           A 19594    
                           A 19595    ; 4473				if (clst != 0) {
                           A 19596    .LINE 4473
                           A 19597    
004D6B DD27FC              A 19598    	LD	HL,(IX+%FFFFFFFC)
004D6E DD5EFF              A 19599    	LD	E,(IX+%FFFFFFFF)
004D71 01000000            A 19600    	LD	BC,0
004D75 AF                  A 19601    	XOR	A,A
004D76 CD 00 00 00         A 19602    	CALL	__lcmpu
004D7A C2 74 4E 00         A 19603    	JR	NZ,L_986
004D7E C3 15 4F 00         A 19604    	JR	L_996
                           A 19605    ; 4474					while (ofs > bcs) {		
004D82                     A 19606    L_987:
                           A 19607    .LINE 4474
                           A 19608    
                           A 19609    ; 4475						ofs -= bcs; fp->fpt
                           A 19610    .LINE 4475
                           A 19611    
004D82 DD2709              A 19612    	LD	HL,(IX+%9)
004D85 DD5E0C              A 19613    	LD	E,(IX+%C)
004D88 DD07F1              A 19614    	LD	BC,(IX+%FFFFFFF1)
004D8B DD7EF4              A 19615    	LD	A,(IX+%FFFFFFF4)
004D8E CD 00 00 00         A 19616    	CALL	__lsub
004D92 DD2F09              A 19617    	LD	(IX+%9),HL
004D95 DD730C              A 19618    	LD	(IX+%C),E
004D98 DD3106              A 19619    	LD	IY,(IX+%6)
004D9B FD2711              A 19620    	LD	HL,(IY+%11)
004D9E FD5E14              A 19621    	LD	E,(IY+%14)
004DA1 DD07F1              A 19622    	LD	BC,(IX+%FFFFFFF1)
004DA4 DD7EF4              A 19623    	LD	A,(IX+%FFFFFFF4)
004DA7 CD 00 00 00         A 19624    	CALL	__ladd
004DAB FD2F11              A 19625    	LD	(IY+%11),HL
004DAE FD7314              A 19626    	LD	(IY+%14),E
                           A 19627    ; 4476	#if !FF_FS_READONLY
                           A 19628    ; 4477						if (fp->flag & FA_W
                           A 19629    .LINE 4477
                           A 19630    
004DB1 FD7E0F              A 19631    	LD	A,(IY+%F)
004DB4 E602                A 19632    	AND	A,%2
004DB6 28 39               A 19633    	JR	Z,L_979
                           A 19634    ; 4478							if (FF_FS_EXFAT
                           A 19635    ; 4479								fp->obj.obj
                           A 19636    ; 4480								fp->flag |=
                           A 19637    ; 4481							}
                           A 19638    ; 4482							clst = create_c
                           A 19639    .LINE 4482
                           A 19640    
004DB8 DD4EFF              A 19641    	LD	C,(IX+%FFFFFFFF)
004DBB 0600                A 19642    	LD	B,%0
004DBD C5                  A 19643    	PUSH	BC
004DBE DD07FC              A 19644    	LD	BC,(IX+%FFFFFFFC)
004DC1 C5                  A 19645    	PUSH	BC
004DC2 DD3106              A 19646    	LD	IY,(IX+%6)
004DC5 ED6600              A 19647    	PEA	IY+%0
004DC8 CD 8E 0D 00         A 19648    	CALL	_create_chain
004DCC C1                  A 19649    	POP	BC
004DCD C1                  A 19650    	POP	BC
004DCE C1                  A 19651    	POP	BC
004DCF DD2FFC              A 19652    	LD	(IX+%FFFFFFFC),HL
004DD2 DD73FF              A 19653    	LD	(IX+%FFFFFFFF),E
                           A 19654    ; 4483							if (clst == 0) 
                           A 19655    .LINE 4483
                           A 19656    
004DD5 DD27FC              A 19657    	LD	HL,(IX+%FFFFFFFC)
004DD8 DD5EFF              A 19658    	LD	E,(IX+%FFFFFFFF)
004DDB 01000000            A 19659    	LD	BC,0
004DDF AF                  A 19660    	XOR	A,A
004DE0 CD 00 00 00         A 19661    	CALL	__lcmpu
004DE4 20 28               A 19662    	JR	NZ,L_981
                           A 19663    ; 4484								ofs = 0; br
                           A 19664    .LINE 4484
                           A 19665    
004DE6 AF                  A 19666    	XOR	A,A
004DE7 DD0F09              A 19667    	LD	(IX+%9),BC
004DEA DD770C              A 19668    	LD	(IX+%C),A
004DED C3 88 4E 00         A 19669    	JR	L_988
                           A 19670    ; 4485							}
                           A 19671    ; 4486						} else
004DF1                     A 19672    L_979:
                           A 19673    .LINE 4486
                           A 19674    
                           A 19675    ; 4487	#endif
                           A 19676    ; 4488						{
                           A 19677    ; 4489							clst = get_fat(
                           A 19678    .LINE 4489
                           A 19679    
004DF1 DD4EFF              A 19680    	LD	C,(IX+%FFFFFFFF)
004DF4 0600                A 19681    	LD	B,%0
004DF6 C5                  A 19682    	PUSH	BC
004DF7 DD07FC              A 19683    	LD	BC,(IX+%FFFFFFFC)
004DFA C5                  A 19684    	PUSH	BC
004DFB DD3106              A 19685    	LD	IY,(IX+%6)
004DFE ED6600              A 19686    	PEA	IY+%0
004E01 CD 64 06 00         A 19687    	CALL	_get_fat
004E05 C1                  A 19688    	POP	BC
004E06 C1                  A 19689    	POP	BC
004E07 C1                  A 19690    	POP	BC
004E08 DD2FFC              A 19691    	LD	(IX+%FFFFFFFC),HL
004E0B DD73FF              A 19692    	LD	(IX+%FFFFFFFF),E
                           A 19693    ; 4490						}
004E0E                     A 19694    L_981:
                           A 19695    .LINE 4490
                           A 19696    
                           A 19697    ; 4491						if (clst == 0xFFFFF
                           A 19698    .LINE 4491
                           A 19699    
004E0E DD27FC              A 19700    	LD	HL,(IX+%FFFFFFFC)
004E11 DD5EFF              A 19701    	LD	E,(IX+%FFFFFFFF)
004E14 01FFFFFF            A 19702    	LD	BC,16777215
004E18 3EFF                A 19703    	LD	A,%FF
004E1A CD 00 00 00         A 19704    	CALL	__lcmpu
004E1E 20 0F               A 19705    	JR	NZ,L_982
004E20 DD3106              A 19706    	LD	IY,(IX+%6)
004E23 FD361001            A 19707    	LD	(IY+%10),%1
004E27 21010000            A 19708    	LD	HL,1
004E2B C3 36 50 00         A 19709    	JR	L_1008
004E2F                     A 19710    L_982:
                           A 19711    ; 4492						if (clst <= 1 || cl
                           A 19712    .LINE 4492
                           A 19713    
004E2F 21010000            A 19714    	LD	HL,1
004E33 1E00                A 19715    	LD	E,%0
004E35 DD07FC              A 19716    	LD	BC,(IX+%FFFFFFFC)
004E38 DD7EFF              A 19717    	LD	A,(IX+%FFFFFFFF)
004E3B CD 00 00 00         A 19718    	CALL	__lcmpu
004E3F 30 15               A 19719    	JR	NC,L_984
004E41 DD27FC              A 19720    	LD	HL,(IX+%FFFFFFFC)
004E44 DD5EFF              A 19721    	LD	E,(IX+%FFFFFFFF)
004E47 DD31EE              A 19722    	LD	IY,(IX+%FFFFFFEE)
004E4A FD0716              A 19723    	LD	BC,(IY+%16)
004E4D FD7E19              A 19724    	LD	A,(IY+%19)
004E50 CD 00 00 00         A 19725    	CALL	__lcmpu
004E54 38 0F               A 19726    	JR	C,L_985
004E56                     A 19727    L_984:
004E56 DD3106              A 19728    	LD	IY,(IX+%6)
004E59 FD361002            A 19729    	LD	(IY+%10),%2
004E5D 21020000            A 19730    	LD	HL,2
004E61 C3 36 50 00         A 19731    	JR	L_1008
004E65                     A 19732    L_985:
                           A 19733    ; 4493						fp->clust = clst;
                           A 19734    .LINE 4493
                           A 19735    
004E65 DD07FC              A 19736    	LD	BC,(IX+%FFFFFFFC)
004E68 DD7EFF              A 19737    	LD	A,(IX+%FFFFFFFF)
004E6B DD3106              A 19738    	LD	IY,(IX+%6)
004E6E FD0F15              A 19739    	LD	(IY+%15),BC
004E71 FD7718              A 19740    	LD	(IY+%18),A
                           A 19741    ; 4494					}
004E74                     A 19742    L_986:
                           A 19743    .LINE 4494
                           A 19744    
004E74 DD27F1              A 19745    	LD	HL,(IX+%FFFFFFF1)
004E77 DD5EF4              A 19746    	LD	E,(IX+%FFFFFFF4)
004E7A DD0709              A 19747    	LD	BC,(IX+%9)
004E7D DD7E0C              A 19748    	LD	A,(IX+%C)
004E80 CD 00 00 00         A 19749    	CALL	__lcmpu
004E84 DA 82 4D 00         A 19750    	JR	C,L_987
004E88                     A 19751    L_988:
                           A 19752    ; 4495					fp->fptr += ofs;
                           A 19753    .LINE 4495
                           A 19754    
004E88 DD3106              A 19755    	LD	IY,(IX+%6)
004E8B FD2711              A 19756    	LD	HL,(IY+%11)
004E8E FD5E14              A 19757    	LD	E,(IY+%14)
004E91 DD0709              A 19758    	LD	BC,(IX+%9)
004E94 DD7E0C              A 19759    	LD	A,(IX+%C)
004E97 CD 00 00 00         A 19760    	CALL	__ladd
004E9B FD2F11              A 19761    	LD	(IY+%11),HL
004E9E FD7314              A 19762    	LD	(IY+%14),E
                           A 19763    ; 4496					if (ofs % SS(fs)) {
                           A 19764    .LINE 4496
                           A 19765    
004EA1 DD2709              A 19766    	LD	HL,(IX+%9)
004EA4 DD5E0C              A 19767    	LD	E,(IX+%C)
004EA7 01FF0100            A 19768    	LD	BC,511
004EAB AF                  A 19769    	XOR	A,A
004EAC CD 00 00 00         A 19770    	CALL	__land
004EB0 01000000            A 19771    	LD	BC,0
004EB4 AF                  A 19772    	XOR	A,A
004EB5 CD 00 00 00         A 19773    	CALL	__lcmpu
004EB9 28 5A               A 19774    	JR	Z,L_996
                           A 19775    ; 4497						nsect = clst2sect(f
                           A 19776    .LINE 4497
                           A 19777    
004EBB DD4EFF              A 19778    	LD	C,(IX+%FFFFFFFF)
004EBE 0600                A 19779    	LD	B,%0
004EC0 C5                  A 19780    	PUSH	BC
004EC1 DD07FC              A 19781    	LD	BC,(IX+%FFFFFFFC)
004EC4 C5                  A 19782    	PUSH	BC
004EC5 DD07EE              A 19783    	LD	BC,(IX+%FFFFFFEE)
004EC8 C5                  A 19784    	PUSH	BC
004EC9 CD F9 05 00         A 19785    	CALL	_clst2sect
004ECD C1                  A 19786    	POP	BC
004ECE C1                  A 19787    	POP	BC
004ECF C1                  A 19788    	POP	BC
004ED0 DD2FF8              A 19789    	LD	(IX+%FFFFFFF8),HL
004ED3 DD73FB              A 19790    	LD	(IX+%FFFFFFFB),E
                           A 19791    ; 4498						if (nsect == 0) ABO
                           A 19792    .LINE 4498
                           A 19793    
004ED6 DD27F8              A 19794    	LD	HL,(IX+%FFFFFFF8)
004ED9 DD5EFB              A 19795    	LD	E,(IX+%FFFFFFFB)
004EDC 01000000            A 19796    	LD	BC,0
004EE0 AF                  A 19797    	XOR	A,A
004EE1 CD 00 00 00         A 19798    	CALL	__lcmpu
004EE5 20 0F               A 19799    	JR	NZ,L_990
004EE7 DD3106              A 19800    	LD	IY,(IX+%6)
004EEA FD361002            A 19801    	LD	(IY+%10),%2
004EEE 21020000            A 19802    	LD	HL,2
004EF2 C3 36 50 00         A 19803    	JR	L_1008
004EF6                     A 19804    L_990:
                           A 19805    ; 4499						nsect += (DWORD)(of
                           A 19806    .LINE 4499
                           A 19807    
004EF6 DD0709              A 19808    	LD	BC,(IX+%9)
004EF9 DD7E0C              A 19809    	LD	A,(IX+%C)
004EFC 2E09                A 19810    	LD	L,%9
004EFE CD 00 00 00         A 19811    	CALL	__lshru
004F02 5F                  A 19812    	LD	E,A
004F03 C5E1                A 19813    	LD	HL,BC
004F05 DD07F8              A 19814    	LD	BC,(IX+%FFFFFFF8)
004F08 DD7EFB              A 19815    	LD	A,(IX+%FFFFFFFB)
004F0B CD 00 00 00         A 19816    	CALL	__ladd
004F0F DD2FF8              A 19817    	LD	(IX+%FFFFFFF8),HL
004F12 DD73FB              A 19818    	LD	(IX+%FFFFFFFB),E
                           A 19819    ; 4500					}
                           A 19820    ; 4501				}
                           A 19821    ; 4502			}
004F15                     A 19822    L_996:
                           A 19823    .LINE 4502
                           A 19824    
                           A 19825    ; 4503			if (!FF_FS_READONLY && fp->fptr
                           A 19826    .LINE 4503
                           A 19827    
004F15 DD3106              A 19828    	LD	IY,(IX+%6)
004F18 ED0300              A 19829    	LEA	BC,IY+%0
004F1B DD0FE8              A 19830    	LD	(IX+%FFFFFFE8),BC
004F1E FD0711              A 19831    	LD	BC,(IY+%11)
004F21 FD7E14              A 19832    	LD	A,(IY+%14)
004F24 DD0FE0              A 19833    	LD	(IX+%FFFFFFE0),BC
004F27 DD77E3              A 19834    	LD	(IX+%FFFFFFE3),A
004F2A DD31E8              A 19835    	LD	IY,(IX+%FFFFFFE8)
004F2D FD270B              A 19836    	LD	HL,(IY+%B)
004F30 FD5E0E              A 19837    	LD	E,(IY+%E)
004F33 DD7EE3              A 19838    	LD	A,(IX+%FFFFFFE3)
004F36 CD 00 00 00         A 19839    	CALL	__lcmpu
004F3A 30 1A               A 19840    	JR	NC,L_1005
                           A 19841    ; 4504				fp->obj.objsize = fp->fptr;
                           A 19842    .LINE 4504
                           A 19843    
004F3C DD07E0              A 19844    	LD	BC,(IX+%FFFFFFE0)
004F3F DD7EE3              A 19845    	LD	A,(IX+%FFFFFFE3)
004F42 DD31E8              A 19846    	LD	IY,(IX+%FFFFFFE8)
004F45 FD0F0B              A 19847    	LD	(IY+%B),BC
004F48 FD770E              A 19848    	LD	(IY+%E),A
                           A 19849    ; 4505				fp->flag |= FA_MODIFIED;
                           A 19850    .LINE 4505
                           A 19851    
004F4B DD3106              A 19852    	LD	IY,(IX+%6)
004F4E FD7E0F              A 19853    	LD	A,(IY+%F)
004F51 CBF7                A 19854    	SET	%6,A
004F53 FD770F              A 19855    	LD	(IY+%F),A
                           A 19856    ; 4506			}
004F56                     A 19857    L_1005:
                           A 19858    .LINE 4506
                           A 19859    
                           A 19860    ; 4507			if (fp->fptr % SS(fs) && nsect 
                           A 19861    .LINE 4507
                           A 19862    
004F56 DD3106              A 19863    	LD	IY,(IX+%6)
004F59 FD2711              A 19864    	LD	HL,(IY+%11)
004F5C FD5E14              A 19865    	LD	E,(IY+%14)
004F5F 01FF0100            A 19866    	LD	BC,511
004F63 AF                  A 19867    	XOR	A,A
004F64 CD 00 00 00         A 19868    	CALL	__land
004F68 01000000            A 19869    	LD	BC,0
004F6C AF                  A 19870    	XOR	A,A
004F6D CD 00 00 00         A 19871    	CALL	__lcmpu
004F71 CA 33 50 00         A 19872    	JR	Z,L_1007
004F75 DD3106              A 19873    	LD	IY,(IX+%6)
004F78 FD0719              A 19874    	LD	BC,(IY+%19)
004F7B FD7E1C              A 19875    	LD	A,(IY+%1C)
004F7E DD0FD8              A 19876    	LD	(IX+%FFFFFFD8),BC
004F81 DD77DB              A 19877    	LD	(IX+%FFFFFFDB),A
004F84 DD27F8              A 19878    	LD	HL,(IX+%FFFFFFF8)
004F87 DD5EFB              A 19879    	LD	E,(IX+%FFFFFFFB)
004F8A DD7EDB              A 19880    	LD	A,(IX+%FFFFFFDB)
004F8D CD 00 00 00         A 19881    	CALL	__lcmpu
004F91 CA 33 50 00         A 19882    	JR	Z,L_1007
                           A 19883    ; 4508	#if !FF_FS_TINY
                           A 19884    ; 4509	#if !FF_FS_READONLY
                           A 19885    ; 4510				if (fp->flag & FA_DIRTY) {	
                           A 19886    .LINE 4510
                           A 19887    
004F95 DD3106              A 19888    	LD	IY,(IX+%6)
004F98 FD7E0F              A 19889    	LD	A,(IY+%F)
004F9B E680                A 19890    	AND	A,%80
004F9D 28 48               A 19891    	JR	Z,L_1002
                           A 19892    ; 4511					if (disk_write(fs->pdrv
                           A 19893    .LINE 4511
                           A 19894    
004F9F 01010000            A 19895    	LD	BC,1
004FA3 C5                  A 19896    	PUSH	BC
004FA4 DD4EDB              A 19897    	LD	C,(IX+%FFFFFFDB)
004FA7 0600                A 19898    	LD	B,%0
004FA9 C5                  A 19899    	PUSH	BC
004FAA DD07D8              A 19900    	LD	BC,(IX+%FFFFFFD8)
004FAD C5                  A 19901    	PUSH	BC
004FAE DD3106              A 19902    	LD	IY,(IX+%6)
004FB1 ED6624              A 19903    	PEA	IY+%24
004FB4 DD31EE              A 19904    	LD	IY,(IX+%FFFFFFEE)
004FB7 FD4E01              A 19905    	LD	C,(IY+%1)
004FBA 0600                A 19906    	LD	B,%0
004FBC C5                  A 19907    	PUSH	BC
004FBD CD 00 00 00         A 19908    	CALL	_disk_write
004FC1 C1                  A 19909    	POP	BC
004FC2 C1                  A 19910    	POP	BC
004FC3 C1                  A 19911    	POP	BC
004FC4 C1                  A 19912    	POP	BC
004FC5 C1                  A 19913    	POP	BC
004FC6 01000000            A 19914    	LD	BC,0
004FCA B7                  A 19915    	OR	A,A
004FCB ED42                A 19916    	SBC	HL,BC
004FCD 28 0D               A 19917    	JR	Z,L_999
004FCF DD3106              A 19918    	LD	IY,(IX+%6)
004FD2 FD361001            A 19919    	LD	(IY+%10),%1
004FD6 21010000            A 19920    	LD	HL,1
004FDA 18 5A               A 19921    	JR	L_1008
004FDC                     A 19922    L_999:
                           A 19923    ; 4512					fp->flag &= (BYTE)~FA_D
                           A 19924    .LINE 4512
                           A 19925    
004FDC DD3106              A 19926    	LD	IY,(IX+%6)
004FDF FD7E0F              A 19927    	LD	A,(IY+%F)
004FE2 CBBF                A 19928    	RES	%7,A
004FE4 FD770F              A 19929    	LD	(IY+%F),A
                           A 19930    ; 4513				}
004FE7                     A 19931    L_1002:
                           A 19932    .LINE 4513
                           A 19933    
                           A 19934    ; 4514	#endif
                           A 19935    ; 4515				if (disk_read(fs->pdrv, fp-
                           A 19936    .LINE 4515
                           A 19937    
004FE7 01010000            A 19938    	LD	BC,1
004FEB C5                  A 19939    	PUSH	BC
004FEC DD4EFB              A 19940    	LD	C,(IX+%FFFFFFFB)
004FEF 0600                A 19941    	LD	B,%0
004FF1 C5                  A 19942    	PUSH	BC
004FF2 DD07F8              A 19943    	LD	BC,(IX+%FFFFFFF8)
004FF5 C5                  A 19944    	PUSH	BC
004FF6 DD3106              A 19945    	LD	IY,(IX+%6)
004FF9 ED6624              A 19946    	PEA	IY+%24
004FFC DD31EE              A 19947    	LD	IY,(IX+%FFFFFFEE)
004FFF FD4E01              A 19948    	LD	C,(IY+%1)
005002 0600                A 19949    	LD	B,%0
005004 C5                  A 19950    	PUSH	BC
005005 CD 00 00 00         A 19951    	CALL	_disk_read
005009 C1                  A 19952    	POP	BC
00500A C1                  A 19953    	POP	BC
00500B C1                  A 19954    	POP	BC
00500C C1                  A 19955    	POP	BC
00500D C1                  A 19956    	POP	BC
00500E 01000000            A 19957    	LD	BC,0
005012 B7                  A 19958    	OR	A,A
005013 ED42                A 19959    	SBC	HL,BC
005015 28 0D               A 19960    	JR	Z,L_1003
005017 DD3106              A 19961    	LD	IY,(IX+%6)
00501A FD361001            A 19962    	LD	(IY+%10),%1
00501E 21010000            A 19963    	LD	HL,1
005022 18 12               A 19964    	JR	L_1008
005024                     A 19965    L_1003:
                           A 19966    ; 4516	#endif
                           A 19967    ; 4517				fp->sect = nsect;
                           A 19968    .LINE 4517
                           A 19969    
005024 DD07F8              A 19970    	LD	BC,(IX+%FFFFFFF8)
005027 DD7EFB              A 19971    	LD	A,(IX+%FFFFFFFB)
00502A DD3106              A 19972    	LD	IY,(IX+%6)
00502D FD0F19              A 19973    	LD	(IY+%19),BC
005030 FD771C              A 19974    	LD	(IY+%1C),A
                           A 19975    ; 4518			}
                           A 19976    ; 4519		}
005033                     A 19977    L_1007:
                           A 19978    .LINE 4519
                           A 19979    
                           A 19980    ; 4520	
                           A 19981    ; 4521		LEAVE_FF(fs, res);
                           A 19982    .LINE 4521
                           A 19983    
005033 DD27F5              A 19984    	LD	HL,(IX+%FFFFFFF5)
                           A 19985    ; 4522	}
005036                     A 19986    L_1008:
                           A 19987    .LINE 4522
                           A 19988    
005036 DDF9                A 19989    	LD	SP,IX
005038 DDE1                A 19990    	POP	IX
00503A C9                  A 19991    	RET	
                           A 19992    
                           A 19993    
                           A 19994    ;**************************** _f_lseek ********
                           A 19995    ;Name                         Addr/Register   S
                           A 19996    ;_disk_read                          IMPORT  --
                           A 19997    ;_disk_write                         IMPORT  --
                           A 19998    ;G_84                                 IX-40    
                           A 19999    ;G_80                                 IX-36    
                           A 20000    ;G_83                                 IX-32    
                           A 20001    ;ifptr                                IX-28    
                           A 20002    ;G_82                                 IX-24    
                           A 20003    ;G_81                                 IX-21    
                           A 20004    ;fs                                   IX-18    
                           A 20005    ;bcs                                  IX-15    
                           A 20006    ;res                                  IX-11    
                           A 20007    ;nsect                                 IX-8    
                           A 20008    ;clst                                  IX-4    
                           A 20009    ;ofs                                   IX+9    
                           A 20010    ;fp                                    IX+6    
                           A 20011    
                           A 20012    
                           A 20013    ; Stack Frame Size: 59 (bytes)
                           A 20014    ;       Spill Code: -3 (instruction)
                           A 20015    
                           A 20016    
                           A 20017    .ENDFUNC "f_lseek",4522,"_f_lseek"
                           A 20018    ; 4523	
                           A 20019    ; 4524	
                           A 20020    ; 4525	
                           A 20021    ; 4526	#if FF_FS_MINIMIZE <= 1
                           A 20022    ; 4527	/*-------------------------------------
                           A 20023    ; 4528	/* Create a Directory Object           
                           A 20024    ; 4529	/*-------------------------------------
                           A 20025    ; 4530	
                           A 20026    ; 4531	FRESULT f_opendir (
                           A 20027    ; 4532		DIR* dp,			/* Pointer to d
                           A 20028    ; 4533		const TCHAR* path	/* Pointer to t
                           A 20029    ; 4534	)
                           A 20030    ; 4535	{
00503B                     A 20031    _f_opendir:
                           A 20032    .DEFINE "_f_opendir"
                           A 20033    
                           A 20034    .VALUE _f_opendir
                           A 20035    
                           A 20036    .CLASS 2
                           A 20037    
                           A 20038    .TYPE 68
                           A 20039    
                           A 20040    .ENDEF
                           A 20041    
                           A 20042    .BEGFUNC "f_opendir",4535,"_f_opendir"
                           A 20043    
                           A 20044    .LINE 4535
                           A 20045    
                           A 20046    .DEFINE "dp"
                           A 20047    
                           A 20048    .CLASS 65
                           A 20049    
                           A 20050    .VALUE 6
                           A 20051    
                           A 20052    .TAG "NONAME3"
                           A 20053    
                           A 20054    .TYPE 40
                           A 20055    
                           A 20056    .ENDEF
                           A 20057    
                           A 20058    .DEFINE "path"
                           A 20059    
                           A 20060    .CLASS 65
                           A 20061    
                           A 20062    .VALUE 9
                           A 20063    
                           A 20064    .TYPE 194
                           A 20065    
                           A 20066    .ENDEF
                           A 20067    
                           A 20068    .DEFINE "res"
                           A 20069    
                           A 20070    .CLASS 65
                           A 20071    
                           A 20072    .VALUE -3
                           A 20073    
                           A 20074    .TYPE 4
                           A 20075    
                           A 20076    .ENDEF
                           A 20077    
                           A 20078    .DEFINE "fs"
                           A 20079    
                           A 20080    .CLASS 65
                           A 20081    
                           A 20082    .VALUE -6
                           A 20083    
                           A 20084    .TAG "NONAME0"
                           A 20085    
                           A 20086    .TYPE 40
                           A 20087    
                           A 20088    .ENDEF
                           A 20089    
                           A 20090    .DEFINE "lbuf"
                           A 20091    
                           A 20092    .CLASS 65
                           A 20093    
                           A 20094    .VALUE -518
                           A 20095    
                           A 20096    .DIM 256
                           A 20097    
                           A 20098    .TYPE 109
                           A 20099    
                           A 20100    .ENDEF
                           A 20101    
00503B DDE5                A 20102    	PUSH	IX
00503D DD210000 00         A 20103    	LD	IX,0
005042 DD39                A 20104    	ADD	IX,SP
005044 21FAFDFF            A 20105    	LD	HL,-518
005048 39                  A 20106    	ADD	HL,SP
005049 F9                  A 20107    	LD	SP,HL
                           A 20108    ; 4536		FRESULT res;
                           A 20109    ; 4537		FATFS *fs;
                           A 20110    ; 4538		DEF_NAMBUF
                           A 20111    ; 4539	
                           A 20112    ; 4540	
                           A 20113    ; 4541		if (!dp) return FR_INVALID_OBJECT;
                           A 20114    .LINE 4541
                           A 20115    
00504A 01000000            A 20116    	LD	BC,0
00504E DD2706              A 20117    	LD	HL,(IX+%6)
005051 B7                  A 20118    	OR	A,A
005052 ED42                A 20119    	SBC	HL,BC
005054 20 08               A 20120    	JR	NZ,L_1010
005056 21090000            A 20121    	LD	HL,9
00505A C3 3F 51 00         A 20122    	JR	L_1023
00505E                     A 20123    L_1010:
                           A 20124    ; 4542	
                           A 20125    ; 4543		/* Get logical drive */
                           A 20126    ; 4544		res = mount_volume(&path, &fs, 0);
                           A 20127    .LINE 4544
                           A 20128    
00505E C5                  A 20129    	PUSH	BC
00505F ED65FA              A 20130    	PEA	IX+%FFFFFFFA
005062 ED6509              A 20131    	PEA	IX+%9
005065 CD 6E 33 00         A 20132    	CALL	_mount_volume
005069 C1                  A 20133    	POP	BC
00506A C1                  A 20134    	POP	BC
00506B C1                  A 20135    	POP	BC
00506C DD2FFD              A 20136    	LD	(IX+%FFFFFFFD),HL
                           A 20137    ; 4545		if (res == FR_OK) {
                           A 20138    .LINE 4545
                           A 20139    
00506F 01000000            A 20140    	LD	BC,0
005073 DD27FD              A 20141    	LD	HL,(IX+%FFFFFFFD)
005076 B7                  A 20142    	OR	A,A
005077 ED42                A 20143    	SBC	HL,BC
005079 C2 2A 51 00         A 20144    	JR	NZ,L_1021
                           A 20145    ; 4546			dp->obj.fs = fs;
                           A 20146    .LINE 4546
                           A 20147    
00507D DD07FA              A 20148    	LD	BC,(IX+%FFFFFFFA)
005080 DD3106              A 20149    	LD	IY,(IX+%6)
005083 FD0F00              A 20150    	LD	(IY+%0),BC
                           A 20151    ; 4547			INIT_NAMBUF(fs);
                           A 20152    .LINE 4547
                           A 20153    
005086 DDE5E1              A 20154    	LD	HL,IX
005089 01FAFDFF            A 20155    	LD	BC,-518
00508D 09                  A 20156    	ADD	HL,BC
00508E DD31FA              A 20157    	LD	IY,(IX+%FFFFFFFA)
005091 FD2F0B              A 20158    	LD	(IY+%B),HL
                           A 20159    ; 4548			res = follow_path(dp, path);	
                           A 20160    .LINE 4548
                           A 20161    
005094 DD0709              A 20162    	LD	BC,(IX+%9)
005097 C5                  A 20163    	PUSH	BC
005098 DD0706              A 20164    	LD	BC,(IX+%6)
00509B C5                  A 20165    	PUSH	BC
00509C CD 00 2E 00         A 20166    	CALL	_follow_path
0050A0 C1                  A 20167    	POP	BC
0050A1 C1                  A 20168    	POP	BC
0050A2 DD2FFD              A 20169    	LD	(IX+%FFFFFFFD),HL
                           A 20170    ; 4549			if (res == FR_OK) {				
                           A 20171    .LINE 4549
                           A 20172    
0050A5 01000000            A 20173    	LD	BC,0
0050A9 DD27FD              A 20174    	LD	HL,(IX+%FFFFFFFD)
0050AC B7                  A 20175    	OR	A,A
0050AD ED42                A 20176    	SBC	HL,BC
0050AF 20 66               A 20177    	JR	NZ,L_1017
                           A 20178    ; 4550				if (!(dp->fn[NSFLAG] & NS_N
                           A 20179    .LINE 4550
                           A 20180    
0050B1 DD3106              A 20181    	LD	IY,(IX+%6)
0050B4 FD7E29              A 20182    	LD	A,(IY+%29)
0050B7 E680                A 20183    	AND	A,%80
0050B9 20 2D               A 20184    	JR	NZ,L_1015
                           A 20185    ; 4551					if (dp->obj.attr & AM_D
                           A 20186    .LINE 4551
                           A 20187    
0050BB DD3106              A 20188    	LD	IY,(IX+%6)
0050BE FD7E05              A 20189    	LD	A,(IY+%5)
0050C1 E610                A 20190    	AND	A,%10
0050C3 28 1C               A 20191    	JR	Z,L_1012
                           A 20192    ; 4552	#if FF_FS_EXFAT
                           A 20193    ; 4553						if (fs->fs_type == 
                           A 20194    ; 4554							dp->obj.c_scl =
                           A 20195    ; 4555							dp->obj.c_size 
                           A 20196    ; 4556							dp->obj.c_ofs =
                           A 20197    ; 4557							init_alloc_info
                           A 20198    ; 4558						} else
                           A 20199    ; 4559	#endif
                           A 20200    ; 4560						{
                           A 20201    ; 4561							dp->obj.sclust 
                           A 20202    .LINE 4561
                           A 20203    
0050C5 DD3106              A 20204    	LD	IY,(IX+%6)
0050C8 FD071B              A 20205    	LD	BC,(IY+%1B)
0050CB C5                  A 20206    	PUSH	BC
0050CC DD07FA              A 20207    	LD	BC,(IX+%FFFFFFFA)
0050CF C5                  A 20208    	PUSH	BC
0050D0 CD EE 17 00         A 20209    	CALL	_ld_clust
0050D4 C1                  A 20210    	POP	BC
0050D5 C1                  A 20211    	POP	BC
0050D6 DD3106              A 20212    	LD	IY,(IX+%6)
0050D9 FD2F07              A 20213    	LD	(IY+%7),HL
0050DC FD730A              A 20214    	LD	(IY+%A),E
                           A 20215    ; 4562						}
                           A 20216    ; 4563					} else {				
                           A 20217    .LINE 4563
                           A 20218    
0050DF 18 07               A 20219    	JR	L_1015
0050E1                     A 20220    L_1012:
                           A 20221    ; 4564						res = FR_NO_PATH;
                           A 20222    .LINE 4564
                           A 20223    
0050E1 01050000            A 20224    	LD	BC,5
0050E5 DD0FFD              A 20225    	LD	(IX+%FFFFFFFD),BC
                           A 20226    ; 4565					}
                           A 20227    ; 4566				}
0050E8                     A 20228    L_1015:
                           A 20229    .LINE 4566
                           A 20230    
                           A 20231    ; 4567				if (res == FR_OK) {
                           A 20232    .LINE 4567
                           A 20233    
0050E8 01000000            A 20234    	LD	BC,0
0050EC DD27FD              A 20235    	LD	HL,(IX+%FFFFFFFD)
0050EF B7                  A 20236    	OR	A,A
0050F0 ED42                A 20237    	SBC	HL,BC
0050F2 20 23               A 20238    	JR	NZ,L_1017
                           A 20239    ; 4568					dp->obj.id = fs->id;
                           A 20240    .LINE 4568
                           A 20241    
0050F4 DD31FA              A 20242    	LD	IY,(IX+%FFFFFFFA)
0050F7 FD0705              A 20243    	LD	BC,(IY+%5)
0050FA DD3106              A 20244    	LD	IY,(IX+%6)
0050FD FD7103              A 20245    	LD	(IY+%3),C
005100 FD7004              A 20246    	LD	(IY+%4),B
                           A 20247    ; 4569					res = dir_sdi(dp, 0);	
                           A 20248    .LINE 4569
                           A 20249    
005103 01000000            A 20250    	LD	BC,0
005107 C5                  A 20251    	PUSH	BC
005108 C5                  A 20252    	PUSH	BC
005109 DD0706              A 20253    	LD	BC,(IX+%6)
00510C C5                  A 20254    	PUSH	BC
00510D CD 50 12 00         A 20255    	CALL	_dir_sdi
005111 C1                  A 20256    	POP	BC
005112 C1                  A 20257    	POP	BC
005113 C1                  A 20258    	POP	BC
005114 DD2FFD              A 20259    	LD	(IX+%FFFFFFFD),HL
                           A 20260    ; 4570	#if FF_FS_LOCK != 0
                           A 20261    ; 4571					if (res == FR_OK) {
                           A 20262    ; 4572						if (dp->obj.sclust 
                           A 20263    ; 4573							dp->obj.lockid 
                           A 20264    ; 4574							if (!dp->obj.lo
                           A 20265    ; 4575						} else {
                           A 20266    ; 4576							dp->obj.lockid 
                           A 20267    ; 4577						}
                           A 20268    ; 4578					}
                           A 20269    ; 4579	#endif
                           A 20270    ; 4580				}
                           A 20271    ; 4581			}
005117                     A 20272    L_1017:
                           A 20273    .LINE 4581
                           A 20274    
                           A 20275    ; 4582			FREE_NAMBUF();
                           A 20276    ; 4583			if (res == FR_NO_FILE) res = FR
                           A 20277    .LINE 4583
                           A 20278    
005117 01040000            A 20279    	LD	BC,4
00511B DD27FD              A 20280    	LD	HL,(IX+%FFFFFFFD)
00511E B7                  A 20281    	OR	A,A
00511F ED42                A 20282    	SBC	HL,BC
005121 20 07               A 20283    	JR	NZ,L_1021
005123 01050000            A 20284    	LD	BC,5
005127 DD0FFD              A 20285    	LD	(IX+%FFFFFFFD),BC
                           A 20286    ; 4584		}
00512A                     A 20287    L_1021:
                           A 20288    .LINE 4584
                           A 20289    
                           A 20290    ; 4585		if (res != FR_OK) dp->obj.fs = 0;	
                           A 20291    .LINE 4585
                           A 20292    
00512A 01000000            A 20293    	LD	BC,0
00512E DD27FD              A 20294    	LD	HL,(IX+%FFFFFFFD)
005131 B7                  A 20295    	OR	A,A
005132 ED42                A 20296    	SBC	HL,BC
005134 28 06               A 20297    	JR	Z,L_1022
005136 DD3106              A 20298    	LD	IY,(IX+%6)
005139 FD0F00              A 20299    	LD	(IY+%0),BC
00513C                     A 20300    L_1022:
                           A 20301    ; 4586	
                           A 20302    ; 4587		LEAVE_FF(fs, res);
                           A 20303    .LINE 4587
                           A 20304    
00513C DD27FD              A 20305    	LD	HL,(IX+%FFFFFFFD)
                           A 20306    ; 4588	}
00513F                     A 20307    L_1023:
                           A 20308    .LINE 4588
                           A 20309    
00513F DDF9                A 20310    	LD	SP,IX
005141 DDE1                A 20311    	POP	IX
005143 C9                  A 20312    	RET	
                           A 20313    
                           A 20314    
                           A 20315    ;**************************** _f_opendir ******
                           A 20316    ;Name                         Addr/Register   S
                           A 20317    ;lbuf                                IX-518    
                           A 20318    ;fs                                    IX-6    
                           A 20319    ;res                                   IX-3    
                           A 20320    ;path                                  IX+9    
                           A 20321    ;dp                                    IX+6    
                           A 20322    
                           A 20323    
                           A 20324    ; Stack Frame Size: 530 (bytes)
                           A 20325    ;       Spill Code: -3 (instruction)
                           A 20326    
                           A 20327    
                           A 20328    .ENDFUNC "f_opendir",4588,"_f_opendir"
                           A 20329    ; 4589	
                           A 20330    ; 4590	
                           A 20331    ; 4591	
                           A 20332    ; 4592	
                           A 20333    ; 4593	/*-------------------------------------
                           A 20334    ; 4594	/* Close Directory                     
                           A 20335    ; 4595	/*-------------------------------------
                           A 20336    ; 4596	
                           A 20337    ; 4597	FRESULT f_closedir (
                           A 20338    ; 4598		DIR *dp		/* Pointer to the direc
                           A 20339    ; 4599	)
                           A 20340    ; 4600	{
005144                     A 20341    _f_closedir:
                           A 20342    .DEFINE "_f_closedir"
                           A 20343    
                           A 20344    .VALUE _f_closedir
                           A 20345    
                           A 20346    .CLASS 2
                           A 20347    
                           A 20348    .TYPE 68
                           A 20349    
                           A 20350    .ENDEF
                           A 20351    
                           A 20352    .BEGFUNC "f_closedir",4600,"_f_closedir"
                           A 20353    
                           A 20354    .LINE 4600
                           A 20355    
                           A 20356    .DEFINE "dp"
                           A 20357    
                           A 20358    .CLASS 65
                           A 20359    
                           A 20360    .VALUE 6
                           A 20361    
                           A 20362    .TAG "NONAME3"
                           A 20363    
                           A 20364    .TYPE 40
                           A 20365    
                           A 20366    .ENDEF
                           A 20367    
                           A 20368    .DEFINE "res"
                           A 20369    
                           A 20370    .CLASS 65
                           A 20371    
                           A 20372    .VALUE -3
                           A 20373    
                           A 20374    .TYPE 4
                           A 20375    
                           A 20376    .ENDEF
                           A 20377    
                           A 20378    .DEFINE "fs"
                           A 20379    
                           A 20380    .CLASS 65
                           A 20381    
                           A 20382    .VALUE -6
                           A 20383    
                           A 20384    .TAG "NONAME0"
                           A 20385    
                           A 20386    .TYPE 40
                           A 20387    
                           A 20388    .ENDEF
                           A 20389    
005144 DDE5                A 20390    	PUSH	IX
005146 DD210000 00         A 20391    	LD	IX,0
00514B DD39                A 20392    	ADD	IX,SP
00514D C5                  A 20393    	PUSH	BC
00514E C5                  A 20394    	PUSH	BC
                           A 20395    ; 4601		FRESULT res;
                           A 20396    ; 4602		FATFS *fs;
                           A 20397    ; 4603	
                           A 20398    ; 4604	
                           A 20399    ; 4605		res = validate(&dp->obj, &fs);	/* 
                           A 20400    .LINE 4605
                           A 20401    
00514F ED65FA              A 20402    	PEA	IX+%FFFFFFFA
005152 DD3106              A 20403    	LD	IY,(IX+%6)
005155 ED6600              A 20404    	PEA	IY+%0
005158 CD 19 3A 00         A 20405    	CALL	_validate
00515C C1                  A 20406    	POP	BC
00515D C1                  A 20407    	POP	BC
00515E DD2FFD              A 20408    	LD	(IX+%FFFFFFFD),HL
                           A 20409    ; 4606		if (res == FR_OK) {
                           A 20410    .LINE 4606
                           A 20411    
005161 01000000            A 20412    	LD	BC,0
005165 DD27FD              A 20413    	LD	HL,(IX+%FFFFFFFD)
005168 B7                  A 20414    	OR	A,A
005169 ED42                A 20415    	SBC	HL,BC
00516B 20 06               A 20416    	JR	NZ,L_1025
                           A 20417    ; 4607	#if FF_FS_LOCK != 0
                           A 20418    ; 4608			if (dp->obj.lockid) res = dec_l
                           A 20419    ; 4609			if (res == FR_OK) dp->obj.fs = 
                           A 20420    ; 4610	#else
                           A 20421    ; 4611			dp->obj.fs = 0;	/* Invalidate d
                           A 20422    .LINE 4611
                           A 20423    
00516D DD3106              A 20424    	LD	IY,(IX+%6)
005170 FD0F00              A 20425    	LD	(IY+%0),BC
                           A 20426    ; 4612	#endif
                           A 20427    ; 4613	#if FF_FS_REENTRANT
                           A 20428    ; 4614			unlock_fs(fs, FR_OK);		/* 
                           A 20429    ; 4615	#endif
                           A 20430    ; 4616		}
005173                     A 20431    L_1025:
                           A 20432    .LINE 4616
                           A 20433    
                           A 20434    ; 4617		return res;
                           A 20435    .LINE 4617
                           A 20436    
005173 DD27FD              A 20437    	LD	HL,(IX+%FFFFFFFD)
                           A 20438    ; 4618	}
                           A 20439    .LINE 4618
                           A 20440    
005176 DDF9                A 20441    	LD	SP,IX
005178 DDE1                A 20442    	POP	IX
00517A C9                  A 20443    	RET	
                           A 20444    
                           A 20445    
                           A 20446    ;**************************** _f_closedir *****
                           A 20447    ;Name                         Addr/Register   S
                           A 20448    ;fs                                    IX-6    
                           A 20449    ;res                                   IX-3    
                           A 20450    ;dp                                    IX+6    
                           A 20451    
                           A 20452    
                           A 20453    ; Stack Frame Size: 15 (bytes)
                           A 20454    ;       Spill Code: -3 (instruction)
                           A 20455    
                           A 20456    
                           A 20457    .ENDFUNC "f_closedir",4618,"_f_closedir"
                           A 20458    ; 4619	
                           A 20459    ; 4620	
                           A 20460    ; 4621	
                           A 20461    ; 4622	
                           A 20462    ; 4623	/*-------------------------------------
                           A 20463    ; 4624	/* Read Directory Entries in Sequence  
                           A 20464    ; 4625	/*-------------------------------------
                           A 20465    ; 4626	
                           A 20466    ; 4627	FRESULT f_readdir (
                           A 20467    ; 4628		DIR* dp,			/* Pointer to t
                           A 20468    ; 4629		FILINFO* fno		/* Pointer to f
                           A 20469    ; 4630	)
                           A 20470    ; 4631	{
00517B                     A 20471    _f_readdir:
                           A 20472    .DEFINE "_f_readdir"
                           A 20473    
                           A 20474    .VALUE _f_readdir
                           A 20475    
                           A 20476    .CLASS 2
                           A 20477    
                           A 20478    .TYPE 68
                           A 20479    
                           A 20480    .ENDEF
                           A 20481    
                           A 20482    .BEGFUNC "f_readdir",4631,"_f_readdir"
                           A 20483    
                           A 20484    .LINE 4631
                           A 20485    
                           A 20486    .DEFINE "dp"
                           A 20487    
                           A 20488    .CLASS 65
                           A 20489    
                           A 20490    .VALUE 6
                           A 20491    
                           A 20492    .TAG "NONAME3"
                           A 20493    
                           A 20494    .TYPE 40
                           A 20495    
                           A 20496    .ENDEF
                           A 20497    
                           A 20498    .DEFINE "fno"
                           A 20499    
                           A 20500    .CLASS 65
                           A 20501    
                           A 20502    .VALUE 9
                           A 20503    
                           A 20504    .TAG "NONAME4"
                           A 20505    
                           A 20506    .TYPE 40
                           A 20507    
                           A 20508    .ENDEF
                           A 20509    
                           A 20510    .DEFINE "res"
                           A 20511    
                           A 20512    .CLASS 65
                           A 20513    
                           A 20514    .VALUE -3
                           A 20515    
                           A 20516    .TYPE 4
                           A 20517    
                           A 20518    .ENDEF
                           A 20519    
                           A 20520    .DEFINE "fs"
                           A 20521    
                           A 20522    .CLASS 65
                           A 20523    
                           A 20524    .VALUE -6
                           A 20525    
                           A 20526    .TAG "NONAME0"
                           A 20527    
                           A 20528    .TYPE 40
                           A 20529    
                           A 20530    .ENDEF
                           A 20531    
                           A 20532    .DEFINE "lbuf"
                           A 20533    
                           A 20534    .CLASS 65
                           A 20535    
                           A 20536    .VALUE -518
                           A 20537    
                           A 20538    .DIM 256
                           A 20539    
                           A 20540    .TYPE 109
                           A 20541    
                           A 20542    .ENDEF
                           A 20543    
00517B DDE5                A 20544    	PUSH	IX
00517D DD210000 00         A 20545    	LD	IX,0
005182 DD39                A 20546    	ADD	IX,SP
005184 21FAFDFF            A 20547    	LD	HL,-518
005188 39                  A 20548    	ADD	HL,SP
005189 F9                  A 20549    	LD	SP,HL
                           A 20550    ; 4632		FRESULT res;
                           A 20551    ; 4633		FATFS *fs;
                           A 20552    ; 4634		DEF_NAMBUF
                           A 20553    ; 4635	
                           A 20554    ; 4636	
                           A 20555    ; 4637		res = validate(&dp->obj, &fs);	/* 
                           A 20556    .LINE 4637
                           A 20557    
00518A ED65FA              A 20558    	PEA	IX+%FFFFFFFA
00518D DD3106              A 20559    	LD	IY,(IX+%6)
005190 ED6600              A 20560    	PEA	IY+%0
005193 CD 19 3A 00         A 20561    	CALL	_validate
005197 C1                  A 20562    	POP	BC
005198 C1                  A 20563    	POP	BC
005199 DD2FFD              A 20564    	LD	(IX+%FFFFFFFD),HL
                           A 20565    ; 4638		if (res == FR_OK) {
                           A 20566    .LINE 4638
                           A 20567    
00519C 01000000            A 20568    	LD	BC,0
0051A0 DD27FD              A 20569    	LD	HL,(IX+%FFFFFFFD)
0051A3 B7                  A 20570    	OR	A,A
0051A4 ED42                A 20571    	SBC	HL,BC
0051A6 C2 36 52 00         A 20572    	JR	NZ,L_1035
                           A 20573    ; 4639			if (!fno) {
                           A 20574    .LINE 4639
                           A 20575    
0051AA DD2709              A 20576    	LD	HL,(IX+%9)
0051AD B7                  A 20577    	OR	A,A
0051AE ED42                A 20578    	SBC	HL,BC
0051B0 20 12               A 20579    	JR	NZ,L_1033
                           A 20580    ; 4640				res = dir_sdi(dp, 0);		
                           A 20581    .LINE 4640
                           A 20582    
0051B2 C5                  A 20583    	PUSH	BC
0051B3 C5                  A 20584    	PUSH	BC
0051B4 DD0706              A 20585    	LD	BC,(IX+%6)
0051B7 C5                  A 20586    	PUSH	BC
0051B8 CD 50 12 00         A 20587    	CALL	_dir_sdi
0051BC C1                  A 20588    	POP	BC
0051BD C1                  A 20589    	POP	BC
0051BE C1                  A 20590    	POP	BC
0051BF DD2FFD              A 20591    	LD	(IX+%FFFFFFFD),HL
                           A 20592    ; 4641			} else {
                           A 20593    .LINE 4641
                           A 20594    
0051C2 18 72               A 20595    	JR	L_1035
0051C4                     A 20596    L_1033:
                           A 20597    ; 4642				INIT_NAMBUF(fs);
                           A 20598    .LINE 4642
                           A 20599    
0051C4 DDE5E1              A 20600    	LD	HL,IX
0051C7 01FAFDFF            A 20601    	LD	BC,-518
0051CB 09                  A 20602    	ADD	HL,BC
0051CC DD31FA              A 20603    	LD	IY,(IX+%FFFFFFFA)
0051CF FD2F0B              A 20604    	LD	(IY+%B),HL
                           A 20605    ; 4643				res = DIR_READ_FILE(dp);	
                           A 20606    .LINE 4643
                           A 20607    
0051D2 01000000            A 20608    	LD	BC,0
0051D6 C5                  A 20609    	PUSH	BC
0051D7 DD0706              A 20610    	LD	BC,(IX+%6)
0051DA C5                  A 20611    	PUSH	BC
0051DB CD 46 1E 00         A 20612    	CALL	_dir_read
0051DF C1                  A 20613    	POP	BC
0051E0 C1                  A 20614    	POP	BC
0051E1 DD2FFD              A 20615    	LD	(IX+%FFFFFFFD),HL
                           A 20616    ; 4644				if (res == FR_NO_FILE) res 
                           A 20617    .LINE 4644
                           A 20618    
0051E4 01040000            A 20619    	LD	BC,4
0051E8 DD27FD              A 20620    	LD	HL,(IX+%FFFFFFFD)
0051EB B7                  A 20621    	OR	A,A
0051EC ED42                A 20622    	SBC	HL,BC
0051EE 20 07               A 20623    	JR	NZ,L_1030
0051F0 01000000            A 20624    	LD	BC,0
0051F4 DD0FFD              A 20625    	LD	(IX+%FFFFFFFD),BC
0051F7                     A 20626    L_1030:
                           A 20627    ; 4645				if (res == FR_OK) {			
                           A 20628    .LINE 4645
                           A 20629    
0051F7 01000000            A 20630    	LD	BC,0
0051FB DD27FD              A 20631    	LD	HL,(IX+%FFFFFFFD)
0051FE B7                  A 20632    	OR	A,A
0051FF ED42                A 20633    	SBC	HL,BC
005201 20 33               A 20634    	JR	NZ,L_1031
                           A 20635    ; 4646					get_fileinfo(dp, fno);	
                           A 20636    .LINE 4646
                           A 20637    
005203 DD0709              A 20638    	LD	BC,(IX+%9)
005206 C5                  A 20639    	PUSH	BC
005207 DD0706              A 20640    	LD	BC,(IX+%6)
00520A C5                  A 20641    	PUSH	BC
00520B CD 80 25 00         A 20642    	CALL	_get_fileinfo
00520F C1                  A 20643    	POP	BC
005210 C1                  A 20644    	POP	BC
                           A 20645    ; 4647					res = dir_next(dp, 0);	
                           A 20646    .LINE 4647
                           A 20647    
005211 01000000            A 20648    	LD	BC,0
005215 C5                  A 20649    	PUSH	BC
005216 DD0706              A 20650    	LD	BC,(IX+%6)
005219 C5                  A 20651    	PUSH	BC
00521A CD 6A 14 00         A 20652    	CALL	_dir_next
00521E C1                  A 20653    	POP	BC
00521F C1                  A 20654    	POP	BC
005220 DD2FFD              A 20655    	LD	(IX+%FFFFFFFD),HL
                           A 20656    ; 4648					if (res == FR_NO_FILE) 
                           A 20657    .LINE 4648
                           A 20658    
005223 01040000            A 20659    	LD	BC,4
005227 DD27FD              A 20660    	LD	HL,(IX+%FFFFFFFD)
00522A B7                  A 20661    	OR	A,A
00522B ED42                A 20662    	SBC	HL,BC
00522D 20 07               A 20663    	JR	NZ,L_1031
00522F 01000000            A 20664    	LD	BC,0
005233 DD0FFD              A 20665    	LD	(IX+%FFFFFFFD),BC
                           A 20666    ; 4649				}
005236                     A 20667    L_1031:
                           A 20668    .LINE 4649
                           A 20669    
                           A 20670    ; 4650				FREE_NAMBUF();
                           A 20671    ; 4651			}
                           A 20672    ; 4652		}
005236                     A 20673    L_1035:
                           A 20674    .LINE 4652
                           A 20675    
                           A 20676    ; 4653		LEAVE_FF(fs, res);
                           A 20677    .LINE 4653
                           A 20678    
005236 DD27FD              A 20679    	LD	HL,(IX+%FFFFFFFD)
                           A 20680    ; 4654	}
                           A 20681    .LINE 4654
                           A 20682    
005239 DDF9                A 20683    	LD	SP,IX
00523B DDE1                A 20684    	POP	IX
00523D C9                  A 20685    	RET	
                           A 20686    
                           A 20687    
                           A 20688    ;**************************** _f_readdir ******
                           A 20689    ;Name                         Addr/Register   S
                           A 20690    ;lbuf                                IX-518    
                           A 20691    ;fs                                    IX-6    
                           A 20692    ;res                                   IX-3    
                           A 20693    ;fno                                   IX+9    
                           A 20694    ;dp                                    IX+6    
                           A 20695    
                           A 20696    
                           A 20697    ; Stack Frame Size: 530 (bytes)
                           A 20698    ;       Spill Code: -3 (instruction)
                           A 20699    
                           A 20700    
                           A 20701    .ENDFUNC "f_readdir",4654,"_f_readdir"
                           A 20702    ; 4655	
                           A 20703    ; 4656	
                           A 20704    ; 4657	
                           A 20705    ; 4658	#if FF_USE_FIND
                           A 20706    ; 4659	/*-------------------------------------
                           A 20707    ; 4660	/* Find Next File                      
                           A 20708    ; 4661	/*-------------------------------------
                           A 20709    ; 4662	
                           A 20710    ; 4663	FRESULT f_findnext (
                           A 20711    ; 4664		DIR* dp,		/* Pointer to the o
                           A 20712    ; 4665		FILINFO* fno	/* Pointer to the f
                           A 20713    ; 4666	)
                           A 20714    ; 4667	{
                           A 20715    ; 4668		FRESULT res;
                           A 20716    ; 4669	
                           A 20717    ; 4670	
                           A 20718    ; 4671		for (;;) {
                           A 20719    ; 4672			res = f_readdir(dp, fno);		
                           A 20720    ; 4673			if (res != FR_OK || !fno || !fn
                           A 20721    ; 4674			if (pattern_match(dp->pat, fno-
                           A 20722    ; 4675	#if FF_USE_LFN && FF_USE_FIND == 2
                           A 20723    ; 4676			if (pattern_match(dp->pat, fno-
                           A 20724    ; 4677	#endif
                           A 20725    ; 4678		}
                           A 20726    ; 4679		return res;
                           A 20727    ; 4680	}
                           A 20728    ; 4681	
                           A 20729    ; 4682	
                           A 20730    ; 4683	
                           A 20731    ; 4684	/*-------------------------------------
                           A 20732    ; 4685	/* Find First File                     
                           A 20733    ; 4686	/*-------------------------------------
                           A 20734    ; 4687	
                           A 20735    ; 4688	FRESULT f_findfirst (
                           A 20736    ; 4689		DIR* dp,				/* Pointer 
                           A 20737    ; 4690		FILINFO* fno,			/* Pointer 
                           A 20738    ; 4691		const TCHAR* path,		/* Pointer 
                           A 20739    ; 4692		const TCHAR* pattern	/* Pointer 
                           A 20740    ; 4693	)
                           A 20741    ; 4694	{
                           A 20742    ; 4695		FRESULT res;
                           A 20743    ; 4696	
                           A 20744    ; 4697	
                           A 20745    ; 4698		dp->pat = pattern;		/* Save poi
                           A 20746    ; 4699		res = f_opendir(dp, path);		/* 
                           A 20747    ; 4700		if (res == FR_OK) {
                           A 20748    ; 4701			res = f_findnext(dp, fno);	/* 
                           A 20749    ; 4702		}
                           A 20750    ; 4703		return res;
                           A 20751    ; 4704	}
                           A 20752    ; 4705	
                           A 20753    ; 4706	#endif	/* FF_USE_FIND */
                           A 20754    ; 4707	
                           A 20755    ; 4708	
                           A 20756    ; 4709	
                           A 20757    ; 4710	#if FF_FS_MINIMIZE == 0
                           A 20758    ; 4711	/*-------------------------------------
                           A 20759    ; 4712	/* Get File Status                     
                           A 20760    ; 4713	/*-------------------------------------
                           A 20761    ; 4714	
                           A 20762    ; 4715	FRESULT f_stat (
                           A 20763    ; 4716		const TCHAR* path,	/* Pointer to t
                           A 20764    ; 4717		FILINFO* fno		/* Pointer to f
                           A 20765    ; 4718	)
                           A 20766    ; 4719	{
00523E                     A 20767    _f_stat:
                           A 20768    .DEFINE "_f_stat"
                           A 20769    
                           A 20770    .VALUE _f_stat
                           A 20771    
                           A 20772    .CLASS 2
                           A 20773    
                           A 20774    .TYPE 68
                           A 20775    
                           A 20776    .ENDEF
                           A 20777    
                           A 20778    .BEGFUNC "f_stat",4719,"_f_stat"
                           A 20779    
                           A 20780    .LINE 4719
                           A 20781    
                           A 20782    .DEFINE "path"
                           A 20783    
                           A 20784    .CLASS 65
                           A 20785    
                           A 20786    .VALUE 6
                           A 20787    
                           A 20788    .TYPE 194
                           A 20789    
                           A 20790    .ENDEF
                           A 20791    
                           A 20792    .DEFINE "fno"
                           A 20793    
                           A 20794    .CLASS 65
                           A 20795    
                           A 20796    .VALUE 9
                           A 20797    
                           A 20798    .TAG "NONAME4"
                           A 20799    
                           A 20800    .TYPE 40
                           A 20801    
                           A 20802    .ENDEF
                           A 20803    
                           A 20804    .DEFINE "res"
                           A 20805    
                           A 20806    .CLASS 65
                           A 20807    
                           A 20808    .VALUE -3
                           A 20809    
                           A 20810    .TYPE 4
                           A 20811    
                           A 20812    .ENDEF
                           A 20813    
                           A 20814    .DEFINE "dj"
                           A 20815    
                           A 20816    .CLASS 65
                           A 20817    
                           A 20818    .VALUE -52
                           A 20819    
                           A 20820    .TAG "NONAME3"
                           A 20821    
                           A 20822    .TYPE 8
                           A 20823    
                           A 20824    .ENDEF
                           A 20825    
                           A 20826    .DEFINE "lbuf"
                           A 20827    
                           A 20828    .CLASS 65
                           A 20829    
                           A 20830    .VALUE -564
                           A 20831    
                           A 20832    .DIM 256
                           A 20833    
                           A 20834    .TYPE 109
                           A 20835    
                           A 20836    .ENDEF
                           A 20837    
00523E DDE5                A 20838    	PUSH	IX
005240 DD210000 00         A 20839    	LD	IX,0
005245 DD39                A 20840    	ADD	IX,SP
005247 21CCFDFF            A 20841    	LD	HL,-564
00524B 39                  A 20842    	ADD	HL,SP
00524C F9                  A 20843    	LD	SP,HL
                           A 20844    ; 4720		FRESULT res;
                           A 20845    ; 4721		DIR dj;
                           A 20846    ; 4722		DEF_NAMBUF
                           A 20847    ; 4723	
                           A 20848    ; 4724	
                           A 20849    ; 4725		/* Get logical drive */
                           A 20850    ; 4726		res = mount_volume(&path, &dj.obj.f
                           A 20851    .LINE 4726
                           A 20852    
00524D ED02CC              A 20853    	LEA	BC,IX+%FFFFFFCC
005250 DD0FFA              A 20854    	LD	(IX+%FFFFFFFA),BC
005253 01000000            A 20855    	LD	BC,0
005257 C5                  A 20856    	PUSH	BC
005258 ED65CC              A 20857    	PEA	IX+%FFFFFFCC
00525B ED6506              A 20858    	PEA	IX+%6
00525E CD 6E 33 00         A 20859    	CALL	_mount_volume
005262 C1                  A 20860    	POP	BC
005263 C1                  A 20861    	POP	BC
005264 C1                  A 20862    	POP	BC
005265 DD2FFD              A 20863    	LD	(IX+%FFFFFFFD),HL
                           A 20864    ; 4727		if (res == FR_OK) {
                           A 20865    .LINE 4727
                           A 20866    
005268 01000000            A 20867    	LD	BC,0
00526C DD27FD              A 20868    	LD	HL,(IX+%FFFFFFFD)
00526F B7                  A 20869    	OR	A,A
005270 ED42                A 20870    	SBC	HL,BC
005272 20 55               A 20871    	JR	NZ,L_1043
                           A 20872    ; 4728			INIT_NAMBUF(dj.obj.fs);
                           A 20873    .LINE 4728
                           A 20874    
005274 DD31FA              A 20875    	LD	IY,(IX+%FFFFFFFA)
005277 FD3700              A 20876    	LD	IY,(IY+%0)
00527A DDE5E1              A 20877    	LD	HL,IX
00527D 01CCFDFF            A 20878    	LD	BC,-564
005281 09                  A 20879    	ADD	HL,BC
005282 FD2F0B              A 20880    	LD	(IY+%B),HL
                           A 20881    ; 4729			res = follow_path(&dj, path);	
                           A 20882    .LINE 4729
                           A 20883    
005285 DD0706              A 20884    	LD	BC,(IX+%6)
005288 C5                  A 20885    	PUSH	BC
005289 ED65CC              A 20886    	PEA	IX+%FFFFFFCC
00528C CD 00 2E 00         A 20887    	CALL	_follow_path
005290 C1                  A 20888    	POP	BC
005291 C1                  A 20889    	POP	BC
005292 DD2FFD              A 20890    	LD	(IX+%FFFFFFFD),HL
                           A 20891    ; 4730			if (res == FR_OK) {				
                           A 20892    .LINE 4730
                           A 20893    
005295 01000000            A 20894    	LD	BC,0
005299 DD27FD              A 20895    	LD	HL,(IX+%FFFFFFFD)
00529C B7                  A 20896    	OR	A,A
00529D ED42                A 20897    	SBC	HL,BC
00529F 20 28               A 20898    	JR	NZ,L_1041
                           A 20899    ; 4731				if (dj.fn[NSFLAG] & NS_NONA
                           A 20900    .LINE 4731
                           A 20901    
0052A1 ED55EA              A 20902    	LEA	IY,IX+%FFFFFFEA
0052A4 FD7E0B              A 20903    	LD	A,(IY+%B)
0052A7 E680                A 20904    	AND	A,%80
0052A9 28 09               A 20905    	JR	Z,L_1039
                           A 20906    ; 4732					res = FR_INVALID_NAME;
                           A 20907    .LINE 4732
                           A 20908    
0052AB 01060000            A 20909    	LD	BC,6
0052AF DD0FFD              A 20910    	LD	(IX+%FFFFFFFD),BC
                           A 20911    ; 4733				} else {					
                           A 20912    .LINE 4733
                           A 20913    
0052B2 18 15               A 20914    	JR	L_1041
0052B4                     A 20915    L_1039:
                           A 20916    ; 4734					if (fno) get_fileinfo(&
                           A 20917    .LINE 4734
                           A 20918    
0052B4 DD2709              A 20919    	LD	HL,(IX+%9)
0052B7 B7                  A 20920    	OR	A,A
0052B8 ED42                A 20921    	SBC	HL,BC
0052BA 28 0D               A 20922    	JR	Z,L_1041
0052BC DD0709              A 20923    	LD	BC,(IX+%9)
0052BF C5                  A 20924    	PUSH	BC
0052C0 ED65CC              A 20925    	PEA	IX+%FFFFFFCC
0052C3 CD 80 25 00         A 20926    	CALL	_get_fileinfo
0052C7 C1                  A 20927    	POP	BC
0052C8 C1                  A 20928    	POP	BC
                           A 20929    ; 4735				}
                           A 20930    ; 4736			}
0052C9                     A 20931    L_1041:
                           A 20932    .LINE 4736
                           A 20933    
                           A 20934    ; 4737			FREE_NAMBUF();
                           A 20935    ; 4738		}
0052C9                     A 20936    L_1043:
                           A 20937    .LINE 4738
                           A 20938    
                           A 20939    ; 4739	
                           A 20940    ; 4740		LEAVE_FF(dj.obj.fs, res);
                           A 20941    .LINE 4740
                           A 20942    
0052C9 DD27FD              A 20943    	LD	HL,(IX+%FFFFFFFD)
                           A 20944    ; 4741	}
                           A 20945    .LINE 4741
                           A 20946    
0052CC DDF9                A 20947    	LD	SP,IX
0052CE DDE1                A 20948    	POP	IX
0052D0 C9                  A 20949    	RET	
                           A 20950    
                           A 20951    
                           A 20952    ;**************************** _f_stat *********
                           A 20953    ;Name                         Addr/Register   S
                           A 20954    ;lbuf                                IX-564    
                           A 20955    ;dj                                   IX-52    
                           A 20956    ;G_86                                  IX-6    
                           A 20957    ;res                                   IX-3    
                           A 20958    ;fno                                   IX+9    
                           A 20959    ;path                                  IX+6    
                           A 20960    
                           A 20961    
                           A 20962    ; Stack Frame Size: 576 (bytes)
                           A 20963    ;       Spill Code: -3 (instruction)
                           A 20964    
                           A 20965    
                           A 20966    .ENDFUNC "f_stat",4741,"_f_stat"
                           A 20967    ; 4742	
                           A 20968    ; 4743	
                           A 20969    ; 4744	
                           A 20970    ; 4745	#if !FF_FS_READONLY
                           A 20971    ; 4746	/*-------------------------------------
                           A 20972    ; 4747	/* Get Number of Free Clusters         
                           A 20973    ; 4748	/*-------------------------------------
                           A 20974    ; 4749	
                           A 20975    ; 4750	FRESULT f_getfree (
                           A 20976    ; 4751		const TCHAR* path,	/* Logical driv
                           A 20977    ; 4752		DWORD* nclst,		/* Pointer to a
                           A 20978    ; 4753		FATFS** fatfs		/* Pointer to r
                           A 20979    ; 4754	)
                           A 20980    ; 4755	{
0052D1                     A 20981    _f_getfree:
                           A 20982    .DEFINE "_f_getfree"
                           A 20983    
                           A 20984    .VALUE _f_getfree
                           A 20985    
                           A 20986    .CLASS 2
                           A 20987    
                           A 20988    .TYPE 68
                           A 20989    
                           A 20990    .ENDEF
                           A 20991    
                           A 20992    .BEGFUNC "f_getfree",4755,"_f_getfree"
                           A 20993    
                           A 20994    .LINE 4755
                           A 20995    
                           A 20996    .DEFINE "path"
                           A 20997    
                           A 20998    .CLASS 65
                           A 20999    
                           A 21000    .VALUE 6
                           A 21001    
                           A 21002    .TYPE 194
                           A 21003    
                           A 21004    .ENDEF
                           A 21005    
                           A 21006    .DEFINE "nclst"
                           A 21007    
                           A 21008    .CLASS 65
                           A 21009    
                           A 21010    .VALUE 9
                           A 21011    
                           A 21012    .TYPE 47
                           A 21013    
                           A 21014    .ENDEF
                           A 21015    
                           A 21016    .DEFINE "fatfs"
                           A 21017    
                           A 21018    .CLASS 65
                           A 21019    
                           A 21020    .VALUE 12
                           A 21021    
                           A 21022    .TAG "NONAME0"
                           A 21023    
                           A 21024    .TYPE 296
                           A 21025    
                           A 21026    .ENDEF
                           A 21027    
                           A 21028    .DEFINE "fs"
                           A 21029    
                           A 21030    .CLASS 65
                           A 21031    
                           A 21032    .VALUE -3
                           A 21033    
                           A 21034    .TAG "NONAME0"
                           A 21035    
                           A 21036    .TYPE 40
                           A 21037    
                           A 21038    .ENDEF
                           A 21039    
                           A 21040    .DEFINE "nfree"
                           A 21041    
                           A 21042    .CLASS 65
                           A 21043    
                           A 21044    .VALUE -7
                           A 21045    
                           A 21046    .TYPE 15
                           A 21047    
                           A 21048    .ENDEF
                           A 21049    
                           A 21050    .DEFINE "i"
                           A 21051    
                           A 21052    .CLASS 65
                           A 21053    
                           A 21054    .VALUE -10
                           A 21055    
                           A 21056    .TYPE 14
                           A 21057    
                           A 21058    .ENDEF
                           A 21059    
                           A 21060    .DEFINE "clst"
                           A 21061    
                           A 21062    .CLASS 65
                           A 21063    
                           A 21064    .VALUE -14
                           A 21065    
                           A 21066    .TYPE 15
                           A 21067    
                           A 21068    .ENDEF
                           A 21069    
                           A 21070    .DEFINE "res"
                           A 21071    
                           A 21072    .CLASS 65
                           A 21073    
                           A 21074    .VALUE -17
                           A 21075    
                           A 21076    .TYPE 4
                           A 21077    
                           A 21078    .ENDEF
                           A 21079    
                           A 21080    .DEFINE "sect"
                           A 21081    
                           A 21082    .CLASS 65
                           A 21083    
                           A 21084    .VALUE -21
                           A 21085    
                           A 21086    .TYPE 15
                           A 21087    
                           A 21088    .ENDEF
                           A 21089    
                           A 21090    .DEFINE "stat"
                           A 21091    
                           A 21092    .CLASS 65
                           A 21093    
                           A 21094    .VALUE -25
                           A 21095    
                           A 21096    .TYPE 15
                           A 21097    
                           A 21098    .ENDEF
                           A 21099    
                           A 21100    .DEFINE "obj"
                           A 21101    
                           A 21102    .CLASS 65
                           A 21103    
                           A 21104    .VALUE -40
                           A 21105    
                           A 21106    .TAG "NONAME1"
                           A 21107    
                           A 21108    .TYPE 8
                           A 21109    
                           A 21110    .ENDEF
                           A 21111    
0052D1 DDE5                A 21112    	PUSH	IX
0052D3 DD210000 00         A 21113    	LD	IX,0
0052D8 DD39                A 21114    	ADD	IX,SP
0052DA ED22D2              A 21115    	LEA	HL,IX+%FFFFFFD2
0052DD F9                  A 21116    	LD	SP,HL
                           A 21117    ; 4756		FRESULT res;
                           A 21118    ; 4757		FATFS *fs;
                           A 21119    ; 4758		DWORD nfree, clst, stat;
                           A 21120    ; 4759		LBA_t sect;
                           A 21121    ; 4760		UINT i;
                           A 21122    ; 4761		FFOBJID obj;
                           A 21123    ; 4762	
                           A 21124    ; 4763	
                           A 21125    ; 4764		/* Get logical drive */
                           A 21126    ; 4765		res = mount_volume(&path, &fs, 0);
                           A 21127    .LINE 4765
                           A 21128    
0052DE 01000000            A 21129    	LD	BC,0
0052E2 C5                  A 21130    	PUSH	BC
0052E3 ED65FD              A 21131    	PEA	IX+%FFFFFFFD
0052E6 ED6506              A 21132    	PEA	IX+%6
0052E9 CD 6E 33 00         A 21133    	CALL	_mount_volume
0052ED C1                  A 21134    	POP	BC
0052EE C1                  A 21135    	POP	BC
0052EF C1                  A 21136    	POP	BC
0052F0 DD2FEF              A 21137    	LD	(IX+%FFFFFFEF),HL
                           A 21138    ; 4766		if (res == FR_OK) {
                           A 21139    .LINE 4766
                           A 21140    
0052F3 01000000            A 21141    	LD	BC,0
0052F7 DD27EF              A 21142    	LD	HL,(IX+%FFFFFFEF)
0052FA B7                  A 21143    	OR	A,A
0052FB ED42                A 21144    	SBC	HL,BC
0052FD C2 59 55 00         A 21145    	JR	NZ,L_1075
                           A 21146    ; 4767			*fatfs = fs;				/* 
                           A 21147    .LINE 4767
                           A 21148    
005301 DD270C              A 21149    	LD	HL,(IX+%C)
005304 DD07FD              A 21150    	LD	BC,(IX+%FFFFFFFD)
005307 ED0F                A 21151    	LD	(HL),BC
                           A 21152    ; 4768			/* If free_clst is valid, retur
                           A 21153    ; 4769			if (fs->free_clst <= fs->n_fate
                           A 21154    .LINE 4769
                           A 21155    
005309 DD31FD              A 21156    	LD	IY,(IX+%FFFFFFFD)
00530C FD2716              A 21157    	LD	HL,(IY+%16)
00530F FD5E19              A 21158    	LD	E,(IY+%19)
005312 01020000            A 21159    	LD	BC,2
005316 AF                  A 21160    	XOR	A,A
005317 CD 00 00 00         A 21161    	CALL	__lsub
00531B FD0712              A 21162    	LD	BC,(IY+%12)
00531E FD7E15              A 21163    	LD	A,(IY+%15)
005321 CD 00 00 00         A 21164    	CALL	__lcmpu
005325 38 16               A 21165    	JR	C,L_1073
                           A 21166    ; 4770				*nclst = fs->free_clst;
                           A 21167    .LINE 4770
                           A 21168    
005327 DD2709              A 21169    	LD	HL,(IX+%9)
00532A DD31FD              A 21170    	LD	IY,(IX+%FFFFFFFD)
00532D FD0712              A 21171    	LD	BC,(IY+%12)
005330 FD7E15              A 21172    	LD	A,(IY+%15)
005333 ED0F                A 21173    	LD	(HL),BC
005335 23                  A 21174    	INC	HL
005336 23                  A 21175    	INC	HL
005337 23                  A 21176    	INC	HL
005338 77                  A 21177    	LD	(HL),A
                           A 21178    ; 4771			} else {
                           A 21179    .LINE 4771
                           A 21180    
005339 C3 59 55 00         A 21181    	JR	L_1075
00533D                     A 21182    L_1073:
                           A 21183    ; 4772				/* Scan FAT to obtain numbe
                           A 21184    ; 4773				nfree = 0;
                           A 21185    .LINE 4773
                           A 21186    
00533D 01000000            A 21187    	LD	BC,0
005341 AF                  A 21188    	XOR	A,A
005342 DD0FF9              A 21189    	LD	(IX+%FFFFFFF9),BC
005345 DD77FC              A 21190    	LD	(IX+%FFFFFFFC),A
                           A 21191    ; 4774				if (fs->fs_type == FS_FAT12
                           A 21192    .LINE 4774
                           A 21193    
005348 DD31FD              A 21194    	LD	IY,(IX+%FFFFFFFD)
00534B FD7E00              A 21195    	LD	A,(IY+%0)
00534E FE01                A 21196    	CP	A,%1
005350 C2 08 54 00         A 21197    	JR	NZ,L_1069
                           A 21198    ; 4775					clst = 2; obj.fs = fs;
                           A 21199    .LINE 4775
                           A 21200    
005354 01020000            A 21201    	LD	BC,2
005358 AF                  A 21202    	XOR	A,A
005359 DD0FF2              A 21203    	LD	(IX+%FFFFFFF2),BC
00535C DD77F5              A 21204    	LD	(IX+%FFFFFFF5),A
00535F DD07FD              A 21205    	LD	BC,(IX+%FFFFFFFD)
005362 DD0FD8              A 21206    	LD	(IX+%FFFFFFD8),BC
                           A 21207    ; 4776					do {
005365                     A 21208    L_1051:
                           A 21209    .LINE 4776
                           A 21210    
                           A 21211    ; 4777						stat = get_fat(&obj
                           A 21212    .LINE 4777
                           A 21213    
005365 DD4EF5              A 21214    	LD	C,(IX+%FFFFFFF5)
005368 0600                A 21215    	LD	B,%0
00536A C5                  A 21216    	PUSH	BC
00536B DD07F2              A 21217    	LD	BC,(IX+%FFFFFFF2)
00536E C5                  A 21218    	PUSH	BC
00536F ED65D8              A 21219    	PEA	IX+%FFFFFFD8
005372 CD 64 06 00         A 21220    	CALL	_get_fat
005376 C1                  A 21221    	POP	BC
005377 C1                  A 21222    	POP	BC
005378 C1                  A 21223    	POP	BC
005379 DD2FE7              A 21224    	LD	(IX+%FFFFFFE7),HL
00537C DD73EA              A 21225    	LD	(IX+%FFFFFFEA),E
                           A 21226    ; 4778						if (stat == 0xFFFFF
                           A 21227    .LINE 4778
                           A 21228    
00537F DD27E7              A 21229    	LD	HL,(IX+%FFFFFFE7)
005382 DD5EEA              A 21230    	LD	E,(IX+%FFFFFFEA)
005385 01FFFFFF            A 21231    	LD	BC,16777215
005389 3EFF                A 21232    	LD	A,%FF
00538B CD 00 00 00         A 21233    	CALL	__lcmpu
00538F 20 0B               A 21234    	JR	NZ,L_1047
005391 01010000            A 21235    	LD	BC,1
005395 DD0FEF              A 21236    	LD	(IX+%FFFFFFEF),BC
005398 C3 27 55 00         A 21237    	JR	L_1071
00539C                     A 21238    L_1047:
                           A 21239    ; 4779						if (stat == 1) { re
                           A 21240    .LINE 4779
                           A 21241    
00539C DD27E7              A 21242    	LD	HL,(IX+%FFFFFFE7)
00539F DD5EEA              A 21243    	LD	E,(IX+%FFFFFFEA)
0053A2 01010000            A 21244    	LD	BC,1
0053A6 AF                  A 21245    	XOR	A,A
0053A7 CD 00 00 00         A 21246    	CALL	__lcmpu
0053AB 20 0B               A 21247    	JR	NZ,L_1050
0053AD 01020000            A 21248    	LD	BC,2
0053B1 DD0FEF              A 21249    	LD	(IX+%FFFFFFEF),BC
0053B4 C3 27 55 00         A 21250    	JR	L_1071
0053B8                     A 21251    L_1050:
                           A 21252    ; 4780						if (stat == 0) nfre
                           A 21253    .LINE 4780
                           A 21254    
0053B8 DD27E7              A 21255    	LD	HL,(IX+%FFFFFFE7)
0053BB DD5EEA              A 21256    	LD	E,(IX+%FFFFFFEA)
0053BE 01000000            A 21257    	LD	BC,0
0053C2 AF                  A 21258    	XOR	A,A
0053C3 CD 00 00 00         A 21259    	CALL	__lcmpu
0053C7 20 12               A 21260    	JR	NZ,L_1052
0053C9 DD27F9              A 21261    	LD	HL,(IX+%FFFFFFF9)
0053CC DD5EFC              A 21262    	LD	E,(IX+%FFFFFFFC)
0053CF 3E01                A 21263    	LD	A,%1
0053D1 CD 00 00 00         A 21264    	CALL	__ladd_b
0053D5 DD2FF9              A 21265    	LD	(IX+%FFFFFFF9),HL
0053D8 DD73FC              A 21266    	LD	(IX+%FFFFFFFC),E
                           A 21267    ; 4781					} while (++clst < fs->n
0053DB                     A 21268    L_1052:
                           A 21269    .LINE 4781
                           A 21270    
0053DB DD27F2              A 21271    	LD	HL,(IX+%FFFFFFF2)
0053DE DD5EF5              A 21272    	LD	E,(IX+%FFFFFFF5)
0053E1 3E01                A 21273    	LD	A,%1
0053E3 CD 00 00 00         A 21274    	CALL	__ladd_b
0053E7 DD2FF2              A 21275    	LD	(IX+%FFFFFFF2),HL
0053EA DD73F5              A 21276    	LD	(IX+%FFFFFFF5),E
0053ED DD27F2              A 21277    	LD	HL,(IX+%FFFFFFF2)
0053F0 DD5EF5              A 21278    	LD	E,(IX+%FFFFFFF5)
0053F3 DD31FD              A 21279    	LD	IY,(IX+%FFFFFFFD)
0053F6 FD0716              A 21280    	LD	BC,(IY+%16)
0053F9 FD7E19              A 21281    	LD	A,(IY+%19)
0053FC CD 00 00 00         A 21282    	CALL	__lcmpu
005400 DA 65 53 00         A 21283    	JR	C,L_1051
005404 C3 27 55 00         A 21284    	JR	L_1071
                           A 21285    ; 4782				} else {
005408                     A 21286    L_1069:
                           A 21287    .LINE 4782
                           A 21288    
                           A 21289    ; 4783	#if FF_FS_EXFAT
                           A 21290    ; 4784					if (fs->fs_type == FS_E
                           A 21291    ; 4785						BYTE bm;
                           A 21292    ; 4786						UINT b;
                           A 21293    ; 4787	
                           A 21294    ; 4788						clst = fs->n_fatent
                           A 21295    ; 4789						sect = fs->bitbase;
                           A 21296    ; 4790						i = 0;				
                           A 21297    ; 4791						do {	/* Counts n
                           A 21298    ; 4792							if (i == 0) {
                           A 21299    ; 4793								res = move_
                           A 21300    ; 4794								if (res != 
                           A 21301    ; 4795							}
                           A 21302    ; 4796							for (b = 8, bm 
                           A 21303    ; 4797								if (!(bm & 
                           A 21304    ; 4798								bm >>= 1;
                           A 21305    ; 4799							}
                           A 21306    ; 4800							i = (i + 1) % S
                           A 21307    ; 4801						} while (clst);
                           A 21308    ; 4802					} else
                           A 21309    ; 4803	#endif
                           A 21310    ; 4804					{	/* FAT16/32: Scan W
                           A 21311    ; 4805						clst = fs->n_fatent
                           A 21312    .LINE 4805
                           A 21313    
005408 DD31FD              A 21314    	LD	IY,(IX+%FFFFFFFD)
00540B FD0716              A 21315    	LD	BC,(IY+%16)
00540E FD7E19              A 21316    	LD	A,(IY+%19)
005411 DD0FF2              A 21317    	LD	(IX+%FFFFFFF2),BC
005414 DD77F5              A 21318    	LD	(IX+%FFFFFFF5),A
                           A 21319    ; 4806						sect = fs->fatbase;
                           A 21320    .LINE 4806
                           A 21321    
005417 FD0722              A 21322    	LD	BC,(IY+%22)
00541A FD7E25              A 21323    	LD	A,(IY+%25)
00541D DD0FEB              A 21324    	LD	(IX+%FFFFFFEB),BC
005420 DD77EE              A 21325    	LD	(IX+%FFFFFFEE),A
                           A 21326    ; 4807						i = 0;				
                           A 21327    .LINE 4807
                           A 21328    
005423 01000000            A 21329    	LD	BC,0
005427 DD0FF6              A 21330    	LD	(IX+%FFFFFFF6),BC
                           A 21331    ; 4808						do {	/* Counts n
00542A                     A 21332    L_1066:
                           A 21333    .LINE 4808
                           A 21334    
                           A 21335    ; 4809							if (i == 0) {
                           A 21336    .LINE 4809
                           A 21337    
00542A DD27F6              A 21338    	LD	HL,(IX+%FFFFFFF6)
00542D B7                  A 21339    	OR	A,A
00542E ED42                A 21340    	SBC	HL,BC
005430 20 3E               A 21341    	JR	NZ,L_1064
                           A 21342    ; 4810								res = move_
                           A 21343    .LINE 4810
                           A 21344    
005432 DD27EB              A 21345    	LD	HL,(IX+%FFFFFFEB)
005435 DD2FD2              A 21346    	LD	(IX+%FFFFFFD2),HL	; spill
005438 DD4EEE              A 21347    	LD	C,(IX+%FFFFFFEE)
00543B DD27EB              A 21348    	LD	HL,(IX+%FFFFFFEB)
00543E DD5EEE              A 21349    	LD	E,(IX+%FFFFFFEE)
005441 3E01                A 21350    	LD	A,%1
005443 CD 00 00 00         A 21351    	CALL	__ladd_b
005447 DD2FEB              A 21352    	LD	(IX+%FFFFFFEB),HL
00544A DD73EE              A 21353    	LD	(IX+%FFFFFFEE),E
00544D 0600                A 21354    	LD	B,%0
00544F C5                  A 21355    	PUSH	BC
005450 DD27D2              A 21356    	LD	HL,(IX+%FFFFFFD2)	; unspill
005453 E5                  A 21357    	PUSH	HL
005454 DD07FD              A 21358    	LD	BC,(IX+%FFFFFFFD)
005457 C5                  A 21359    	PUSH	BC
005458 CD 1E 04 00         A 21360    	CALL	_move_window
00545C C1                  A 21361    	POP	BC
00545D C1                  A 21362    	POP	BC
00545E C1                  A 21363    	POP	BC
00545F DD2FEF              A 21364    	LD	(IX+%FFFFFFEF),HL
                           A 21365    ; 4811								if (res != 
                           A 21366    .LINE 4811
                           A 21367    
005462 01000000            A 21368    	LD	BC,0
005466 DD27EF              A 21369    	LD	HL,(IX+%FFFFFFEF)
005469 B7                  A 21370    	OR	A,A
00546A ED42                A 21371    	SBC	HL,BC
00546C C2 27 55 00         A 21372    	JR	NZ,L_1071
                           A 21373    ; 4812							}
005470                     A 21374    L_1064:
                           A 21375    .LINE 4812
                           A 21376    
                           A 21377    ; 4813							if (fs->fs_type
                           A 21378    .LINE 4813
                           A 21379    
005470 DD31FD              A 21380    	LD	IY,(IX+%FFFFFFFD)
005473 FD7E00              A 21381    	LD	A,(IY+%0)
005476 FE02                A 21382    	CP	A,%2
005478 20 37               A 21383    	JR	NZ,L_1063
                           A 21384    ; 4814								if (ld_word
                           A 21385    .LINE 4814
                           A 21386    
00547A DD07F6              A 21387    	LD	BC,(IX+%FFFFFFF6)
00547D DD31FD              A 21388    	LD	IY,(IX+%FFFFFFFD)
005480 ED2332              A 21389    	LEA	HL,IY+%32
005483 09                  A 21390    	ADD	HL,BC
005484 E5                  A 21391    	PUSH	HL
005485 CD 00 00 00         A 21392    	CALL	_ld_word
005489 C1                  A 21393    	POP	BC
00548A 49010000            A 21394    	LD.LIS	BC,0
00548E B7                  A 21395    	OR	A,A
00548F 40ED42              A 21396    	SBC.SIS	HL,BC
005492 20 12               A 21397    	JR	NZ,L_1058
005494 DD27F9              A 21398    	LD	HL,(IX+%FFFFFFF9)
005497 DD5EFC              A 21399    	LD	E,(IX+%FFFFFFFC)
00549A 3E01                A 21400    	LD	A,%1
00549C CD 00 00 00         A 21401    	CALL	__ladd_b
0054A0 DD2FF9              A 21402    	LD	(IX+%FFFFFFF9),HL
0054A3 DD73FC              A 21403    	LD	(IX+%FFFFFFFC),E
0054A6                     A 21404    L_1058:
                           A 21405    ; 4815								i += 2;
                           A 21406    .LINE 4815
                           A 21407    
0054A6 DD31F6              A 21408    	LD	IY,(IX+%FFFFFFF6)
0054A9 ED3302              A 21409    	LEA	IY,IY+%2
0054AC DD3EF6              A 21410    	LD	(IX+%FFFFFFF6),IY
                           A 21411    ; 4816							} else {
                           A 21412    .LINE 4816
                           A 21413    
0054AF 18 40               A 21414    	JR	L_1065
0054B1                     A 21415    L_1063:
                           A 21416    ; 4817								if ((ld_dwo
                           A 21417    .LINE 4817
                           A 21418    
0054B1 DD07F6              A 21419    	LD	BC,(IX+%FFFFFFF6)
0054B4 DD31FD              A 21420    	LD	IY,(IX+%FFFFFFFD)
0054B7 ED2332              A 21421    	LEA	HL,IY+%32
0054BA 09                  A 21422    	ADD	HL,BC
0054BB E5                  A 21423    	PUSH	HL
0054BC CD 3C 00 00         A 21424    	CALL	_ld_dword
0054C0 C1                  A 21425    	POP	BC
0054C1 01FFFFFF            A 21426    	LD	BC,16777215
0054C5 3E0F                A 21427    	LD	A,%F
0054C7 CD 00 00 00         A 21428    	CALL	__land
0054CB 01000000            A 21429    	LD	BC,0
0054CF AF                  A 21430    	XOR	A,A
0054D0 CD 00 00 00         A 21431    	CALL	__lcmpu
0054D4 20 12               A 21432    	JR	NZ,L_1061
0054D6 DD27F9              A 21433    	LD	HL,(IX+%FFFFFFF9)
0054D9 DD5EFC              A 21434    	LD	E,(IX+%FFFFFFFC)
0054DC 3E01                A 21435    	LD	A,%1
0054DE CD 00 00 00         A 21436    	CALL	__ladd_b
0054E2 DD2FF9              A 21437    	LD	(IX+%FFFFFFF9),HL
0054E5 DD73FC              A 21438    	LD	(IX+%FFFFFFFC),E
0054E8                     A 21439    L_1061:
                           A 21440    ; 4818								i += 4;
                           A 21441    .LINE 4818
                           A 21442    
0054E8 DD31F6              A 21443    	LD	IY,(IX+%FFFFFFF6)
0054EB ED3304              A 21444    	LEA	IY,IY+%4
0054EE DD3EF6              A 21445    	LD	(IX+%FFFFFFF6),IY
                           A 21446    ; 4819							}
0054F1                     A 21447    L_1065:
                           A 21448    .LINE 4819
                           A 21449    
                           A 21450    ; 4820							i %= SS(fs);
                           A 21451    .LINE 4820
                           A 21452    
0054F1 01FF0100            A 21453    	LD	BC,511
0054F5 DD27F6              A 21454    	LD	HL,(IX+%FFFFFFF6)
0054F8 CD 00 00 00         A 21455    	CALL	__iand
0054FC DD2FF6              A 21456    	LD	(IX+%FFFFFFF6),HL
                           A 21457    ; 4821						} while (--clst);
                           A 21458    .LINE 4821
                           A 21459    
0054FF DD27F2              A 21460    	LD	HL,(IX+%FFFFFFF2)
005502 DD5EF5              A 21461    	LD	E,(IX+%FFFFFFF5)
005505 01010000            A 21462    	LD	BC,1
005509 AF                  A 21463    	XOR	A,A
00550A CD 00 00 00         A 21464    	CALL	__lsub
00550E DD2FF2              A 21465    	LD	(IX+%FFFFFFF2),HL
005511 DD73F5              A 21466    	LD	(IX+%FFFFFFF5),E
005514 DD27F2              A 21467    	LD	HL,(IX+%FFFFFFF2)
005517 DD5EF5              A 21468    	LD	E,(IX+%FFFFFFF5)
00551A 01000000            A 21469    	LD	BC,0
00551E AF                  A 21470    	XOR	A,A
00551F CD 00 00 00         A 21471    	CALL	__lcmpu
005523 C2 2A 54 00         A 21472    	JR	NZ,L_1066
                           A 21473    ; 4822					}
                           A 21474    ; 4823				}
005527                     A 21475    L_1071:
                           A 21476    .LINE 4823
                           A 21477    
                           A 21478    ; 4824				if (res == FR_OK) {		/* 
                           A 21479    .LINE 4824
                           A 21480    
005527 01000000            A 21481    	LD	BC,0
00552B DD27EF              A 21482    	LD	HL,(IX+%FFFFFFEF)
00552E B7                  A 21483    	OR	A,A
00552F ED42                A 21484    	SBC	HL,BC
005531 20 26               A 21485    	JR	NZ,L_1075
                           A 21486    ; 4825					*nclst = nfree;			
                           A 21487    .LINE 4825
                           A 21488    
005533 DD2709              A 21489    	LD	HL,(IX+%9)
005536 DD07F9              A 21490    	LD	BC,(IX+%FFFFFFF9)
005539 DD7EFC              A 21491    	LD	A,(IX+%FFFFFFFC)
00553C ED0F                A 21492    	LD	(HL),BC
00553E 23                  A 21493    	INC	HL
00553F 23                  A 21494    	INC	HL
005540 23                  A 21495    	INC	HL
005541 77                  A 21496    	LD	(HL),A
                           A 21497    ; 4826					fs->free_clst = nfree;	
                           A 21498    .LINE 4826
                           A 21499    
005542 DD07F9              A 21500    	LD	BC,(IX+%FFFFFFF9)
005545 DD7EFC              A 21501    	LD	A,(IX+%FFFFFFFC)
005548 DD31FD              A 21502    	LD	IY,(IX+%FFFFFFFD)
00554B FD0F12              A 21503    	LD	(IY+%12),BC
00554E FD7715              A 21504    	LD	(IY+%15),A
                           A 21505    ; 4827					fs->fsi_flag |= 1;		
                           A 21506    .LINE 4827
                           A 21507    
005551 FD7E04              A 21508    	LD	A,(IY+%4)
005554 CBC7                A 21509    	SET	%0,A
005556 FD7704              A 21510    	LD	(IY+%4),A
                           A 21511    ; 4828				}
                           A 21512    ; 4829			}
                           A 21513    ; 4830		}
005559                     A 21514    L_1075:
                           A 21515    .LINE 4830
                           A 21516    
                           A 21517    ; 4831	
                           A 21518    ; 4832		LEAVE_FF(fs, res);
                           A 21519    .LINE 4832
                           A 21520    
005559 DD27EF              A 21521    	LD	HL,(IX+%FFFFFFEF)
                           A 21522    ; 4833	}
                           A 21523    .LINE 4833
                           A 21524    
00555C DDF9                A 21525    	LD	SP,IX
00555E DDE1                A 21526    	POP	IX
005560 C9                  A 21527    	RET	
                           A 21528    
                           A 21529    
                           A 21530    ;**************************** _f_getfree ******
                           A 21531    ;Name                         Addr/Register   S
                           A 21532    ;obj                                  IX-40    
                           A 21533    ;stat                                 IX-25    
                           A 21534    ;sect                                 IX-21    
                           A 21535    ;res                                  IX-17    
                           A 21536    ;clst                                 IX-14    
                           A 21537    ;i                                    IX-10    
                           A 21538    ;nfree                                 IX-7    
                           A 21539    ;fs                                    IX-3    
                           A 21540    ;fatfs                                IX+12    
                           A 21541    ;nclst                                 IX+9    
                           A 21542    ;path                                  IX+6    
                           A 21543    
                           A 21544    
                           A 21545    ; Stack Frame Size: 61 (bytes)
                           A 21546    ;       Spill Code: -3 (instruction)
                           A 21547    
                           A 21548    
                           A 21549    .ENDFUNC "f_getfree",4833,"_f_getfree"
                           A 21550    ; 4834	
                           A 21551    ; 4835	
                           A 21552    ; 4836	
                           A 21553    ; 4837	
                           A 21554    ; 4838	/*-------------------------------------
                           A 21555    ; 4839	/* Truncate File                       
                           A 21556    ; 4840	/*-------------------------------------
                           A 21557    ; 4841	
                           A 21558    ; 4842	FRESULT f_truncate (
                           A 21559    ; 4843		FIL* fp		/* Pointer to the file 
                           A 21560    ; 4844	)
                           A 21561    ; 4845	{
005561                     A 21562    _f_truncate:
                           A 21563    .DEFINE "_f_truncate"
                           A 21564    
                           A 21565    .VALUE _f_truncate
                           A 21566    
                           A 21567    .CLASS 2
                           A 21568    
                           A 21569    .TYPE 68
                           A 21570    
                           A 21571    .ENDEF
                           A 21572    
                           A 21573    .BEGFUNC "f_truncate",4845,"_f_truncate"
                           A 21574    
                           A 21575    .LINE 4845
                           A 21576    
                           A 21577    .DEFINE "fp"
                           A 21578    
                           A 21579    .CLASS 65
                           A 21580    
                           A 21581    .VALUE 6
                           A 21582    
                           A 21583    .TAG "NONAME2"
                           A 21584    
                           A 21585    .TYPE 40
                           A 21586    
                           A 21587    .ENDEF
                           A 21588    
                           A 21589    .DEFINE "res"
                           A 21590    
                           A 21591    .CLASS 65
                           A 21592    
                           A 21593    .VALUE -3
                           A 21594    
                           A 21595    .TYPE 4
                           A 21596    
                           A 21597    .ENDEF
                           A 21598    
                           A 21599    .DEFINE "ncl"
                           A 21600    
                           A 21601    .CLASS 65
                           A 21602    
                           A 21603    .VALUE -7
                           A 21604    
                           A 21605    .TYPE 15
                           A 21606    
                           A 21607    .ENDEF
                           A 21608    
                           A 21609    .DEFINE "fs"
                           A 21610    
                           A 21611    .CLASS 65
                           A 21612    
                           A 21613    .VALUE -10
                           A 21614    
                           A 21615    .TAG "NONAME0"
                           A 21616    
                           A 21617    .TYPE 40
                           A 21618    
                           A 21619    .ENDEF
                           A 21620    
005561 DDE5                A 21621    	PUSH	IX
005563 DD210000 00         A 21622    	LD	IX,0
005568 DD39                A 21623    	ADD	IX,SP
00556A ED22EF              A 21624    	LEA	HL,IX+%FFFFFFEF
00556D F9                  A 21625    	LD	SP,HL
                           A 21626    ; 4846		FRESULT res;
                           A 21627    ; 4847		FATFS *fs;
                           A 21628    ; 4848		DWORD ncl;
                           A 21629    ; 4849	
                           A 21630    ; 4850	
                           A 21631    ; 4851		res = validate(&fp->obj, &fs);	/* 
                           A 21632    .LINE 4851
                           A 21633    
00556E ED65F6              A 21634    	PEA	IX+%FFFFFFF6
005571 DD3106              A 21635    	LD	IY,(IX+%6)
005574 ED6600              A 21636    	PEA	IY+%0
005577 CD 19 3A 00         A 21637    	CALL	_validate
00557B C1                  A 21638    	POP	BC
00557C C1                  A 21639    	POP	BC
00557D DD2FFD              A 21640    	LD	(IX+%FFFFFFFD),HL
                           A 21641    ; 4852		if (res != FR_OK || (res = (FRESULT
                           A 21642    .LINE 4852
                           A 21643    
005580 01000000            A 21644    	LD	BC,0
005584 DD27FD              A 21645    	LD	HL,(IX+%FFFFFFFD)
005587 B7                  A 21646    	OR	A,A
005588 ED42                A 21647    	SBC	HL,BC
00558A 20 15               A 21648    	JR	NZ,L_1078
00558C DD3106              A 21649    	LD	IY,(IX+%6)
00558F FD7E10              A 21650    	LD	A,(IY+%10)
005592 B7ED62              A 21651    	UEXT	HL
005595 6F                  A 21652    	LD	L,A
005596 DD2FFD              A 21653    	LD	(IX+%FFFFFFFD),HL
005599 DD27FD              A 21654    	LD	HL,(IX+%FFFFFFFD)
00559C B7                  A 21655    	OR	A,A
00559D ED42                A 21656    	SBC	HL,BC
00559F 28 07               A 21657    	JR	Z,L_1080
0055A1                     A 21658    L_1078:
0055A1 DD27FD              A 21659    	LD	HL,(IX+%FFFFFFFD)
0055A4 C3 59 57 00         A 21660    	JR	L_1100
0055A8                     A 21661    L_1080:
                           A 21662    ; 4853		if (!(fp->flag & FA_WRITE)) LEAVE_F
                           A 21663    .LINE 4853
                           A 21664    
0055A8 DD3106              A 21665    	LD	IY,(IX+%6)
0055AB FD7E0F              A 21666    	LD	A,(IY+%F)
0055AE E602                A 21667    	AND	A,%2
0055B0 20 08               A 21668    	JR	NZ,L_1098
0055B2 21070000            A 21669    	LD	HL,7
0055B6 C3 59 57 00         A 21670    	JR	L_1100
0055BA                     A 21671    L_1098:
                           A 21672    ; 4854	
                           A 21673    ; 4855		if (fp->fptr < fp->obj.objsize) {	
                           A 21674    .LINE 4855
                           A 21675    
0055BA DD3106              A 21676    	LD	IY,(IX+%6)
0055BD FD0711              A 21677    	LD	BC,(IY+%11)
0055C0 FD7E14              A 21678    	LD	A,(IY+%14)
0055C3 DD0FF2              A 21679    	LD	(IX+%FFFFFFF2),BC
0055C6 DD77F5              A 21680    	LD	(IX+%FFFFFFF5),A
0055C9 C5E1                A 21681    	LD	HL,BC
0055CB DD5EF5              A 21682    	LD	E,(IX+%FFFFFFF5)
0055CE FD070B              A 21683    	LD	BC,(IY+%B)
0055D1 FD7E0E              A 21684    	LD	A,(IY+%E)
0055D4 CD 00 00 00         A 21685    	CALL	__lcmpu
0055D8 D2 56 57 00         A 21686    	JR	NC,L_1099
                           A 21687    ; 4856			if (fp->fptr == 0) {	/* When
                           A 21688    .LINE 4856
                           A 21689    
0055DC DD27F2              A 21690    	LD	HL,(IX+%FFFFFFF2)
0055DF DD5EF5              A 21691    	LD	E,(IX+%FFFFFFF5)
0055E2 01000000            A 21692    	LD	BC,0
0055E6 AF                  A 21693    	XOR	A,A
0055E7 CD 00 00 00         A 21694    	CALL	__lcmpu
0055EB 20 3F               A 21695    	JR	NZ,L_1088
                           A 21696    ; 4857				res = remove_chain(&fp->obj
                           A 21697    .LINE 4857
                           A 21698    
0055ED DD3106              A 21699    	LD	IY,(IX+%6)
0055F0 ED0300              A 21700    	LEA	BC,IY+%0
0055F3 DD0FEF              A 21701    	LD	(IX+%FFFFFFEF),BC
0055F6 01000000            A 21702    	LD	BC,0
0055FA C5                  A 21703    	PUSH	BC
0055FB C5                  A 21704    	PUSH	BC
0055FC DD31EF              A 21705    	LD	IY,(IX+%FFFFFFEF)
0055FF FD0707              A 21706    	LD	BC,(IY+%7)
005602 FD7E0A              A 21707    	LD	A,(IY+%A)
005605 2600                A 21708    	LD	H,%0
005607 6F                  A 21709    	LD	L,A
005608 E5                  A 21710    	PUSH	HL
005609 C5                  A 21711    	PUSH	BC
00560A DD07EF              A 21712    	LD	BC,(IX+%FFFFFFEF)
00560D C5                  A 21713    	PUSH	BC
00560E CD F4 0B 00         A 21714    	CALL	_remove_chain
005612 C1                  A 21715    	POP	BC
005613 C1                  A 21716    	POP	BC
005614 C1                  A 21717    	POP	BC
005615 C1                  A 21718    	POP	BC
005616 C1                  A 21719    	POP	BC
005617 DD2FFD              A 21720    	LD	(IX+%FFFFFFFD),HL
                           A 21721    ; 4858				fp->obj.sclust = 0;
                           A 21722    .LINE 4858
                           A 21723    
00561A 01000000            A 21724    	LD	BC,0
00561E DD3106              A 21725    	LD	IY,(IX+%6)
005621 FD0F07              A 21726    	LD	(IY+%7),BC
005624 FD360A00            A 21727    	LD	(IY+%A),%0
                           A 21728    ; 4859			} else {				/* When
                           A 21729    .LINE 4859
                           A 21730    
005628 C3 CA 56 00         A 21731    	JR	L_1089
00562C                     A 21732    L_1088:
                           A 21733    ; 4860				ncl = get_fat(&fp->obj, fp-
                           A 21734    .LINE 4860
                           A 21735    
00562C DD3106              A 21736    	LD	IY,(IX+%6)
00562F FD0715              A 21737    	LD	BC,(IY+%15)
005632 FD7E18              A 21738    	LD	A,(IY+%18)
005635 2600                A 21739    	LD	H,%0
005637 6F                  A 21740    	LD	L,A
005638 E5                  A 21741    	PUSH	HL
005639 C5                  A 21742    	PUSH	BC
00563A ED6600              A 21743    	PEA	IY+%0
00563D CD 64 06 00         A 21744    	CALL	_get_fat
005641 C1                  A 21745    	POP	BC
005642 C1                  A 21746    	POP	BC
005643 C1                  A 21747    	POP	BC
005644 DD2FF9              A 21748    	LD	(IX+%FFFFFFF9),HL
005647 DD73FC              A 21749    	LD	(IX+%FFFFFFFC),E
                           A 21750    ; 4861				res = FR_OK;
                           A 21751    .LINE 4861
                           A 21752    
00564A 01000000            A 21753    	LD	BC,0
00564E DD0FFD              A 21754    	LD	(IX+%FFFFFFFD),BC
                           A 21755    ; 4862				if (ncl == 0xFFFFFFFF) res 
                           A 21756    .LINE 4862
                           A 21757    
005651 DD27F9              A 21758    	LD	HL,(IX+%FFFFFFF9)
005654 DD5EFC              A 21759    	LD	E,(IX+%FFFFFFFC)
005657 01FFFFFF            A 21760    	LD	BC,16777215
00565B 3EFF                A 21761    	LD	A,%FF
00565D CD 00 00 00         A 21762    	CALL	__lcmpu
005661 20 07               A 21763    	JR	NZ,L_1083
005663 01010000            A 21764    	LD	BC,1
005667 DD0FFD              A 21765    	LD	(IX+%FFFFFFFD),BC
00566A                     A 21766    L_1083:
                           A 21767    ; 4863				if (ncl == 1) res = FR_INT_
                           A 21768    .LINE 4863
                           A 21769    
00566A DD27F9              A 21770    	LD	HL,(IX+%FFFFFFF9)
00566D DD5EFC              A 21771    	LD	E,(IX+%FFFFFFFC)
005670 01010000            A 21772    	LD	BC,1
005674 AF                  A 21773    	XOR	A,A
005675 CD 00 00 00         A 21774    	CALL	__lcmpu
005679 20 07               A 21775    	JR	NZ,L_1086
00567B 01020000            A 21776    	LD	BC,2
00567F DD0FFD              A 21777    	LD	(IX+%FFFFFFFD),BC
005682                     A 21778    L_1086:
                           A 21779    ; 4864				if (res == FR_OK && ncl < f
                           A 21780    .LINE 4864
                           A 21781    
005682 01000000            A 21782    	LD	BC,0
005686 DD27FD              A 21783    	LD	HL,(IX+%FFFFFFFD)
005689 B7                  A 21784    	OR	A,A
00568A ED42                A 21785    	SBC	HL,BC
00568C 20 3C               A 21786    	JR	NZ,L_1089
00568E DD27F9              A 21787    	LD	HL,(IX+%FFFFFFF9)
005691 DD5EFC              A 21788    	LD	E,(IX+%FFFFFFFC)
005694 DD31F6              A 21789    	LD	IY,(IX+%FFFFFFF6)
005697 FD0716              A 21790    	LD	BC,(IY+%16)
00569A FD7E19              A 21791    	LD	A,(IY+%19)
00569D CD 00 00 00         A 21792    	CALL	__lcmpu
0056A1 30 27               A 21793    	JR	NC,L_1089
                           A 21794    ; 4865					res = remove_chain(&fp-
                           A 21795    .LINE 4865
                           A 21796    
0056A3 DD3106              A 21797    	LD	IY,(IX+%6)
0056A6 FD0715              A 21798    	LD	BC,(IY+%15)
0056A9 FD7E18              A 21799    	LD	A,(IY+%18)
0056AC 2600                A 21800    	LD	H,%0
0056AE 6F                  A 21801    	LD	L,A
0056AF E5                  A 21802    	PUSH	HL
0056B0 C5                  A 21803    	PUSH	BC
0056B1 DD4EFC              A 21804    	LD	C,(IX+%FFFFFFFC)
0056B4 0600                A 21805    	LD	B,%0
0056B6 C5                  A 21806    	PUSH	BC
0056B7 DD07F9              A 21807    	LD	BC,(IX+%FFFFFFF9)
0056BA C5                  A 21808    	PUSH	BC
0056BB ED6600              A 21809    	PEA	IY+%0
0056BE CD F4 0B 00         A 21810    	CALL	_remove_chain
0056C2 C1                  A 21811    	POP	BC
0056C3 C1                  A 21812    	POP	BC
0056C4 C1                  A 21813    	POP	BC
0056C5 C1                  A 21814    	POP	BC
0056C6 C1                  A 21815    	POP	BC
0056C7 DD2FFD              A 21816    	LD	(IX+%FFFFFFFD),HL
                           A 21817    ; 4866				}
                           A 21818    ; 4867			}
0056CA                     A 21819    L_1089:
                           A 21820    .LINE 4867
                           A 21821    
                           A 21822    ; 4868			fp->obj.objsize = fp->fptr;	/* 
                           A 21823    .LINE 4868
                           A 21824    
0056CA DD3106              A 21825    	LD	IY,(IX+%6)
0056CD FD0711              A 21826    	LD	BC,(IY+%11)
0056D0 FD7E14              A 21827    	LD	A,(IY+%14)
0056D3 FD0F0B              A 21828    	LD	(IY+%B),BC
0056D6 FD770E              A 21829    	LD	(IY+%E),A
                           A 21830    ; 4869			fp->flag |= FA_MODIFIED;
                           A 21831    .LINE 4869
                           A 21832    
0056D9 FD7E0F              A 21833    	LD	A,(IY+%F)
0056DC CBF7                A 21834    	SET	%6,A
0056DE FD770F              A 21835    	LD	(IY+%F),A
                           A 21836    ; 4870	#if !FF_FS_TINY
                           A 21837    ; 4871			if (res == FR_OK && (fp->flag &
                           A 21838    .LINE 4871
                           A 21839    
0056E1 01000000            A 21840    	LD	BC,0
0056E5 DD27FD              A 21841    	LD	HL,(IX+%FFFFFFFD)
0056E8 B7                  A 21842    	OR	A,A
0056E9 ED42                A 21843    	SBC	HL,BC
0056EB 20 4F               A 21844    	JR	NZ,L_1095
0056ED DD3106              A 21845    	LD	IY,(IX+%6)
0056F0 FD7E0F              A 21846    	LD	A,(IY+%F)
0056F3 E680                A 21847    	AND	A,%80
0056F5 28 45               A 21848    	JR	Z,L_1095
                           A 21849    ; 4872				if (disk_write(fs->pdrv, fp
                           A 21850    .LINE 4872
                           A 21851    
0056F7 01010000            A 21852    	LD	BC,1
0056FB C5                  A 21853    	PUSH	BC
0056FC DD3106              A 21854    	LD	IY,(IX+%6)
0056FF FD0719              A 21855    	LD	BC,(IY+%19)
005702 FD7E1C              A 21856    	LD	A,(IY+%1C)
005705 2600                A 21857    	LD	H,%0
005707 6F                  A 21858    	LD	L,A
005708 E5                  A 21859    	PUSH	HL
005709 C5                  A 21860    	PUSH	BC
00570A ED6624              A 21861    	PEA	IY+%24
00570D DD31F6              A 21862    	LD	IY,(IX+%FFFFFFF6)
005710 FD4E01              A 21863    	LD	C,(IY+%1)
005713 0600                A 21864    	LD	B,%0
005715 C5                  A 21865    	PUSH	BC
005716 CD 00 00 00         A 21866    	CALL	_disk_write
00571A C1                  A 21867    	POP	BC
00571B C1                  A 21868    	POP	BC
00571C C1                  A 21869    	POP	BC
00571D C1                  A 21870    	POP	BC
00571E C1                  A 21871    	POP	BC
00571F 01000000            A 21872    	LD	BC,0
005723 B7                  A 21873    	OR	A,A
005724 ED42                A 21874    	SBC	HL,BC
005726 28 09               A 21875    	JR	Z,L_1092
                           A 21876    ; 4873					res = FR_DISK_ERR;
                           A 21877    .LINE 4873
                           A 21878    
005728 01010000            A 21879    	LD	BC,1
00572C DD0FFD              A 21880    	LD	(IX+%FFFFFFFD),BC
                           A 21881    ; 4874				} else {
                           A 21882    .LINE 4874
                           A 21883    
00572F 18 0B               A 21884    	JR	L_1095
005731                     A 21885    L_1092:
                           A 21886    ; 4875					fp->flag &= (BYTE)~FA_D
                           A 21887    .LINE 4875
                           A 21888    
005731 DD3106              A 21889    	LD	IY,(IX+%6)
005734 FD7E0F              A 21890    	LD	A,(IY+%F)
005737 CBBF                A 21891    	RES	%7,A
005739 FD770F              A 21892    	LD	(IY+%F),A
                           A 21893    ; 4876				}
                           A 21894    ; 4877			}
00573C                     A 21895    L_1095:
                           A 21896    .LINE 4877
                           A 21897    
                           A 21898    ; 4878	#endif
                           A 21899    ; 4879			if (res != FR_OK) ABORT(fs, res
                           A 21900    .LINE 4879
                           A 21901    
00573C 01000000            A 21902    	LD	BC,0
005740 DD27FD              A 21903    	LD	HL,(IX+%FFFFFFFD)
005743 B7                  A 21904    	OR	A,A
005744 ED42                A 21905    	SBC	HL,BC
005746 28 0E               A 21906    	JR	Z,L_1099
005748 DD7EFD              A 21907    	LD	A,(IX+%FFFFFFFD)
00574B DD3106              A 21908    	LD	IY,(IX+%6)
00574E FD7710              A 21909    	LD	(IY+%10),A
005751 DD27FD              A 21910    	LD	HL,(IX+%FFFFFFFD)
005754 18 03               A 21911    	JR	L_1100
                           A 21912    ; 4880		}
005756                     A 21913    L_1099:
                           A 21914    .LINE 4880
                           A 21915    
                           A 21916    ; 4881	
                           A 21917    ; 4882		LEAVE_FF(fs, res);
                           A 21918    .LINE 4882
                           A 21919    
005756 DD27FD              A 21920    	LD	HL,(IX+%FFFFFFFD)
                           A 21921    ; 4883	}
005759                     A 21922    L_1100:
                           A 21923    .LINE 4883
                           A 21924    
005759 DDF9                A 21925    	LD	SP,IX
00575B DDE1                A 21926    	POP	IX
00575D C9                  A 21927    	RET	
                           A 21928    
                           A 21929    
                           A 21930    ;**************************** _f_truncate *****
                           A 21931    ;Name                         Addr/Register   S
                           A 21932    ;_disk_write                         IMPORT  --
                           A 21933    ;G_87                                 IX-14    
                           A 21934    ;fs                                   IX-10    
                           A 21935    ;ncl                                   IX-7    
                           A 21936    ;res                                   IX-3    
                           A 21937    ;fp                                    IX+6    
                           A 21938    
                           A 21939    
                           A 21940    ; Stack Frame Size: 26 (bytes)
                           A 21941    ;       Spill Code: -3 (instruction)
                           A 21942    
                           A 21943    
                           A 21944    .ENDFUNC "f_truncate",4883,"_f_truncate"
                           A 21945    ; 4884	
                           A 21946    ; 4885	
                           A 21947    ; 4886	
                           A 21948    ; 4887	
                           A 21949    ; 4888	/*-------------------------------------
                           A 21950    ; 4889	/* Delete a File/Directory             
                           A 21951    ; 4890	/*-------------------------------------
                           A 21952    ; 4891	
                           A 21953    ; 4892	FRESULT f_unlink (
                           A 21954    ; 4893		const TCHAR* path		/* Pointer 
                           A 21955    ; 4894	)
                           A 21956    ; 4895	{
00575E                     A 21957    _f_unlink:
                           A 21958    .DEFINE "_f_unlink"
                           A 21959    
                           A 21960    .VALUE _f_unlink
                           A 21961    
                           A 21962    .CLASS 2
                           A 21963    
                           A 21964    .TYPE 68
                           A 21965    
                           A 21966    .ENDEF
                           A 21967    
                           A 21968    .BEGFUNC "f_unlink",4895,"_f_unlink"
                           A 21969    
                           A 21970    .LINE 4895
                           A 21971    
                           A 21972    .DEFINE "path"
                           A 21973    
                           A 21974    .CLASS 65
                           A 21975    
                           A 21976    .VALUE 6
                           A 21977    
                           A 21978    .TYPE 194
                           A 21979    
                           A 21980    .ENDEF
                           A 21981    
                           A 21982    .DEFINE "res"
                           A 21983    
                           A 21984    .CLASS 65
                           A 21985    
                           A 21986    .VALUE -3
                           A 21987    
                           A 21988    .TYPE 4
                           A 21989    
                           A 21990    .ENDEF
                           A 21991    
                           A 21992    .DEFINE "fs"
                           A 21993    
                           A 21994    .CLASS 65
                           A 21995    
                           A 21996    .VALUE -6
                           A 21997    
                           A 21998    .TAG "NONAME0"
                           A 21999    
                           A 22000    .TYPE 40
                           A 22001    
                           A 22002    .ENDEF
                           A 22003    
                           A 22004    .DEFINE "dclst"
                           A 22005    
                           A 22006    .CLASS 65
                           A 22007    
                           A 22008    .VALUE -10
                           A 22009    
                           A 22010    .TYPE 15
                           A 22011    
                           A 22012    .ENDEF
                           A 22013    
                           A 22014    .DEFINE "dj"
                           A 22015    
                           A 22016    .CLASS 65
                           A 22017    
                           A 22018    .VALUE -56
                           A 22019    
                           A 22020    .TAG "NONAME3"
                           A 22021    
                           A 22022    .TYPE 8
                           A 22023    
                           A 22024    .ENDEF
                           A 22025    
                           A 22026    .DEFINE "sdj"
                           A 22027    
                           A 22028    .CLASS 65
                           A 22029    
                           A 22030    .VALUE -102
                           A 22031    
                           A 22032    .TAG "NONAME3"
                           A 22033    
                           A 22034    .TYPE 8
                           A 22035    
                           A 22036    .ENDEF
                           A 22037    
                           A 22038    .DEFINE "lbuf"
                           A 22039    
                           A 22040    .CLASS 65
                           A 22041    
                           A 22042    .VALUE -614
                           A 22043    
                           A 22044    .DIM 256
                           A 22045    
                           A 22046    .TYPE 109
                           A 22047    
                           A 22048    .ENDEF
                           A 22049    
00575E DDE5                A 22050    	PUSH	IX
005760 DD210000 00         A 22051    	LD	IX,0
005765 DD39                A 22052    	ADD	IX,SP
005767 2197FDFF            A 22053    	LD	HL,-617
00576B 39                  A 22054    	ADD	HL,SP
00576C F9                  A 22055    	LD	SP,HL
                           A 22056    ; 4896		FRESULT res;
                           A 22057    ; 4897		DIR dj, sdj;
                           A 22058    ; 4898		DWORD dclst = 0;
                           A 22059    .LINE 4898
                           A 22060    
00576D 01000000            A 22061    	LD	BC,0
005771 AF                  A 22062    	XOR	A,A
005772 DD0FF6              A 22063    	LD	(IX+%FFFFFFF6),BC
005775 DD77F9              A 22064    	LD	(IX+%FFFFFFF9),A
                           A 22065    ; 4899		FATFS *fs;
                           A 22066    ; 4900	#if FF_FS_EXFAT
                           A 22067    ; 4901		FFOBJID obj;
                           A 22068    ; 4902	#endif
                           A 22069    ; 4903		DEF_NAMBUF
                           A 22070    ; 4904	
                           A 22071    ; 4905	
                           A 22072    ; 4906		/* Get logical drive */
                           A 22073    ; 4907		res = mount_volume(&path, &fs, FA_W
                           A 22074    .LINE 4907
                           A 22075    
005778 01020000            A 22076    	LD	BC,2
00577C C5                  A 22077    	PUSH	BC
00577D ED65FA              A 22078    	PEA	IX+%FFFFFFFA
005780 ED6506              A 22079    	PEA	IX+%6
005783 CD 6E 33 00         A 22080    	CALL	_mount_volume
005787 C1                  A 22081    	POP	BC
005788 C1                  A 22082    	POP	BC
005789 C1                  A 22083    	POP	BC
00578A DD2FFD              A 22084    	LD	(IX+%FFFFFFFD),HL
                           A 22085    ; 4908		if (res == FR_OK) {
                           A 22086    .LINE 4908
                           A 22087    
00578D 01000000            A 22088    	LD	BC,0
005791 DD27FD              A 22089    	LD	HL,(IX+%FFFFFFFD)
005794 B7                  A 22090    	OR	A,A
005795 ED42                A 22091    	SBC	HL,BC
005797 C2 F5 58 00         A 22092    	JR	NZ,L_1122
                           A 22093    ; 4909			dj.obj.fs = fs;
                           A 22094    .LINE 4909
                           A 22095    
00579B DD07FA              A 22096    	LD	BC,(IX+%FFFFFFFA)
00579E DD0FC8              A 22097    	LD	(IX+%FFFFFFC8),BC
                           A 22098    ; 4910			INIT_NAMBUF(fs);
                           A 22099    .LINE 4910
                           A 22100    
0057A1 DDE5E1              A 22101    	LD	HL,IX
0057A4 019AFDFF            A 22102    	LD	BC,-614
0057A8 09                  A 22103    	ADD	HL,BC
0057A9 DD31FA              A 22104    	LD	IY,(IX+%FFFFFFFA)
0057AC FD2F0B              A 22105    	LD	(IY+%B),HL
                           A 22106    ; 4911			res = follow_path(&dj, path);	
                           A 22107    .LINE 4911
                           A 22108    
0057AF DD0706              A 22109    	LD	BC,(IX+%6)
0057B2 C5                  A 22110    	PUSH	BC
0057B3 ED65C8              A 22111    	PEA	IX+%FFFFFFC8
0057B6 CD 00 2E 00         A 22112    	CALL	_follow_path
0057BA C1                  A 22113    	POP	BC
0057BB C1                  A 22114    	POP	BC
0057BC DD2FFD              A 22115    	LD	(IX+%FFFFFFFD),HL
                           A 22116    ; 4912			if (FF_FS_RPATH && res == FR_OK
                           A 22117    ; 4913				res = FR_INVALID_NAME;		
                           A 22118    ; 4914			}
                           A 22119    ; 4915	#if FF_FS_LOCK != 0
                           A 22120    ; 4916			if (res == FR_OK) res = chk_loc
                           A 22121    ; 4917	#endif
                           A 22122    ; 4918			if (res == FR_OK) {				
                           A 22123    .LINE 4918
                           A 22124    
0057BF 01000000            A 22125    	LD	BC,0
0057C3 DD27FD              A 22126    	LD	HL,(IX+%FFFFFFFD)
0057C6 B7                  A 22127    	OR	A,A
0057C7 ED42                A 22128    	SBC	HL,BC
0057C9 C2 F5 58 00         A 22129    	JR	NZ,L_1120
                           A 22130    ; 4919				if (dj.fn[NSFLAG] & NS_NONA
                           A 22131    .LINE 4919
                           A 22132    
0057CD ED55E6              A 22133    	LEA	IY,IX+%FFFFFFE6
0057D0 FD7E0B              A 22134    	LD	A,(IY+%B)
0057D3 E680                A 22135    	AND	A,%80
0057D5 28 09               A 22136    	JR	Z,L_1104
                           A 22137    ; 4920					res = FR_INVALID_NAME;	
                           A 22138    .LINE 4920
                           A 22139    
0057D7 01060000            A 22140    	LD	BC,6
0057DB DD0FFD              A 22141    	LD	(IX+%FFFFFFFD),BC
                           A 22142    ; 4921				} else {
                           A 22143    .LINE 4921
                           A 22144    
0057DE 18 0E               A 22145    	JR	L_1111
0057E0                     A 22146    L_1104:
                           A 22147    ; 4922					if (dj.obj.attr & AM_RD
                           A 22148    .LINE 4922
                           A 22149    
0057E0 DD7ECD              A 22150    	LD	A,(IX+%FFFFFFCD)
0057E3 E601                A 22151    	AND	A,%1
0057E5 28 07               A 22152    	JR	Z,L_1111
                           A 22153    ; 4923						res = FR_DENIED;	
                           A 22154    .LINE 4923
                           A 22155    
0057E7 01070000            A 22156    	LD	BC,7
0057EB DD0FFD              A 22157    	LD	(IX+%FFFFFFFD),BC
                           A 22158    ; 4924					}
                           A 22159    ; 4925				}
0057EE                     A 22160    L_1111:
                           A 22161    .LINE 4925
                           A 22162    
                           A 22163    ; 4926				if (res == FR_OK) {
                           A 22164    .LINE 4926
                           A 22165    
0057EE 01000000            A 22166    	LD	BC,0
0057F2 DD27FD              A 22167    	LD	HL,(IX+%FFFFFFFD)
0057F5 B7                  A 22168    	OR	A,A
0057F6 ED42                A 22169    	SBC	HL,BC
0057F8 C2 92 58 00         A 22170    	JR	NZ,L_1117
                           A 22171    ; 4927	#if FF_FS_EXFAT
                           A 22172    ; 4928					obj.fs = fs;
                           A 22173    ; 4929					if (fs->fs_type == FS_E
                           A 22174    ; 4930						init_alloc_info(fs,
                           A 22175    ; 4931						dclst = obj.sclust;
                           A 22176    ; 4932					} else
                           A 22177    ; 4933	#endif
                           A 22178    ; 4934					{
                           A 22179    ; 4935						dclst = ld_clust(fs
                           A 22180    .LINE 4935
                           A 22181    
0057FC DD07E3              A 22182    	LD	BC,(IX+%FFFFFFE3)
0057FF C5                  A 22183    	PUSH	BC
005800 DD07FA              A 22184    	LD	BC,(IX+%FFFFFFFA)
005803 C5                  A 22185    	PUSH	BC
005804 CD EE 17 00         A 22186    	CALL	_ld_clust
005808 C1                  A 22187    	POP	BC
005809 C1                  A 22188    	POP	BC
00580A DD2FF6              A 22189    	LD	(IX+%FFFFFFF6),HL
00580D DD73F9              A 22190    	LD	(IX+%FFFFFFF9),E
                           A 22191    ; 4936					}
                           A 22192    ; 4937					if (dj.obj.attr & AM_DI
                           A 22193    .LINE 4937
                           A 22194    
005810 DD7ECD              A 22195    	LD	A,(IX+%FFFFFFCD)
005813 E610                A 22196    	AND	A,%10
005815 28 7B               A 22197    	JR	Z,L_1117
                           A 22198    ; 4938	#if FF_FS_RPATH != 0
                           A 22199    ; 4939						if (dclst == fs->cd
                           A 22200    ; 4940							res = FR_DENIED
                           A 22201    ; 4941						} else
                           A 22202    ; 4942	#endif
                           A 22203    ; 4943						{
                           A 22204    ; 4944							sdj.obj.fs = fs
                           A 22205    .LINE 4944
                           A 22206    
005817 ED029A              A 22207    	LEA	BC,IX+%FFFFFF9A
00581A 2197FDFF            A 22208    	LD	HL,-617
00581E DDE5D1              A 22209    	LD	DE,IX
005821 19                  A 22210    	ADD	HL,DE
005822 ED0F                A 22211    	LD	(HL),BC
005824 DD07FA              A 22212    	LD	BC,(IX+%FFFFFFFA)
005827 DD0F9A              A 22213    	LD	(IX+%FFFFFF9A),BC
                           A 22214    ; 4945							sdj.obj.sclust 
                           A 22215    .LINE 4945
                           A 22216    
00582A 2197FDFF            A 22217    	LD	HL,-617
00582E DDE5C1              A 22218    	LD	BC,IX
005831 09                  A 22219    	ADD	HL,BC
005832 ED31                A 22220    	LD	IY,(HL)
005834 DD07F6              A 22221    	LD	BC,(IX+%FFFFFFF6)
005837 DD7EF9              A 22222    	LD	A,(IX+%FFFFFFF9)
00583A FD0F07              A 22223    	LD	(IY+%7),BC
00583D FD770A              A 22224    	LD	(IY+%A),A
                           A 22225    ; 4946	#if FF_FS_EXFAT
                           A 22226    ; 4947							if (fs->fs_type
                           A 22227    ; 4948								sdj.obj.obj
                           A 22228    ; 4949								sdj.obj.sta
                           A 22229    ; 4950							}
                           A 22230    ; 4951	#endif
                           A 22231    ; 4952							res = dir_sdi(&
                           A 22232    .LINE 4952
                           A 22233    
005840 01000000            A 22234    	LD	BC,0
005844 C5                  A 22235    	PUSH	BC
005845 C5                  A 22236    	PUSH	BC
005846 ED659A              A 22237    	PEA	IX+%FFFFFF9A
005849 CD 50 12 00         A 22238    	CALL	_dir_sdi
00584D C1                  A 22239    	POP	BC
00584E C1                  A 22240    	POP	BC
00584F C1                  A 22241    	POP	BC
005850 DD2FFD              A 22242    	LD	(IX+%FFFFFFFD),HL
                           A 22243    ; 4953							if (res == FR_O
                           A 22244    .LINE 4953
                           A 22245    
005853 01000000            A 22246    	LD	BC,0
005857 DD27FD              A 22247    	LD	HL,(IX+%FFFFFFFD)
00585A B7                  A 22248    	OR	A,A
00585B ED42                A 22249    	SBC	HL,BC
00585D 20 33               A 22250    	JR	NZ,L_1117
                           A 22251    ; 4954								res = DIR_R
                           A 22252    .LINE 4954
                           A 22253    
00585F C5                  A 22254    	PUSH	BC
005860 ED659A              A 22255    	PEA	IX+%FFFFFF9A
005863 CD 46 1E 00         A 22256    	CALL	_dir_read
005867 C1                  A 22257    	POP	BC
005868 C1                  A 22258    	POP	BC
005869 DD2FFD              A 22259    	LD	(IX+%FFFFFFFD),HL
                           A 22260    ; 4955								if (res == 
                           A 22261    .LINE 4955
                           A 22262    
00586C 01000000            A 22263    	LD	BC,0
005870 DD27FD              A 22264    	LD	HL,(IX+%FFFFFFFD)
005873 B7                  A 22265    	OR	A,A
005874 ED42                A 22266    	SBC	HL,BC
005876 20 07               A 22267    	JR	NZ,L_1107
005878 01070000            A 22268    	LD	BC,7
00587C DD0FFD              A 22269    	LD	(IX+%FFFFFFFD),BC
00587F                     A 22270    L_1107:
                           A 22271    ; 4956								if (res == 
                           A 22272    .LINE 4956
                           A 22273    
00587F 01040000            A 22274    	LD	BC,4
005883 DD27FD              A 22275    	LD	HL,(IX+%FFFFFFFD)
005886 B7                  A 22276    	OR	A,A
005887 ED42                A 22277    	SBC	HL,BC
005889 20 07               A 22278    	JR	NZ,L_1117
00588B 01000000            A 22279    	LD	BC,0
00588F DD0FFD              A 22280    	LD	(IX+%FFFFFFFD),BC
                           A 22281    ; 4957							}
                           A 22282    ; 4958						}
                           A 22283    ; 4959					}
                           A 22284    ; 4960				}
005892                     A 22285    L_1117:
                           A 22286    .LINE 4960
                           A 22287    
                           A 22288    ; 4961				if (res == FR_OK) {
                           A 22289    .LINE 4961
                           A 22290    
005892 01000000            A 22291    	LD	BC,0
005896 DD27FD              A 22292    	LD	HL,(IX+%FFFFFFFD)
005899 B7                  A 22293    	OR	A,A
00589A ED42                A 22294    	SBC	HL,BC
00589C 20 57               A 22295    	JR	NZ,L_1120
                           A 22296    ; 4962					res = dir_remove(&dj);	
                           A 22297    .LINE 4962
                           A 22298    
00589E ED65C8              A 22299    	PEA	IX+%FFFFFFC8
0058A1 CD 89 24 00         A 22300    	CALL	_dir_remove
0058A5 C1                  A 22301    	POP	BC
0058A6 DD2FFD              A 22302    	LD	(IX+%FFFFFFFD),HL
                           A 22303    ; 4963					if (res == FR_OK && dcl
                           A 22304    .LINE 4963
                           A 22305    
0058A9 01000000            A 22306    	LD	BC,0
0058AD DD27FD              A 22307    	LD	HL,(IX+%FFFFFFFD)
0058B0 B7                  A 22308    	OR	A,A
0058B1 ED42                A 22309    	SBC	HL,BC
0058B3 20 28               A 22310    	JR	NZ,L_1115
0058B5 DD27F6              A 22311    	LD	HL,(IX+%FFFFFFF6)
0058B8 DD5EF9              A 22312    	LD	E,(IX+%FFFFFFF9)
0058BB AF                  A 22313    	XOR	A,A
0058BC CD 00 00 00         A 22314    	CALL	__lcmpu
0058C0 28 1B               A 22315    	JR	Z,L_1115
                           A 22316    ; 4964	#if FF_FS_EXFAT
                           A 22317    ; 4965						res = remove_chain(
                           A 22318    ; 4966	#else
                           A 22319    ; 4967						res = remove_chain(
                           A 22320    .LINE 4967
                           A 22321    
0058C2 C5                  A 22322    	PUSH	BC
0058C3 C5                  A 22323    	PUSH	BC
0058C4 DD4EF9              A 22324    	LD	C,(IX+%FFFFFFF9)
0058C7 0600                A 22325    	LD	B,%0
0058C9 C5                  A 22326    	PUSH	BC
0058CA DD07F6              A 22327    	LD	BC,(IX+%FFFFFFF6)
0058CD C5                  A 22328    	PUSH	BC
0058CE ED65C8              A 22329    	PEA	IX+%FFFFFFC8
0058D1 CD F4 0B 00         A 22330    	CALL	_remove_chain
0058D5 C1                  A 22331    	POP	BC
0058D6 C1                  A 22332    	POP	BC
0058D7 C1                  A 22333    	POP	BC
0058D8 C1                  A 22334    	POP	BC
0058D9 C1                  A 22335    	POP	BC
0058DA DD2FFD              A 22336    	LD	(IX+%FFFFFFFD),HL
                           A 22337    ; 4968	#endif
                           A 22338    ; 4969					}
0058DD                     A 22339    L_1115:
                           A 22340    .LINE 4969
                           A 22341    
                           A 22342    ; 4970					if (res == FR_OK) res =
                           A 22343    .LINE 4970
                           A 22344    
0058DD 01000000            A 22345    	LD	BC,0
0058E1 DD27FD              A 22346    	LD	HL,(IX+%FFFFFFFD)
0058E4 B7                  A 22347    	OR	A,A
0058E5 ED42                A 22348    	SBC	HL,BC
0058E7 20 0C               A 22349    	JR	NZ,L_1120
0058E9 DD07FA              A 22350    	LD	BC,(IX+%FFFFFFFA)
0058EC C5                  A 22351    	PUSH	BC
0058ED CD B3 04 00         A 22352    	CALL	_sync_fs
0058F1 C1                  A 22353    	POP	BC
0058F2 DD2FFD              A 22354    	LD	(IX+%FFFFFFFD),HL
                           A 22355    ; 4971				}
                           A 22356    ; 4972			}
0058F5                     A 22357    L_1120:
                           A 22358    .LINE 4972
                           A 22359    
                           A 22360    ; 4973			FREE_NAMBUF();
                           A 22361    ; 4974		}
0058F5                     A 22362    L_1122:
                           A 22363    .LINE 4974
                           A 22364    
                           A 22365    ; 4975	
                           A 22366    ; 4976		LEAVE_FF(fs, res);
                           A 22367    .LINE 4976
                           A 22368    
0058F5 DD27FD              A 22369    	LD	HL,(IX+%FFFFFFFD)
                           A 22370    ; 4977	}
                           A 22371    .LINE 4977
                           A 22372    
0058F8 DDF9                A 22373    	LD	SP,IX
0058FA DDE1                A 22374    	POP	IX
0058FC C9                  A 22375    	RET	
                           A 22376    
                           A 22377    
                           A 22378    ;**************************** _f_unlink *******
                           A 22379    ;Name                         Addr/Register   S
                           A 22380    ;lbuf                                IX-614    
                           A 22381    ;sdj                                 IX-102    
                           A 22382    ;dj                                   IX-56    
                           A 22383    ;dclst                                IX-10    
                           A 22384    ;fs                                    IX-6    
                           A 22385    ;res                                   IX-3    
                           A 22386    ;path                                  IX+6    
                           A 22387    
                           A 22388    
                           A 22389    ; Stack Frame Size: 626 (bytes)
                           A 22390    ;       Spill Code: -3 (instruction)
                           A 22391    
                           A 22392    
                           A 22393    .ENDFUNC "f_unlink",4977,"_f_unlink"
                           A 22394    ; 4978	
                           A 22395    ; 4979	
                           A 22396    ; 4980	
                           A 22397    ; 4981	
                           A 22398    ; 4982	/*-------------------------------------
                           A 22399    ; 4983	/* Create a Directory                  
                           A 22400    ; 4984	/*-------------------------------------
                           A 22401    ; 4985	
                           A 22402    ; 4986	FRESULT f_mkdir (
                           A 22403    ; 4987		const TCHAR* path		/* Pointer 
                           A 22404    ; 4988	)
                           A 22405    ; 4989	{
0058FD                     A 22406    _f_mkdir:
                           A 22407    .DEFINE "_f_mkdir"
                           A 22408    
                           A 22409    .VALUE _f_mkdir
                           A 22410    
                           A 22411    .CLASS 2
                           A 22412    
                           A 22413    .TYPE 68
                           A 22414    
                           A 22415    .ENDEF
                           A 22416    
                           A 22417    .BEGFUNC "f_mkdir",4989,"_f_mkdir"
                           A 22418    
                           A 22419    .LINE 4989
                           A 22420    
                           A 22421    .DEFINE "path"
                           A 22422    
                           A 22423    .CLASS 65
                           A 22424    
                           A 22425    .VALUE 6
                           A 22426    
                           A 22427    .TYPE 194
                           A 22428    
                           A 22429    .ENDEF
                           A 22430    
                           A 22431    .DEFINE "fs"
                           A 22432    
                           A 22433    .CLASS 65
                           A 22434    
                           A 22435    .VALUE -3
                           A 22436    
                           A 22437    .TAG "NONAME0"
                           A 22438    
                           A 22439    .TYPE 40
                           A 22440    
                           A 22441    .ENDEF
                           A 22442    
                           A 22443    .DEFINE "res"
                           A 22444    
                           A 22445    .CLASS 65
                           A 22446    
                           A 22447    .VALUE -6
                           A 22448    
                           A 22449    .TYPE 4
                           A 22450    
                           A 22451    .ENDEF
                           A 22452    
                           A 22453    .DEFINE "dcl"
                           A 22454    
                           A 22455    .CLASS 65
                           A 22456    
                           A 22457    .VALUE -10
                           A 22458    
                           A 22459    .TYPE 15
                           A 22460    
                           A 22461    .ENDEF
                           A 22462    
                           A 22463    .DEFINE "pcl"
                           A 22464    
                           A 22465    .CLASS 65
                           A 22466    
                           A 22467    .VALUE -14
                           A 22468    
                           A 22469    .TYPE 15
                           A 22470    
                           A 22471    .ENDEF
                           A 22472    
                           A 22473    .DEFINE "sobj"
                           A 22474    
                           A 22475    .CLASS 65
                           A 22476    
                           A 22477    .VALUE -29
                           A 22478    
                           A 22479    .TAG "NONAME1"
                           A 22480    
                           A 22481    .TYPE 8
                           A 22482    
                           A 22483    .ENDEF
                           A 22484    
                           A 22485    .DEFINE "dj"
                           A 22486    
                           A 22487    .CLASS 65
                           A 22488    
                           A 22489    .VALUE -75
                           A 22490    
                           A 22491    .TAG "NONAME3"
                           A 22492    
                           A 22493    .TYPE 8
                           A 22494    
                           A 22495    .ENDEF
                           A 22496    
                           A 22497    .DEFINE "lbuf"
                           A 22498    
                           A 22499    .CLASS 65
                           A 22500    
                           A 22501    .VALUE -587
                           A 22502    
                           A 22503    .DIM 256
                           A 22504    
                           A 22505    .TYPE 109
                           A 22506    
                           A 22507    .ENDEF
                           A 22508    
0058FD DDE5                A 22509    	PUSH	IX
0058FF DD210000 00         A 22510    	LD	IX,0
005904 DD39                A 22511    	ADD	IX,SP
005906 21B5FDFF            A 22512    	LD	HL,-587
00590A 39                  A 22513    	ADD	HL,SP
00590B F9                  A 22514    	LD	SP,HL
                           A 22515    ; 4990		FRESULT res;
                           A 22516    ; 4991		DIR dj;
                           A 22517    ; 4992		FFOBJID sobj;
                           A 22518    ; 4993		FATFS *fs;
                           A 22519    ; 4994		DWORD dcl, pcl, tm;
                           A 22520    ; 4995		DEF_NAMBUF
                           A 22521    ; 4996	
                           A 22522    ; 4997	
                           A 22523    ; 4998		res = mount_volume(&path, &fs, FA_W
                           A 22524    .LINE 4998
                           A 22525    
00590C 01020000            A 22526    	LD	BC,2
005910 C5                  A 22527    	PUSH	BC
005911 ED65FD              A 22528    	PEA	IX+%FFFFFFFD
005914 ED6506              A 22529    	PEA	IX+%6
005917 CD 6E 33 00         A 22530    	CALL	_mount_volume
00591B C1                  A 22531    	POP	BC
00591C C1                  A 22532    	POP	BC
00591D C1                  A 22533    	POP	BC
00591E DD2FFA              A 22534    	LD	(IX+%FFFFFFFA),HL
                           A 22535    ; 4999		if (res == FR_OK) {
                           A 22536    .LINE 4999
                           A 22537    
005921 01000000            A 22538    	LD	BC,0
005925 DD27FA              A 22539    	LD	HL,(IX+%FFFFFFFA)
005928 B7                  A 22540    	OR	A,A
005929 ED42                A 22541    	SBC	HL,BC
00592B C2 39 5B 00         A 22542    	JR	NZ,L_1145
                           A 22543    ; 5000			dj.obj.fs = fs;
                           A 22544    .LINE 5000
                           A 22545    
00592F DD07FD              A 22546    	LD	BC,(IX+%FFFFFFFD)
005932 DD0FB5              A 22547    	LD	(IX+%FFFFFFB5),BC
                           A 22548    ; 5001			INIT_NAMBUF(fs);
                           A 22549    .LINE 5001
                           A 22550    
005935 DDE5E1              A 22551    	LD	HL,IX
005938 01B5FDFF            A 22552    	LD	BC,-587
00593C 09                  A 22553    	ADD	HL,BC
00593D DD31FD              A 22554    	LD	IY,(IX+%FFFFFFFD)
005940 FD2F0B              A 22555    	LD	(IY+%B),HL
                           A 22556    ; 5002			res = follow_path(&dj, path);	
                           A 22557    .LINE 5002
                           A 22558    
005943 DD0706              A 22559    	LD	BC,(IX+%6)
005946 C5                  A 22560    	PUSH	BC
005947 ED65B5              A 22561    	PEA	IX+%FFFFFFB5
00594A CD 00 2E 00         A 22562    	CALL	_follow_path
00594E C1                  A 22563    	POP	BC
00594F C1                  A 22564    	POP	BC
005950 DD2FFA              A 22565    	LD	(IX+%FFFFFFFA),HL
                           A 22566    ; 5003			if (res == FR_OK) res = FR_EXIS
                           A 22567    .LINE 5003
                           A 22568    
005953 01000000            A 22569    	LD	BC,0
005957 DD27FA              A 22570    	LD	HL,(IX+%FFFFFFFA)
00595A B7                  A 22571    	OR	A,A
00595B ED42                A 22572    	SBC	HL,BC
00595D 20 07               A 22573    	JR	NZ,L_1142
00595F 01080000            A 22574    	LD	BC,8
005963 DD0FFA              A 22575    	LD	(IX+%FFFFFFFA),BC
                           A 22576    ; 5004			if (FF_FS_RPATH && res == FR_NO
                           A 22577    ; 5005				res = FR_INVALID_NAME;
                           A 22578    ; 5006			}
005966                     A 22579    L_1142:
                           A 22580    .LINE 5006
                           A 22581    
                           A 22582    ; 5007			if (res == FR_NO_FILE) {		
                           A 22583    .LINE 5007
                           A 22584    
005966 01040000            A 22585    	LD	BC,4
00596A DD27FA              A 22586    	LD	HL,(IX+%FFFFFFFA)
00596D B7                  A 22587    	OR	A,A
00596E ED42                A 22588    	SBC	HL,BC
005970 C2 39 5B 00         A 22589    	JR	NZ,L_1143
                           A 22590    ; 5008				sobj.fs = fs;				
                           A 22591    .LINE 5008
                           A 22592    
005974 DD07FD              A 22593    	LD	BC,(IX+%FFFFFFFD)
005977 DD0FE3              A 22594    	LD	(IX+%FFFFFFE3),BC
                           A 22595    ; 5009				dcl = create_chain(&sobj, 0
                           A 22596    .LINE 5009
                           A 22597    
00597A 01000000            A 22598    	LD	BC,0
00597E C5                  A 22599    	PUSH	BC
00597F C5                  A 22600    	PUSH	BC
005980 ED65E3              A 22601    	PEA	IX+%FFFFFFE3
005983 CD 8E 0D 00         A 22602    	CALL	_create_chain
005987 C1                  A 22603    	POP	BC
005988 C1                  A 22604    	POP	BC
005989 C1                  A 22605    	POP	BC
00598A DD2FF6              A 22606    	LD	(IX+%FFFFFFF6),HL
00598D DD73F9              A 22607    	LD	(IX+%FFFFFFF9),E
                           A 22608    ; 5010				res = FR_OK;
                           A 22609    .LINE 5010
                           A 22610    
005990 01000000            A 22611    	LD	BC,0
005994 DD0FFA              A 22612    	LD	(IX+%FFFFFFFA),BC
                           A 22613    ; 5011				if (dcl == 0) res = FR_DENI
                           A 22614    .LINE 5011
                           A 22615    
005997 DD27F6              A 22616    	LD	HL,(IX+%FFFFFFF6)
00599A DD5EF9              A 22617    	LD	E,(IX+%FFFFFFF9)
00599D AF                  A 22618    	XOR	A,A
00599E CD 00 00 00         A 22619    	CALL	__lcmpu
0059A2 20 07               A 22620    	JR	NZ,L_1129
0059A4 01070000            A 22621    	LD	BC,7
0059A8 DD0FFA              A 22622    	LD	(IX+%FFFFFFFA),BC
0059AB                     A 22623    L_1129:
                           A 22624    ; 5012				if (dcl == 1) res = FR_INT_
                           A 22625    .LINE 5012
                           A 22626    
0059AB DD27F6              A 22627    	LD	HL,(IX+%FFFFFFF6)
0059AE DD5EF9              A 22628    	LD	E,(IX+%FFFFFFF9)
0059B1 01010000            A 22629    	LD	BC,1
0059B5 AF                  A 22630    	XOR	A,A
0059B6 CD 00 00 00         A 22631    	CALL	__lcmpu
0059BA 20 07               A 22632    	JR	NZ,L_1131
0059BC 01020000            A 22633    	LD	BC,2
0059C0 DD0FFA              A 22634    	LD	(IX+%FFFFFFFA),BC
0059C3                     A 22635    L_1131:
                           A 22636    ; 5013				if (dcl == 0xFFFFFFFF) res 
                           A 22637    .LINE 5013
                           A 22638    
0059C3 DD27F6              A 22639    	LD	HL,(IX+%FFFFFFF6)
0059C6 DD5EF9              A 22640    	LD	E,(IX+%FFFFFFF9)
0059C9 01FFFFFF            A 22641    	LD	BC,16777215
0059CD 3EFF                A 22642    	LD	A,%FF
0059CF CD 00 00 00         A 22643    	CALL	__lcmpu
0059D3 20 07               A 22644    	JR	NZ,L_1132
0059D5 01010000            A 22645    	LD	BC,1
0059D9 DD0FFA              A 22646    	LD	(IX+%FFFFFFFA),BC
0059DC                     A 22647    L_1132:
                           A 22648    ; 5014				tm = GET_FATTIME();
                           A 22649    ; 5015				if (res == FR_OK) {
                           A 22650    .LINE 5015
                           A 22651    
0059DC 01000000            A 22652    	LD	BC,0
0059E0 DD27FA              A 22653    	LD	HL,(IX+%FFFFFFFA)
0059E3 B7                  A 22654    	OR	A,A
0059E4 ED42                A 22655    	SBC	HL,BC
0059E6 C2 BA 5A 00         A 22656    	JR	NZ,L_1140
                           A 22657    ; 5016					res = dir_clear(fs, dcl
                           A 22658    .LINE 5016
                           A 22659    
0059EA DD4EF9              A 22660    	LD	C,(IX+%FFFFFFF9)
0059ED 0600                A 22661    	LD	B,%0
0059EF C5                  A 22662    	PUSH	BC
0059F0 DD07F6              A 22663    	LD	BC,(IX+%FFFFFFF6)
0059F3 C5                  A 22664    	PUSH	BC
0059F4 DD07FD              A 22665    	LD	BC,(IX+%FFFFFFFD)
0059F7 C5                  A 22666    	PUSH	BC
0059F8 CD 60 11 00         A 22667    	CALL	_dir_clear
0059FC C1                  A 22668    	POP	BC
0059FD C1                  A 22669    	POP	BC
0059FE C1                  A 22670    	POP	BC
0059FF DD2FFA              A 22671    	LD	(IX+%FFFFFFFA),HL
                           A 22672    ; 5017					if (res == FR_OK) {
                           A 22673    .LINE 5017
                           A 22674    
005A02 01000000            A 22675    	LD	BC,0
005A06 DD27FA              A 22676    	LD	HL,(IX+%FFFFFFFA)
005A09 B7                  A 22677    	OR	A,A
005A0A ED42                A 22678    	SBC	HL,BC
005A0C C2 BA 5A 00         A 22679    	JR	NZ,L_1140
                           A 22680    ; 5018						if (!FF_FS_EXFAT ||
                           A 22681    ; 5019							memset(fs->win 
                           A 22682    .LINE 5019
                           A 22683    
005A10 010B0000            A 22684    	LD	BC,11
005A14 C5                  A 22685    	PUSH	BC
005A15 01200000            A 22686    	LD	BC,32
005A19 C5                  A 22687    	PUSH	BC
005A1A DD31FD              A 22688    	LD	IY,(IX+%FFFFFFFD)
005A1D ED6632              A 22689    	PEA	IY+%32
005A20 CD 00 00 00         A 22690    	CALL	_memset
005A24 C1                  A 22691    	POP	BC
005A25 C1                  A 22692    	POP	BC
005A26 C1                  A 22693    	POP	BC
                           A 22694    ; 5020							fs->win[DIR_Nam
                           A 22695    .LINE 5020
                           A 22696    
005A27 DD31FD              A 22697    	LD	IY,(IX+%FFFFFFFD)
005A2A FD36322E            A 22698    	LD	(IY+%32),%2E
                           A 22699    ; 5021							fs->win[DIR_Att
                           A 22700    .LINE 5021
                           A 22701    
005A2E ED233D              A 22702    	LEA	HL,IY+%3D
005A31 3610                A 22703    	LD	(HL),%10
                           A 22704    ; 5022							st_dword(fs->wi
                           A 22705    .LINE 5022
                           A 22706    
005A33 01500000            A 22707    	LD	BC,80
005A37 C5                  A 22708    	PUSH	BC
005A38 01000021            A 22709    	LD	BC,2162688
005A3C C5                  A 22710    	PUSH	BC
005A3D ED0348              A 22711    	LEA	BC,IY+%48
005A40 C5                  A 22712    	PUSH	BC
005A41 CD 45 01 00         A 22713    	CALL	_st_dword
005A45 C1                  A 22714    	POP	BC
005A46 C1                  A 22715    	POP	BC
005A47 C1                  A 22716    	POP	BC
                           A 22717    ; 5023							st_clust(fs, fs
                           A 22718    .LINE 5023
                           A 22719    
005A48 DD4EF9              A 22720    	LD	C,(IX+%FFFFFFF9)
005A4B 0600                A 22721    	LD	B,%0
005A4D C5                  A 22722    	PUSH	BC
005A4E DD07F6              A 22723    	LD	BC,(IX+%FFFFFFF6)
005A51 C5                  A 22724    	PUSH	BC
005A52 DD31FD              A 22725    	LD	IY,(IX+%FFFFFFFD)
005A55 ED6632              A 22726    	PEA	IY+%32
005A58 DD07FD              A 22727    	LD	BC,(IX+%FFFFFFFD)
005A5B C5                  A 22728    	PUSH	BC
005A5C CD 5C 18 00         A 22729    	CALL	_st_clust
005A60 C1                  A 22730    	POP	BC
005A61 C1                  A 22731    	POP	BC
005A62 C1                  A 22732    	POP	BC
005A63 C1                  A 22733    	POP	BC
                           A 22734    ; 5024							memcpy(fs->win 
                           A 22735    .LINE 5024
                           A 22736    
005A64 01200000            A 22737    	LD	BC,32
005A68 C5                  A 22738    	PUSH	BC
005A69 DD31FD              A 22739    	LD	IY,(IX+%FFFFFFFD)
005A6C ED6632              A 22740    	PEA	IY+%32
005A6F ED0352              A 22741    	LEA	BC,IY+%52
005A72 C5                  A 22742    	PUSH	BC
005A73 CD 00 00 00         A 22743    	CALL	_memcpy
005A77 C1                  A 22744    	POP	BC
005A78 C1                  A 22745    	POP	BC
005A79 C1                  A 22746    	POP	BC
                           A 22747    ; 5025							fs->win[SZDIRE 
                           A 22748    .LINE 5025
                           A 22749    
005A7A DD31FD              A 22750    	LD	IY,(IX+%FFFFFFFD)
005A7D ED2353              A 22751    	LEA	HL,IY+%53
005A80 362E                A 22752    	LD	(HL),%2E
005A82 DD07BC              A 22753    	LD	BC,(IX+%FFFFFFBC)
005A85 DD7EBF              A 22754    	LD	A,(IX+%FFFFFFBF)
005A88 DD0FF2              A 22755    	LD	(IX+%FFFFFFF2),BC
005A8B DD77F5              A 22756    	LD	(IX+%FFFFFFF5),A
                           A 22757    ; 5026							st_clust(fs, fs
                           A 22758    .LINE 5026
                           A 22759    
005A8E DD4EF5              A 22760    	LD	C,(IX+%FFFFFFF5)
005A91 0600                A 22761    	LD	B,%0
005A93 C5                  A 22762    	PUSH	BC
005A94 DD07F2              A 22763    	LD	BC,(IX+%FFFFFFF2)
005A97 C5                  A 22764    	PUSH	BC
005A98 ED0352              A 22765    	LEA	BC,IY+%52
005A9B C5                  A 22766    	PUSH	BC
005A9C DD07FD              A 22767    	LD	BC,(IX+%FFFFFFFD)
005A9F C5                  A 22768    	PUSH	BC
005AA0 CD 5C 18 00         A 22769    	CALL	_st_clust
005AA4 C1                  A 22770    	POP	BC
005AA5 C1                  A 22771    	POP	BC
005AA6 C1                  A 22772    	POP	BC
005AA7 C1                  A 22773    	POP	BC
                           A 22774    ; 5027							fs->wflag = 1;
                           A 22775    .LINE 5027
                           A 22776    
005AA8 DD31FD              A 22777    	LD	IY,(IX+%FFFFFFFD)
005AAB FD360301            A 22778    	LD	(IY+%3),%1
                           A 22779    ; 5028						}
                           A 22780    ; 5029						res = dir_register(
                           A 22781    .LINE 5029
                           A 22782    
005AAF ED65B5              A 22783    	PEA	IX+%FFFFFFB5
005AB2 CD ED 21 00         A 22784    	CALL	_dir_register
005AB6 C1                  A 22785    	POP	BC
005AB7 DD2FFA              A 22786    	LD	(IX+%FFFFFFFA),HL
                           A 22787    ; 5030					}
                           A 22788    ; 5031				}
005ABA                     A 22789    L_1140:
                           A 22790    .LINE 5031
                           A 22791    
                           A 22792    ; 5032				if (res == FR_OK) {
                           A 22793    .LINE 5032
                           A 22794    
005ABA 01000000            A 22795    	LD	BC,0
005ABE DD27FA              A 22796    	LD	HL,(IX+%FFFFFFFA)
005AC1 B7                  A 22797    	OR	A,A
005AC2 ED42                A 22798    	SBC	HL,BC
005AC4 20 5B               A 22799    	JR	NZ,L_1139
                           A 22800    ; 5033	#if FF_FS_EXFAT
                           A 22801    ; 5034					if (fs->fs_type == FS_E
                           A 22802    ; 5035						st_dword(fs->dirbuf
                           A 22803    ; 5036						st_dword(fs->dirbuf
                           A 22804    ; 5037						st_dword(fs->dirbuf
                           A 22805    ; 5038						st_dword(fs->dirbuf
                           A 22806    ; 5039						fs->dirbuf[XDIR_Gen
                           A 22807    ; 5040						fs->dirbuf[XDIR_Att
                           A 22808    ; 5041						res = store_xdir(&d
                           A 22809    ; 5042					} else
                           A 22810    ; 5043	#endif
                           A 22811    ; 5044					{
                           A 22812    ; 5045						st_dword(dj.dir + D
                           A 22813    .LINE 5045
                           A 22814    
005AC6 01500000            A 22815    	LD	BC,80
005ACA C5                  A 22816    	PUSH	BC
005ACB 01000021            A 22817    	LD	BC,2162688
005ACF C5                  A 22818    	PUSH	BC
005AD0 DD31D0              A 22819    	LD	IY,(IX+%FFFFFFD0)
005AD3 ED0316              A 22820    	LEA	BC,IY+%16
005AD6 C5                  A 22821    	PUSH	BC
005AD7 CD 45 01 00         A 22822    	CALL	_st_dword
005ADB C1                  A 22823    	POP	BC
005ADC C1                  A 22824    	POP	BC
005ADD C1                  A 22825    	POP	BC
                           A 22826    ; 5046						st_clust(fs, dj.dir
                           A 22827    .LINE 5046
                           A 22828    
005ADE DD4EF9              A 22829    	LD	C,(IX+%FFFFFFF9)
005AE1 0600                A 22830    	LD	B,%0
005AE3 C5                  A 22831    	PUSH	BC
005AE4 DD07F6              A 22832    	LD	BC,(IX+%FFFFFFF6)
005AE7 C5                  A 22833    	PUSH	BC
005AE8 DD07D0              A 22834    	LD	BC,(IX+%FFFFFFD0)
005AEB C5                  A 22835    	PUSH	BC
005AEC DD07FD              A 22836    	LD	BC,(IX+%FFFFFFFD)
005AEF C5                  A 22837    	PUSH	BC
005AF0 CD 5C 18 00         A 22838    	CALL	_st_clust
005AF4 C1                  A 22839    	POP	BC
005AF5 C1                  A 22840    	POP	BC
005AF6 C1                  A 22841    	POP	BC
005AF7 C1                  A 22842    	POP	BC
                           A 22843    ; 5047						dj.dir[DIR_Attr] = 
                           A 22844    .LINE 5047
                           A 22845    
005AF8 DD31D0              A 22846    	LD	IY,(IX+%FFFFFFD0)
005AFB ED230B              A 22847    	LEA	HL,IY+%B
005AFE 3610                A 22848    	LD	(HL),%10
                           A 22849    ; 5048						fs->wflag = 1;
                           A 22850    .LINE 5048
                           A 22851    
005B00 DD31FD              A 22852    	LD	IY,(IX+%FFFFFFFD)
005B03 FD360301            A 22853    	LD	(IY+%3),%1
                           A 22854    ; 5049					}
                           A 22855    ; 5050					if (res == FR_OK) {
                           A 22856    .LINE 5050
                           A 22857    
005B07 01000000            A 22858    	LD	BC,0
005B0B DD27FA              A 22859    	LD	HL,(IX+%FFFFFFFA)
005B0E B7                  A 22860    	OR	A,A
005B0F ED42                A 22861    	SBC	HL,BC
005B11 20 26               A 22862    	JR	NZ,L_1143
                           A 22863    ; 5051						res = sync_fs(fs);
                           A 22864    .LINE 5051
                           A 22865    
005B13 DD07FD              A 22866    	LD	BC,(IX+%FFFFFFFD)
005B16 C5                  A 22867    	PUSH	BC
005B17 CD B3 04 00         A 22868    	CALL	_sync_fs
005B1B C1                  A 22869    	POP	BC
005B1C DD2FFA              A 22870    	LD	(IX+%FFFFFFFA),HL
                           A 22871    ; 5052					}
                           A 22872    ; 5053				} else {
                           A 22873    .LINE 5053
                           A 22874    
005B1F 18 18               A 22875    	JR	L_1143
005B21                     A 22876    L_1139:
                           A 22877    ; 5054					remove_chain(&sobj, dcl
                           A 22878    .LINE 5054
                           A 22879    
005B21 C5                  A 22880    	PUSH	BC
005B22 C5                  A 22881    	PUSH	BC
005B23 DD4EF9              A 22882    	LD	C,(IX+%FFFFFFF9)
005B26 0600                A 22883    	LD	B,%0
005B28 C5                  A 22884    	PUSH	BC
005B29 DD07F6              A 22885    	LD	BC,(IX+%FFFFFFF6)
005B2C C5                  A 22886    	PUSH	BC
005B2D ED65E3              A 22887    	PEA	IX+%FFFFFFE3
005B30 CD F4 0B 00         A 22888    	CALL	_remove_chain
005B34 C1                  A 22889    	POP	BC
005B35 C1                  A 22890    	POP	BC
005B36 C1                  A 22891    	POP	BC
005B37 C1                  A 22892    	POP	BC
005B38 C1                  A 22893    	POP	BC
                           A 22894    ; 5055				}
                           A 22895    ; 5056			}
005B39                     A 22896    L_1143:
                           A 22897    .LINE 5056
                           A 22898    
                           A 22899    ; 5057			FREE_NAMBUF();
                           A 22900    ; 5058		}
005B39                     A 22901    L_1145:
                           A 22902    .LINE 5058
                           A 22903    
                           A 22904    ; 5059	
                           A 22905    ; 5060		LEAVE_FF(fs, res);
                           A 22906    .LINE 5060
                           A 22907    
005B39 DD27FA              A 22908    	LD	HL,(IX+%FFFFFFFA)
                           A 22909    ; 5061	}
                           A 22910    .LINE 5061
                           A 22911    
005B3C DDF9                A 22912    	LD	SP,IX
005B3E DDE1                A 22913    	POP	IX
005B40 C9                  A 22914    	RET	
                           A 22915    
                           A 22916    
                           A 22917    ;**************************** _f_mkdir ********
                           A 22918    ;Name                         Addr/Register   S
                           A 22919    ;_memcpy                             IMPORT  --
                           A 22920    ;_memset                             IMPORT  --
                           A 22921    ;lbuf                                IX-587    
                           A 22922    ;dj                                   IX-75    
                           A 22923    ;sobj                                 IX-29    
                           A 22924    ;pcl                                  IX-14    
                           A 22925    ;dcl                                  IX-10    
                           A 22926    ;res                                   IX-6    
                           A 22927    ;fs                                    IX-3    
                           A 22928    ;path                                  IX+6    
                           A 22929    
                           A 22930    
                           A 22931    ; Stack Frame Size: 596 (bytes)
                           A 22932    ;       Spill Code: -3 (instruction)
                           A 22933    
                           A 22934    
                           A 22935    .ENDFUNC "f_mkdir",5061,"_f_mkdir"
                           A 22936    ; 5062	
                           A 22937    ; 5063	
                           A 22938    ; 5064	
                           A 22939    ; 5065	
                           A 22940    ; 5066	/*-------------------------------------
                           A 22941    ; 5067	/* Rename a File/Directory             
                           A 22942    ; 5068	/*-------------------------------------
                           A 22943    ; 5069	
                           A 22944    ; 5070	FRESULT f_rename (
                           A 22945    ; 5071		const TCHAR* path_old,	/* Pointer 
                           A 22946    ; 5072		const TCHAR* path_new	/* Pointer 
                           A 22947    ; 5073	)
                           A 22948    ; 5074	{
005B41                     A 22949    _f_rename:
                           A 22950    .DEFINE "_f_rename"
                           A 22951    
                           A 22952    .VALUE _f_rename
                           A 22953    
                           A 22954    .CLASS 2
                           A 22955    
                           A 22956    .TYPE 68
                           A 22957    
                           A 22958    .ENDEF
                           A 22959    
                           A 22960    .BEGFUNC "f_rename",5074,"_f_rename"
                           A 22961    
                           A 22962    .LINE 5074
                           A 22963    
                           A 22964    .DEFINE "path_old"
                           A 22965    
                           A 22966    .CLASS 65
                           A 22967    
                           A 22968    .VALUE 6
                           A 22969    
                           A 22970    .TYPE 194
                           A 22971    
                           A 22972    .ENDEF
                           A 22973    
                           A 22974    .DEFINE "path_new"
                           A 22975    
                           A 22976    .CLASS 65
                           A 22977    
                           A 22978    .VALUE 9
                           A 22979    
                           A 22980    .TYPE 194
                           A 22981    
                           A 22982    .ENDEF
                           A 22983    
                           A 22984    .DEFINE "res"
                           A 22985    
                           A 22986    .CLASS 65
                           A 22987    
                           A 22988    .VALUE -3
                           A 22989    
                           A 22990    .TYPE 4
                           A 22991    
                           A 22992    .ENDEF
                           A 22993    
                           A 22994    .DEFINE "fs"
                           A 22995    
                           A 22996    .CLASS 65
                           A 22997    
                           A 22998    .VALUE -6
                           A 22999    
                           A 23000    .TAG "NONAME0"
                           A 23001    
                           A 23002    .TYPE 40
                           A 23003    
                           A 23004    .ENDEF
                           A 23005    
                           A 23006    .DEFINE "dir"
                           A 23007    
                           A 23008    .CLASS 65
                           A 23009    
                           A 23010    .VALUE -9
                           A 23011    
                           A 23012    .TYPE 44
                           A 23013    
                           A 23014    .ENDEF
                           A 23015    
                           A 23016    .DEFINE "sect"
                           A 23017    
                           A 23018    .CLASS 65
                           A 23019    
                           A 23020    .VALUE -19
                           A 23021    
                           A 23022    .TYPE 15
                           A 23023    
                           A 23024    .ENDEF
                           A 23025    
                           A 23026    .DEFINE "buf"
                           A 23027    
                           A 23028    .CLASS 65
                           A 23029    
                           A 23030    .VALUE -51
                           A 23031    
                           A 23032    .DIM 32
                           A 23033    
                           A 23034    .TYPE 108
                           A 23035    
                           A 23036    .ENDEF
                           A 23037    
                           A 23038    .DEFINE "djo"
                           A 23039    
                           A 23040    .CLASS 65
                           A 23041    
                           A 23042    .VALUE -97
                           A 23043    
                           A 23044    .TAG "NONAME3"
                           A 23045    
                           A 23046    .TYPE 8
                           A 23047    
                           A 23048    .ENDEF
                           A 23049    
                           A 23050    .DEFINE "djn"
                           A 23051    
                           A 23052    .CLASS 65
                           A 23053    
                           A 23054    .VALUE -143
                           A 23055    
                           A 23056    .TAG "NONAME3"
                           A 23057    
                           A 23058    .TYPE 8
                           A 23059    
                           A 23060    .ENDEF
                           A 23061    
                           A 23062    .DEFINE "lbuf"
                           A 23063    
                           A 23064    .CLASS 65
                           A 23065    
                           A 23066    .VALUE -655
                           A 23067    
                           A 23068    .DIM 256
                           A 23069    
                           A 23070    .TYPE 109
                           A 23071    
                           A 23072    .ENDEF
                           A 23073    
005B41 DDE5                A 23074    	PUSH	IX
005B43 DD210000 00         A 23075    	LD	IX,0
005B48 DD39                A 23076    	ADD	IX,SP
005B4A 216EFDFF            A 23077    	LD	HL,-658
005B4E 39                  A 23078    	ADD	HL,SP
005B4F F9                  A 23079    	LD	SP,HL
                           A 23080    ; 5075		FRESULT res;
                           A 23081    ; 5076		DIR djo, djn;
                           A 23082    ; 5077		FATFS *fs;
                           A 23083    ; 5078		BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 :
                           A 23084    ; 5079		LBA_t sect;
                           A 23085    ; 5080		DEF_NAMBUF
                           A 23086    ; 5081	
                           A 23087    ; 5082	
                           A 23088    ; 5083		get_ldnumber(&path_new);			
                           A 23089    .LINE 5083
                           A 23090    
005B50 ED6509              A 23091    	PEA	IX+%9
005B53 CD 3A 2F 00         A 23092    	CALL	_get_ldnumber
005B57 C1                  A 23093    	POP	BC
                           A 23094    ; 5084		res = mount_volume(&path_old, &fs, 
                           A 23095    .LINE 5084
                           A 23096    
005B58 01020000            A 23097    	LD	BC,2
005B5C C5                  A 23098    	PUSH	BC
005B5D ED65FA              A 23099    	PEA	IX+%FFFFFFFA
005B60 ED6506              A 23100    	PEA	IX+%6
005B63 CD 6E 33 00         A 23101    	CALL	_mount_volume
005B67 C1                  A 23102    	POP	BC
005B68 C1                  A 23103    	POP	BC
005B69 C1                  A 23104    	POP	BC
005B6A DD2FFD              A 23105    	LD	(IX+%FFFFFFFD),HL
                           A 23106    ; 5085		if (res == FR_OK) {
                           A 23107    .LINE 5085
                           A 23108    
005B6D 01000000            A 23109    	LD	BC,0
005B71 DD27FD              A 23110    	LD	HL,(IX+%FFFFFFFD)
005B74 B7                  A 23111    	OR	A,A
005B75 ED42                A 23112    	SBC	HL,BC
005B77 C2 EE 5D 00         A 23113    	JR	NZ,L_1173
                           A 23114    ; 5086			djo.obj.fs = fs;
                           A 23115    .LINE 5086
                           A 23116    
005B7B DD07FA              A 23117    	LD	BC,(IX+%FFFFFFFA)
005B7E DD0F9F              A 23118    	LD	(IX+%FFFFFF9F),BC
                           A 23119    ; 5087			INIT_NAMBUF(fs);
                           A 23120    .LINE 5087
                           A 23121    
005B81 DDE5E1              A 23122    	LD	HL,IX
005B84 0171FDFF            A 23123    	LD	BC,-655
005B88 09                  A 23124    	ADD	HL,BC
005B89 DD31FA              A 23125    	LD	IY,(IX+%FFFFFFFA)
005B8C FD2F0B              A 23126    	LD	(IY+%B),HL
                           A 23127    ; 5088			res = follow_path(&djo, path_ol
                           A 23128    .LINE 5088
                           A 23129    
005B8F DD0706              A 23130    	LD	BC,(IX+%6)
005B92 C5                  A 23131    	PUSH	BC
005B93 ED659F              A 23132    	PEA	IX+%FFFFFF9F
005B96 CD 00 2E 00         A 23133    	CALL	_follow_path
005B9A C1                  A 23134    	POP	BC
005B9B C1                  A 23135    	POP	BC
005B9C DD2FFD              A 23136    	LD	(IX+%FFFFFFFD),HL
                           A 23137    ; 5089			if (res == FR_OK && (djo.fn[NSF
                           A 23138    .LINE 5089
                           A 23139    
005B9F 01000000            A 23140    	LD	BC,0
005BA3 DD27FD              A 23141    	LD	HL,(IX+%FFFFFFFD)
005BA6 B7                  A 23142    	OR	A,A
005BA7 ED42                A 23143    	SBC	HL,BC
005BA9 20 11               A 23144    	JR	NZ,L_1170
005BAB ED55BD              A 23145    	LEA	IY,IX+%FFFFFFBD
005BAE FD7E0B              A 23146    	LD	A,(IY+%B)
005BB1 E6A0                A 23147    	AND	A,%A0
005BB3 28 07               A 23148    	JR	Z,L_1170
005BB5 01060000            A 23149    	LD	BC,6
005BB9 DD0FFD              A 23150    	LD	(IX+%FFFFFFFD),BC
005BBC                     A 23151    L_1170:
                           A 23152    ; 5090	#if FF_FS_LOCK != 0
                           A 23153    ; 5091			if (res == FR_OK) {
                           A 23154    ; 5092				res = chk_lock(&djo, 2);
                           A 23155    ; 5093			}
                           A 23156    ; 5094	#endif
                           A 23157    ; 5095			if (res == FR_OK) {				
                           A 23158    .LINE 5095
                           A 23159    
005BBC 01000000            A 23160    	LD	BC,0
005BC0 DD27FD              A 23161    	LD	HL,(IX+%FFFFFFFD)
005BC3 B7                  A 23162    	OR	A,A
005BC4 ED42                A 23163    	SBC	HL,BC
005BC6 C2 EE 5D 00         A 23164    	JR	NZ,L_1171
                           A 23165    ; 5096	#if FF_FS_EXFAT
                           A 23166    ; 5097				if (fs->fs_type == FS_EXFAT
                           A 23167    ; 5098					BYTE nf, nn;
                           A 23168    ; 5099					WORD nh;
                           A 23169    ; 5100	
                           A 23170    ; 5101					memcpy(buf, fs->dirbuf,
                           A 23171    ; 5102					memcpy(&djn, &djo, size
                           A 23172    ; 5103					res = follow_path(&djn,
                           A 23173    ; 5104					if (res == FR_OK) {		
                           A 23174    ; 5105						res = (djn.obj.sclu
                           A 23175    ; 5106					}
                           A 23176    ; 5107					if (res == FR_NO_FILE) 
                           A 23177    ; 5108						res = dir_register(
                           A 23178    ; 5109						if (res == FR_OK) {
                           A 23179    ; 5110							nf = fs->dirbuf
                           A 23180    ; 5111							nh = ld_word(fs
                           A 23181    ; 5112							memcpy(fs->dirb
                           A 23182    ; 5113							fs->dirbuf[XDIR
                           A 23183    ; 5114							st_word(fs->dir
                           A 23184    ; 5115							if (!(fs->dirbu
                           A 23185    ; 5116	/* Start of critical section where an i
                           A 23186    ; 5117							res = store_xdi
                           A 23187    ; 5118						}
                           A 23188    ; 5119					}
                           A 23189    ; 5120				} else
                           A 23190    ; 5121	#endif
                           A 23191    ; 5122				{	/* At FAT/FAT32 volume 
                           A 23192    ; 5123					memcpy(buf, djo.dir, SZ
                           A 23193    .LINE 5123
                           A 23194    
005BCA 01200000            A 23195    	LD	BC,32
005BCE C5                  A 23196    	PUSH	BC
005BCF DD07BA              A 23197    	LD	BC,(IX+%FFFFFFBA)
005BD2 C5                  A 23198    	PUSH	BC
005BD3 ED65CD              A 23199    	PEA	IX+%FFFFFFCD
005BD6 CD 00 00 00         A 23200    	CALL	_memcpy
005BDA C1                  A 23201    	POP	BC
005BDB C1                  A 23202    	POP	BC
005BDC C1                  A 23203    	POP	BC
                           A 23204    ; 5124					memcpy(&djn, &djo, size
                           A 23205    .LINE 5124
                           A 23206    
005BDD 012E0000            A 23207    	LD	BC,46
005BE1 C5                  A 23208    	PUSH	BC
005BE2 ED659F              A 23209    	PEA	IX+%FFFFFF9F
005BE5 DDE5E1              A 23210    	LD	HL,IX
005BE8 0171FFFF            A 23211    	LD	BC,-143
005BEC 09                  A 23212    	ADD	HL,BC
005BED E5C1                A 23213    	LD	BC,HL
005BEF C5                  A 23214    	PUSH	BC
005BF0 CD 00 00 00         A 23215    	CALL	_memcpy
005BF4 C1                  A 23216    	POP	BC
005BF5 C1                  A 23217    	POP	BC
005BF6 C1                  A 23218    	POP	BC
                           A 23219    ; 5125					res = follow_path(&djn,
                           A 23220    .LINE 5125
                           A 23221    
005BF7 DD0709              A 23222    	LD	BC,(IX+%9)
005BFA C5                  A 23223    	PUSH	BC
005BFB DDE5E1              A 23224    	LD	HL,IX
005BFE 0171FFFF            A 23225    	LD	BC,-143
005C02 09                  A 23226    	ADD	HL,BC
005C03 E5C1                A 23227    	LD	BC,HL
005C05 C5                  A 23228    	PUSH	BC
005C06 CD 00 2E 00         A 23229    	CALL	_follow_path
005C0A C1                  A 23230    	POP	BC
005C0B C1                  A 23231    	POP	BC
005C0C DD2FFD              A 23232    	LD	(IX+%FFFFFFFD),HL
                           A 23233    ; 5126					if (res == FR_OK) {		
                           A 23234    .LINE 5126
                           A 23235    
005C0F 01000000            A 23236    	LD	BC,0
005C13 DD27FD              A 23237    	LD	HL,(IX+%FFFFFFFD)
005C16 B7                  A 23238    	OR	A,A
005C17 ED42                A 23239    	SBC	HL,BC
005C19 20 44               A 23240    	JR	NZ,L_1165
                           A 23241    ; 5127						res = (djn.obj.sclu
                           A 23242    .LINE 5127
                           A 23243    
005C1B FD2178FF FF         A 23244    	LD	IY,-136
005C20 DDE5C1              A 23245    	LD	BC,IX
005C23 FD09                A 23246    	ADD	IY,BC
005C25 FD2700              A 23247    	LD	HL,(IY)
005C28 FD5E03              A 23248    	LD	E,(IY+%3)
005C2B DD07A6              A 23249    	LD	BC,(IX+%FFFFFFA6)
005C2E DD7EA9              A 23250    	LD	A,(IX+%FFFFFFA9)
005C31 CD 00 00 00         A 23251    	CALL	__lcmpu
005C35 20 1B               A 23252    	JR	NZ,L_1152
005C37 DD2780              A 23253    	LD	HL,(IX+%FFFFFF80)
005C3A DD5E83              A 23254    	LD	E,(IX+%FFFFFF83)
005C3D DD07AE              A 23255    	LD	BC,(IX+%FFFFFFAE)
005C40 DD7EB1              A 23256    	LD	A,(IX+%FFFFFFB1)
005C43 CD 00 00 00         A 23257    	CALL	__lcmpu
005C47 20 09               A 23258    	JR	NZ,L_1152
005C49 01040000            A 23259    	LD	BC,4
005C4D DD0FF4              A 23260    	LD	(IX+%FFFFFFF4),BC
005C50 18 07               A 23261    	JR	L_1153
005C52                     A 23262    L_1152:
005C52 01080000            A 23263    	LD	BC,8
005C56 DD0FF4              A 23264    	LD	(IX+%FFFFFFF4),BC
005C59                     A 23265    L_1153:
005C59 DD07F4              A 23266    	LD	BC,(IX+%FFFFFFF4)
005C5C DD0FFD              A 23267    	LD	(IX+%FFFFFFFD),BC
                           A 23268    ; 5128					}
005C5F                     A 23269    L_1165:
                           A 23270    .LINE 5128
                           A 23271    
                           A 23272    ; 5129					if (res == FR_NO_FILE) 
                           A 23273    .LINE 5129
                           A 23274    
005C5F 01040000            A 23275    	LD	BC,4
005C63 DD27FD              A 23276    	LD	HL,(IX+%FFFFFFFD)
005C66 B7                  A 23277    	OR	A,A
005C67 ED42                A 23278    	SBC	HL,BC
005C69 C2 BF 5D 00         A 23279    	JR	NZ,L_1168
                           A 23280    ; 5130						res = dir_register(
                           A 23281    .LINE 5130
                           A 23282    
005C6D DDE5E1              A 23283    	LD	HL,IX
005C70 0171FFFF            A 23284    	LD	BC,-143
005C74 09                  A 23285    	ADD	HL,BC
005C75 E5C1                A 23286    	LD	BC,HL
005C77 C5                  A 23287    	PUSH	BC
005C78 CD ED 21 00         A 23288    	CALL	_dir_register
005C7C C1                  A 23289    	POP	BC
005C7D DD2FFD              A 23290    	LD	(IX+%FFFFFFFD),HL
                           A 23291    ; 5131						if (res == FR_OK) {
                           A 23292    .LINE 5131
                           A 23293    
005C80 01000000            A 23294    	LD	BC,0
005C84 DD27FD              A 23295    	LD	HL,(IX+%FFFFFFFD)
005C87 B7                  A 23296    	OR	A,A
005C88 ED42                A 23297    	SBC	HL,BC
005C8A C2 BF 5D 00         A 23298    	JR	NZ,L_1168
                           A 23299    ; 5132							dir = djn.dir;	
                           A 23300    .LINE 5132
                           A 23301    
005C8E DD078C              A 23302    	LD	BC,(IX+%FFFFFF8C)
005C91 DD0FF7              A 23303    	LD	(IX+%FFFFFFF7),BC
                           A 23304    ; 5133							memcpy(dir + 13
                           A 23305    .LINE 5133
                           A 23306    
005C94 01130000            A 23307    	LD	BC,19
005C98 C5                  A 23308    	PUSH	BC
005C99 ED02DA              A 23309    	LEA	BC,IX+%FFFFFFDA
005C9C C5                  A 23310    	PUSH	BC
005C9D DD31F7              A 23311    	LD	IY,(IX+%FFFFFFF7)
005CA0 ED030D              A 23312    	LEA	BC,IY+%D
005CA3 C5                  A 23313    	PUSH	BC
005CA4 CD 00 00 00         A 23314    	CALL	_memcpy
005CA8 C1                  A 23315    	POP	BC
005CA9 C1                  A 23316    	POP	BC
005CAA C1                  A 23317    	POP	BC
                           A 23318    ; 5134							dir[DIR_Attr] =
                           A 23319    .LINE 5134
                           A 23320    
005CAB DD31F7              A 23321    	LD	IY,(IX+%FFFFFFF7)
005CAE ED030B              A 23322    	LEA	BC,IY+%B
005CB1 216EFDFF            A 23323    	LD	HL,-658
005CB5 DDE5D1              A 23324    	LD	DE,IX
005CB8 19                  A 23325    	ADD	HL,DE
005CB9 ED0F                A 23326    	LD	(HL),BC
005CBB ED55CD              A 23327    	LEA	IY,IX+%FFFFFFCD
005CBE 216EFDFF            A 23328    	LD	HL,-658
005CC2 DDE5C1              A 23329    	LD	BC,IX
005CC5 09                  A 23330    	ADD	HL,BC
005CC6 ED27                A 23331    	LD	HL,(HL)
005CC8 FD7E0B              A 23332    	LD	A,(IY+%B)
005CCB 77                  A 23333    	LD	(HL),A
                           A 23334    ; 5135							if (!(dir[DIR_A
                           A 23335    .LINE 5135
                           A 23336    
005CCC 216EFDFF            A 23337    	LD	HL,-658
005CD0 DDE5C1              A 23338    	LD	BC,IX
005CD3 09                  A 23339    	ADD	HL,BC
005CD4 ED27                A 23340    	LD	HL,(HL)
005CD6 7E                  A 23341    	LD	A,(HL)
005CD7 E610                A 23342    	AND	A,%10
005CD9 20 0D               A 23343    	JR	NZ,L_1156
005CDB DD31F7              A 23344    	LD	IY,(IX+%FFFFFFF7)
005CDE ED230B              A 23345    	LEA	HL,IY+%B
005CE1 7E                  A 23346    	LD	A,(HL)
005CE2 CBEF                A 23347    	SET	%5,A
005CE4 ED230B              A 23348    	LEA	HL,IY+%B
005CE7 77                  A 23349    	LD	(HL),A
005CE8                     A 23350    L_1156:
                           A 23351    ; 5136							fs->wflag = 1;
                           A 23352    .LINE 5136
                           A 23353    
005CE8 DD31FA              A 23354    	LD	IY,(IX+%FFFFFFFA)
005CEB FD360301            A 23355    	LD	(IY+%3),%1
                           A 23356    ; 5137							if ((dir[DIR_At
                           A 23357    .LINE 5137
                           A 23358    
005CEF DD31F7              A 23359    	LD	IY,(IX+%FFFFFFF7)
005CF2 FD7E0B              A 23360    	LD	A,(IY+%B)
005CF5 E610                A 23361    	AND	A,%10
005CF7 CA BF 5D 00         A 23362    	JR	Z,L_1168
005CFB DDE5E1              A 23363    	LD	HL,IX
005CFE 0171FFFF            A 23364    	LD	BC,-143
005D02 09                  A 23365    	ADD	HL,BC
005D03 DD2FF1              A 23366    	LD	(IX+%FFFFFFF1),HL
005D06 DD27A6              A 23367    	LD	HL,(IX+%FFFFFFA6)
005D09 DD5EA9              A 23368    	LD	E,(IX+%FFFFFFA9)
005D0C DD31F1              A 23369    	LD	IY,(IX+%FFFFFFF1)
005D0F FD0707              A 23370    	LD	BC,(IY+%7)
005D12 FD7E0A              A 23371    	LD	A,(IY+%A)
005D15 CD 00 00 00         A 23372    	CALL	__lcmpu
005D19 CA BF 5D 00         A 23373    	JR	Z,L_1168
                           A 23374    ; 5138								sect = clst
                           A 23375    .LINE 5138
                           A 23376    
005D1D DD07F7              A 23377    	LD	BC,(IX+%FFFFFFF7)
005D20 C5                  A 23378    	PUSH	BC
005D21 DD07FA              A 23379    	LD	BC,(IX+%FFFFFFFA)
005D24 C5                  A 23380    	PUSH	BC
005D25 CD EE 17 00         A 23381    	CALL	_ld_clust
005D29 C1                  A 23382    	POP	BC
005D2A C1                  A 23383    	POP	BC
005D2B 4B                  A 23384    	LD	C,E
005D2C 0600                A 23385    	LD	B,%0
005D2E C5                  A 23386    	PUSH	BC
005D2F E5                  A 23387    	PUSH	HL
005D30 DD07FA              A 23388    	LD	BC,(IX+%FFFFFFFA)
005D33 C5                  A 23389    	PUSH	BC
005D34 CD F9 05 00         A 23390    	CALL	_clst2sect
005D38 C1                  A 23391    	POP	BC
005D39 C1                  A 23392    	POP	BC
005D3A C1                  A 23393    	POP	BC
005D3B DD2FED              A 23394    	LD	(IX+%FFFFFFED),HL
005D3E DD73F0              A 23395    	LD	(IX+%FFFFFFF0),E
                           A 23396    ; 5139								if (sect ==
                           A 23397    .LINE 5139
                           A 23398    
005D41 DD27ED              A 23399    	LD	HL,(IX+%FFFFFFED)
005D44 DD5EF0              A 23400    	LD	E,(IX+%FFFFFFF0)
005D47 01000000            A 23401    	LD	BC,0
005D4B AF                  A 23402    	XOR	A,A
005D4C CD 00 00 00         A 23403    	CALL	__lcmpu
005D50 20 09               A 23404    	JR	NZ,L_1161
                           A 23405    ; 5140									res = F
                           A 23406    .LINE 5140
                           A 23407    
005D52 01020000            A 23408    	LD	BC,2
005D56 DD0FFD              A 23409    	LD	(IX+%FFFFFFFD),BC
                           A 23410    ; 5141								} else {
                           A 23411    .LINE 5141
                           A 23412    
005D59 18 64               A 23413    	JR	L_1168
005D5B                     A 23414    L_1161:
                           A 23415    ; 5142	/* Start of critical section where an i
                           A 23416    ; 5143									res = m
                           A 23417    .LINE 5143
                           A 23418    
005D5B DD4EF0              A 23419    	LD	C,(IX+%FFFFFFF0)
005D5E 0600                A 23420    	LD	B,%0
005D60 C5                  A 23421    	PUSH	BC
005D61 DD07ED              A 23422    	LD	BC,(IX+%FFFFFFED)
005D64 C5                  A 23423    	PUSH	BC
005D65 DD07FA              A 23424    	LD	BC,(IX+%FFFFFFFA)
005D68 C5                  A 23425    	PUSH	BC
005D69 CD 1E 04 00         A 23426    	CALL	_move_window
005D6D C1                  A 23427    	POP	BC
005D6E C1                  A 23428    	POP	BC
005D6F C1                  A 23429    	POP	BC
005D70 DD2FFD              A 23430    	LD	(IX+%FFFFFFFD),HL
                           A 23431    ; 5144									dir = f
                           A 23432    .LINE 5144
                           A 23433    
005D73 DD31FA              A 23434    	LD	IY,(IX+%FFFFFFFA)
005D76 ED3352              A 23435    	LEA	IY,IY+%52
005D79 DD3EF7              A 23436    	LD	(IX+%FFFFFFF7),IY
                           A 23437    ; 5145									if (res
                           A 23438    .LINE 5145
                           A 23439    
005D7C 01000000            A 23440    	LD	BC,0
005D80 DD27FD              A 23441    	LD	HL,(IX+%FFFFFFFD)
005D83 B7                  A 23442    	OR	A,A
005D84 ED42                A 23443    	SBC	HL,BC
005D86 20 37               A 23444    	JR	NZ,L_1168
005D88 DD27F7              A 23445    	LD	HL,(IX+%FFFFFFF7)
005D8B 23                  A 23446    	INC	HL
005D8C 7E                  A 23447    	LD	A,(HL)
005D8D B7ED62              A 23448    	UEXT	HL
005D90 6F                  A 23449    	LD	L,A
005D91 012E0000            A 23450    	LD	BC,46
005D95 B7                  A 23451    	OR	A,A
005D96 ED42                A 23452    	SBC	HL,BC
005D98 20 25               A 23453    	JR	NZ,L_1168
                           A 23454    ; 5146										st_
                           A 23455    .LINE 5146
                           A 23456    
005D9A DD31F1              A 23457    	LD	IY,(IX+%FFFFFFF1)
005D9D FD0707              A 23458    	LD	BC,(IY+%7)
005DA0 FD7E0A              A 23459    	LD	A,(IY+%A)
005DA3 2600                A 23460    	LD	H,%0
005DA5 6F                  A 23461    	LD	L,A
005DA6 E5                  A 23462    	PUSH	HL
005DA7 C5                  A 23463    	PUSH	BC
005DA8 DD07F7              A 23464    	LD	BC,(IX+%FFFFFFF7)
005DAB C5                  A 23465    	PUSH	BC
005DAC DD07FA              A 23466    	LD	BC,(IX+%FFFFFFFA)
005DAF C5                  A 23467    	PUSH	BC
005DB0 CD 5C 18 00         A 23468    	CALL	_st_clust
005DB4 C1                  A 23469    	POP	BC
005DB5 C1                  A 23470    	POP	BC
005DB6 C1                  A 23471    	POP	BC
005DB7 C1                  A 23472    	POP	BC
                           A 23473    ; 5147										fs-
                           A 23474    .LINE 5147
                           A 23475    
005DB8 DD31FA              A 23476    	LD	IY,(IX+%FFFFFFFA)
005DBB FD360301            A 23477    	LD	(IY+%3),%1
                           A 23478    ; 5148									}
                           A 23479    ; 5149								}
                           A 23480    ; 5150							}
                           A 23481    ; 5151						}
                           A 23482    ; 5152					}
                           A 23483    ; 5153				}
005DBF                     A 23484    L_1168:
                           A 23485    .LINE 5153
                           A 23486    
                           A 23487    ; 5154				if (res == FR_OK) {
                           A 23488    .LINE 5154
                           A 23489    
005DBF 01000000            A 23490    	LD	BC,0
005DC3 DD27FD              A 23491    	LD	HL,(IX+%FFFFFFFD)
005DC6 B7                  A 23492    	OR	A,A
005DC7 ED42                A 23493    	SBC	HL,BC
005DC9 20 23               A 23494    	JR	NZ,L_1171
                           A 23495    ; 5155					res = dir_remove(&djo);
                           A 23496    .LINE 5155
                           A 23497    
005DCB ED659F              A 23498    	PEA	IX+%FFFFFF9F
005DCE CD 89 24 00         A 23499    	CALL	_dir_remove
005DD2 C1                  A 23500    	POP	BC
005DD3 DD2FFD              A 23501    	LD	(IX+%FFFFFFFD),HL
                           A 23502    ; 5156					if (res == FR_OK) {
                           A 23503    .LINE 5156
                           A 23504    
005DD6 01000000            A 23505    	LD	BC,0
005DDA DD27FD              A 23506    	LD	HL,(IX+%FFFFFFFD)
005DDD B7                  A 23507    	OR	A,A
005DDE ED42                A 23508    	SBC	HL,BC
005DE0 20 0C               A 23509    	JR	NZ,L_1171
                           A 23510    ; 5157						res = sync_fs(fs);
                           A 23511    .LINE 5157
                           A 23512    
005DE2 DD07FA              A 23513    	LD	BC,(IX+%FFFFFFFA)
005DE5 C5                  A 23514    	PUSH	BC
005DE6 CD B3 04 00         A 23515    	CALL	_sync_fs
005DEA C1                  A 23516    	POP	BC
005DEB DD2FFD              A 23517    	LD	(IX+%FFFFFFFD),HL
                           A 23518    ; 5158					}
                           A 23519    ; 5159				}
                           A 23520    ; 5160	/* End of the critical section */
                           A 23521    ; 5161			}
005DEE                     A 23522    L_1171:
                           A 23523    .LINE 5161
                           A 23524    
                           A 23525    ; 5162			FREE_NAMBUF();
                           A 23526    ; 5163		}
005DEE                     A 23527    L_1173:
                           A 23528    .LINE 5163
                           A 23529    
                           A 23530    ; 5164	
                           A 23531    ; 5165		LEAVE_FF(fs, res);
                           A 23532    .LINE 5165
                           A 23533    
005DEE DD27FD              A 23534    	LD	HL,(IX+%FFFFFFFD)
                           A 23535    ; 5166	}
                           A 23536    .LINE 5166
                           A 23537    
005DF1 DDF9                A 23538    	LD	SP,IX
005DF3 DDE1                A 23539    	POP	IX
005DF5 C9                  A 23540    	RET	
                           A 23541    
                           A 23542    
                           A 23543    ;**************************** _f_rename *******
                           A 23544    ;Name                         Addr/Register   S
                           A 23545    ;_memcpy                             IMPORT  --
                           A 23546    ;lbuf                                IX-655    
                           A 23547    ;djn                                 IX-143    
                           A 23548    ;djo                                  IX-97    
                           A 23549    ;buf                                  IX-51    
                           A 23550    ;sect                                 IX-19    
                           A 23551    ;G_91                                 IX-15    
                           A 23552    ;temp1150                             IX-12    
                           A 23553    ;dir                                   IX-9    
                           A 23554    ;fs                                    IX-6    
                           A 23555    ;res                                   IX-3    
                           A 23556    ;path_new                              IX+9    
                           A 23557    ;path_old                              IX+6    
                           A 23558    
                           A 23559    
                           A 23560    ; Stack Frame Size: 670 (bytes)
                           A 23561    ;       Spill Code: -3 (instruction)
                           A 23562    
                           A 23563    
                           A 23564    .ENDFUNC "f_rename",5166,"_f_rename"
                           A 23565    ; 5167	
                           A 23566    ; 5168	#endif /* !FF_FS_READONLY */
                           A 23567    ; 5169	#endif /* FF_FS_MINIMIZE == 0 */
                           A 23568    ; 5170	#endif /* FF_FS_MINIMIZE <= 1 */
                           A 23569    ; 5171	#endif /* FF_FS_MINIMIZE <= 2 */
                           A 23570    ; 5172	
                           A 23571    ; 5173	
                           A 23572    ; 5174	
                           A 23573    ; 5175	#if FF_USE_CHMOD && !FF_FS_READONLY
                           A 23574    ; 5176	/*-------------------------------------
                           A 23575    ; 5177	/* Change Attribute                    
                           A 23576    ; 5178	/*-------------------------------------
                           A 23577    ; 5179	
                           A 23578    ; 5180	FRESULT f_chmod (
                           A 23579    ; 5181		const TCHAR* path,	/* Pointer to t
                           A 23580    ; 5182		BYTE attr,			/* Attribute bi
                           A 23581    ; 5183		BYTE mask			/* Attribute ma
                           A 23582    ; 5184	)
                           A 23583    ; 5185	{
                           A 23584    ; 5186		FRESULT res;
                           A 23585    ; 5187		DIR dj;
                           A 23586    ; 5188		FATFS *fs;
                           A 23587    ; 5189		DEF_NAMBUF
                           A 23588    ; 5190	
                           A 23589    ; 5191	
                           A 23590    ; 5192		res = mount_volume(&path, &fs, FA_W
                           A 23591    ; 5193		if (res == FR_OK) {
                           A 23592    ; 5194			dj.obj.fs = fs;
                           A 23593    ; 5195			INIT_NAMBUF(fs);
                           A 23594    ; 5196			res = follow_path(&dj, path);	
                           A 23595    ; 5197			if (res == FR_OK && (dj.fn[NSFL
                           A 23596    ; 5198			if (res == FR_OK) {
                           A 23597    ; 5199				mask &= AM_RDO|AM_HID|AM_SY
                           A 23598    ; 5200	#if FF_FS_EXFAT
                           A 23599    ; 5201				if (fs->fs_type == FS_EXFAT
                           A 23600    ; 5202					fs->dirbuf[XDIR_Attr] =
                           A 23601    ; 5203					res = store_xdir(&dj);
                           A 23602    ; 5204				} else
                           A 23603    ; 5205	#endif
                           A 23604    ; 5206				{
                           A 23605    ; 5207					dj.dir[DIR_Attr] = (att
                           A 23606    ; 5208					fs->wflag = 1;
                           A 23607    ; 5209				}
                           A 23608    ; 5210				if (res == FR_OK) {
                           A 23609    ; 5211					res = sync_fs(fs);
                           A 23610    ; 5212				}
                           A 23611    ; 5213			}
                           A 23612    ; 5214			FREE_NAMBUF();
                           A 23613    ; 5215		}
                           A 23614    ; 5216	
                           A 23615    ; 5217		LEAVE_FF(fs, res);
                           A 23616    ; 5218	}
                           A 23617    ; 5219	
                           A 23618    ; 5220	
                           A 23619    ; 5221	
                           A 23620    ; 5222	
                           A 23621    ; 5223	/*-------------------------------------
                           A 23622    ; 5224	/* Change Timestamp                    
                           A 23623    ; 5225	/*-------------------------------------
                           A 23624    ; 5226	
                           A 23625    ; 5227	FRESULT f_utime (
                           A 23626    ; 5228		const TCHAR* path,	/* Pointer to t
                           A 23627    ; 5229		const FILINFO* fno	/* Pointer to t
                           A 23628    ; 5230	)
                           A 23629    ; 5231	{
                           A 23630    ; 5232		FRESULT res;
                           A 23631    ; 5233		DIR dj;
                           A 23632    ; 5234		FATFS *fs;
                           A 23633    ; 5235		DEF_NAMBUF
                           A 23634    ; 5236	
                           A 23635    ; 5237	
                           A 23636    ; 5238		res = mount_volume(&path, &fs, FA_W
                           A 23637    ; 5239		if (res == FR_OK) {
                           A 23638    ; 5240			dj.obj.fs = fs;
                           A 23639    ; 5241			INIT_NAMBUF(fs);
                           A 23640    ; 5242			res = follow_path(&dj, path);	
                           A 23641    ; 5243			if (res == FR_OK && (dj.fn[NSFL
                           A 23642    ; 5244			if (res == FR_OK) {
                           A 23643    ; 5245	#if FF_FS_EXFAT
                           A 23644    ; 5246				if (fs->fs_type == FS_EXFAT
                           A 23645    ; 5247					st_dword(fs->dirbuf + X
                           A 23646    ; 5248					res = store_xdir(&dj);
                           A 23647    ; 5249				} else
                           A 23648    ; 5250	#endif
                           A 23649    ; 5251				{
                           A 23650    ; 5252					st_dword(dj.dir + DIR_M
                           A 23651    ; 5253					fs->wflag = 1;
                           A 23652    ; 5254				}
                           A 23653    ; 5255				if (res == FR_OK) {
                           A 23654    ; 5256					res = sync_fs(fs);
                           A 23655    ; 5257				}
                           A 23656    ; 5258			}
                           A 23657    ; 5259			FREE_NAMBUF();
                           A 23658    ; 5260		}
                           A 23659    ; 5261	
                           A 23660    ; 5262		LEAVE_FF(fs, res);
                           A 23661    ; 5263	}
                           A 23662    ; 5264	
                           A 23663    ; 5265	#endif	/* FF_USE_CHMOD && !FF_FS_READO
                           A 23664    ; 5266	
                           A 23665    ; 5267	
                           A 23666    ; 5268	
                           A 23667    ; 5269	#if FF_USE_LABEL
                           A 23668    ; 5270	/*-------------------------------------
                           A 23669    ; 5271	/* Get Volume Label                    
                           A 23670    ; 5272	/*-------------------------------------
                           A 23671    ; 5273	
                           A 23672    ; 5274	FRESULT f_getlabel (
                           A 23673    ; 5275		const TCHAR* path,	/* Logical driv
                           A 23674    ; 5276		TCHAR* label,		/* Buffer to st
                           A 23675    ; 5277		DWORD* vsn			/* Variable to 
                           A 23676    ; 5278	)
                           A 23677    ; 5279	{
005DF6                     A 23678    _f_getlabel:
                           A 23679    .DEFINE "_f_getlabel"
                           A 23680    
                           A 23681    .VALUE _f_getlabel
                           A 23682    
                           A 23683    .CLASS 2
                           A 23684    
                           A 23685    .TYPE 68
                           A 23686    
                           A 23687    .ENDEF
                           A 23688    
                           A 23689    .BEGFUNC "f_getlabel",5279,"_f_getlabel"
                           A 23690    
                           A 23691    .LINE 5279
                           A 23692    
                           A 23693    .DEFINE "path"
                           A 23694    
                           A 23695    .CLASS 65
                           A 23696    
                           A 23697    .VALUE 6
                           A 23698    
                           A 23699    .TYPE 194
                           A 23700    
                           A 23701    .ENDEF
                           A 23702    
                           A 23703    .DEFINE "label"
                           A 23704    
                           A 23705    .CLASS 65
                           A 23706    
                           A 23707    .VALUE 9
                           A 23708    
                           A 23709    .TYPE 34
                           A 23710    
                           A 23711    .ENDEF
                           A 23712    
                           A 23713    .DEFINE "vsn"
                           A 23714    
                           A 23715    .CLASS 65
                           A 23716    
                           A 23717    .VALUE 12
                           A 23718    
                           A 23719    .TYPE 47
                           A 23720    
                           A 23721    .ENDEF
                           A 23722    
                           A 23723    .DEFINE "di"
                           A 23724    
                           A 23725    .CLASS 65
                           A 23726    
                           A 23727    .VALUE -3
                           A 23728    
                           A 23729    .TYPE 14
                           A 23730    
                           A 23731    .ENDEF
                           A 23732    
                           A 23733    .DEFINE "res"
                           A 23734    
                           A 23735    .CLASS 65
                           A 23736    
                           A 23737    .VALUE -6
                           A 23738    
                           A 23739    .TYPE 4
                           A 23740    
                           A 23741    .ENDEF
                           A 23742    
                           A 23743    .DEFINE "fs"
                           A 23744    
                           A 23745    .CLASS 65
                           A 23746    
                           A 23747    .VALUE -9
                           A 23748    
                           A 23749    .TAG "NONAME0"
                           A 23750    
                           A 23751    .TYPE 40
                           A 23752    
                           A 23753    .ENDEF
                           A 23754    
                           A 23755    .DEFINE "si"
                           A 23756    
                           A 23757    .CLASS 65
                           A 23758    
                           A 23759    .VALUE -12
                           A 23760    
                           A 23761    .TYPE 14
                           A 23762    
                           A 23763    .ENDEF
                           A 23764    
                           A 23765    .DEFINE "wc"
                           A 23766    
                           A 23767    .CLASS 65
                           A 23768    
                           A 23769    .VALUE -14
                           A 23770    
                           A 23771    .TYPE 13
                           A 23772    
                           A 23773    .ENDEF
                           A 23774    
                           A 23775    .DEFINE "dj"
                           A 23776    
                           A 23777    .CLASS 65
                           A 23778    
                           A 23779    .VALUE -60
                           A 23780    
                           A 23781    .TAG "NONAME3"
                           A 23782    
                           A 23783    .TYPE 8
                           A 23784    
                           A 23785    .ENDEF
                           A 23786    
005DF6 DDE5                A 23787    	PUSH	IX
005DF8 DD210000 00         A 23788    	LD	IX,0
005DFD DD39                A 23789    	ADD	IX,SP
005DFF ED22C1              A 23790    	LEA	HL,IX+%FFFFFFC1
005E02 F9                  A 23791    	LD	SP,HL
                           A 23792    ; 5280		FRESULT res;
                           A 23793    ; 5281		DIR dj;
                           A 23794    ; 5282		FATFS *fs;
                           A 23795    ; 5283		UINT si, di;
                           A 23796    ; 5284		WCHAR wc;
                           A 23797    ; 5285	
                           A 23798    ; 5286		/* Get logical drive */
                           A 23799    ; 5287		res = mount_volume(&path, &fs, 0);
                           A 23800    .LINE 5287
                           A 23801    
005E03 01000000            A 23802    	LD	BC,0
005E07 C5                  A 23803    	PUSH	BC
005E08 ED65F7              A 23804    	PEA	IX+%FFFFFFF7
005E0B ED6506              A 23805    	PEA	IX+%6
005E0E CD 6E 33 00         A 23806    	CALL	_mount_volume
005E12 C1                  A 23807    	POP	BC
005E13 C1                  A 23808    	POP	BC
005E14 C1                  A 23809    	POP	BC
005E15 DD2FFA              A 23810    	LD	(IX+%FFFFFFFA),HL
                           A 23811    ; 5288	
                           A 23812    ; 5289		/* Get volume label */
                           A 23813    ; 5290		if (res == FR_OK && label) {
                           A 23814    .LINE 5290
                           A 23815    
005E18 01000000            A 23816    	LD	BC,0
005E1C DD27FA              A 23817    	LD	HL,(IX+%FFFFFFFA)
005E1F B7                  A 23818    	OR	A,A
005E20 ED42                A 23819    	SBC	HL,BC
005E22 C2 0F 5F 00         A 23820    	JR	NZ,L_1196
005E26 DD2709              A 23821    	LD	HL,(IX+%9)
005E29 B7                  A 23822    	OR	A,A
005E2A ED42                A 23823    	SBC	HL,BC
005E2C CA 0F 5F 00         A 23824    	JR	Z,L_1196
                           A 23825    ; 5291			dj.obj.fs = fs; dj.obj.sclust =
                           A 23826    .LINE 5291
                           A 23827    
005E30 ED02C4              A 23828    	LEA	BC,IX+%FFFFFFC4
005E33 DD0FC1              A 23829    	LD	(IX+%FFFFFFC1),BC
005E36 DD07F7              A 23830    	LD	BC,(IX+%FFFFFFF7)
005E39 DD0FC4              A 23831    	LD	(IX+%FFFFFFC4),BC
005E3C 01000000            A 23832    	LD	BC,0
005E40 DD31C1              A 23833    	LD	IY,(IX+%FFFFFFC1)
005E43 FD0F07              A 23834    	LD	(IY+%7),BC
005E46 FD360A00            A 23835    	LD	(IY+%A),%0
                           A 23836    ; 5292			res = dir_sdi(&dj, 0);
                           A 23837    .LINE 5292
                           A 23838    
005E4A C5                  A 23839    	PUSH	BC
005E4B C5                  A 23840    	PUSH	BC
005E4C ED65C4              A 23841    	PEA	IX+%FFFFFFC4
005E4F CD 50 12 00         A 23842    	CALL	_dir_sdi
005E53 C1                  A 23843    	POP	BC
005E54 C1                  A 23844    	POP	BC
005E55 C1                  A 23845    	POP	BC
005E56 DD2FFA              A 23846    	LD	(IX+%FFFFFFFA),HL
                           A 23847    ; 5293			if (res == FR_OK) {
                           A 23848    .LINE 5293
                           A 23849    
005E59 01000000            A 23850    	LD	BC,0
005E5D DD27FA              A 23851    	LD	HL,(IX+%FFFFFFFA)
005E60 B7                  A 23852    	OR	A,A
005E61 ED42                A 23853    	SBC	HL,BC
005E63 C2 F7 5E 00         A 23854    	JR	NZ,L_1187
                           A 23855    ; 5294			 	res = DIR_READ_LABEL(&dj);	
                           A 23856    .LINE 5294
                           A 23857    
005E67 01010000            A 23858    	LD	BC,1
005E6B C5                  A 23859    	PUSH	BC
005E6C ED65C4              A 23860    	PEA	IX+%FFFFFFC4
005E6F CD 46 1E 00         A 23861    	CALL	_dir_read
005E73 C1                  A 23862    	POP	BC
005E74 C1                  A 23863    	POP	BC
005E75 DD2FFA              A 23864    	LD	(IX+%FFFFFFFA),HL
                           A 23865    ; 5295			 	if (res == FR_OK) {
                           A 23866    .LINE 5295
                           A 23867    
005E78 01000000            A 23868    	LD	BC,0
005E7C DD27FA              A 23869    	LD	HL,(IX+%FFFFFFFA)
005E7F B7                  A 23870    	OR	A,A
005E80 ED42                A 23871    	SBC	HL,BC
005E82 20 73               A 23872    	JR	NZ,L_1187
                           A 23873    ; 5296	#if FF_FS_EXFAT
                           A 23874    ; 5297					if (fs->fs_type == FS_E
                           A 23875    ; 5298						WCHAR hs;
                           A 23876    ; 5299						UINT nw;
                           A 23877    ; 5300	
                           A 23878    ; 5301						for (si = di = hs =
                           A 23879    ; 5302							wc = ld_word(dj
                           A 23880    ; 5303							if (hs == 0 && 
                           A 23881    ; 5304								hs = wc; co
                           A 23882    ; 5305							}
                           A 23883    ; 5306							nw = put_utf((D
                           A 23884    ; 5307							if (nw == 0) { 
                           A 23885    ; 5308							di += nw;
                           A 23886    ; 5309							hs = 0;
                           A 23887    ; 5310						}
                           A 23888    ; 5311						if (hs != 0) di = 0
                           A 23889    ; 5312						label[di] = 0;
                           A 23890    ; 5313					} else
                           A 23891    ; 5314	#endif
                           A 23892    ; 5315					{
                           A 23893    ; 5316						si = di = 0;		
                           A 23894    .LINE 5316
                           A 23895    
005E84 DD0FFD              A 23896    	LD	(IX+%FFFFFFFD),BC
005E87 DD0FF4              A 23897    	LD	(IX+%FFFFFFF4),BC
                           A 23898    ; 5317						while (si < 11) {
                           A 23899    .LINE 5317
                           A 23900    
005E8A 18 2B               A 23901    	JR	L_1178
005E8C                     A 23902    L_1179:
                           A 23903    ; 5318							wc = dj.dir[si+
                           A 23904    .LINE 5318
                           A 23905    
005E8C DD07F4              A 23906    	LD	BC,(IX+%FFFFFFF4)
005E8F DD27DF              A 23907    	LD	HL,(IX+%FFFFFFDF)
005E92 09                  A 23908    	ADD	HL,BC
005E93 4E                  A 23909    	LD	C,(HL)
005E94 0600                A 23910    	LD	B,%0
005E96 C5E1                A 23911    	LD	HL,BC
005E98 DD75F2              A 23912    	LD	(IX+%FFFFFFF2),L
005E9B DD74F3              A 23913    	LD	(IX+%FFFFFFF3),H
005E9E DD07F4              A 23914    	LD	BC,(IX+%FFFFFFF4)
005EA1 03                  A 23915    	INC	BC
005EA2 DD0FF4              A 23916    	LD	(IX+%FFFFFFF4),BC
                           A 23917    ; 5319	#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	
                           A 23918    ; 5320							if (dbc_1st((BY
                           A 23919    ; 5321							wc = ff_oem2uni
                           A 23920    ; 5322							if (wc == 0) { 
                           A 23921    ; 5323							di += put_utf(w
                           A 23922    ; 5324	#else									
                           A 23923    ; 5325							label[di++] = (
                           A 23924    .LINE 5325
                           A 23925    
005EA5 DD7EF2              A 23926    	LD	A,(IX+%FFFFFFF2)
005EA8 DD07FD              A 23927    	LD	BC,(IX+%FFFFFFFD)
005EAB DD2709              A 23928    	LD	HL,(IX+%9)
005EAE 09                  A 23929    	ADD	HL,BC
005EAF 77                  A 23930    	LD	(HL),A
005EB0 DD07FD              A 23931    	LD	BC,(IX+%FFFFFFFD)
005EB3 03                  A 23932    	INC	BC
005EB4 DD0FFD              A 23933    	LD	(IX+%FFFFFFFD),BC
                           A 23934    ; 5326	#endif
                           A 23935    ; 5327						}
005EB7                     A 23936    L_1178:
                           A 23937    .LINE 5327
                           A 23938    
005EB7 010B0000            A 23939    	LD	BC,11
005EBB DD27F4              A 23940    	LD	HL,(IX+%FFFFFFF4)
005EBE B7                  A 23941    	OR	A,A
005EBF ED42                A 23942    	SBC	HL,BC
005EC1 38 C9               A 23943    	JR	C,L_1179
                           A 23944    ; 5328						do {				
005EC3                     A 23945    L_1181:
                           A 23946    .LINE 5328
                           A 23947    
                           A 23948    ; 5329							label[di] = 0;
                           A 23949    .LINE 5329
                           A 23950    
005EC3 DD07FD              A 23951    	LD	BC,(IX+%FFFFFFFD)
005EC6 DD2709              A 23952    	LD	HL,(IX+%9)
005EC9 09                  A 23953    	ADD	HL,BC
005ECA 3600                A 23954    	LD	(HL),%0
                           A 23955    ; 5330							if (di == 0) br
                           A 23956    .LINE 5330
                           A 23957    
005ECC 01000000            A 23958    	LD	BC,0
005ED0 DD27FD              A 23959    	LD	HL,(IX+%FFFFFFFD)
005ED3 B7                  A 23960    	OR	A,A
005ED4 ED42                A 23961    	SBC	HL,BC
005ED6 28 1F               A 23962    	JR	Z,L_1187
                           A 23963    ; 5331						} while (label[--di
                           A 23964    .LINE 5331
                           A 23965    
005ED8 DD31FD              A 23966    	LD	IY,(IX+%FFFFFFFD)
005EDB ED33FF              A 23967    	LEA	IY,IY+%FFFFFFFF
005EDE DD3EFD              A 23968    	LD	(IX+%FFFFFFFD),IY
005EE1 FDE5C1              A 23969    	LD	BC,IY
005EE4 DD2709              A 23970    	LD	HL,(IX+%9)
005EE7 09                  A 23971    	ADD	HL,BC
005EE8 7E                  A 23972    	LD	A,(HL)
005EE9 47                  A 23973    	LD	B,A
005EEA 17ED62              A 23974    	SEXT	HL
005EED 68                  A 23975    	LD	L,B
005EEE 01200000            A 23976    	LD	BC,32
005EF2 B7                  A 23977    	OR	A,A
005EF3 ED42                A 23978    	SBC	HL,BC
005EF5 28 CC               A 23979    	JR	Z,L_1181
                           A 23980    ; 5332					}
                           A 23981    ; 5333				}
                           A 23982    ; 5334			}
005EF7                     A 23983    L_1187:
                           A 23984    .LINE 5334
                           A 23985    
                           A 23986    ; 5335			if (res == FR_NO_FILE) {	/* 
                           A 23987    .LINE 5335
                           A 23988    
005EF7 01040000            A 23989    	LD	BC,4
005EFB DD27FA              A 23990    	LD	HL,(IX+%FFFFFFFA)
005EFE B7                  A 23991    	OR	A,A
005EFF ED42                A 23992    	SBC	HL,BC
005F01 20 0C               A 23993    	JR	NZ,L_1196
                           A 23994    ; 5336				label[0] = 0;
                           A 23995    .LINE 5336
                           A 23996    
005F03 DD2709              A 23997    	LD	HL,(IX+%9)
005F06 3600                A 23998    	LD	(HL),%0
                           A 23999    ; 5337				res = FR_OK;
                           A 24000    .LINE 5337
                           A 24001    
005F08 01000000            A 24002    	LD	BC,0
005F0C DD0FFA              A 24003    	LD	(IX+%FFFFFFFA),BC
                           A 24004    ; 5338			}
                           A 24005    ; 5339		}
005F0F                     A 24006    L_1196:
                           A 24007    .LINE 5339
                           A 24008    
                           A 24009    ; 5340	
                           A 24010    ; 5341		/* Get volume serial number */
                           A 24011    ; 5342		if (res == FR_OK && vsn) {
                           A 24012    .LINE 5342
                           A 24013    
005F0F 01000000            A 24014    	LD	BC,0
005F13 DD27FA              A 24015    	LD	HL,(IX+%FFFFFFFA)
005F16 B7                  A 24016    	OR	A,A
005F17 ED42                A 24017    	SBC	HL,BC
005F19 C2 B3 5F 00         A 24018    	JR	NZ,L_1197
005F1D DD270C              A 24019    	LD	HL,(IX+%C)
005F20 B7                  A 24020    	OR	A,A
005F21 ED42                A 24021    	SBC	HL,BC
005F23 CA B3 5F 00         A 24022    	JR	Z,L_1197
                           A 24023    ; 5343			res = move_window(fs, fs->volba
                           A 24024    .LINE 5343
                           A 24025    
005F27 DD31F7              A 24026    	LD	IY,(IX+%FFFFFFF7)
005F2A FD071E              A 24027    	LD	BC,(IY+%1E)
005F2D FD7E21              A 24028    	LD	A,(IY+%21)
005F30 2600                A 24029    	LD	H,%0
005F32 6F                  A 24030    	LD	L,A
005F33 E5                  A 24031    	PUSH	HL
005F34 C5                  A 24032    	PUSH	BC
005F35 DD07F7              A 24033    	LD	BC,(IX+%FFFFFFF7)
005F38 C5                  A 24034    	PUSH	BC
005F39 CD 1E 04 00         A 24035    	CALL	_move_window
005F3D C1                  A 24036    	POP	BC
005F3E C1                  A 24037    	POP	BC
005F3F C1                  A 24038    	POP	BC
005F40 DD2FFA              A 24039    	LD	(IX+%FFFFFFFA),HL
                           A 24040    ; 5344			if (res == FR_OK) {
                           A 24041    .LINE 5344
                           A 24042    
005F43 01000000            A 24043    	LD	BC,0
005F47 DD27FA              A 24044    	LD	HL,(IX+%FFFFFFFA)
005F4A B7                  A 24045    	OR	A,A
005F4B ED42                A 24046    	SBC	HL,BC
005F4D 20 64               A 24047    	JR	NZ,L_1197
                           A 24048    ; 5345				switch (fs->fs_type) {
                           A 24049    .LINE 5345
                           A 24050    
005F4F DD31F7              A 24051    	LD	IY,(IX+%FFFFFFF7)
005F52 FD7E00              A 24052    	LD	A,(IY+%0)
005F55 B7ED62              A 24053    	UEXT	HL
005F58 6F                  A 24054    	LD	L,A
005F59 E5C1                A 24055    	LD	BC,HL
005F5B                     A 24056    L__648:
005F5B 11030000            A 24057    	LD	DE,3
005F5F B7                  A 24058    	OR	A,A
005F60 ED52                A 24059    	SBC	HL,DE
005F62 38 2F               A 24060    	JR	C,L_1192
005F64 21040000            A 24061    	LD	HL,4
005F68 B7                  A 24062    	OR	A,A
005F69 ED42                A 24063    	SBC	HL,BC
005F6B 38 26               A 24064    	JR	C,L_1192
005F6D C5E1                A 24065    	LD	HL,BC
005F6F E5C1                A 24066    	LD	BC,HL
005F71 29                  A 24067    	ADD	HL,HL
005F72 09                  A 24068    	ADD	HL,BC
005F73 01 72 5F 00         A 24069    	LD	BC,L__647-9
005F77 09                  A 24070    	ADD	HL,BC
005F78 ED27                A 24071    	LD	HL,(HL)
005F7A E9                  A 24072    	JP	(HL)
005F7B                     A 24073    L__647:
005F7B 8A5F00              A 24074    	DW24	L_1191	
                           A 24075    
005F7E 815F00              A 24076    	DW24	L_1190	
                           A 24077    
                           A 24078    ; 5346				case FS_EXFAT:
005F81                     A 24079    L_1190:
                           A 24080    .LINE 5346
                           A 24081    
                           A 24082    ; 5347					di = BPB_VolIDEx;
                           A 24083    .LINE 5347
                           A 24084    
005F81 01640000            A 24085    	LD	BC,100
005F85 DD0FFD              A 24086    	LD	(IX+%FFFFFFFD),BC
                           A 24087    ; 5348					break;
                           A 24088    .LINE 5348
                           A 24089    
005F88 18 10               A 24090    	JR	L_1193
                           A 24091    ; 5349	
                           A 24092    ; 5350				case FS_FAT32:
005F8A                     A 24093    L_1191:
                           A 24094    .LINE 5350
                           A 24095    
                           A 24096    ; 5351					di = BS_VolID32;
                           A 24097    .LINE 5351
                           A 24098    
005F8A 01430000            A 24099    	LD	BC,67
005F8E DD0FFD              A 24100    	LD	(IX+%FFFFFFFD),BC
                           A 24101    ; 5352					break;
                           A 24102    .LINE 5352
                           A 24103    
005F91 18 07               A 24104    	JR	L_1193
                           A 24105    ; 5353	
                           A 24106    ; 5354				default:
005F93                     A 24107    L_1192:
                           A 24108    .LINE 5354
                           A 24109    
                           A 24110    ; 5355					di = BS_VolID;
                           A 24111    .LINE 5355
                           A 24112    
005F93 01270000            A 24113    	LD	BC,39
005F97 DD0FFD              A 24114    	LD	(IX+%FFFFFFFD),BC
                           A 24115    ; 5356				}
005F9A                     A 24116    L_1193:
                           A 24117    .LINE 5356
                           A 24118    
                           A 24119    ; 5357				*vsn = ld_dword(fs->win + d
                           A 24120    .LINE 5357
                           A 24121    
005F9A DD07FD              A 24122    	LD	BC,(IX+%FFFFFFFD)
005F9D DD31F7              A 24123    	LD	IY,(IX+%FFFFFFF7)
005FA0 ED2332              A 24124    	LEA	HL,IY+%32
005FA3 09                  A 24125    	ADD	HL,BC
005FA4 E5                  A 24126    	PUSH	HL
005FA5 CD 3C 00 00         A 24127    	CALL	_ld_dword
005FA9 C1                  A 24128    	POP	BC
005FAA DD310C              A 24129    	LD	IY,(IX+%C)
005FAD FD2F00              A 24130    	LD	(IY),HL
005FB0 FD7303              A 24131    	LD	(IY+%3),E
                           A 24132    ; 5358			}
                           A 24133    ; 5359		}
005FB3                     A 24134    L_1197:
                           A 24135    .LINE 5359
                           A 24136    
                           A 24137    ; 5360	
                           A 24138    ; 5361		LEAVE_FF(fs, res);
                           A 24139    .LINE 5361
                           A 24140    
005FB3 DD27FA              A 24141    	LD	HL,(IX+%FFFFFFFA)
                           A 24142    ; 5362	}
                           A 24143    .LINE 5362
                           A 24144    
005FB6 DDF9                A 24145    	LD	SP,IX
005FB8 DDE1                A 24146    	POP	IX
005FBA C9                  A 24147    	RET	
                           A 24148    
                           A 24149    
                           A 24150    ;**************************** _f_getlabel *****
                           A 24151    ;Name                         Addr/Register   S
                           A 24152    ;dj                                   IX-60    
                           A 24153    ;wc                                   IX-14    
                           A 24154    ;si                                   IX-12    
                           A 24155    ;fs                                    IX-9    
                           A 24156    ;res                                   IX-6    
                           A 24157    ;di                                    IX-3    
                           A 24158    ;vsn                                  IX+12    
                           A 24159    ;label                                 IX+9    
                           A 24160    ;path                                  IX+6    
                           A 24161    
                           A 24162    
                           A 24163    ; Stack Frame Size: 78 (bytes)
                           A 24164    ;       Spill Code: -3 (instruction)
                           A 24165    
                           A 24166    
                           A 24167    .ENDFUNC "f_getlabel",5362,"_f_getlabel"
                           A 24168    ; 5363	
                           A 24169    ; 5364	
                           A 24170    ; 5365	
                           A 24171    ; 5366	#if !FF_FS_READONLY
                           A 24172    ; 5367	/*-------------------------------------
                           A 24173    ; 5368	/* Set Volume Label                    
                           A 24174    ; 5369	/*-------------------------------------
                           A 24175    ; 5370	
                           A 24176    ; 5371	FRESULT f_setlabel (
                           A 24177    ; 5372		const TCHAR* label	/* Volume label
                           A 24178    ; 5373	)
                           A 24179    ; 5374	{
005FBB                     A 24180    _f_setlabel:
                           A 24181    .DEFINE "_f_setlabel"
                           A 24182    
                           A 24183    .VALUE _f_setlabel
                           A 24184    
                           A 24185    .CLASS 2
                           A 24186    
                           A 24187    .TYPE 68
                           A 24188    
                           A 24189    .ENDEF
                           A 24190    
                           A 24191    .BEGFUNC "f_setlabel",5374,"_f_setlabel"
                           A 24192    
                           A 24193    .LINE 5374
                           A 24194    
                           A 24195    .DEFINE "label"
                           A 24196    
                           A 24197    .CLASS 65
                           A 24198    
                           A 24199    .VALUE 6
                           A 24200    
                           A 24201    .TYPE 194
                           A 24202    
                           A 24203    .ENDEF
                           A 24204    
                           A 24205    .DEFINE "di"
                           A 24206    
                           A 24207    .CLASS 65
                           A 24208    
                           A 24209    .VALUE -3
                           A 24210    
                           A 24211    .TYPE 14
                           A 24212    
                           A 24213    .ENDEF
                           A 24214    
                           A 24215    .DEFINE "res"
                           A 24216    
                           A 24217    .CLASS 65
                           A 24218    
                           A 24219    .VALUE -6
                           A 24220    
                           A 24221    .TYPE 4
                           A 24222    
                           A 24223    .ENDEF
                           A 24224    
                           A 24225    .DEFINE "wc"
                           A 24226    
                           A 24227    .CLASS 65
                           A 24228    
                           A 24229    .VALUE -8
                           A 24230    
                           A 24231    .TYPE 13
                           A 24232    
                           A 24233    .ENDEF
                           A 24234    
                           A 24235    .DEFINE "fs"
                           A 24236    
                           A 24237    .CLASS 65
                           A 24238    
                           A 24239    .VALUE -11
                           A 24240    
                           A 24241    .TAG "NONAME0"
                           A 24242    
                           A 24243    .TYPE 40
                           A 24244    
                           A 24245    .ENDEF
                           A 24246    
                           A 24247    .DEFINE "dc"
                           A 24248    
                           A 24249    .CLASS 65
                           A 24250    
                           A 24251    .VALUE -22
                           A 24252    
                           A 24253    .TYPE 15
                           A 24254    
                           A 24255    .ENDEF
                           A 24256    
                           A 24257    .DEFINE "dirvn"
                           A 24258    
                           A 24259    .CLASS 65
                           A 24260    
                           A 24261    .VALUE -44
                           A 24262    
                           A 24263    .DIM 22
                           A 24264    
                           A 24265    .TYPE 108
                           A 24266    
                           A 24267    .ENDEF
                           A 24268    
                           A 24269    .DEFINE "dj"
                           A 24270    
                           A 24271    .CLASS 65
                           A 24272    
                           A 24273    .VALUE -90
                           A 24274    
                           A 24275    .TAG "NONAME3"
                           A 24276    
                           A 24277    .TYPE 8
                           A 24278    
                           A 24279    .ENDEF
                           A 24280    
                           A 24281    ; 5375		FRESULT res;
                           A 24282    ; 5376		DIR dj;
                           A 24283    ; 5377		FATFS *fs;
                           A 24284    ; 5378		BYTE dirvn[22];
                           A 24285    ; 5379		UINT di;
                           A 24286    ; 5380		WCHAR wc;
                           A 24287    ; 5381		static const char badchr[18] = "+.,
                           A 24288    .LINE 5381
                           A 24289    
                           A 24290    .DEFINE "badchr"
                           A 24291    
                           A 24292    .ALIAS "_0badchr"
                           A 24293    
                           A 24294    .CLASS 84
                           A 24295    
                           A 24296    .VALUE _0badchr
                           A 24297    
                           A 24298    .DIM 18
                           A 24299    
                           A 24300    .TYPE 98
                           A 24301    
                           A 24302    .ENDEF
                           A 24303    
005FBB DDE5                A 24304    	PUSH	IX
005FBD DD210000 00         A 24305    	LD	IX,0
005FC2 DD39                A 24306    	ADD	IX,SP
005FC4 ED22A3              A 24307    	LEA	HL,IX+%FFFFFFA3
005FC7 F9                  A 24308    	LD	SP,HL
                           A 24309    ; 5382	#if FF_USE_LFN
                           A 24310    ; 5383		DWORD dc;
                           A 24311    ; 5384	#endif
                           A 24312    ; 5385	
                           A 24313    ; 5386		/* Get logical drive */
                           A 24314    ; 5387		res = mount_volume(&label, &fs, FA_
                           A 24315    .LINE 5387
                           A 24316    
005FC8 01020000            A 24317    	LD	BC,2
005FCC C5                  A 24318    	PUSH	BC
005FCD ED65F5              A 24319    	PEA	IX+%FFFFFFF5
005FD0 ED6506              A 24320    	PEA	IX+%6
005FD3 CD 6E 33 00         A 24321    	CALL	_mount_volume
005FD7 C1                  A 24322    	POP	BC
005FD8 C1                  A 24323    	POP	BC
005FD9 C1                  A 24324    	POP	BC
005FDA DD2FFA              A 24325    	LD	(IX+%FFFFFFFA),HL
                           A 24326    ; 5388		if (res != FR_OK) LEAVE_FF(fs, res)
                           A 24327    .LINE 5388
                           A 24328    
005FDD 01000000            A 24329    	LD	BC,0
005FE1 DD27FA              A 24330    	LD	HL,(IX+%FFFFFFFA)
005FE4 B7                  A 24331    	OR	A,A
005FE5 ED42                A 24332    	SBC	HL,BC
005FE7 28 07               A 24333    	JR	Z,L_1225
005FE9 DD27FA              A 24334    	LD	HL,(IX+%FFFFFFFA)
005FEC C3 6C 62 00         A 24335    	JR	L_1242
005FF0                     A 24336    L_1225:
                           A 24337    ; 5389	
                           A 24338    ; 5390	#if FF_FS_EXFAT
                           A 24339    ; 5391		if (fs->fs_type == FS_EXFAT) {	/* 
                           A 24340    ; 5392			memset(dirvn, 0, 22);
                           A 24341    ; 5393			di = 0;
                           A 24342    ; 5394			while ((UINT)*label >= ' ') {	
                           A 24343    ; 5395				dc = tchar2uni(&label);	/* 
                           A 24344    ; 5396				if (dc >= 0x10000) {
                           A 24345    ; 5397					if (dc == 0xFFFFFFFF ||
                           A 24346    ; 5398						dc = 0;
                           A 24347    ; 5399					} else {
                           A 24348    ; 5400						st_word(dirvn + di 
                           A 24349    ; 5401					}
                           A 24350    ; 5402				}
                           A 24351    ; 5403				if (dc == 0 || strchr(&badc
                           A 24352    ; 5404					LEAVE_FF(fs, FR_INVALID
                           A 24353    ; 5405				}
                           A 24354    ; 5406				st_word(dirvn + di * 2, (WC
                           A 24355    ; 5407			}
                           A 24356    ; 5408		} else
                           A 24357    ; 5409	#endif
                           A 24358    ; 5410		{	/* On the FAT/FAT32 volume */
                           A 24359    ; 5411			memset(dirvn, ' ', 11);
                           A 24360    .LINE 5411
                           A 24361    
005FF0 010B0000            A 24362    	LD	BC,11
005FF4 C5                  A 24363    	PUSH	BC
005FF5 01200000            A 24364    	LD	BC,32
005FF9 C5                  A 24365    	PUSH	BC
005FFA ED65D4              A 24366    	PEA	IX+%FFFFFFD4
005FFD CD 00 00 00         A 24367    	CALL	_memset
006001 C1                  A 24368    	POP	BC
006002 C1                  A 24369    	POP	BC
006003 C1                  A 24370    	POP	BC
                           A 24371    ; 5412			di = 0;
                           A 24372    .LINE 5412
                           A 24373    
006004 01000000            A 24374    	LD	BC,0
006008 DD0FFD              A 24375    	LD	(IX+%FFFFFFFD),BC
                           A 24376    ; 5413			while ((UINT)*label >= ' ') {	
                           A 24377    .LINE 5413
                           A 24378    
00600B C3 0C 61 00         A 24379    	JR	L_1216
00600F                     A 24380    L_1217:
                           A 24381    ; 5414	#if FF_USE_LFN
                           A 24382    ; 5415				dc = tchar2uni(&label);
                           A 24383    .LINE 5415
                           A 24384    
00600F ED6506              A 24385    	PEA	IX+%6
006012 CD DA 01 00         A 24386    	CALL	_tchar2uni
006016 C1                  A 24387    	POP	BC
006017 DD2FEA              A 24388    	LD	(IX+%FFFFFFEA),HL
00601A DD73ED              A 24389    	LD	(IX+%FFFFFFED),E
                           A 24390    ; 5416				wc = (dc < 0x10000) ? ff_un
                           A 24391    .LINE 5416
                           A 24392    
00601D DD27EA              A 24393    	LD	HL,(IX+%FFFFFFEA)
006020 DD5EED              A 24394    	LD	E,(IX+%FFFFFFED)
006023 01000001            A 24395    	LD	BC,65536
006027 AF                  A 24396    	XOR	A,A
006028 CD 00 00 00         A 24397    	CALL	__lcmpu
00602C 30 2C               A 24398    	JR	NC,L_1202
00602E 01B50100            A 24399    	LD	BC,437
006032 C5                  A 24400    	PUSH	BC
006033 DD4EED              A 24401    	LD	C,(IX+%FFFFFFED)
006036 0600                A 24402    	LD	B,%0
006038 C5                  A 24403    	PUSH	BC
006039 DD07EA              A 24404    	LD	BC,(IX+%FFFFFFEA)
00603C C5                  A 24405    	PUSH	BC
00603D CD 00 00 00         A 24406    	CALL	_ff_wtoupper
006041 C1                  A 24407    	POP	BC
006042 C1                  A 24408    	POP	BC
006043 4B                  A 24409    	LD	C,E
006044 0600                A 24410    	LD	B,%0
006046 C5                  A 24411    	PUSH	BC
006047 E5                  A 24412    	PUSH	HL
006048 CD 00 00 00         A 24413    	CALL	_ff_uni2oem
00604C C1                  A 24414    	POP	BC
00604D C1                  A 24415    	POP	BC
00604E C1                  A 24416    	POP	BC
00604F E5C1                A 24417    	LD	BC,HL
006051 CD 00 00 00         A 24418    	CALL	__stoiu
006055 DD2FF1              A 24419    	LD	(IX+%FFFFFFF1),HL
006058 18 07               A 24420    	JR	L_1203
00605A                     A 24421    L_1202:
00605A 01000000            A 24422    	LD	BC,0
00605E DD0FF1              A 24423    	LD	(IX+%FFFFFFF1),BC
006061                     A 24424    L_1203:
006061 DD27F1              A 24425    	LD	HL,(IX+%FFFFFFF1)
006064 DD75F8              A 24426    	LD	(IX+%FFFFFFF8),L
006067 DD74F9              A 24427    	LD	(IX+%FFFFFFF9),H
                           A 24428    ; 5417	#else									
                           A 24429    ; 5418				wc = (BYTE)*label++;
                           A 24430    ; 5419				if (dbc_1st((BYTE)wc)) wc =
                           A 24431    ; 5420				if (IsLower(wc)) wc -= 0x20
                           A 24432    ; 5421	#if FF_CODE_PAGE == 0
                           A 24433    ; 5422				if (ExCvt && wc >= 0x80) wc
                           A 24434    ; 5423	#elif FF_CODE_PAGE < 900
                           A 24435    ; 5424				if (wc >= 0x80) wc = ExCvt[
                           A 24436    ; 5425	#endif
                           A 24437    ; 5426	#endif
                           A 24438    ; 5427				if (wc == 0 || strchr(&badc
                           A 24439    .LINE 5427
                           A 24440    
00606A 49010000            A 24441    	LD.LIS	BC,0
00606E DD27F8              A 24442    	LD	HL,(IX+%FFFFFFF8)
006071 B7                  A 24443    	OR	A,A
006072 40ED42              A 24444    	SBC.SIS	HL,BC
006075 28 4F               A 24445    	JR	Z,L_1210
006077 DD07F8              A 24446    	LD	BC,(IX+%FFFFFFF8)
00607A CD 00 00 00         A 24447    	CALL	__stoiu
00607E E5                  A 24448    	PUSH	HL
00607F 01 8D 00 00         A 24449    	LD	BC,_0badchr
006083 C5                  A 24450    	PUSH	BC
006084 CD 00 00 00         A 24451    	CALL	_strchr
006088 C1                  A 24452    	POP	BC
006089 C1                  A 24453    	POP	BC
00608A 01000000            A 24454    	LD	BC,0
00608E B7                  A 24455    	OR	A,A
00608F ED42                A 24456    	SBC	HL,BC
006091 20 33               A 24457    	JR	NZ,L_1210
006093 49010001            A 24458    	LD.LIS	BC,256
006097 DD27F8              A 24459    	LD	HL,(IX+%FFFFFFF8)
00609A B7                  A 24460    	OR	A,A
00609B 40ED42              A 24461    	SBC.SIS	HL,BC
00609E 30 04               A 24462    	JR	NC,L__657
0060A0 3E01                A 24463    	LD	A,%1
0060A2 18 01               A 24464    	JR	L__658
0060A4                     A 24465    L__657:
0060A4 AF                  A 24466    	XOR	A,A
0060A5                     A 24467    L__658:
0060A5 DD77F4              A 24468    	LD	(IX+%FFFFFFF4),A
0060A8 B7                  A 24469    	OR	A,A
0060A9 20 09               A 24470    	JR	NZ,L_1207
0060AB 010A0000            A 24471    	LD	BC,10
0060AF DD0FEE              A 24472    	LD	(IX+%FFFFFFEE),BC
0060B2 18 07               A 24473    	JR	L_1208
0060B4                     A 24474    L_1207:
0060B4 010B0000            A 24475    	LD	BC,11
0060B8 DD0FEE              A 24476    	LD	(IX+%FFFFFFEE),BC
0060BB                     A 24477    L_1208:
0060BB DD07EE              A 24478    	LD	BC,(IX+%FFFFFFEE)
0060BE DD27FD              A 24479    	LD	HL,(IX+%FFFFFFFD)
0060C1 B7                  A 24480    	OR	A,A
0060C2 ED42                A 24481    	SBC	HL,BC
0060C4 38 08               A 24482    	JR	C,L_1213
0060C6                     A 24483    L_1210:
                           A 24484    ; 5428					LEAVE_FF(fs, FR_INVALID
                           A 24485    .LINE 5428
                           A 24486    
0060C6 21060000            A 24487    	LD	HL,6
0060CA C3 6C 62 00         A 24488    	JR	L_1242
                           A 24489    ; 5429				}
0060CE                     A 24490    L_1213:
                           A 24491    .LINE 5429
                           A 24492    
                           A 24493    ; 5430				if (wc >= 0x100) dirvn[di++
                           A 24494    .LINE 5430
                           A 24495    
0060CE DD7EF4              A 24496    	LD	A,(IX+%FFFFFFF4)
0060D1 B7                  A 24497    	OR	A,A
0060D2 20 26               A 24498    	JR	NZ,L_1215
0060D4 DD07F8              A 24499    	LD	BC,(IX+%FFFFFFF8)
0060D7 CD 00 00 00         A 24500    	CALL	__stoiu
0060DB E5C1                A 24501    	LD	BC,HL
0060DD 3B                  A 24502    	DEC	SP
0060DE C5                  A 24503    	PUSH	BC
0060DF 33                  A 24504    	INC	SP
0060E0 F1                  A 24505    	POP	AF
0060E1 17ED62              A 24506    	SEXT	HL
0060E4 E5                  A 24507    	PUSH	HL
0060E5 C5                  A 24508    	PUSH	BC
0060E6 33                  A 24509    	INC	SP
0060E7 E1                  A 24510    	POP	HL
0060E8 33                  A 24511    	INC	SP
0060E9 33                  A 24512    	INC	SP
0060EA 7D                  A 24513    	LD	A,L
0060EB DD07FD              A 24514    	LD	BC,(IX+%FFFFFFFD)
0060EE ED22D4              A 24515    	LEA	HL,IX+%FFFFFFD4
0060F1 09                  A 24516    	ADD	HL,BC
0060F2 77                  A 24517    	LD	(HL),A
0060F3 DD07FD              A 24518    	LD	BC,(IX+%FFFFFFFD)
0060F6 03                  A 24519    	INC	BC
0060F7 DD0FFD              A 24520    	LD	(IX+%FFFFFFFD),BC
0060FA                     A 24521    L_1215:
                           A 24522    ; 5431				dirvn[di++] = (BYTE)wc;
                           A 24523    .LINE 5431
                           A 24524    
0060FA DD7EF8              A 24525    	LD	A,(IX+%FFFFFFF8)
0060FD DD07FD              A 24526    	LD	BC,(IX+%FFFFFFFD)
006100 ED22D4              A 24527    	LEA	HL,IX+%FFFFFFD4
006103 09                  A 24528    	ADD	HL,BC
006104 77                  A 24529    	LD	(HL),A
006105 DD07FD              A 24530    	LD	BC,(IX+%FFFFFFFD)
006108 03                  A 24531    	INC	BC
006109 DD0FFD              A 24532    	LD	(IX+%FFFFFFFD),BC
                           A 24533    ; 5432			}
00610C                     A 24534    L_1216:
                           A 24535    .LINE 5432
                           A 24536    
00610C DD2706              A 24537    	LD	HL,(IX+%6)
00610F 7E                  A 24538    	LD	A,(HL)
006110 47                  A 24539    	LD	B,A
006111 17ED62              A 24540    	SEXT	HL
006114 68                  A 24541    	LD	L,B
006115 01200000            A 24542    	LD	BC,32
006119 B7                  A 24543    	OR	A,A
00611A ED42                A 24544    	SBC	HL,BC
00611C D2 0F 60 00         A 24545    	JR	NC,L_1217
                           A 24546    ; 5433			if (dirvn[0] == DDEM) LEAVE_FF(
                           A 24547    .LINE 5433
                           A 24548    
006120 DD7ED4              A 24549    	LD	A,(IX+%FFFFFFD4)
006123 B7ED62              A 24550    	UEXT	HL
006126 6F                  A 24551    	LD	L,A
006127 01E50000            A 24552    	LD	BC,229
00612B B7                  A 24553    	OR	A,A
00612C ED42                A 24554    	SBC	HL,BC
00612E 20 11               A 24555    	JR	NZ,L_1222
006130 21060000            A 24556    	LD	HL,6
006134 C3 6C 62 00         A 24557    	JR	L_1242
                           A 24558    ; 5434			while (di && dirvn[di - 1] == '
                           A 24559    .LINE 5434
                           A 24560    
006138                     A 24561    L_1223:
006138 DD31FD              A 24562    	LD	IY,(IX+%FFFFFFFD)
00613B ED33FF              A 24563    	LEA	IY,IY+%FFFFFFFF
00613E DD3EFD              A 24564    	LD	(IX+%FFFFFFFD),IY
006141                     A 24565    L_1222:
006141 01000000            A 24566    	LD	BC,0
006145 DD27FD              A 24567    	LD	HL,(IX+%FFFFFFFD)
006148 B7                  A 24568    	OR	A,A
006149 ED42                A 24569    	SBC	HL,BC
00614B 28 16               A 24570    	JR	Z,L_1226
00614D DD07FD              A 24571    	LD	BC,(IX+%FFFFFFFD)
006150 ED22D4              A 24572    	LEA	HL,IX+%FFFFFFD4
006153 09                  A 24573    	ADD	HL,BC
006154 2B                  A 24574    	DEC	HL
006155 7E                  A 24575    	LD	A,(HL)
006156 B7ED62              A 24576    	UEXT	HL
006159 6F                  A 24577    	LD	L,A
00615A 01200000            A 24578    	LD	BC,32
00615E B7                  A 24579    	OR	A,A
00615F ED42                A 24580    	SBC	HL,BC
006161 28 D5               A 24581    	JR	Z,L_1223
                           A 24582    ; 5435		}
006163                     A 24583    L_1226:
                           A 24584    .LINE 5435
                           A 24585    
                           A 24586    ; 5436	
                           A 24587    ; 5437		/* Set volume label */
                           A 24588    ; 5438		dj.obj.fs = fs; dj.obj.sclust = 0;	
                           A 24589    .LINE 5438
                           A 24590    
006163 ED02A6              A 24591    	LEA	BC,IX+%FFFFFFA6
006166 DD0FA3              A 24592    	LD	(IX+%FFFFFFA3),BC
006169 DD07F5              A 24593    	LD	BC,(IX+%FFFFFFF5)
00616C DD0FA6              A 24594    	LD	(IX+%FFFFFFA6),BC
00616F 01000000            A 24595    	LD	BC,0
006173 DD31A3              A 24596    	LD	IY,(IX+%FFFFFFA3)
006176 FD0F07              A 24597    	LD	(IY+%7),BC
006179 FD360A00            A 24598    	LD	(IY+%A),%0
                           A 24599    ; 5439		res = dir_sdi(&dj, 0);
                           A 24600    .LINE 5439
                           A 24601    
00617D C5                  A 24602    	PUSH	BC
00617E C5                  A 24603    	PUSH	BC
00617F ED65A6              A 24604    	PEA	IX+%FFFFFFA6
006182 CD 50 12 00         A 24605    	CALL	_dir_sdi
006186 C1                  A 24606    	POP	BC
006187 C1                  A 24607    	POP	BC
006188 C1                  A 24608    	POP	BC
006189 DD2FFA              A 24609    	LD	(IX+%FFFFFFFA),HL
                           A 24610    ; 5440		if (res == FR_OK) {
                           A 24611    .LINE 5440
                           A 24612    
00618C 01000000            A 24613    	LD	BC,0
006190 DD27FA              A 24614    	LD	HL,(IX+%FFFFFFFA)
006193 B7                  A 24615    	OR	A,A
006194 ED42                A 24616    	SBC	HL,BC
006196 C2 69 62 00         A 24617    	JR	NZ,L_1241
                           A 24618    ; 5441			res = DIR_READ_LABEL(&dj);	/* 
                           A 24619    .LINE 5441
                           A 24620    
00619A 01010000            A 24621    	LD	BC,1
00619E C5                  A 24622    	PUSH	BC
00619F ED65A6              A 24623    	PEA	IX+%FFFFFFA6
0061A2 CD 46 1E 00         A 24624    	CALL	_dir_read
0061A6 C1                  A 24625    	POP	BC
0061A7 C1                  A 24626    	POP	BC
0061A8 DD2FFA              A 24627    	LD	(IX+%FFFFFFFA),HL
                           A 24628    ; 5442			if (res == FR_OK) {
                           A 24629    .LINE 5442
                           A 24630    
0061AB 01000000            A 24631    	LD	BC,0
0061AF DD27FA              A 24632    	LD	HL,(IX+%FFFFFFFA)
0061B2 B7                  A 24633    	OR	A,A
0061B3 ED42                A 24634    	SBC	HL,BC
0061B5 20 37               A 24635    	JR	NZ,L_1239
                           A 24636    ; 5443				if (FF_FS_EXFAT && fs->fs_t
                           A 24637    ; 5444					dj.dir[XDIR_NumLabel] =
                           A 24638    ; 5445					memcpy(dj.dir + XDIR_La
                           A 24639    ; 5446				} else {
                           A 24640    ; 5447					if (di != 0) {
                           A 24641    .LINE 5447
                           A 24642    
0061B7 DD27FD              A 24643    	LD	HL,(IX+%FFFFFFFD)
0061BA B7                  A 24644    	OR	A,A
0061BB ED42                A 24645    	SBC	HL,BC
0061BD 28 15               A 24646    	JR	Z,L_1228
                           A 24647    ; 5448						memcpy(dj.dir, dirv
                           A 24648    .LINE 5448
                           A 24649    
0061BF 010B0000            A 24650    	LD	BC,11
0061C3 C5                  A 24651    	PUSH	BC
0061C4 ED65D4              A 24652    	PEA	IX+%FFFFFFD4
0061C7 DD07C1              A 24653    	LD	BC,(IX+%FFFFFFC1)
0061CA C5                  A 24654    	PUSH	BC
0061CB CD 00 00 00         A 24655    	CALL	_memcpy
0061CF C1                  A 24656    	POP	BC
0061D0 C1                  A 24657    	POP	BC
0061D1 C1                  A 24658    	POP	BC
                           A 24659    ; 5449					} else {
                           A 24660    .LINE 5449
                           A 24661    
0061D2 18 05               A 24662    	JR	L_1231
0061D4                     A 24663    L_1228:
                           A 24664    ; 5450						dj.dir[DIR_Name] = 
                           A 24665    .LINE 5450
                           A 24666    
0061D4 DD27C1              A 24667    	LD	HL,(IX+%FFFFFFC1)
0061D7 36E5                A 24668    	LD	(HL),%E5
                           A 24669    ; 5451					}
                           A 24670    ; 5452				}
0061D9                     A 24671    L_1231:
                           A 24672    .LINE 5452
                           A 24673    
                           A 24674    ; 5453				fs->wflag = 1;
                           A 24675    .LINE 5453
                           A 24676    
0061D9 DD31F5              A 24677    	LD	IY,(IX+%FFFFFFF5)
0061DC FD360301            A 24678    	LD	(IY+%3),%1
                           A 24679    ; 5454				res = sync_fs(fs);
                           A 24680    .LINE 5454
                           A 24681    
0061E0 DD07F5              A 24682    	LD	BC,(IX+%FFFFFFF5)
0061E3 C5                  A 24683    	PUSH	BC
0061E4 CD B3 04 00         A 24684    	CALL	_sync_fs
0061E8 C1                  A 24685    	POP	BC
0061E9 DD2FFA              A 24686    	LD	(IX+%FFFFFFFA),HL
                           A 24687    ; 5455			} else {			/* No volum
                           A 24688    .LINE 5455
                           A 24689    
0061EC 18 7B               A 24690    	JR	L_1241
0061EE                     A 24691    L_1239:
                           A 24692    ; 5456				if (res == FR_NO_FILE) {
                           A 24693    .LINE 5456
                           A 24694    
0061EE 01040000            A 24695    	LD	BC,4
0061F2 DD27FA              A 24696    	LD	HL,(IX+%FFFFFFFA)
0061F5 B7                  A 24697    	OR	A,A
0061F6 ED42                A 24698    	SBC	HL,BC
0061F8 20 6F               A 24699    	JR	NZ,L_1241
                           A 24700    ; 5457					res = FR_OK;
                           A 24701    .LINE 5457
                           A 24702    
0061FA 01000000            A 24703    	LD	BC,0
0061FE DD0FFA              A 24704    	LD	(IX+%FFFFFFFA),BC
                           A 24705    ; 5458					if (di != 0) {	/* Crea
                           A 24706    .LINE 5458
                           A 24707    
006201 DD27FD              A 24708    	LD	HL,(IX+%FFFFFFFD)
006204 B7                  A 24709    	OR	A,A
006205 ED42                A 24710    	SBC	HL,BC
006207 28 60               A 24711    	JR	Z,L_1241
                           A 24712    ; 5459						res = dir_alloc(&dj
                           A 24713    .LINE 5459
                           A 24714    
006209 01010000            A 24715    	LD	BC,1
00620D C5                  A 24716    	PUSH	BC
00620E ED65A6              A 24717    	PEA	IX+%FFFFFFA6
006211 CD 15 17 00         A 24718    	CALL	_dir_alloc
006215 C1                  A 24719    	POP	BC
006216 C1                  A 24720    	POP	BC
006217 DD2FFA              A 24721    	LD	(IX+%FFFFFFFA),HL
                           A 24722    ; 5460						if (res == FR_OK) {
                           A 24723    .LINE 5460
                           A 24724    
00621A 01000000            A 24725    	LD	BC,0
00621E DD27FA              A 24726    	LD	HL,(IX+%FFFFFFFA)
006221 B7                  A 24727    	OR	A,A
006222 ED42                A 24728    	SBC	HL,BC
006224 20 43               A 24729    	JR	NZ,L_1241
                           A 24730    ; 5461							memset(dj.dir, 
                           A 24731    .LINE 5461
                           A 24732    
006226 01200000            A 24733    	LD	BC,32
00622A C5                  A 24734    	PUSH	BC
00622B 01000000            A 24735    	LD	BC,0
00622F C5                  A 24736    	PUSH	BC
006230 DD07C1              A 24737    	LD	BC,(IX+%FFFFFFC1)
006233 C5                  A 24738    	PUSH	BC
006234 CD 00 00 00         A 24739    	CALL	_memset
006238 C1                  A 24740    	POP	BC
006239 C1                  A 24741    	POP	BC
00623A C1                  A 24742    	POP	BC
                           A 24743    ; 5462							if (FF_FS_EXFAT
                           A 24744    ; 5463								dj.dir[XDIR
                           A 24745    ; 5464								dj.dir[XDIR
                           A 24746    ; 5465								memcpy(dj.d
                           A 24747    ; 5466							} else {
                           A 24748    ; 5467								dj.dir[DIR_
                           A 24749    .LINE 5467
                           A 24750    
00623B DD31C1              A 24751    	LD	IY,(IX+%FFFFFFC1)
00623E ED230B              A 24752    	LEA	HL,IY+%B
006241 3608                A 24753    	LD	(HL),%8
                           A 24754    ; 5468								memcpy(dj.d
                           A 24755    .LINE 5468
                           A 24756    
006243 010B0000            A 24757    	LD	BC,11
006247 C5                  A 24758    	PUSH	BC
006248 ED65D4              A 24759    	PEA	IX+%FFFFFFD4
00624B DD07C1              A 24760    	LD	BC,(IX+%FFFFFFC1)
00624E C5                  A 24761    	PUSH	BC
00624F CD 00 00 00         A 24762    	CALL	_memcpy
006253 C1                  A 24763    	POP	BC
006254 C1                  A 24764    	POP	BC
006255 C1                  A 24765    	POP	BC
                           A 24766    ; 5469							}
                           A 24767    ; 5470							fs->wflag = 1;
                           A 24768    .LINE 5470
                           A 24769    
006256 DD31F5              A 24770    	LD	IY,(IX+%FFFFFFF5)
006259 FD360301            A 24771    	LD	(IY+%3),%1
                           A 24772    ; 5471							res = sync_fs(f
                           A 24773    .LINE 5471
                           A 24774    
00625D DD07F5              A 24775    	LD	BC,(IX+%FFFFFFF5)
006260 C5                  A 24776    	PUSH	BC
006261 CD B3 04 00         A 24777    	CALL	_sync_fs
006265 C1                  A 24778    	POP	BC
006266 DD2FFA              A 24779    	LD	(IX+%FFFFFFFA),HL
                           A 24780    ; 5472						}
                           A 24781    ; 5473					}
                           A 24782    ; 5474				}
                           A 24783    ; 5475			}
                           A 24784    ; 5476		}
006269                     A 24785    L_1241:
                           A 24786    .LINE 5476
                           A 24787    
                           A 24788    ; 5477	
                           A 24789    ; 5478		LEAVE_FF(fs, res);
                           A 24790    .LINE 5478
                           A 24791    
006269 DD27FA              A 24792    	LD	HL,(IX+%FFFFFFFA)
                           A 24793    ; 5479	}
00626C                     A 24794    L_1242:
                           A 24795    .LINE 5479
                           A 24796    
00626C DDF9                A 24797    	LD	SP,IX
00626E DDE1                A 24798    	POP	IX
006270 C9                  A 24799    	RET	
                           A 24800    
                           A 24801    
                           A 24802    ;**************************** _f_setlabel *****
                           A 24803    ;Name                         Addr/Register   S
                           A 24804    ;_memcpy                             IMPORT  --
                           A 24805    ;_0badchr                            STATIC    
                           A 24806    ;_strchr                             IMPORT  --
                           A 24807    ;_ff_wtoupper                        IMPORT  --
                           A 24808    ;_ff_uni2oem                         IMPORT  --
                           A 24809    ;_memset                             IMPORT  --
                           A 24810    ;dj                                   IX-90    
                           A 24811    ;dirvn                                IX-44    
                           A 24812    ;dc                                   IX-22    
                           A 24813    ;temp1205                             IX-18    
                           A 24814    ;temp1200                             IX-15    
                           A 24815    ;G_92                                 IX-12    
                           A 24816    ;fs                                   IX-11    
                           A 24817    ;wc                                    IX-8    
                           A 24818    ;res                                   IX-6    
                           A 24819    ;di                                    IX-3    
                           A 24820    ;label                                 IX+6    
                           A 24821    
                           A 24822    
                           A 24823    ; Stack Frame Size: 102 (bytes)
                           A 24824    ;       Spill Code: -3 (instruction)
                           A 24825    
                           A 24826    
                           A 24827    .ENDFUNC "f_setlabel",5479,"_f_setlabel"
                           A 24828    	SEGMENT TEXT
00008D                     A 24829    _0badchr:
00008D 2B                  A 24830    	DB	43
00008E 2E                  A 24831    	DB	46
00008F 2C                  A 24832    	DB	44
000090 3B                  A 24833    	DB	59
000091 3D                  A 24834    	DB	61
000092 5B                  A 24835    	DB	91
000093 5D                  A 24836    	DB	93
000094 2F                  A 24837    	DB	47
000095 2A                  A 24838    	DB	42
000096 3A                  A 24839    	DB	58
000097 3C                  A 24840    	DB	60
000098 3E                  A 24841    	DB	62
000099 7C                  A 24842    	DB	124
00009A 5C                  A 24843    	DB	92
00009B 22                  A 24844    	DB	34
00009C 3F                  A 24845    	DB	63
00009D 7F                  A 24846    	DB	127
00009E 00                  A 24847    	DB	0
                           A 24848    	XREF _disk_ioctl:ROM
                           A 24849    	XREF _disk_write:ROM
                           A 24850    	XREF _disk_read:ROM
                           A 24851    	XREF _disk_status:ROM
                           A 24852    	XREF _disk_initialize:ROM
                           A 24853    	XREF _ff_wtoupper:ROM
                           A 24854    	XREF _ff_uni2oem:ROM
                           A 24855    	XREF _ff_oem2uni:ROM
                           A 24856    	XREF _strchr:ROM
                           A 24857    	XREF _memset:ROM
                           A 24858    	XREF _memcmp:ROM
                           A 24859    	XREF _memcpy:ROM
                           A 24860    	XREF __lcmpu:ROM
                           A 24861    	XREF __ladd:ROM
                           A 24862    	XREF __lsub:ROM
                           A 24863    	XREF __idivu:ROM
                           A 24864    	XREF __ldivu:ROM
                           A 24865    	XREF __lmulu:ROM
                           A 24866    	XREF __lnot:ROM
                           A 24867    	XREF __sor:ROM
                           A 24868    	XREF __ior:ROM
                           A 24869    	XREF __lor:ROM
                           A 24870    	XREF __sand:ROM
                           A 24871    	XREF __iand:ROM
                           A 24872    	XREF __land:ROM
                           A 24873    	XREF __bshl:ROM
                           A 24874    	XREF __lshl:ROM
                           A 24875    	XREF __lxor:ROM
                           A 24876    	XREF __lshru:ROM
                           A 24877    	XREF __stoiu:ROM
                           A 24878    	XREF __itol:ROM
                           A 24879    	XREF __imul_b:ROM
                           A 24880    	XREF __ladd_b:ROM
                           A 24881    	XREF __ishl_b:ROM
                           A 24882    	XREF __ishru_b:ROM
                           A 24883    	XREF __ishrs_b:ROM
                           A 24884    	XDEF _f_setlabel
                           A 24885    	XDEF _f_getlabel
                           A 24886    	XDEF _f_rename
                           A 24887    	XDEF _f_mkdir
                           A 24888    	XDEF _f_unlink
                           A 24889    	XDEF _f_truncate
                           A 24890    	XDEF _f_getfree
                           A 24891    	XDEF _f_stat
                           A 24892    	XDEF _f_readdir
                           A 24893    	XDEF _f_closedir
                           A 24894    	XDEF _f_opendir
                           A 24895    	XDEF _f_lseek
                           A 24896    	XDEF _f_close
                           A 24897    	XDEF _f_sync
                           A 24898    	XDEF _f_write
                           A 24899    	XDEF _f_read
                           A 24900    	XDEF _f_open
                           A 24901    	XDEF _f_mount
                           A 24902    	END


Errors: 0
Warnings: 0
Lines Assembled: 24903

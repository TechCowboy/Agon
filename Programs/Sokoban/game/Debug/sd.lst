Zilog eZ80 Macro Assembler Version 4.3 (19073001)06-Aug-22     11:47:40     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optspeed -noreduceopt -nopadbranc
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\src\sd.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "fmt_type",19
                           A     9    .DEFINE "status"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "flags"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "size"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 2
                           A    23    .ENDEF
                           A    24    .DEFINE "chr"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 2
                           A    28    .ENDEF
                           A    29    .DEFINE "type"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 2
                           A    33    .ENDEF
                           A    34    .DEFINE "field_width"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 2
                           A    38    .ENDEF
                           A    39    .DEFINE "precision"
                           A    40    .VALUE 6
                           A    41    .CLASS 8
                           A    42    .TYPE 2
                           A    43    .ENDEF
                           A    44    .DEFINE "set_begin"
                           A    45    .VALUE 7
                           A    46    .CLASS 8
                           A    47    .TYPE 34
                           A    48    .ENDEF
                           A    49    .DEFINE "set_end"
                           A    50    .VALUE 10
                           A    51    .CLASS 8
                           A    52    .TYPE 34
                           A    53    .ENDEF
                           A    54    .DEFINE "pad_whole"
                           A    55    .VALUE 13
                           A    56    .CLASS 8
                           A    57    .TYPE 12
                           A    58    .ENDEF
                           A    59    .DEFINE "pad_pre_fract"
                           A    60    .VALUE 14
                           A    61    .CLASS 8
                           A    62    .TYPE 12
                           A    63    .ENDEF
                           A    64    .DEFINE "pad_post_fract"
                           A    65    .VALUE 15
                           A    66    .CLASS 8
                           A    67    .TYPE 12
                           A    68    .ENDEF
                           A    69    .DEFINE "pad_at"
                           A    70    .VALUE 16
                           A    71    .CLASS 8
                           A    72    .TYPE 34
                           A    73    .ENDEF
                           A    74    .ENDREC "fmt_type"
                           A    75    .BEGREC "flt_info",12
                           A    76    .DEFINE "flags"
                           A    77    .VALUE 0
                           A    78    .CLASS 8
                           A    79    .TYPE 12
                           A    80    .ENDEF
                           A    81    .DEFINE "exp"
                           A    82    .VALUE 1
                           A    83    .CLASS 8
                           A    84    .TYPE 2
                           A    85    .ENDEF
                           A    86    .DEFINE "digits"
                           A    87    .VALUE 2
                           A    88    .CLASS 8
                           A    89    .DIM 10
                           A    90    .TYPE 108
                           A    91    .ENDEF
                           A    92    .ENDREC "flt_info"
                           A    93    ;    1	/*
                           A    94    ;    2	 * Title:			AGON MOS - Low leve
                           A    95    ;    3	 * Author:			RJH
                           A    96    ;    4	 * Modified by:		Dean Belfield
                           A    97    ;    5	 * Created:			19/06/2022
                           A    98    ;    6	 * Last Updated:	13/07/2022
                           A    99    ;    7	 * 
                           A   100    ;    8	 * Code taken from this article: http:/
                           A   101    ;    9	 *
                           A   102    ;   10	 * Modinfo:
                           A   103    ;   11	 * 11/07/2022:		Now includes define
                           A   104    ;   12	 * 13/07/2022:		Fixed bug in SD_wri
                           A   105    ;   13	 */
                           A   106    ;   14	
                           A   107    ;   15	#include <eZ80.h>
                           A   108    ;   16	#include <defines.h>
                           A   109    ;   17	
                           A   110    ;   18	#include <stdio.h>
                           A   111    ;   19	#include <String.h>
                           A   112    ;   20	
                           A   113    ;   21	#include "spi.h"
                           A   114    ;   22	#include "sd.h"
                           A   115    ;   23	#include "timer.h"
                           A   116    ;   24	
                           A   117    ;   25	void SD_command(BYTE cmd, DWORD arg, BY
000000                     A   118    _SD_command:
                           A   119    .DEFINE "_SD_command"
                           A   120    
                           A   121    .VALUE _SD_command
                           A   122    
                           A   123    .CLASS 2
                           A   124    
                           A   125    .TYPE 65
                           A   126    
                           A   127    .ENDEF
                           A   128    
                           A   129    .BEGFUNC "SD_command",25,"_SD_command"
                           A   130    
                           A   131    .LINE 25
                           A   132    
                           A   133    .DEFINE "cmd"
                           A   134    
                           A   135    .CLASS 65
                           A   136    
                           A   137    .VALUE 6
                           A   138    
                           A   139    .TYPE 12
                           A   140    
                           A   141    .ENDEF
                           A   142    
                           A   143    .DEFINE "arg"
                           A   144    
                           A   145    .CLASS 65
                           A   146    
                           A   147    .VALUE 9
                           A   148    
                           A   149    .TYPE 15
                           A   150    
                           A   151    .ENDEF
                           A   152    
                           A   153    .DEFINE "crc"
                           A   154    
                           A   155    .CLASS 65
                           A   156    
                           A   157    .VALUE 15
                           A   158    
                           A   159    .TYPE 12
                           A   160    
                           A   161    .ENDEF
                           A   162    
000000 DDE5                A   163    	PUSH	IX
000002 DD210000 00         A   164    	LD	IX,0
000007 DD39                A   165    	ADD	IX,SP
                           A   166    ;   26	    spi_transfer(cmd|0x40);
                           A   167    .LINE 26
                           A   168    
000009 DD7E06              A   169    	LD	A,(IX+%6)
00000C CBF7                A   170    	SET	%6,A
00000E 4F                  A   171    	LD	C,A
00000F 0600                A   172    	LD	B,%0
000011 C5                  A   173    	PUSH	BC
000012 CD 00 00 00         A   174    	CALL	_spi_transfer
000016 C1                  A   175    	POP	BC
                           A   176    ;   27	    spi_transfer((BYTE)(arg >> 24));
                           A   177    .LINE 27
                           A   178    
000017 DD7E0C              A   179    	LD	A,(IX+%C)
00001A B7ED62              A   180    	UEXT	HL
00001D 6F                  A   181    	LD	L,A
00001E E5C1                A   182    	LD	BC,HL
000020 0600                A   183    	LD	B,%0
000022 C5                  A   184    	PUSH	BC
000023 CD 00 00 00         A   185    	CALL	_spi_transfer
000027 C1                  A   186    	POP	BC
                           A   187    ;   28	    spi_transfer((BYTE)(arg >> 16));
                           A   188    .LINE 28
                           A   189    
000028 B7ED62              A   190    	UEXT	HL
00002B E5                  A   191    	PUSH	HL
00002C DD070A              A   192    	LD	BC,(IX+%A)
00002F C5                  A   193    	PUSH	BC
000030 33                  A   194    	INC	SP
000031 C1                  A   195    	POP	BC
000032 33                  A   196    	INC	SP
000033 33                  A   197    	INC	SP
000034 0600                A   198    	LD	B,%0
000036 C5                  A   199    	PUSH	BC
000037 CD 00 00 00         A   200    	CALL	_spi_transfer
00003B C1                  A   201    	POP	BC
                           A   202    ;   29	    spi_transfer((BYTE)(arg >> 8));
                           A   203    .LINE 29
                           A   204    
00003C DD070A              A   205    	LD	BC,(IX+%A)
00003F 0600                A   206    	LD	B,%0
000041 C5                  A   207    	PUSH	BC
000042 CD 00 00 00         A   208    	CALL	_spi_transfer
000046 C1                  A   209    	POP	BC
                           A   210    ;   30	    spi_transfer((BYTE)(arg));
                           A   211    .LINE 30
                           A   212    
000047 DD4E09              A   213    	LD	C,(IX+%9)
00004A 0600                A   214    	LD	B,%0
00004C C5                  A   215    	PUSH	BC
00004D CD 00 00 00         A   216    	CALL	_spi_transfer
000051 C1                  A   217    	POP	BC
                           A   218    ;   31	    spi_transfer(crc|0x01);
                           A   219    .LINE 31
                           A   220    
000052 DD7E0F              A   221    	LD	A,(IX+%F)
000055 CBC7                A   222    	SET	%0,A
000057 4F                  A   223    	LD	C,A
000058 0600                A   224    	LD	B,%0
00005A C5                  A   225    	PUSH	BC
00005B CD 00 00 00         A   226    	CALL	_spi_transfer
00005F C1                  A   227    	POP	BC
                           A   228    ;   32	}
                           A   229    .LINE 32
                           A   230    
000060 DDF9                A   231    	LD	SP,IX
000062 DDE1                A   232    	POP	IX
000064 C9                  A   233    	RET	
                           A   234    
                           A   235    
                           A   236    ;**************************** _SD_command *****
                           A   237    ;Name                         Addr/Register   S
                           A   238    ;_spi_transfer                       IMPORT  --
                           A   239    ;crc                                  IX+15    
                           A   240    ;arg                                   IX+9    
                           A   241    ;cmd                                   IX+6    
                           A   242    
                           A   243    
                           A   244    ; Stack Frame Size: 18 (bytes)
                           A   245    ;       Spill Code: 0 (instruction)
                           A   246    
                           A   247    
                           A   248    .ENDFUNC "SD_command",32,"_SD_command"
                           A   249    ;   33	
                           A   250    ;   34	BYTE SD_readRes1() {
000065                     A   251    _SD_readRes1:
                           A   252    .DEFINE "_SD_readRes1"
                           A   253    
                           A   254    .VALUE _SD_readRes1
                           A   255    
                           A   256    .CLASS 2
                           A   257    
                           A   258    .TYPE 76
                           A   259    
                           A   260    .ENDEF
                           A   261    
                           A   262    .BEGFUNC "SD_readRes1",34,"_SD_readRes1"
                           A   263    
                           A   264    .LINE 34
                           A   265    
                           A   266    .DEFINE "i"
                           A   267    
                           A   268    .CLASS 65
                           A   269    
                           A   270    .VALUE -1
                           A   271    
                           A   272    .TYPE 12
                           A   273    
                           A   274    .ENDEF
                           A   275    
                           A   276    .DEFINE "res1"
                           A   277    
                           A   278    .CLASS 65
                           A   279    
                           A   280    .VALUE -2
                           A   281    
                           A   282    .TYPE 12
                           A   283    
                           A   284    .ENDEF
                           A   285    
000065 DDE5                A   286    	PUSH	IX
000067 DD210000 00         A   287    	LD	IX,0
00006C DD39                A   288    	ADD	IX,SP
00006E 3B                  A   289    	DEC	SP
00006F 3B                  A   290    	DEC	SP
                           A   291    ;   35	    BYTE i = 0, res1;
                           A   292    .LINE 35
                           A   293    
000070 DD36FF00            A   294    	LD	(IX+%FFFFFFFF),%0
                           A   295    ;   36	
                           A   296    ;   37	    // keep polling until actual data r
                           A   297    ;   38	    while((res1 = spi_transfer(0xFF)) =
                           A   298    .LINE 38
                           A   299    
000074 18 0A               A   300    	JR	L_3
000076                     A   301    L_4:
                           A   302    ;   39	        i++;
                           A   303    .LINE 39
                           A   304    
000076 DD34FF              A   305    	INC	(IX+%FFFFFFFF)
                           A   306    ;   40	        // if no data received for 8 by
                           A   307    ;   41	        if(i > 8) break;
                           A   308    .LINE 41
                           A   309    
000079 3E08                A   310    	LD	A,%8
00007B DDBEFF              A   311    	CP	A,(IX+%FFFFFFFF)
00007E 38 11               A   312    	JR	C,L_5
                           A   313    ;   42	    }
000080                     A   314    L_3:
                           A   315    .LINE 42
                           A   316    
000080 01FF0000            A   317    	LD	BC,255
000084 C5                  A   318    	PUSH	BC
000085 CD 00 00 00         A   319    	CALL	_spi_transfer
000089 C1                  A   320    	POP	BC
00008A DD77FE              A   321    	LD	(IX+%FFFFFFFE),A
00008D FEFF                A   322    	CP	A,%FF
00008F 28 E5               A   323    	JR	Z,L_4
000091                     A   324    L_5:
                           A   325    ;   43	    return res1;
                           A   326    .LINE 43
                           A   327    
000091 DD7EFE              A   328    	LD	A,(IX+%FFFFFFFE)
                           A   329    ;   44	}
                           A   330    .LINE 44
                           A   331    
000094 DDF9                A   332    	LD	SP,IX
000096 DDE1                A   333    	POP	IX
000098 C9                  A   334    	RET	
                           A   335    
                           A   336    
                           A   337    ;**************************** _SD_readRes1 ****
                           A   338    ;Name                         Addr/Register   S
                           A   339    ;_spi_transfer                       IMPORT  --
                           A   340    ;res1                                  IX-2    
                           A   341    ;i                                     IX-1    
                           A   342    
                           A   343    
                           A   344    ; Stack Frame Size: 8 (bytes)
                           A   345    ;       Spill Code: 0 (instruction)
                           A   346    
                           A   347    
                           A   348    .ENDFUNC "SD_readRes1",44,"_SD_readRes1"
                           A   349    ;   45	
                           A   350    ;   46	void SD_readRes7(BYTE *res) {
000099                     A   351    _SD_readRes7:
                           A   352    .DEFINE "_SD_readRes7"
                           A   353    
                           A   354    .VALUE _SD_readRes7
                           A   355    
                           A   356    .CLASS 2
                           A   357    
                           A   358    .TYPE 65
                           A   359    
                           A   360    .ENDEF
                           A   361    
                           A   362    .BEGFUNC "SD_readRes7",46,"_SD_readRes7"
                           A   363    
                           A   364    .LINE 46
                           A   365    
                           A   366    .DEFINE "res"
                           A   367    
                           A   368    .CLASS 65
                           A   369    
                           A   370    .VALUE 6
                           A   371    
                           A   372    .TYPE 44
                           A   373    
                           A   374    .ENDEF
                           A   375    
000099 DDE5                A   376    	PUSH	IX
00009B DD210000 00         A   377    	LD	IX,0
0000A0 DD39                A   378    	ADD	IX,SP
                           A   379    ;   47	    res[0] = SD_readRes1();
                           A   380    .LINE 47
                           A   381    
0000A2 CD 65 00 00         A   382    	CALL	_SD_readRes1
0000A6 DD2706              A   383    	LD	HL,(IX+%6)
0000A9 77                  A   384    	LD	(HL),A
                           A   385    ;   48	
                           A   386    ;   49	    // if error reading R1, return
                           A   387    ;   50	    if(res[0] > 1) return;
                           A   388    .LINE 50
                           A   389    
0000AA DD2706              A   390    	LD	HL,(IX+%6)
0000AD 7E                  A   391    	LD	A,(HL)
0000AE B7ED62              A   392    	UEXT	HL
0000B1 6F                  A   393    	LD	L,A
0000B2 E5C1                A   394    	LD	BC,HL
0000B4 21010000            A   395    	LD	HL,1
0000B8 B7                  A   396    	OR	A,A
0000B9 ED42                A   397    	SBC	HL,BC
0000BB FA C5 00 00         A   398    	JP	M,L__5
0000BF EA 0B 01 00         A   399    	JP	PE,L_9
0000C3 18 04               A   400    	JR	L__6
0000C5                     A   401    L__5:
0000C5 E2 0B 01 00         A   402    	JP	PO,L_9
0000C9                     A   403    L__6:
                           A   404    ;   51	
                           A   405    ;   52	    // read remaining bytes
                           A   406    ;   53	    res[1] = spi_transfer(0xFF);
                           A   407    .LINE 53
                           A   408    
0000C9 01FF0000            A   409    	LD	BC,255
0000CD C5                  A   410    	PUSH	BC
0000CE CD 00 00 00         A   411    	CALL	_spi_transfer
0000D2 C1                  A   412    	POP	BC
0000D3 DD2706              A   413    	LD	HL,(IX+%6)
0000D6 23                  A   414    	INC	HL
0000D7 77                  A   415    	LD	(HL),A
                           A   416    ;   54	    res[2] = spi_transfer(0xFF);
                           A   417    .LINE 54
                           A   418    
0000D8 01FF0000            A   419    	LD	BC,255
0000DC C5                  A   420    	PUSH	BC
0000DD CD 00 00 00         A   421    	CALL	_spi_transfer
0000E1 C1                  A   422    	POP	BC
0000E2 DD3106              A   423    	LD	IY,(IX+%6)
0000E5 ED2302              A   424    	LEA	HL,IY+%2
0000E8 77                  A   425    	LD	(HL),A
                           A   426    ;   55	    res[3] = spi_transfer(0xFF);
                           A   427    .LINE 55
                           A   428    
0000E9 01FF0000            A   429    	LD	BC,255
0000ED C5                  A   430    	PUSH	BC
0000EE CD 00 00 00         A   431    	CALL	_spi_transfer
0000F2 C1                  A   432    	POP	BC
0000F3 DD3106              A   433    	LD	IY,(IX+%6)
0000F6 ED2303              A   434    	LEA	HL,IY+%3
0000F9 77                  A   435    	LD	(HL),A
                           A   436    ;   56	    res[4] = spi_transfer(0xFF);
                           A   437    .LINE 56
                           A   438    
0000FA 01FF0000            A   439    	LD	BC,255
0000FE C5                  A   440    	PUSH	BC
0000FF CD 00 00 00         A   441    	CALL	_spi_transfer
000103 C1                  A   442    	POP	BC
000104 DD3106              A   443    	LD	IY,(IX+%6)
000107 ED2304              A   444    	LEA	HL,IY+%4
00010A 77                  A   445    	LD	(HL),A
                           A   446    ;   57	}
00010B                     A   447    L_9:
                           A   448    .LINE 57
                           A   449    
00010B DDF9                A   450    	LD	SP,IX
00010D DDE1                A   451    	POP	IX
00010F C9                  A   452    	RET	
                           A   453    
                           A   454    
                           A   455    ;**************************** _SD_readRes7 ****
                           A   456    ;Name                         Addr/Register   S
                           A   457    ;_spi_transfer                       IMPORT  --
                           A   458    ;_SD_readRes1                        IMPORT  --
                           A   459    ;res                                   IX+6    
                           A   460    
                           A   461    
                           A   462    ; Stack Frame Size: 9 (bytes)
                           A   463    ;       Spill Code: 0 (instruction)
                           A   464    
                           A   465    
                           A   466    .ENDFUNC "SD_readRes7",57,"_SD_readRes7"
                           A   467    ;   58	
                           A   468    ;   59	BYTE SD_goIdleState() {
000110                     A   469    _SD_goIdleState:
                           A   470    .DEFINE "_SD_goIdleState"
                           A   471    
                           A   472    .VALUE _SD_goIdleState
                           A   473    
                           A   474    .CLASS 2
                           A   475    
                           A   476    .TYPE 76
                           A   477    
                           A   478    .ENDEF
                           A   479    
                           A   480    .BEGFUNC "SD_goIdleState",59,"_SD_goIdleState"
                           A   481    
                           A   482    .LINE 59
                           A   483    
                           A   484    .DEFINE "res1"
                           A   485    
                           A   486    .CLASS 65
                           A   487    
                           A   488    .VALUE -1
                           A   489    
                           A   490    .TYPE 12
                           A   491    
                           A   492    .ENDEF
                           A   493    
000110 DDE5                A   494    	PUSH	IX
000112 DD210000 00         A   495    	LD	IX,0
000117 DD39                A   496    	ADD	IX,SP
000119 3B                  A   497    	DEC	SP
                           A   498    ;   60		BYTE res1;
                           A   499    ;   61	//  printf("SD_goIdleState()\n");
                           A   500    ;   62	    spi_transfer(0xFF);
                           A   501    .LINE 62
                           A   502    
00011A 01FF0000            A   503    	LD	BC,255
00011E C5                  A   504    	PUSH	BC
00011F CD 00 00 00         A   505    	CALL	_spi_transfer
000123 C1                  A   506    	POP	BC
                           A   507    ;   63	    SD_CS_enable();
                           A   508    .LINE 63
                           A   509    
000124 CD 00 00 00         A   510    	CALL	_SD_CS_enable
                           A   511    ;   64	    spi_transfer(0xFF);
                           A   512    .LINE 64
                           A   513    
000128 01FF0000            A   514    	LD	BC,255
00012C C5                  A   515    	PUSH	BC
00012D CD 00 00 00         A   516    	CALL	_spi_transfer
000131 C1                  A   517    	POP	BC
                           A   518    ;   65	    SD_command(CMD0, CMD0_ARG, CMD0_CRC
                           A   519    .LINE 65
                           A   520    
000132 01940000            A   521    	LD	BC,148
000136 C5                  A   522    	PUSH	BC
000137 01000000            A   523    	LD	BC,0
00013B C5                  A   524    	PUSH	BC
00013C C5                  A   525    	PUSH	BC
00013D C5                  A   526    	PUSH	BC
00013E CD 00 00 00         A   527    	CALL	_SD_command
000142 C1                  A   528    	POP	BC
000143 C1                  A   529    	POP	BC
000144 C1                  A   530    	POP	BC
000145 C1                  A   531    	POP	BC
                           A   532    ;   66	    res1 = SD_readRes1();
                           A   533    .LINE 66
                           A   534    
000146 CD 65 00 00         A   535    	CALL	_SD_readRes1
00014A DD77FF              A   536    	LD	(IX+%FFFFFFFF),A
                           A   537    ;   67	    spi_transfer(0xFF);
                           A   538    .LINE 67
                           A   539    
00014D 01FF0000            A   540    	LD	BC,255
000151 C5                  A   541    	PUSH	BC
000152 CD 00 00 00         A   542    	CALL	_spi_transfer
000156 C1                  A   543    	POP	BC
                           A   544    ;   68	    SD_CS_disable();
                           A   545    .LINE 68
                           A   546    
000157 CD 00 00 00         A   547    	CALL	_SD_CS_disable
                           A   548    ;   69	    spi_transfer(0xFF);
                           A   549    .LINE 69
                           A   550    
00015B 01FF0000            A   551    	LD	BC,255
00015F C5                  A   552    	PUSH	BC
000160 CD 00 00 00         A   553    	CALL	_spi_transfer
000164 C1                  A   554    	POP	BC
                           A   555    ;   70	    return res1;
                           A   556    .LINE 70
                           A   557    
000165 DD7EFF              A   558    	LD	A,(IX+%FFFFFFFF)
                           A   559    ;   71	}
                           A   560    .LINE 71
                           A   561    
000168 DDF9                A   562    	LD	SP,IX
00016A DDE1                A   563    	POP	IX
00016C C9                  A   564    	RET	
                           A   565    
                           A   566    
                           A   567    ;**************************** _SD_goIdleState *
                           A   568    ;Name                         Addr/Register   S
                           A   569    ;_SD_CS_disable                      IMPORT  --
                           A   570    ;_SD_readRes1                        IMPORT  --
                           A   571    ;_SD_command                         IMPORT  --
                           A   572    ;_SD_CS_enable                       IMPORT  --
                           A   573    ;_spi_transfer                       IMPORT  --
                           A   574    ;res1                                  IX-1    
                           A   575    
                           A   576    
                           A   577    ; Stack Frame Size: 7 (bytes)
                           A   578    ;       Spill Code: 0 (instruction)
                           A   579    
                           A   580    
                           A   581    .ENDFUNC "SD_goIdleState",71,"_SD_goIdleState"
                           A   582    ;   72	
                           A   583    ;   73	void SD_sendIfCond(BYTE *res) {
00016D                     A   584    _SD_sendIfCond:
                           A   585    .DEFINE "_SD_sendIfCond"
                           A   586    
                           A   587    .VALUE _SD_sendIfCond
                           A   588    
                           A   589    .CLASS 2
                           A   590    
                           A   591    .TYPE 65
                           A   592    
                           A   593    .ENDEF
                           A   594    
                           A   595    .BEGFUNC "SD_sendIfCond",73,"_SD_sendIfCond"
                           A   596    
                           A   597    .LINE 73
                           A   598    
                           A   599    .DEFINE "res"
                           A   600    
                           A   601    .CLASS 65
                           A   602    
                           A   603    .VALUE 6
                           A   604    
                           A   605    .TYPE 44
                           A   606    
                           A   607    .ENDEF
                           A   608    
00016D DDE5                A   609    	PUSH	IX
00016F DD210000 00         A   610    	LD	IX,0
000174 DD39                A   611    	ADD	IX,SP
                           A   612    ;   74	//  printf("SD_sendIfCond()\n");
                           A   613    ;   75	    spi_transfer(0xFF);
                           A   614    .LINE 75
                           A   615    
000176 01FF0000            A   616    	LD	BC,255
00017A C5                  A   617    	PUSH	BC
00017B CD 00 00 00         A   618    	CALL	_spi_transfer
00017F C1                  A   619    	POP	BC
                           A   620    ;   76	    SD_CS_enable();
                           A   621    .LINE 76
                           A   622    
000180 CD 00 00 00         A   623    	CALL	_SD_CS_enable
                           A   624    ;   77	    spi_transfer(0xFF);
                           A   625    .LINE 77
                           A   626    
000184 01FF0000            A   627    	LD	BC,255
000188 C5                  A   628    	PUSH	BC
000189 CD 00 00 00         A   629    	CALL	_spi_transfer
00018D C1                  A   630    	POP	BC
                           A   631    ;   78	    SD_command(CMD8, CMD8_ARG, CMD8_CRC
                           A   632    .LINE 78
                           A   633    
00018E 01860000            A   634    	LD	BC,134
000192 C5                  A   635    	PUSH	BC
000193 01000000            A   636    	LD	BC,0
000197 C5                  A   637    	PUSH	BC
000198 01AA0100            A   638    	LD	BC,426
00019C C5                  A   639    	PUSH	BC
00019D 01080000            A   640    	LD	BC,8
0001A1 C5                  A   641    	PUSH	BC
0001A2 CD 00 00 00         A   642    	CALL	_SD_command
0001A6 C1                  A   643    	POP	BC
0001A7 C1                  A   644    	POP	BC
0001A8 C1                  A   645    	POP	BC
0001A9 C1                  A   646    	POP	BC
                           A   647    ;   79	    SD_readRes7(res);
                           A   648    .LINE 79
                           A   649    
0001AA DD0706              A   650    	LD	BC,(IX+%6)
0001AD C5                  A   651    	PUSH	BC
0001AE CD 99 00 00         A   652    	CALL	_SD_readRes7
0001B2 C1                  A   653    	POP	BC
                           A   654    ;   80	    spi_transfer(0xFF);
                           A   655    .LINE 80
                           A   656    
0001B3 01FF0000            A   657    	LD	BC,255
0001B7 C5                  A   658    	PUSH	BC
0001B8 CD 00 00 00         A   659    	CALL	_spi_transfer
0001BC C1                  A   660    	POP	BC
                           A   661    ;   81	    SD_CS_disable();
                           A   662    .LINE 81
                           A   663    
0001BD CD 00 00 00         A   664    	CALL	_SD_CS_disable
                           A   665    ;   82	    spi_transfer(0xFF);
                           A   666    .LINE 82
                           A   667    
0001C1 01FF0000            A   668    	LD	BC,255
0001C5 C5                  A   669    	PUSH	BC
0001C6 CD 00 00 00         A   670    	CALL	_spi_transfer
0001CA C1                  A   671    	POP	BC
                           A   672    ;   83	}
                           A   673    .LINE 83
                           A   674    
0001CB DDF9                A   675    	LD	SP,IX
0001CD DDE1                A   676    	POP	IX
0001CF C9                  A   677    	RET	
                           A   678    
                           A   679    
                           A   680    ;**************************** _SD_sendIfCond **
                           A   681    ;Name                         Addr/Register   S
                           A   682    ;_SD_CS_disable                      IMPORT  --
                           A   683    ;_SD_readRes7                        IMPORT  --
                           A   684    ;_SD_command                         IMPORT  --
                           A   685    ;_SD_CS_enable                       IMPORT  --
                           A   686    ;_spi_transfer                       IMPORT  --
                           A   687    ;res                                   IX+6    
                           A   688    
                           A   689    
                           A   690    ; Stack Frame Size: 9 (bytes)
                           A   691    ;       Spill Code: 0 (instruction)
                           A   692    
                           A   693    
                           A   694    .ENDFUNC "SD_sendIfCond",83,"_SD_sendIfCond"
                           A   695    ;   84	
                           A   696    ;   85	UINT8 SD_sendApp() {
0001D0                     A   697    _SD_sendApp:
                           A   698    .DEFINE "_SD_sendApp"
                           A   699    
                           A   700    .VALUE _SD_sendApp
                           A   701    
                           A   702    .CLASS 2
                           A   703    
                           A   704    .TYPE 76
                           A   705    
                           A   706    .ENDEF
                           A   707    
                           A   708    .BEGFUNC "SD_sendApp",85,"_SD_sendApp"
                           A   709    
                           A   710    .LINE 85
                           A   711    
                           A   712    .DEFINE "res1"
                           A   713    
                           A   714    .CLASS 65
                           A   715    
                           A   716    .VALUE -1
                           A   717    
                           A   718    .TYPE 12
                           A   719    
                           A   720    .ENDEF
                           A   721    
0001D0 DDE5                A   722    	PUSH	IX
0001D2 DD210000 00         A   723    	LD	IX,0
0001D7 DD39                A   724    	ADD	IX,SP
0001D9 3B                  A   725    	DEC	SP
                           A   726    ;   86		BYTE res1;
                           A   727    ;   87	//	printf("SD_sendApp()\n");
                           A   728    ;   88	    spi_transfer(0xFF);
                           A   729    .LINE 88
                           A   730    
0001DA 01FF0000            A   731    	LD	BC,255
0001DE C5                  A   732    	PUSH	BC
0001DF CD 00 00 00         A   733    	CALL	_spi_transfer
0001E3 C1                  A   734    	POP	BC
                           A   735    ;   89	    SD_CS_enable();
                           A   736    .LINE 89
                           A   737    
0001E4 CD 00 00 00         A   738    	CALL	_SD_CS_enable
                           A   739    ;   90	    spi_transfer(0xFF);
                           A   740    .LINE 90
                           A   741    
0001E8 01FF0000            A   742    	LD	BC,255
0001EC C5                  A   743    	PUSH	BC
0001ED CD 00 00 00         A   744    	CALL	_spi_transfer
0001F1 C1                  A   745    	POP	BC
                           A   746    ;   91	    SD_command(CMD55, CMD55_ARG, CMD55_
                           A   747    .LINE 91
                           A   748    
0001F2 01000000            A   749    	LD	BC,0
0001F6 C5                  A   750    	PUSH	BC
0001F7 C5                  A   751    	PUSH	BC
0001F8 C5                  A   752    	PUSH	BC
0001F9 01370000            A   753    	LD	BC,55
0001FD C5                  A   754    	PUSH	BC
0001FE CD 00 00 00         A   755    	CALL	_SD_command
000202 C1                  A   756    	POP	BC
000203 C1                  A   757    	POP	BC
000204 C1                  A   758    	POP	BC
000205 C1                  A   759    	POP	BC
                           A   760    ;   92	    res1 = SD_readRes1();
                           A   761    .LINE 92
                           A   762    
000206 CD 65 00 00         A   763    	CALL	_SD_readRes1
00020A DD77FF              A   764    	LD	(IX+%FFFFFFFF),A
                           A   765    ;   93	    spi_transfer(0xFF);
                           A   766    .LINE 93
                           A   767    
00020D 01FF0000            A   768    	LD	BC,255
000211 C5                  A   769    	PUSH	BC
000212 CD 00 00 00         A   770    	CALL	_spi_transfer
000216 C1                  A   771    	POP	BC
                           A   772    ;   94	    SD_CS_disable();
                           A   773    .LINE 94
                           A   774    
000217 CD 00 00 00         A   775    	CALL	_SD_CS_disable
                           A   776    ;   95	    spi_transfer(0xFF);
                           A   777    .LINE 95
                           A   778    
00021B 01FF0000            A   779    	LD	BC,255
00021F C5                  A   780    	PUSH	BC
000220 CD 00 00 00         A   781    	CALL	_spi_transfer
000224 C1                  A   782    	POP	BC
                           A   783    ;   96	    return res1;
                           A   784    .LINE 96
                           A   785    
000225 DD7EFF              A   786    	LD	A,(IX+%FFFFFFFF)
                           A   787    ;   97	}
                           A   788    .LINE 97
                           A   789    
000228 DDF9                A   790    	LD	SP,IX
00022A DDE1                A   791    	POP	IX
00022C C9                  A   792    	RET	
                           A   793    
                           A   794    
                           A   795    ;**************************** _SD_sendApp *****
                           A   796    ;Name                         Addr/Register   S
                           A   797    ;_SD_CS_disable                      IMPORT  --
                           A   798    ;_SD_readRes1                        IMPORT  --
                           A   799    ;_SD_command                         IMPORT  --
                           A   800    ;_SD_CS_enable                       IMPORT  --
                           A   801    ;_spi_transfer                       IMPORT  --
                           A   802    ;res1                                  IX-1    
                           A   803    
                           A   804    
                           A   805    ; Stack Frame Size: 7 (bytes)
                           A   806    ;       Spill Code: 0 (instruction)
                           A   807    
                           A   808    
                           A   809    .ENDFUNC "SD_sendApp",97,"_SD_sendApp"
                           A   810    ;   98	
                           A   811    ;   99	UINT8 SD_sendOpCond() {
00022D                     A   812    _SD_sendOpCond:
                           A   813    .DEFINE "_SD_sendOpCond"
                           A   814    
                           A   815    .VALUE _SD_sendOpCond
                           A   816    
                           A   817    .CLASS 2
                           A   818    
                           A   819    .TYPE 76
                           A   820    
                           A   821    .ENDEF
                           A   822    
                           A   823    .BEGFUNC "SD_sendOpCond",99,"_SD_sendOpCond"
                           A   824    
                           A   825    .LINE 99
                           A   826    
                           A   827    .DEFINE "res1"
                           A   828    
                           A   829    .CLASS 65
                           A   830    
                           A   831    .VALUE -1
                           A   832    
                           A   833    .TYPE 12
                           A   834    
                           A   835    .ENDEF
                           A   836    
00022D DDE5                A   837    	PUSH	IX
00022F DD210000 00         A   838    	LD	IX,0
000234 DD39                A   839    	ADD	IX,SP
000236 3B                  A   840    	DEC	SP
                           A   841    ;  100		BYTE res1;
                           A   842    ;  101	//  printf("SD_sendOpCond()\n");
                           A   843    ;  102	    spi_transfer(0xFF);
                           A   844    .LINE 102
                           A   845    
000237 01FF0000            A   846    	LD	BC,255
00023B C5                  A   847    	PUSH	BC
00023C CD 00 00 00         A   848    	CALL	_spi_transfer
000240 C1                  A   849    	POP	BC
                           A   850    ;  103	    SD_CS_enable();
                           A   851    .LINE 103
                           A   852    
000241 CD 00 00 00         A   853    	CALL	_SD_CS_enable
                           A   854    ;  104	    spi_transfer(0xFF);
                           A   855    .LINE 104
                           A   856    
000245 01FF0000            A   857    	LD	BC,255
000249 C5                  A   858    	PUSH	BC
00024A CD 00 00 00         A   859    	CALL	_spi_transfer
00024E C1                  A   860    	POP	BC
                           A   861    ;  105	    SD_command(ACMD41, ACMD41_ARG, ACMD
                           A   862    .LINE 105
                           A   863    
00024F 01000000            A   864    	LD	BC,0
000253 C5                  A   865    	PUSH	BC
000254 01400000            A   866    	LD	BC,64
000258 C5                  A   867    	PUSH	BC
000259 01000000            A   868    	LD	BC,0
00025D C5                  A   869    	PUSH	BC
00025E 01290000            A   870    	LD	BC,41
000262 C5                  A   871    	PUSH	BC
000263 CD 00 00 00         A   872    	CALL	_SD_command
000267 C1                  A   873    	POP	BC
000268 C1                  A   874    	POP	BC
000269 C1                  A   875    	POP	BC
00026A C1                  A   876    	POP	BC
                           A   877    ;  106	    res1 = SD_readRes1();
                           A   878    .LINE 106
                           A   879    
00026B CD 65 00 00         A   880    	CALL	_SD_readRes1
00026F DD77FF              A   881    	LD	(IX+%FFFFFFFF),A
                           A   882    ;  107	    spi_transfer(0xFF);
                           A   883    .LINE 107
                           A   884    
000272 01FF0000            A   885    	LD	BC,255
000276 C5                  A   886    	PUSH	BC
000277 CD 00 00 00         A   887    	CALL	_spi_transfer
00027B C1                  A   888    	POP	BC
                           A   889    ;  108	    SD_CS_disable();
                           A   890    .LINE 108
                           A   891    
00027C CD 00 00 00         A   892    	CALL	_SD_CS_disable
                           A   893    ;  109	    spi_transfer(0xFF);
                           A   894    .LINE 109
                           A   895    
000280 01FF0000            A   896    	LD	BC,255
000284 C5                  A   897    	PUSH	BC
000285 CD 00 00 00         A   898    	CALL	_spi_transfer
000289 C1                  A   899    	POP	BC
                           A   900    ;  110	    return res1;
                           A   901    .LINE 110
                           A   902    
00028A DD7EFF              A   903    	LD	A,(IX+%FFFFFFFF)
                           A   904    ;  111	}
                           A   905    .LINE 111
                           A   906    
00028D DDF9                A   907    	LD	SP,IX
00028F DDE1                A   908    	POP	IX
000291 C9                  A   909    	RET	
                           A   910    
                           A   911    
                           A   912    ;**************************** _SD_sendOpCond **
                           A   913    ;Name                         Addr/Register   S
                           A   914    ;_SD_CS_disable                      IMPORT  --
                           A   915    ;_SD_readRes1                        IMPORT  --
                           A   916    ;_SD_command                         IMPORT  --
                           A   917    ;_SD_CS_enable                       IMPORT  --
                           A   918    ;_spi_transfer                       IMPORT  --
                           A   919    ;res1                                  IX-1    
                           A   920    
                           A   921    
                           A   922    ; Stack Frame Size: 7 (bytes)
                           A   923    ;       Spill Code: 0 (instruction)
                           A   924    
                           A   925    
                           A   926    .ENDFUNC "SD_sendOpCond",111,"_SD_sendOpCond"
                           A   927    ;  112	
                           A   928    ;  113	void SD_readOCR(BYTE *res) {
000292                     A   929    _SD_readOCR:
                           A   930    .DEFINE "_SD_readOCR"
                           A   931    
                           A   932    .VALUE _SD_readOCR
                           A   933    
                           A   934    .CLASS 2
                           A   935    
                           A   936    .TYPE 65
                           A   937    
                           A   938    .ENDEF
                           A   939    
                           A   940    .BEGFUNC "SD_readOCR",113,"_SD_readOCR"
                           A   941    
                           A   942    .LINE 113
                           A   943    
                           A   944    .DEFINE "res"
                           A   945    
                           A   946    .CLASS 65
                           A   947    
                           A   948    .VALUE 6
                           A   949    
                           A   950    .TYPE 44
                           A   951    
                           A   952    .ENDEF
                           A   953    
000292 DDE5                A   954    	PUSH	IX
000294 DD210000 00         A   955    	LD	IX,0
000299 DD39                A   956    	ADD	IX,SP
                           A   957    ;  114	//  printf("SD_readOCR()\n");
                           A   958    ;  115	    spi_transfer(0xFF);
                           A   959    .LINE 115
                           A   960    
00029B 01FF0000            A   961    	LD	BC,255
00029F C5                  A   962    	PUSH	BC
0002A0 CD 00 00 00         A   963    	CALL	_spi_transfer
0002A4 C1                  A   964    	POP	BC
                           A   965    ;  116	    SD_CS_enable();
                           A   966    .LINE 116
                           A   967    
0002A5 CD 00 00 00         A   968    	CALL	_SD_CS_enable
                           A   969    ;  117	    spi_transfer(0xFF);
                           A   970    .LINE 117
                           A   971    
0002A9 01FF0000            A   972    	LD	BC,255
0002AD C5                  A   973    	PUSH	BC
0002AE CD 00 00 00         A   974    	CALL	_spi_transfer
0002B2 C1                  A   975    	POP	BC
                           A   976    ;  118	    SD_command(CMD58, CMD58_ARG, CMD58_
                           A   977    .LINE 118
                           A   978    
0002B3 01000000            A   979    	LD	BC,0
0002B7 C5                  A   980    	PUSH	BC
0002B8 C5                  A   981    	PUSH	BC
0002B9 C5                  A   982    	PUSH	BC
0002BA 013A0000            A   983    	LD	BC,58
0002BE C5                  A   984    	PUSH	BC
0002BF CD 00 00 00         A   985    	CALL	_SD_command
0002C3 C1                  A   986    	POP	BC
0002C4 C1                  A   987    	POP	BC
0002C5 C1                  A   988    	POP	BC
0002C6 C1                  A   989    	POP	BC
                           A   990    ;  119	    SD_readRes7(res);
                           A   991    .LINE 119
                           A   992    
0002C7 DD0706              A   993    	LD	BC,(IX+%6)
0002CA C5                  A   994    	PUSH	BC
0002CB CD 99 00 00         A   995    	CALL	_SD_readRes7
0002CF C1                  A   996    	POP	BC
                           A   997    ;  120	    spi_transfer(0xFF);
                           A   998    .LINE 120
                           A   999    
0002D0 01FF0000            A  1000    	LD	BC,255
0002D4 C5                  A  1001    	PUSH	BC
0002D5 CD 00 00 00         A  1002    	CALL	_spi_transfer
0002D9 C1                  A  1003    	POP	BC
                           A  1004    ;  121	    SD_CS_disable();
                           A  1005    .LINE 121
                           A  1006    
0002DA CD 00 00 00         A  1007    	CALL	_SD_CS_disable
                           A  1008    ;  122	    spi_transfer(0xFF);
                           A  1009    .LINE 122
                           A  1010    
0002DE 01FF0000            A  1011    	LD	BC,255
0002E2 C5                  A  1012    	PUSH	BC
0002E3 CD 00 00 00         A  1013    	CALL	_spi_transfer
0002E7 C1                  A  1014    	POP	BC
                           A  1015    ;  123	}
                           A  1016    .LINE 123
                           A  1017    
0002E8 DDF9                A  1018    	LD	SP,IX
0002EA DDE1                A  1019    	POP	IX
0002EC C9                  A  1020    	RET	
                           A  1021    
                           A  1022    
                           A  1023    ;**************************** _SD_readOCR *****
                           A  1024    ;Name                         Addr/Register   S
                           A  1025    ;_SD_CS_disable                      IMPORT  --
                           A  1026    ;_SD_readRes7                        IMPORT  --
                           A  1027    ;_SD_command                         IMPORT  --
                           A  1028    ;_SD_CS_enable                       IMPORT  --
                           A  1029    ;_spi_transfer                       IMPORT  --
                           A  1030    ;res                                   IX+6    
                           A  1031    
                           A  1032    
                           A  1033    ; Stack Frame Size: 9 (bytes)
                           A  1034    ;       Spill Code: 0 (instruction)
                           A  1035    
                           A  1036    
                           A  1037    .ENDFUNC "SD_readOCR",123,"_SD_readOCR"
                           A  1038    ;  124	
                           A  1039    ;  125	void SD_powerUpSeq() {
0002ED                     A  1040    _SD_powerUpSeq:
                           A  1041    .DEFINE "_SD_powerUpSeq"
                           A  1042    
                           A  1043    .VALUE _SD_powerUpSeq
                           A  1044    
                           A  1045    .CLASS 2
                           A  1046    
                           A  1047    .TYPE 65
                           A  1048    
                           A  1049    .ENDEF
                           A  1050    
                           A  1051    .BEGFUNC "SD_powerUpSeq",125,"_SD_powerUpSeq"
                           A  1052    
                           A  1053    .LINE 125
                           A  1054    
                           A  1055    .DEFINE "i"
                           A  1056    
                           A  1057    .CLASS 65
                           A  1058    
                           A  1059    .VALUE -3
                           A  1060    
                           A  1061    .TYPE 4
                           A  1062    
                           A  1063    .ENDEF
                           A  1064    
0002ED DDE5                A  1065    	PUSH	IX
0002EF DD210000 00         A  1066    	LD	IX,0
0002F4 DD39                A  1067    	ADD	IX,SP
0002F6 C5                  A  1068    	PUSH	BC
                           A  1069    ;  126		int i;
                           A  1070    ;  127	//  printf("SD_powerUpSeq()\n");
                           A  1071    ;  128	    SD_CS_disable();
                           A  1072    .LINE 128
                           A  1073    
0002F7 CD 00 00 00         A  1074    	CALL	_SD_CS_disable
                           A  1075    ;  129		delayms(10);
                           A  1076    .LINE 129
                           A  1077    
0002FB 010A0000            A  1078    	LD	BC,10
0002FF C5                  A  1079    	PUSH	BC
000300 CD 00 00 00         A  1080    	CALL	_delayms
000304 C1                  A  1081    	POP	BC
                           A  1082    ;  130		spi_transfer(0xFF);
                           A  1083    .LINE 130
                           A  1084    
000305 01FF0000            A  1085    	LD	BC,255
000309 C5                  A  1086    	PUSH	BC
00030A CD 00 00 00         A  1087    	CALL	_spi_transfer
00030E C1                  A  1088    	POP	BC
                           A  1089    ;  131	    SD_CS_disable();
                           A  1090    .LINE 131
                           A  1091    
00030F CD 00 00 00         A  1092    	CALL	_SD_CS_disable
                           A  1093    ;  132		for(i = 0; i < SD_INIT_CYCLES; i++)
                           A  1094    .LINE 132
                           A  1095    
000313 01000000            A  1096    	LD	BC,0
000317 DD0FFD              A  1097    	LD	(IX+%FFFFFFFD),BC
00031A 18 11               A  1098    	JR	L_18
00031C                     A  1099    L_16:
                           A  1100    ;  133	        spi_transfer(0xFF);
                           A  1101    .LINE 133
                           A  1102    
00031C 01FF0000            A  1103    	LD	BC,255
000320 C5                  A  1104    	PUSH	BC
000321 CD 00 00 00         A  1105    	CALL	_spi_transfer
000325 C1                  A  1106    	POP	BC
000326 DD07FD              A  1107    	LD	BC,(IX+%FFFFFFFD)
000329 03                  A  1108    	INC	BC
00032A DD0FFD              A  1109    	LD	(IX+%FFFFFFFD),BC
                           A  1110    ;  134		}
00032D                     A  1111    L_18:
                           A  1112    .LINE 134
                           A  1113    
00032D 010A0000            A  1114    	LD	BC,10
000331 DD27FD              A  1115    	LD	HL,(IX+%FFFFFFFD)
000334 B7                  A  1116    	OR	A,A
000335 ED42                A  1117    	SBC	HL,BC
000337 FA 41 03 00         A  1118    	JP	M,L__14
00033B EA 1C 03 00         A  1119    	JP	PE,L_16
00033F 18 04               A  1120    	JR	L__15
000341                     A  1121    L__14:
000341 E2 1C 03 00         A  1122    	JP	PO,L_16
000345                     A  1123    L__15:
                           A  1124    ;  135	}
                           A  1125    .LINE 135
                           A  1126    
000345 DDF9                A  1127    	LD	SP,IX
000347 DDE1                A  1128    	POP	IX
000349 C9                  A  1129    	RET	
                           A  1130    
                           A  1131    
                           A  1132    ;**************************** _SD_powerUpSeq **
                           A  1133    ;Name                         Addr/Register   S
                           A  1134    ;_spi_transfer                       IMPORT  --
                           A  1135    ;_delayms                            IMPORT  --
                           A  1136    ;_SD_CS_disable                      IMPORT  --
                           A  1137    ;i                                     IX-3    
                           A  1138    
                           A  1139    
                           A  1140    ; Stack Frame Size: 9 (bytes)
                           A  1141    ;       Spill Code: 0 (instruction)
                           A  1142    
                           A  1143    
                           A  1144    .ENDFUNC "SD_powerUpSeq",135,"_SD_powerUpSeq"
                           A  1145    ;  136	
                           A  1146    ;  137	BYTE SD_readBlocks(DWORD addr, BYTE *bu
00034A                     A  1147    _SD_readBlocks:
                           A  1148    .DEFINE "_SD_readBlocks"
                           A  1149    
                           A  1150    .VALUE _SD_readBlocks
                           A  1151    
                           A  1152    .CLASS 2
                           A  1153    
                           A  1154    .TYPE 76
                           A  1155    
                           A  1156    .ENDEF
                           A  1157    
                           A  1158    .BEGFUNC "SD_readBlocks",137,"_SD_readBlocks"
                           A  1159    
                           A  1160    .LINE 137
                           A  1161    
                           A  1162    .DEFINE "addr"
                           A  1163    
                           A  1164    .CLASS 65
                           A  1165    
                           A  1166    .VALUE 6
                           A  1167    
                           A  1168    .TYPE 15
                           A  1169    
                           A  1170    .ENDEF
                           A  1171    
                           A  1172    .DEFINE "buf"
                           A  1173    
                           A  1174    .CLASS 65
                           A  1175    
                           A  1176    .VALUE 12
                           A  1177    
                           A  1178    .TYPE 44
                           A  1179    
                           A  1180    .ENDEF
                           A  1181    
                           A  1182    .DEFINE "count"
                           A  1183    
                           A  1184    .CLASS 65
                           A  1185    
                           A  1186    .VALUE 15
                           A  1187    
                           A  1188    .TYPE 13
                           A  1189    
                           A  1190    .ENDEF
                           A  1191    
                           A  1192    .DEFINE "i"
                           A  1193    
                           A  1194    .CLASS 65
                           A  1195    
                           A  1196    .VALUE -3
                           A  1197    
                           A  1198    .TYPE 14
                           A  1199    
                           A  1200    .ENDEF
                           A  1201    
                           A  1202    .DEFINE "res"
                           A  1203    
                           A  1204    .CLASS 65
                           A  1205    
                           A  1206    .VALUE -4
                           A  1207    
                           A  1208    .TYPE 12
                           A  1209    
                           A  1210    .ENDEF
                           A  1211    
                           A  1212    .DEFINE "token"
                           A  1213    
                           A  1214    .CLASS 65
                           A  1215    
                           A  1216    .VALUE -5
                           A  1217    
                           A  1218    .TYPE 12
                           A  1219    
                           A  1220    .ENDEF
                           A  1221    
                           A  1222    .DEFINE "ptr"
                           A  1223    
                           A  1224    .CLASS 65
                           A  1225    
                           A  1226    .VALUE -8
                           A  1227    
                           A  1228    .TYPE 44
                           A  1229    
                           A  1230    .ENDEF
                           A  1231    
                           A  1232    .DEFINE "sector"
                           A  1233    
                           A  1234    .CLASS 65
                           A  1235    
                           A  1236    .VALUE -12
                           A  1237    
                           A  1238    .TYPE 15
                           A  1239    
                           A  1240    .ENDEF
                           A  1241    
00034A DDE5                A  1242    	PUSH	IX
00034C DD210000 00         A  1243    	LD	IX,0
000351 DD39                A  1244    	ADD	IX,SP
000353 ED22F4              A  1245    	LEA	HL,IX+%FFFFFFF4
000356 F9                  A  1246    	LD	SP,HL
                           A  1247    ;  138		DWORD	sector = addr;
                           A  1248    .LINE 138
                           A  1249    
000357 DD0706              A  1250    	LD	BC,(IX+%6)
00035A DD7E09              A  1251    	LD	A,(IX+%9)
00035D DD0FF4              A  1252    	LD	(IX+%FFFFFFF4),BC
000360 DD77F7              A  1253    	LD	(IX+%FFFFFFF7),A
                           A  1254    ;  139		BYTE	res;
                           A  1255    ;  140		BYTE	token;
                           A  1256    ;  141		BYTE *	ptr = buf;
                           A  1257    .LINE 141
                           A  1258    
000363 DD070C              A  1259    	LD	BC,(IX+%C)
000366 DD0FF8              A  1260    	LD	(IX+%FFFFFFF8),BC
                           A  1261    ;  142		UINT	i;
                           A  1262    ;  143	
                           A  1263    ;  144		for(i = 0; i < count; i++) {
                           A  1264    .LINE 144
                           A  1265    
000369 01000000            A  1266    	LD	BC,0
00036D DD0FFD              A  1267    	LD	(IX+%FFFFFFFD),BC
000370 18 51               A  1268    	JR	L_27
000372                     A  1269    L_25:
                           A  1270    ;  145			res = SD_readSingleBlock(sector
                           A  1271    .LINE 145
                           A  1272    
000372 ED65FB              A  1273    	PEA	IX+%FFFFFFFB
000375 DD07F8              A  1274    	LD	BC,(IX+%FFFFFFF8)
000378 C5                  A  1275    	PUSH	BC
000379 DD4EF7              A  1276    	LD	C,(IX+%FFFFFFF7)
00037C 0600                A  1277    	LD	B,%0
00037E C5                  A  1278    	PUSH	BC
00037F DD07F4              A  1279    	LD	BC,(IX+%FFFFFFF4)
000382 C5                  A  1280    	PUSH	BC
000383 CD 89 05 00         A  1281    	CALL	_SD_readSingleBlock
000387 C1                  A  1282    	POP	BC
000388 C1                  A  1283    	POP	BC
000389 C1                  A  1284    	POP	BC
00038A C1                  A  1285    	POP	BC
00038B DD77FC              A  1286    	LD	(IX+%FFFFFFFC),A
                           A  1287    ;  146			if(SD_R1_NO_ERROR(res) && (toke
                           A  1288    .LINE 146
                           A  1289    
00038E FE02                A  1290    	CP	A,%2
000390 30 26               A  1291    	JR	NC,L_24
000392 DD7EFB              A  1292    	LD	A,(IX+%FFFFFFFB)
000395 FEFE                A  1293    	CP	A,%FE
000397 20 1F               A  1294    	JR	NZ,L_24
                           A  1295    ;  147				sector++;
                           A  1296    .LINE 147
                           A  1297    
000399 DD27F4              A  1298    	LD	HL,(IX+%FFFFFFF4)
00039C DD5EF7              A  1299    	LD	E,(IX+%FFFFFFF7)
00039F 3E01                A  1300    	LD	A,%1
0003A1 CD 00 00 00         A  1301    	CALL	__ladd_b
0003A5 DD2FF4              A  1302    	LD	(IX+%FFFFFFF4),HL
0003A8 DD73F7              A  1303    	LD	(IX+%FFFFFFF7),E
                           A  1304    ;  148				ptr += SD_BLOCK_LEN;
                           A  1305    .LINE 148
                           A  1306    
0003AB 01000200            A  1307    	LD	BC,512
0003AF DD27F8              A  1308    	LD	HL,(IX+%FFFFFFF8)
0003B2 09                  A  1309    	ADD	HL,BC
0003B3 DD2FF8              A  1310    	LD	(IX+%FFFFFFF8),HL
                           A  1311    ;  149			}
                           A  1312    ;  150			else {
                           A  1313    .LINE 150
                           A  1314    
0003B6 18 04               A  1315    	JR	L_26
0003B8                     A  1316    L_24:
                           A  1317    ;  151				return SD_ERROR;
                           A  1318    .LINE 151
                           A  1319    
0003B8 3E01                A  1320    	LD	A,%1
0003BA 18 19               A  1321    	JR	L_29
                           A  1322    ;  152			}
                           A  1323    ;  153		}	
0003BC                     A  1324    L_26:
                           A  1325    .LINE 153
                           A  1326    
0003BC DD07FD              A  1327    	LD	BC,(IX+%FFFFFFFD)
0003BF 03                  A  1328    	INC	BC
0003C0 DD0FFD              A  1329    	LD	(IX+%FFFFFFFD),BC
0003C3                     A  1330    L_27:
0003C3 DD070F              A  1331    	LD	BC,(IX+%F)
0003C6 CD 00 00 00         A  1332    	CALL	__stoiu
0003CA E5C1                A  1333    	LD	BC,HL
0003CC DD27FD              A  1334    	LD	HL,(IX+%FFFFFFFD)
0003CF B7                  A  1335    	OR	A,A
0003D0 ED42                A  1336    	SBC	HL,BC
0003D2 38 9E               A  1337    	JR	C,L_25
                           A  1338    ;  154		return SD_SUCCESS;
                           A  1339    .LINE 154
                           A  1340    
0003D4 AF                  A  1341    	XOR	A,A
                           A  1342    ;  155	}
0003D5                     A  1343    L_29:
                           A  1344    .LINE 155
                           A  1345    
0003D5 DDF9                A  1346    	LD	SP,IX
0003D7 DDE1                A  1347    	POP	IX
0003D9 C9                  A  1348    	RET	
                           A  1349    
                           A  1350    
                           A  1351    ;**************************** _SD_readBlocks **
                           A  1352    ;Name                         Addr/Register   S
                           A  1353    ;_SD_readSingleBlock                 IMPORT  --
                           A  1354    ;sector                               IX-12    
                           A  1355    ;ptr                                   IX-8    
                           A  1356    ;token                                 IX-5    
                           A  1357    ;res                                   IX-4    
                           A  1358    ;i                                     IX-3    
                           A  1359    ;count                                IX+15    
                           A  1360    ;buf                                  IX+12    
                           A  1361    ;addr                                  IX+6    
                           A  1362    
                           A  1363    
                           A  1364    ; Stack Frame Size: 30 (bytes)
                           A  1365    ;       Spill Code: 0 (instruction)
                           A  1366    
                           A  1367    
                           A  1368    .ENDFUNC "SD_readBlocks",155,"_SD_readBlocks"
                           A  1369    ;  156	
                           A  1370    ;  157	BYTE SD_writeBlocks(DWORD addr, BYTE *b
0003DA                     A  1371    _SD_writeBlocks:
                           A  1372    .DEFINE "_SD_writeBlocks"
                           A  1373    
                           A  1374    .VALUE _SD_writeBlocks
                           A  1375    
                           A  1376    .CLASS 2
                           A  1377    
                           A  1378    .TYPE 76
                           A  1379    
                           A  1380    .ENDEF
                           A  1381    
                           A  1382    .BEGFUNC "SD_writeBlocks",157,"_SD_writeBlocks"
                           A  1383    
                           A  1384    .LINE 157
                           A  1385    
                           A  1386    .DEFINE "addr"
                           A  1387    
                           A  1388    .CLASS 65
                           A  1389    
                           A  1390    .VALUE 6
                           A  1391    
                           A  1392    .TYPE 15
                           A  1393    
                           A  1394    .ENDEF
                           A  1395    
                           A  1396    .DEFINE "buf"
                           A  1397    
                           A  1398    .CLASS 65
                           A  1399    
                           A  1400    .VALUE 12
                           A  1401    
                           A  1402    .TYPE 44
                           A  1403    
                           A  1404    .ENDEF
                           A  1405    
                           A  1406    .DEFINE "count"
                           A  1407    
                           A  1408    .CLASS 65
                           A  1409    
                           A  1410    .VALUE 15
                           A  1411    
                           A  1412    .TYPE 13
                           A  1413    
                           A  1414    .ENDEF
                           A  1415    
                           A  1416    .DEFINE "i"
                           A  1417    
                           A  1418    .CLASS 65
                           A  1419    
                           A  1420    .VALUE -3
                           A  1421    
                           A  1422    .TYPE 14
                           A  1423    
                           A  1424    .ENDEF
                           A  1425    
                           A  1426    .DEFINE "res"
                           A  1427    
                           A  1428    .CLASS 65
                           A  1429    
                           A  1430    .VALUE -4
                           A  1431    
                           A  1432    .TYPE 12
                           A  1433    
                           A  1434    .ENDEF
                           A  1435    
                           A  1436    .DEFINE "token"
                           A  1437    
                           A  1438    .CLASS 65
                           A  1439    
                           A  1440    .VALUE -5
                           A  1441    
                           A  1442    .TYPE 12
                           A  1443    
                           A  1444    .ENDEF
                           A  1445    
                           A  1446    .DEFINE "ptr"
                           A  1447    
                           A  1448    .CLASS 65
                           A  1449    
                           A  1450    .VALUE -8
                           A  1451    
                           A  1452    .TYPE 44
                           A  1453    
                           A  1454    .ENDEF
                           A  1455    
                           A  1456    .DEFINE "sector"
                           A  1457    
                           A  1458    .CLASS 65
                           A  1459    
                           A  1460    .VALUE -12
                           A  1461    
                           A  1462    .TYPE 15
                           A  1463    
                           A  1464    .ENDEF
                           A  1465    
0003DA DDE5                A  1466    	PUSH	IX
0003DC DD210000 00         A  1467    	LD	IX,0
0003E1 DD39                A  1468    	ADD	IX,SP
0003E3 ED22F4              A  1469    	LEA	HL,IX+%FFFFFFF4
0003E6 F9                  A  1470    	LD	SP,HL
                           A  1471    ;  158		DWORD	sector = addr;
                           A  1472    .LINE 158
                           A  1473    
0003E7 DD0706              A  1474    	LD	BC,(IX+%6)
0003EA DD7E09              A  1475    	LD	A,(IX+%9)
0003ED DD0FF4              A  1476    	LD	(IX+%FFFFFFF4),BC
0003F0 DD77F7              A  1477    	LD	(IX+%FFFFFFF7),A
                           A  1478    ;  159		BYTE	res;
                           A  1479    ;  160		BYTE	token;
                           A  1480    ;  161		BYTE *	ptr = buf;
                           A  1481    .LINE 161
                           A  1482    
0003F3 DD070C              A  1483    	LD	BC,(IX+%C)
0003F6 DD0FF8              A  1484    	LD	(IX+%FFFFFFF8),BC
                           A  1485    ;  162		UINT	i;
                           A  1486    ;  163	
                           A  1487    ;  164		for(i = 0; i < count; i++) {
                           A  1488    .LINE 164
                           A  1489    
0003F9 01000000            A  1490    	LD	BC,0
0003FD DD0FFD              A  1491    	LD	(IX+%FFFFFFFD),BC
000400 18 50               A  1492    	JR	L_37
000402                     A  1493    L_35:
                           A  1494    ;  165			res = SD_writeSingleBlock(secto
                           A  1495    .LINE 165
                           A  1496    
000402 ED65FB              A  1497    	PEA	IX+%FFFFFFFB
000405 DD07F8              A  1498    	LD	BC,(IX+%FFFFFFF8)
000408 C5                  A  1499    	PUSH	BC
000409 DD4EF7              A  1500    	LD	C,(IX+%FFFFFFF7)
00040C 0600                A  1501    	LD	B,%0
00040E C5                  A  1502    	PUSH	BC
00040F DD07F4              A  1503    	LD	BC,(IX+%FFFFFFF4)
000412 C5                  A  1504    	PUSH	BC
000413 CD 69 04 00         A  1505    	CALL	_SD_writeSingleBlock
000417 C1                  A  1506    	POP	BC
000418 C1                  A  1507    	POP	BC
000419 C1                  A  1508    	POP	BC
00041A C1                  A  1509    	POP	BC
00041B DD77FC              A  1510    	LD	(IX+%FFFFFFFC),A
                           A  1511    ;  166			if(res == 0x00 && token == SD_D
                           A  1512    .LINE 166
                           A  1513    
00041E B7                  A  1514    	OR	A,A
00041F 20 26               A  1515    	JR	NZ,L_34
000421 DD7EFB              A  1516    	LD	A,(IX+%FFFFFFFB)
000424 FE05                A  1517    	CP	A,%5
000426 20 1F               A  1518    	JR	NZ,L_34
                           A  1519    ;  167				sector++;
                           A  1520    .LINE 167
                           A  1521    
000428 DD27F4              A  1522    	LD	HL,(IX+%FFFFFFF4)
00042B DD5EF7              A  1523    	LD	E,(IX+%FFFFFFF7)
00042E 3E01                A  1524    	LD	A,%1
000430 CD 00 00 00         A  1525    	CALL	__ladd_b
000434 DD2FF4              A  1526    	LD	(IX+%FFFFFFF4),HL
000437 DD73F7              A  1527    	LD	(IX+%FFFFFFF7),E
                           A  1528    ;  168				ptr += SD_BLOCK_LEN;
                           A  1529    .LINE 168
                           A  1530    
00043A 01000200            A  1531    	LD	BC,512
00043E DD27F8              A  1532    	LD	HL,(IX+%FFFFFFF8)
000441 09                  A  1533    	ADD	HL,BC
000442 DD2FF8              A  1534    	LD	(IX+%FFFFFFF8),HL
                           A  1535    ;  169			}
                           A  1536    ;  170			else {
                           A  1537    .LINE 170
                           A  1538    
000445 18 04               A  1539    	JR	L_36
000447                     A  1540    L_34:
                           A  1541    ;  171				return SD_ERROR;
                           A  1542    .LINE 171
                           A  1543    
000447 3E01                A  1544    	LD	A,%1
000449 18 19               A  1545    	JR	L_39
                           A  1546    ;  172			}
                           A  1547    ;  173		}	
00044B                     A  1548    L_36:
                           A  1549    .LINE 173
                           A  1550    
00044B DD07FD              A  1551    	LD	BC,(IX+%FFFFFFFD)
00044E 03                  A  1552    	INC	BC
00044F DD0FFD              A  1553    	LD	(IX+%FFFFFFFD),BC
000452                     A  1554    L_37:
000452 DD070F              A  1555    	LD	BC,(IX+%F)
000455 CD 00 00 00         A  1556    	CALL	__stoiu
000459 E5C1                A  1557    	LD	BC,HL
00045B DD27FD              A  1558    	LD	HL,(IX+%FFFFFFFD)
00045E B7                  A  1559    	OR	A,A
00045F ED42                A  1560    	SBC	HL,BC
000461 38 9F               A  1561    	JR	C,L_35
                           A  1562    ;  174		return SD_SUCCESS;	
                           A  1563    .LINE 174
                           A  1564    
000463 AF                  A  1565    	XOR	A,A
                           A  1566    ;  175	}
000464                     A  1567    L_39:
                           A  1568    .LINE 175
                           A  1569    
000464 DDF9                A  1570    	LD	SP,IX
000466 DDE1                A  1571    	POP	IX
000468 C9                  A  1572    	RET	
                           A  1573    
                           A  1574    
                           A  1575    ;**************************** _SD_writeBlocks *
                           A  1576    ;Name                         Addr/Register   S
                           A  1577    ;_SD_writeSingleBlock                IMPORT  --
                           A  1578    ;sector                               IX-12    
                           A  1579    ;ptr                                   IX-8    
                           A  1580    ;token                                 IX-5    
                           A  1581    ;res                                   IX-4    
                           A  1582    ;i                                     IX-3    
                           A  1583    ;count                                IX+15    
                           A  1584    ;buf                                  IX+12    
                           A  1585    ;addr                                  IX+6    
                           A  1586    
                           A  1587    
                           A  1588    ; Stack Frame Size: 30 (bytes)
                           A  1589    ;       Spill Code: 0 (instruction)
                           A  1590    
                           A  1591    
                           A  1592    .ENDFUNC "SD_writeBlocks",175,"_SD_writeBlocks"
                           A  1593    ;  176	
                           A  1594    ;  177	BYTE SD_writeSingleBlock(DWORD addr, BY
000469                     A  1595    _SD_writeSingleBlock:
                           A  1596    .DEFINE "_SD_writeSingleBlock"
                           A  1597    
                           A  1598    .VALUE _SD_writeSingleBlock
                           A  1599    
                           A  1600    .CLASS 2
                           A  1601    
                           A  1602    .TYPE 76
                           A  1603    
                           A  1604    .ENDEF
                           A  1605    
                           A  1606    .BEGFUNC "SD_writeSingleBlock",177,"_SD_writeSi
                           A  1607    
                           A  1608    .LINE 177
                           A  1609    
                           A  1610    .DEFINE "addr"
                           A  1611    
                           A  1612    .CLASS 65
                           A  1613    
                           A  1614    .VALUE 6
                           A  1615    
                           A  1616    .TYPE 15
                           A  1617    
                           A  1618    .ENDEF
                           A  1619    
                           A  1620    .DEFINE "buf"
                           A  1621    
                           A  1622    .CLASS 65
                           A  1623    
                           A  1624    .VALUE 12
                           A  1625    
                           A  1626    .TYPE 44
                           A  1627    
                           A  1628    .ENDEF
                           A  1629    
                           A  1630    .DEFINE "token"
                           A  1631    
                           A  1632    .CLASS 65
                           A  1633    
                           A  1634    .VALUE 15
                           A  1635    
                           A  1636    .TYPE 44
                           A  1637    
                           A  1638    .ENDEF
                           A  1639    
                           A  1640    .DEFINE "readAttempts"
                           A  1641    
                           A  1642    .CLASS 65
                           A  1643    
                           A  1644    .VALUE -1
                           A  1645    
                           A  1646    .TYPE 12
                           A  1647    
                           A  1648    .ENDEF
                           A  1649    
                           A  1650    .DEFINE "i"
                           A  1651    
                           A  1652    .CLASS 65
                           A  1653    
                           A  1654    .VALUE -3
                           A  1655    
                           A  1656    .TYPE 13
                           A  1657    
                           A  1658    .ENDEF
                           A  1659    
                           A  1660    .DEFINE "read"
                           A  1661    
                           A  1662    .CLASS 65
                           A  1663    
                           A  1664    .VALUE -4
                           A  1665    
                           A  1666    .TYPE 12
                           A  1667    
                           A  1668    .ENDEF
                           A  1669    
                           A  1670    .DEFINE "res1"
                           A  1671    
                           A  1672    .CLASS 65
                           A  1673    
                           A  1674    .VALUE -5
                           A  1675    
                           A  1676    .TYPE 12
                           A  1677    
                           A  1678    .ENDEF
                           A  1679    
000469 DDE5                A  1680    	PUSH	IX
00046B DD210000 00         A  1681    	LD	IX,0
000470 DD39                A  1682    	ADD	IX,SP
000472 C5                  A  1683    	PUSH	BC
000473 3B                  A  1684    	DEC	SP
000474 3B                  A  1685    	DEC	SP
                           A  1686    ;  178	    BYTE	res1;
                           A  1687    ;  179		BYTE 	readAttempts;
                           A  1688    ;  180		BYTE	read = 0x00;
                           A  1689    .LINE 180
                           A  1690    
000475 DD36FC00            A  1691    	LD	(IX+%FFFFFFFC),%0
                           A  1692    ;  181		WORD	i;
                           A  1693    ;  182		//
                           A  1694    ;  183	    // Set token to none
                           A  1695    ;  184		//
                           A  1696    ;  185	    *token = 0xFF;
                           A  1697    .LINE 185
                           A  1698    
000479 DD270F              A  1699    	LD	HL,(IX+%F)
00047C 36FF                A  1700    	LD	(HL),%FF
                           A  1701    ;  186		//
                           A  1702    ;  187	    // Assert chip select
                           A  1703    ;  188		//
                           A  1704    ;  189	    spi_transfer(0xFF);
                           A  1705    .LINE 189
                           A  1706    
00047E 01FF0000            A  1707    	LD	BC,255
000482 C5                  A  1708    	PUSH	BC
000483 CD 00 00 00         A  1709    	CALL	_spi_transfer
000487 C1                  A  1710    	POP	BC
                           A  1711    ;  190		SD_CS_enable();
                           A  1712    .LINE 190
                           A  1713    
000488 CD 00 00 00         A  1714    	CALL	_SD_CS_enable
                           A  1715    ;  191	    spi_transfer(0xFF);
                           A  1716    .LINE 191
                           A  1717    
00048C 01FF0000            A  1718    	LD	BC,255
000490 C5                  A  1719    	PUSH	BC
000491 CD 00 00 00         A  1720    	CALL	_spi_transfer
000495 C1                  A  1721    	POP	BC
                           A  1722    ;  192		//
                           A  1723    ;  193	    // Send CMD24
                           A  1724    ;  194		//
                           A  1725    ;  195	    SD_command(CMD24, addr, CMD24_CRC);
                           A  1726    .LINE 195
                           A  1727    
000496 01000000            A  1728    	LD	BC,0
00049A C5                  A  1729    	PUSH	BC
00049B DD4E09              A  1730    	LD	C,(IX+%9)
00049E 0600                A  1731    	LD	B,%0
0004A0 C5                  A  1732    	PUSH	BC
0004A1 DD0706              A  1733    	LD	BC,(IX+%6)
0004A4 C5                  A  1734    	PUSH	BC
0004A5 01180000            A  1735    	LD	BC,24
0004A9 C5                  A  1736    	PUSH	BC
0004AA CD 00 00 00         A  1737    	CALL	_SD_command
0004AE C1                  A  1738    	POP	BC
0004AF C1                  A  1739    	POP	BC
0004B0 C1                  A  1740    	POP	BC
0004B1 C1                  A  1741    	POP	BC
                           A  1742    ;  196		//
                           A  1743    ;  197	    // Read response
                           A  1744    ;  198		//
                           A  1745    ;  199	    res1 = SD_readRes1();
                           A  1746    .LINE 199
                           A  1747    
0004B2 CD 65 00 00         A  1748    	CALL	_SD_readRes1
0004B6 DD77FB              A  1749    	LD	(IX+%FFFFFFFB),A
                           A  1750    ;  200	
                           A  1751    ;  201	    // If no error
                           A  1752    ;  202	    if(res1 == SD_READY) {
                           A  1753    .LINE 202
                           A  1754    
0004B9 B7                  A  1755    	OR	A,A
0004BA C2 69 05 00         A  1756    	JR	NZ,L_54
                           A  1757    ;  203			//
                           A  1758    ;  204	        // Send start token
                           A  1759    ;  205			//
                           A  1760    ;  206	        spi_transfer(SD_START_TOKEN);
                           A  1761    .LINE 206
                           A  1762    
0004BE 01FE0000            A  1763    	LD	BC,254
0004C2 C5                  A  1764    	PUSH	BC
0004C3 CD 00 00 00         A  1765    	CALL	_spi_transfer
0004C7 C1                  A  1766    	POP	BC
                           A  1767    ;  207	
                           A  1768    ;  208	        // Write buffer to card
                           A  1769    ;  209			//
                           A  1770    ;  210	        for(i = 0; i < SD_BLOCK_LEN; i+
                           A  1771    .LINE 210
                           A  1772    
0004C8 DD36FD00            A  1773    	LD	(IX+%FFFFFFFD),%0
0004CC DD36FE00            A  1774    	LD	(IX+%FFFFFFFE),%0
0004D0 18 1E               A  1775    	JR	L_43
0004D2                     A  1776    L_41:
                           A  1777    ;  211				spi_transfer(buf[i]);
                           A  1778    .LINE 211
                           A  1779    
0004D2 DD07FD              A  1780    	LD	BC,(IX+%FFFFFFFD)
0004D5 CD 00 00 00         A  1781    	CALL	__stoiu
0004D9 DD070C              A  1782    	LD	BC,(IX+%C)
0004DC 09                  A  1783    	ADD	HL,BC
0004DD 4E                  A  1784    	LD	C,(HL)
0004DE 0600                A  1785    	LD	B,%0
0004E0 C5                  A  1786    	PUSH	BC
0004E1 CD 00 00 00         A  1787    	CALL	_spi_transfer
0004E5 C1                  A  1788    	POP	BC
0004E6 DD27FD              A  1789    	LD	HL,(IX+%FFFFFFFD)
0004E9 23                  A  1790    	INC	HL
0004EA DD75FD              A  1791    	LD	(IX+%FFFFFFFD),L
0004ED DD74FE              A  1792    	LD	(IX+%FFFFFFFE),H
                           A  1793    ;  212			}
0004F0                     A  1794    L_43:
                           A  1795    .LINE 212
                           A  1796    
0004F0 49010002            A  1797    	LD.LIS	BC,512
0004F4 DD27FD              A  1798    	LD	HL,(IX+%FFFFFFFD)
0004F7 B7                  A  1799    	OR	A,A
0004F8 40ED42              A  1800    	SBC.SIS	HL,BC
0004FB 38 D5               A  1801    	JR	C,L_41
                           A  1802    ;  213			//
                           A  1803    ;  214	        // Wait for a response (timeout
                           A  1804    ;  215			//
                           A  1805    ;  216	        readAttempts = 0;
                           A  1806    .LINE 216
                           A  1807    
0004FD DD36FF00            A  1808    	LD	(IX+%FFFFFFFF),%0
                           A  1809    ;  217	        while(++readAttempts != SD_MAX_
                           A  1810    .LINE 217
                           A  1811    
000501 18 18               A  1812    	JR	L_46
000503                     A  1813    L_47:
                           A  1814    ;  218	            if((read = spi_transfer(0xF
                           A  1815    .LINE 218
                           A  1816    
000503 01FF0000            A  1817    	LD	BC,255
000507 C5                  A  1818    	PUSH	BC
000508 CD 00 00 00         A  1819    	CALL	_spi_transfer
00050C C1                  A  1820    	POP	BC
00050D DD77FC              A  1821    	LD	(IX+%FFFFFFFC),A
000510 FEFF                A  1822    	CP	A,%FF
000512 28 07               A  1823    	JR	Z,L_46
                           A  1824    ;  219					*token = 0xFF;
                           A  1825    .LINE 219
                           A  1826    
000514 DD270F              A  1827    	LD	HL,(IX+%F)
000517 36FF                A  1828    	LD	(HL),%FF
                           A  1829    ;  220					break;
                           A  1830    .LINE 220
                           A  1831    
000519 18 13               A  1832    	JR	L_52
                           A  1833    ;  221				}
00051B                     A  1834    L_46:
                           A  1835    .LINE 221
                           A  1836    
00051B DD34FF              A  1837    	INC	(IX+%FFFFFFFF)
00051E DD7EFF              A  1838    	LD	A,(IX+%FFFFFFFF)
000521 B7ED62              A  1839    	UEXT	HL
000524 6F                  A  1840    	LD	L,A
000525 01430F00            A  1841    	LD	BC,3907
000529 B7                  A  1842    	OR	A,A
00052A ED42                A  1843    	SBC	HL,BC
00052C 20 D5               A  1844    	JR	NZ,L_47
00052E                     A  1845    L_52:
                           A  1846    ;  222			//
                           A  1847    ;  223	        // If data accepted
                           A  1848    ;  224			//
                           A  1849    ;  225	        if((read & 0x1F) == 0x05) {
                           A  1850    .LINE 225
                           A  1851    
00052E DD7EFC              A  1852    	LD	A,(IX+%FFFFFFFC)
000531 E61F                A  1853    	AND	A,%1F
000533 FE05                A  1854    	CP	A,%5
000535 20 32               A  1855    	JR	NZ,L_54
                           A  1856    ;  226				//
                           A  1857    ;  227	            // Set token to data accept
                           A  1858    ;  228				//
                           A  1859    ;  229	            *token = 0x05;
                           A  1860    .LINE 229
                           A  1861    
000537 DD270F              A  1862    	LD	HL,(IX+%F)
00053A 3605                A  1863    	LD	(HL),%5
                           A  1864    ;  230				//
                           A  1865    ;  231	            // Wait for write to finish
                           A  1866    ;  232				//
                           A  1867    ;  233	            readAttempts = 0;
                           A  1868    .LINE 233
                           A  1869    
00053C DD36FF00            A  1870    	LD	(IX+%FFFFFFFF),%0
                           A  1871    ;  234	            while(spi_transfer(0xFF) ==
                           A  1872    .LINE 234
                           A  1873    
000540 18 1A               A  1874    	JR	L_49
000542                     A  1875    L_50:
                           A  1876    ;  235	                if(++readAttempts == SD
                           A  1877    .LINE 235
                           A  1878    
000542 DD34FF              A  1879    	INC	(IX+%FFFFFFFF)
000545 DD7EFF              A  1880    	LD	A,(IX+%FFFFFFFF)
000548 B7ED62              A  1881    	UEXT	HL
00054B 6F                  A  1882    	LD	L,A
00054C 01430F00            A  1883    	LD	BC,3907
000550 B7                  A  1884    	OR	A,A
000551 ED42                A  1885    	SBC	HL,BC
000553 20 07               A  1886    	JR	NZ,L_49
                           A  1887    ;  236						*token = 0x00;
                           A  1888    .LINE 236
                           A  1889    
000555 DD270F              A  1890    	LD	HL,(IX+%F)
000558 3600                A  1891    	LD	(HL),%0
                           A  1892    ;  237						break;
                           A  1893    .LINE 237
                           A  1894    
00055A 18 0D               A  1895    	JR	L_54
                           A  1896    ;  238					}
                           A  1897    ;  239				}
00055C                     A  1898    L_49:
                           A  1899    .LINE 239
                           A  1900    
00055C 01FF0000            A  1901    	LD	BC,255
000560 C5                  A  1902    	PUSH	BC
000561 CD 00 00 00         A  1903    	CALL	_spi_transfer
000565 C1                  A  1904    	POP	BC
000566 B7                  A  1905    	OR	A,A
000567 28 D9               A  1906    	JR	Z,L_50
                           A  1907    ;  240	        }
                           A  1908    ;  241	    }
000569                     A  1909    L_54:
                           A  1910    .LINE 241
                           A  1911    
                           A  1912    ;  242		//
                           A  1913    ;  243	    // Deassert chip select
                           A  1914    ;  244		//
                           A  1915    ;  245	    spi_transfer(0xFF);
                           A  1916    .LINE 245
                           A  1917    
000569 01FF0000            A  1918    	LD	BC,255
00056D C5                  A  1919    	PUSH	BC
00056E CD 00 00 00         A  1920    	CALL	_spi_transfer
000572 C1                  A  1921    	POP	BC
                           A  1922    ;  246	    SD_CS_disable();
                           A  1923    .LINE 246
                           A  1924    
000573 CD 00 00 00         A  1925    	CALL	_SD_CS_disable
                           A  1926    ;  247	    spi_transfer(0xFF);
                           A  1927    .LINE 247
                           A  1928    
000577 01FF0000            A  1929    	LD	BC,255
00057B C5                  A  1930    	PUSH	BC
00057C CD 00 00 00         A  1931    	CALL	_spi_transfer
000580 C1                  A  1932    	POP	BC
                           A  1933    ;  248	
                           A  1934    ;  249	    return res1;	
                           A  1935    .LINE 249
                           A  1936    
000581 DD7EFB              A  1937    	LD	A,(IX+%FFFFFFFB)
                           A  1938    ;  250	}
                           A  1939    .LINE 250
                           A  1940    
000584 DDF9                A  1941    	LD	SP,IX
000586 DDE1                A  1942    	POP	IX
000588 C9                  A  1943    	RET	
                           A  1944    
                           A  1945    
                           A  1946    ;**************************** _SD_writeSingleBl
                           A  1947    ;Name                         Addr/Register   S
                           A  1948    ;_SD_CS_disable                      IMPORT  --
                           A  1949    ;_SD_readRes1                        IMPORT  --
                           A  1950    ;_SD_command                         IMPORT  --
                           A  1951    ;_SD_CS_enable                       IMPORT  --
                           A  1952    ;_spi_transfer                       IMPORT  --
                           A  1953    ;res1                                  IX-5    
                           A  1954    ;read                                  IX-4    
                           A  1955    ;i                                     IX-3    
                           A  1956    ;readAttempts                          IX-1    
                           A  1957    ;token                                IX+15    
                           A  1958    ;buf                                  IX+12    
                           A  1959    ;addr                                  IX+6    
                           A  1960    
                           A  1961    
                           A  1962    ; Stack Frame Size: 23 (bytes)
                           A  1963    ;       Spill Code: 0 (instruction)
                           A  1964    
                           A  1965    
                           A  1966    .ENDFUNC "SD_writeSingleBlock",250,"_SD_writeSi
                           A  1967    ;  251	
                           A  1968    ;  252	BYTE SD_readSingleBlock(DWORD addr, BYT
                           A  1969    ;  253	{
000589                     A  1970    _SD_readSingleBlock:
                           A  1971    .DEFINE "_SD_readSingleBlock"
                           A  1972    
                           A  1973    .VALUE _SD_readSingleBlock
                           A  1974    
                           A  1975    .CLASS 2
                           A  1976    
                           A  1977    .TYPE 76
                           A  1978    
                           A  1979    .ENDEF
                           A  1980    
                           A  1981    .BEGFUNC "SD_readSingleBlock",253,"_SD_readSing
                           A  1982    
                           A  1983    .LINE 253
                           A  1984    
                           A  1985    .DEFINE "addr"
                           A  1986    
                           A  1987    .CLASS 65
                           A  1988    
                           A  1989    .VALUE 6
                           A  1990    
                           A  1991    .TYPE 15
                           A  1992    
                           A  1993    .ENDEF
                           A  1994    
                           A  1995    .DEFINE "buf"
                           A  1996    
                           A  1997    .CLASS 65
                           A  1998    
                           A  1999    .VALUE 12
                           A  2000    
                           A  2001    .TYPE 44
                           A  2002    
                           A  2003    .ENDEF
                           A  2004    
                           A  2005    .DEFINE "token"
                           A  2006    
                           A  2007    .CLASS 65
                           A  2008    
                           A  2009    .VALUE 15
                           A  2010    
                           A  2011    .TYPE 44
                           A  2012    
                           A  2013    .ENDEF
                           A  2014    
                           A  2015    .DEFINE "read"
                           A  2016    
                           A  2017    .CLASS 65
                           A  2018    
                           A  2019    .VALUE -1
                           A  2020    
                           A  2021    .TYPE 12
                           A  2022    
                           A  2023    .ENDEF
                           A  2024    
                           A  2025    .DEFINE "i"
                           A  2026    
                           A  2027    .CLASS 65
                           A  2028    
                           A  2029    .VALUE -3
                           A  2030    
                           A  2031    .TYPE 13
                           A  2032    
                           A  2033    .ENDEF
                           A  2034    
                           A  2035    .DEFINE "readAttempts"
                           A  2036    
                           A  2037    .CLASS 65
                           A  2038    
                           A  2039    .VALUE -5
                           A  2040    
                           A  2041    .TYPE 13
                           A  2042    
                           A  2043    .ENDEF
                           A  2044    
                           A  2045    .DEFINE "res1"
                           A  2046    
                           A  2047    .CLASS 65
                           A  2048    
                           A  2049    .VALUE -6
                           A  2050    
                           A  2051    .TYPE 12
                           A  2052    
                           A  2053    .ENDEF
                           A  2054    
000589 DDE5                A  2055    	PUSH	IX
00058B DD210000 00         A  2056    	LD	IX,0
000590 DD39                A  2057    	ADD	IX,SP
000592 C5                  A  2058    	PUSH	BC
000593 C5                  A  2059    	PUSH	BC
                           A  2060    ;  254	    BYTE	res1;
                           A  2061    ;  255		BYTE	read = 0x00;
                           A  2062    .LINE 255
                           A  2063    
000594 DD36FF00            A  2064    	LD	(IX+%FFFFFFFF),%0
                           A  2065    ;  256	    WORD	readAttempts, i;
                           A  2066    ;  257		//
                           A  2067    ;  258	    // Set token to none
                           A  2068    ;  259		//
                           A  2069    ;  260	    *token = 0xFF;
                           A  2070    .LINE 260
                           A  2071    
000598 DD270F              A  2072    	LD	HL,(IX+%F)
00059B 36FF                A  2073    	LD	(HL),%FF
                           A  2074    ;  261		//
                           A  2075    ;  262	    // Assert chip select
                           A  2076    ;  263		//
                           A  2077    ;  264	    spi_transfer(0xFF);
                           A  2078    .LINE 264
                           A  2079    
00059D 01FF0000            A  2080    	LD	BC,255
0005A1 C5                  A  2081    	PUSH	BC
0005A2 CD 00 00 00         A  2082    	CALL	_spi_transfer
0005A6 C1                  A  2083    	POP	BC
                           A  2084    ;  265	    SD_CS_enable();
                           A  2085    .LINE 265
                           A  2086    
0005A7 CD 00 00 00         A  2087    	CALL	_SD_CS_enable
                           A  2088    ;  266	    spi_transfer(0xFF);
                           A  2089    .LINE 266
                           A  2090    
0005AB 01FF0000            A  2091    	LD	BC,255
0005AF C5                  A  2092    	PUSH	BC
0005B0 CD 00 00 00         A  2093    	CALL	_spi_transfer
0005B4 C1                  A  2094    	POP	BC
                           A  2095    ;  267		//
                           A  2096    ;  268	    // Send CMD17
                           A  2097    ;  269		//
                           A  2098    ;  270	    SD_command(CMD17, addr, CMD17_CRC);
                           A  2099    .LINE 270
                           A  2100    
0005B5 01000000            A  2101    	LD	BC,0
0005B9 C5                  A  2102    	PUSH	BC
0005BA DD4E09              A  2103    	LD	C,(IX+%9)
0005BD 0600                A  2104    	LD	B,%0
0005BF C5                  A  2105    	PUSH	BC
0005C0 DD0706              A  2106    	LD	BC,(IX+%6)
0005C3 C5                  A  2107    	PUSH	BC
0005C4 01110000            A  2108    	LD	BC,17
0005C8 C5                  A  2109    	PUSH	BC
0005C9 CD 00 00 00         A  2110    	CALL	_SD_command
0005CD C1                  A  2111    	POP	BC
0005CE C1                  A  2112    	POP	BC
0005CF C1                  A  2113    	POP	BC
0005D0 C1                  A  2114    	POP	BC
                           A  2115    ;  271		//
                           A  2116    ;  272	    // Read R1
                           A  2117    ;  273		//
                           A  2118    ;  274	    res1 = SD_readRes1();
                           A  2119    .LINE 274
                           A  2120    
0005D1 CD 65 00 00         A  2121    	CALL	_SD_readRes1
0005D5 DD77FA              A  2122    	LD	(IX+%FFFFFFFA),A
                           A  2123    ;  275		//
                           A  2124    ;  276	    // If response received from card
                           A  2125    ;  277		//
                           A  2126    ;  278	    if(res1 != 0xFF) {
                           A  2127    .LINE 278
                           A  2128    
0005D8 FEFF                A  2129    	CP	A,%FF
0005DA CA 68 06 00         A  2130    	JR	Z,L_69
                           A  2131    ;  279			//
                           A  2132    ;  280	        // Wait for a response token (t
                           A  2133    ;  281			//
                           A  2134    ;  282	        readAttempts = 0;
                           A  2135    .LINE 282
                           A  2136    
0005DE DD36FB00            A  2137    	LD	(IX+%FFFFFFFB),%0
0005E2 DD36FC00            A  2138    	LD	(IX+%FFFFFFFC),%0
                           A  2139    ;  283	        while(++readAttempts != SD_MAX_
                           A  2140    .LINE 283
                           A  2141    
0005E6 18 11               A  2142    	JR	L_57
0005E8                     A  2143    L_58:
                           A  2144    ;  284	            if((read = spi_transfer(0xF
                           A  2145    .LINE 284
                           A  2146    
0005E8 01FF0000            A  2147    	LD	BC,255
0005EC C5                  A  2148    	PUSH	BC
0005ED CD 00 00 00         A  2149    	CALL	_spi_transfer
0005F1 C1                  A  2150    	POP	BC
0005F2 DD77FF              A  2151    	LD	(IX+%FFFFFFFF),A
0005F5 FEFF                A  2152    	CP	A,%FF
0005F7 20 17               A  2153    	JR	NZ,L_66
                           A  2154    ;  285					break;
0005F9                     A  2155    L_57:
                           A  2156    .LINE 285
                           A  2157    
0005F9 DD27FB              A  2158    	LD	HL,(IX+%FFFFFFFB)
0005FC 23                  A  2159    	INC	HL
0005FD DD75FB              A  2160    	LD	(IX+%FFFFFFFB),L
000600 DD74FC              A  2161    	LD	(IX+%FFFFFFFC),H
000603 49011B06            A  2162    	LD.LIS	BC,1563
000607 DD27FB              A  2163    	LD	HL,(IX+%FFFFFFFB)
00060A B7                  A  2164    	OR	A,A
00060B 40ED42              A  2165    	SBC.SIS	HL,BC
00060E 20 D8               A  2166    	JR	NZ,L_58
000610                     A  2167    L_66:
                           A  2168    ;  286			//
                           A  2169    ;  287	        // If response token is 0xFE
                           A  2170    ;  288			//
                           A  2171    ;  289	        if(read == SD_START_TOKEN) {
                           A  2172    .LINE 289
                           A  2173    
000610 DD7EFF              A  2174    	LD	A,(IX+%FFFFFFFF)
000613 FEFE                A  2175    	CP	A,%FE
000615 20 4A               A  2176    	JR	NZ,L_67
                           A  2177    ;  290				//
                           A  2178    ;  291	            // Read 512 byte block
                           A  2179    ;  292				//
                           A  2180    ;  293	            for(i = 0; i < SD_BLOCK_LEN
                           A  2181    .LINE 293
                           A  2182    
000617 DD36FD00            A  2183    	LD	(IX+%FFFFFFFD),%0
00061B DD36FE00            A  2184    	LD	(IX+%FFFFFFFE),%0
00061F 18 1F               A  2185    	JR	L_63
000621                     A  2186    L_61:
                           A  2187    ;  294					*buf++ = spi_transfer(0
                           A  2188    .LINE 294
                           A  2189    
000621 01FF0000            A  2190    	LD	BC,255
000625 C5                  A  2191    	PUSH	BC
000626 CD 00 00 00         A  2192    	CALL	_spi_transfer
00062A C1                  A  2193    	POP	BC
00062B DD270C              A  2194    	LD	HL,(IX+%C)
00062E 77                  A  2195    	LD	(HL),A
00062F DD070C              A  2196    	LD	BC,(IX+%C)
000632 03                  A  2197    	INC	BC
000633 DD0F0C              A  2198    	LD	(IX+%C),BC
000636 DD27FD              A  2199    	LD	HL,(IX+%FFFFFFFD)
000639 23                  A  2200    	INC	HL
00063A DD75FD              A  2201    	LD	(IX+%FFFFFFFD),L
00063D DD74FE              A  2202    	LD	(IX+%FFFFFFFE),H
                           A  2203    ;  295				}
000640                     A  2204    L_63:
                           A  2205    .LINE 295
                           A  2206    
000640 49010002            A  2207    	LD.LIS	BC,512
000644 DD27FD              A  2208    	LD	HL,(IX+%FFFFFFFD)
000647 B7                  A  2209    	OR	A,A
000648 40ED42              A  2210    	SBC.SIS	HL,BC
00064B 38 D4               A  2211    	JR	C,L_61
                           A  2212    ;  296				//
                           A  2213    ;  297	            // Read 16-bit CRC
                           A  2214    ;  298				//
                           A  2215    ;  299	            spi_transfer(0xFF);
                           A  2216    .LINE 299
                           A  2217    
00064D 01FF0000            A  2218    	LD	BC,255
000651 C5                  A  2219    	PUSH	BC
000652 CD 00 00 00         A  2220    	CALL	_spi_transfer
000656 C1                  A  2221    	POP	BC
                           A  2222    ;  300	            spi_transfer(0xFF);
                           A  2223    .LINE 300
                           A  2224    
000657 01FF0000            A  2225    	LD	BC,255
00065B C5                  A  2226    	PUSH	BC
00065C CD 00 00 00         A  2227    	CALL	_spi_transfer
000660 C1                  A  2228    	POP	BC
                           A  2229    ;  301	        }
000661                     A  2230    L_67:
                           A  2231    .LINE 301
                           A  2232    
                           A  2233    ;  302			//
                           A  2234    ;  303	        // Set token to card response
                           A  2235    ;  304			//
                           A  2236    ;  305	        *token = read;
                           A  2237    .LINE 305
                           A  2238    
000661 DD270F              A  2239    	LD	HL,(IX+%F)
000664 DD7EFF              A  2240    	LD	A,(IX+%FFFFFFFF)
000667 77                  A  2241    	LD	(HL),A
                           A  2242    ;  306	    }
000668                     A  2243    L_69:
                           A  2244    .LINE 306
                           A  2245    
                           A  2246    ;  307		//
                           A  2247    ;  308	    // Deassert chip select
                           A  2248    ;  309		//
                           A  2249    ;  310	    spi_transfer(0xFF);
                           A  2250    .LINE 310
                           A  2251    
000668 01FF0000            A  2252    	LD	BC,255
00066C C5                  A  2253    	PUSH	BC
00066D CD 00 00 00         A  2254    	CALL	_spi_transfer
000671 C1                  A  2255    	POP	BC
                           A  2256    ;  311	    SD_CS_disable();
                           A  2257    .LINE 311
                           A  2258    
000672 CD 00 00 00         A  2259    	CALL	_SD_CS_disable
                           A  2260    ;  312	    spi_transfer(0xFF);
                           A  2261    .LINE 312
                           A  2262    
000676 01FF0000            A  2263    	LD	BC,255
00067A C5                  A  2264    	PUSH	BC
00067B CD 00 00 00         A  2265    	CALL	_spi_transfer
00067F C1                  A  2266    	POP	BC
                           A  2267    ;  313	
                           A  2268    ;  314	    return res1;
                           A  2269    .LINE 314
                           A  2270    
000680 DD7EFA              A  2271    	LD	A,(IX+%FFFFFFFA)
                           A  2272    ;  315	}
                           A  2273    .LINE 315
                           A  2274    
000683 DDF9                A  2275    	LD	SP,IX
000685 DDE1                A  2276    	POP	IX
000687 C9                  A  2277    	RET	
                           A  2278    
                           A  2279    
                           A  2280    ;**************************** _SD_readSingleBlo
                           A  2281    ;Name                         Addr/Register   S
                           A  2282    ;_SD_CS_disable                      IMPORT  --
                           A  2283    ;_SD_readRes1                        IMPORT  --
                           A  2284    ;_SD_command                         IMPORT  --
                           A  2285    ;_SD_CS_enable                       IMPORT  --
                           A  2286    ;_spi_transfer                       IMPORT  --
                           A  2287    ;res1                                  IX-6    
                           A  2288    ;readAttempts                          IX-5    
                           A  2289    ;i                                     IX-3    
                           A  2290    ;read                                  IX-1    
                           A  2291    ;token                                IX+15    
                           A  2292    ;buf                                  IX+12    
                           A  2293    ;addr                                  IX+6    
                           A  2294    
                           A  2295    
                           A  2296    ; Stack Frame Size: 24 (bytes)
                           A  2297    ;       Spill Code: 0 (instruction)
                           A  2298    
                           A  2299    
                           A  2300    .ENDFUNC "SD_readSingleBlock",315,"_SD_readSing
                           A  2301    ;  316	
                           A  2302    ;  317	BYTE SD_init(void) {
000688                     A  2303    _SD_init:
                           A  2304    .DEFINE "_SD_init"
                           A  2305    
                           A  2306    .VALUE _SD_init
                           A  2307    
                           A  2308    .CLASS 2
                           A  2309    
                           A  2310    .TYPE 76
                           A  2311    
                           A  2312    .ENDEF
                           A  2313    
                           A  2314    .BEGFUNC "SD_init",317,"_SD_init"
                           A  2315    
                           A  2316    .LINE 317
                           A  2317    
                           A  2318    .DEFINE "cmdAttempts"
                           A  2319    
                           A  2320    .CLASS 65
                           A  2321    
                           A  2322    .VALUE -1
                           A  2323    
                           A  2324    .TYPE 12
                           A  2325    
                           A  2326    .ENDEF
                           A  2327    
                           A  2328    .DEFINE "res"
                           A  2329    
                           A  2330    .CLASS 65
                           A  2331    
                           A  2332    .VALUE -6
                           A  2333    
                           A  2334    .DIM 5
                           A  2335    
                           A  2336    .TYPE 108
                           A  2337    
                           A  2338    .ENDEF
                           A  2339    
000688 DDE5                A  2340    	PUSH	IX
00068A DD210000 00         A  2341    	LD	IX,0
00068F DD39                A  2342    	ADD	IX,SP
000691 C5                  A  2343    	PUSH	BC
000692 C5                  A  2344    	PUSH	BC
                           A  2345    ;  318		BYTE res[5], cmdAttempts = 0;
                           A  2346    .LINE 318
                           A  2347    
000693 DD36FF00            A  2348    	LD	(IX+%FFFFFFFF),%0
                           A  2349    ;  319		
                           A  2350    ;  320		SD_powerUpSeq();
                           A  2351    .LINE 320
                           A  2352    
000697 CD ED 02 00         A  2353    	CALL	_SD_powerUpSeq
                           A  2354    ;  321		//
                           A  2355    ;  322	    // Command card to idle
                           A  2356    ;  323		//
                           A  2357    ;  324	    while((res[0] = SD_goIdleState()) !
                           A  2358    .LINE 324
                           A  2359    
00069B 18 10               A  2360    	JR	L_73
00069D                     A  2361    L_74:
                           A  2362    ;  325	        cmdAttempts++;
                           A  2363    .LINE 325
                           A  2364    
00069D DD34FF              A  2365    	INC	(IX+%FFFFFFFF)
                           A  2366    ;  326	        if(cmdAttempts > 10) return SD_
                           A  2367    .LINE 326
                           A  2368    
0006A0 3E0A                A  2369    	LD	A,%A
0006A2 DDBEFF              A  2370    	CP	A,(IX+%FFFFFFFF)
0006A5 30 06               A  2371    	JR	NC,L_73
0006A7 3E01                A  2372    	LD	A,%1
0006A9 C3 47 07 00         A  2373    	JR	L_90
                           A  2374    ;  327	    }
0006AD                     A  2375    L_73:
                           A  2376    .LINE 327
                           A  2377    
0006AD CD 10 01 00         A  2378    	CALL	_SD_goIdleState
0006B1 DD77FA              A  2379    	LD	(IX+%FFFFFFFA),A
0006B4 B7ED62              A  2380    	UEXT	HL
0006B7 6F                  A  2381    	LD	L,A
0006B8 01010000            A  2382    	LD	BC,1
0006BC B7                  A  2383    	OR	A,A
0006BD ED42                A  2384    	SBC	HL,BC
0006BF 20 DC               A  2385    	JR	NZ,L_74
                           A  2386    ;  328		//
                           A  2387    ;  329	    // Send interface conditions
                           A  2388    ;  330		//
                           A  2389    ;  331	    SD_sendIfCond(res);
                           A  2390    .LINE 331
                           A  2391    
0006C1 ED65FA              A  2392    	PEA	IX+%FFFFFFFA
0006C4 CD 6D 01 00         A  2393    	CALL	_SD_sendIfCond
0006C8 C1                  A  2394    	POP	BC
                           A  2395    ;  332	    if(res[0] != 0x01) {
                           A  2396    .LINE 332
                           A  2397    
0006C9 DD7EFA              A  2398    	LD	A,(IX+%FFFFFFFA)
0006CC B7ED62              A  2399    	UEXT	HL
0006CF 6F                  A  2400    	LD	L,A
0006D0 01010000            A  2401    	LD	BC,1
0006D4 B7                  A  2402    	OR	A,A
0006D5 ED42                A  2403    	SBC	HL,BC
0006D7 28 04               A  2404    	JR	Z,L_78
                           A  2405    ;  333	        return SD_ERROR;
                           A  2406    .LINE 333
                           A  2407    
0006D9 3E01                A  2408    	LD	A,%1
0006DB 18 6A               A  2409    	JR	L_90
                           A  2410    ;  334	    }
0006DD                     A  2411    L_78:
                           A  2412    .LINE 334
                           A  2413    
                           A  2414    ;  335		//
                           A  2415    ;  336	    // Check echo pattern
                           A  2416    ;  337		//
                           A  2417    ;  338	    if(res[4] != 0xAA) {
                           A  2418    .LINE 338
                           A  2419    
0006DD ED22FE              A  2420    	LEA	HL,IX+%FFFFFFFE
0006E0 7E                  A  2421    	LD	A,(HL)
0006E1 B7ED62              A  2422    	UEXT	HL
0006E4 6F                  A  2423    	LD	L,A
0006E5 01AA0000            A  2424    	LD	BC,170
0006E9 B7                  A  2425    	OR	A,A
0006EA ED42                A  2426    	SBC	HL,BC
0006EC 28 04               A  2427    	JR	Z,L_79
                           A  2428    ;  339	        return SD_ERROR;
                           A  2429    .LINE 339
                           A  2430    
0006EE 3E01                A  2431    	LD	A,%1
0006F0 18 55               A  2432    	JR	L_90
                           A  2433    ;  340	    }
0006F2                     A  2434    L_79:
                           A  2435    .LINE 340
                           A  2436    
                           A  2437    ;  341		//
                           A  2438    ;  342	    // Attempt to initialize card
                           A  2439    ;  343		//
                           A  2440    ;  344	    cmdAttempts = 0;
                           A  2441    .LINE 344
                           A  2442    
0006F2 DD36FF00            A  2443    	LD	(IX+%FFFFFFFF),%0
                           A  2444    ;  345	    do {
0006F6                     A  2445    L_85:
                           A  2446    .LINE 345
                           A  2447    
                           A  2448    ;  346	        if(cmdAttempts > 100) return SD
                           A  2449    .LINE 346
                           A  2450    
0006F6 3E64                A  2451    	LD	A,%64
0006F8 DDBEFF              A  2452    	CP	A,(IX+%FFFFFFFF)
0006FB 30 04               A  2453    	JR	NC,L_81
0006FD 3E01                A  2454    	LD	A,%1
0006FF 18 46               A  2455    	JR	L_90
000701                     A  2456    L_81:
                           A  2457    ;  347			//
                           A  2458    ;  348	        // Send app cmd
                           A  2459    ;  349			//
                           A  2460    ;  350	        res[0] = SD_sendApp();
                           A  2461    .LINE 350
                           A  2462    
000701 CD D0 01 00         A  2463    	CALL	_SD_sendApp
000705 DD77FA              A  2464    	LD	(IX+%FFFFFFFA),A
                           A  2465    ;  351			//
                           A  2466    ;  352	        // If no error in response
                           A  2467    ;  353			//
                           A  2468    ;  354	        if(res[0] < 2) {
                           A  2469    .LINE 354
                           A  2470    
000708 B7ED62              A  2471    	UEXT	HL
00070B 6F                  A  2472    	LD	L,A
00070C 01020000            A  2473    	LD	BC,2
000710 B7                  A  2474    	OR	A,A
000711 ED42                A  2475    	SBC	HL,BC
000713 F2 1E 07 00         A  2476    	JP	P,L_83
                           A  2477    ;  355	            res[0] = SD_sendOpCond();
                           A  2478    .LINE 355
                           A  2479    
000717 CD 2D 02 00         A  2480    	CALL	_SD_sendOpCond
00071B DD77FA              A  2481    	LD	(IX+%FFFFFFFA),A
                           A  2482    ;  356	        }
00071E                     A  2483    L_83:
                           A  2484    .LINE 356
                           A  2485    
                           A  2486    ;  357			//
                           A  2487    ;  358	        // Wait
                           A  2488    ;  359			//
                           A  2489    ;  360	        delayms(10);
                           A  2490    .LINE 360
                           A  2491    
00071E 010A0000            A  2492    	LD	BC,10
000722 C5                  A  2493    	PUSH	BC
000723 CD 00 00 00         A  2494    	CALL	_delayms
000727 C1                  A  2495    	POP	BC
                           A  2496    ;  361	        cmdAttempts++;
                           A  2497    .LINE 361
                           A  2498    
000728 DD34FF              A  2499    	INC	(IX+%FFFFFFFF)
                           A  2500    ;  362	    }
                           A  2501    ;  363	    while(res[0] != SD_READY);
                           A  2502    .LINE 363
                           A  2503    
00072B DD7EFA              A  2504    	LD	A,(IX+%FFFFFFFA)
00072E B7                  A  2505    	OR	A,A
00072F 20 C5               A  2506    	JR	NZ,L_85
                           A  2507    ;  364		//
                           A  2508    ;  365	    // Read OCR
                           A  2509    ;  366		//
                           A  2510    ;  367	    SD_readOCR(res);
                           A  2511    .LINE 367
                           A  2512    
000731 ED65FA              A  2513    	PEA	IX+%FFFFFFFA
000734 CD 92 02 00         A  2514    	CALL	_SD_readOCR
000738 C1                  A  2515    	POP	BC
                           A  2516    ;  368		//
                           A  2517    ;  369	    // Check card is ready
                           A  2518    ;  370		//
                           A  2519    ;  371	    if(!(res[1] & 0x80)) return SD_ERRO
                           A  2520    .LINE 371
                           A  2521    
000739 ED22FA              A  2522    	LEA	HL,IX+%FFFFFFFA
00073C 23                  A  2523    	INC	HL
00073D 7E                  A  2524    	LD	A,(HL)
00073E E680                A  2525    	AND	A,%80
000740 20 04               A  2526    	JR	NZ,L_89
000742 3E01                A  2527    	LD	A,%1
000744 18 01               A  2528    	JR	L_90
000746                     A  2529    L_89:
                           A  2530    ;  372	
                           A  2531    ;  373	    return SD_SUCCESS;	
                           A  2532    .LINE 373
                           A  2533    
000746 AF                  A  2534    	XOR	A,A
                           A  2535    ;  374	}
000747                     A  2536    L_90:
                           A  2537    .LINE 374
                           A  2538    
000747 DDF9                A  2539    	LD	SP,IX
000749 DDE1                A  2540    	POP	IX
00074B C9                  A  2541    	RET	
                           A  2542    
                           A  2543    
                           A  2544    ;**************************** _SD_init ********
                           A  2545    ;Name                         Addr/Register   S
                           A  2546    ;_SD_readOCR                         IMPORT  --
                           A  2547    ;_delayms                            IMPORT  --
                           A  2548    ;_SD_sendOpCond                      IMPORT  --
                           A  2549    ;_SD_sendApp                         IMPORT  --
                           A  2550    ;_SD_sendIfCond                      IMPORT  --
                           A  2551    ;_SD_goIdleState                     IMPORT  --
                           A  2552    ;_SD_powerUpSeq                      IMPORT  --
                           A  2553    ;res                                   IX-6    
                           A  2554    ;cmdAttempts                           IX-1    
                           A  2555    
                           A  2556    
                           A  2557    ; Stack Frame Size: 12 (bytes)
                           A  2558    ;       Spill Code: 0 (instruction)
                           A  2559    
                           A  2560    
                           A  2561    .ENDFUNC "SD_init",374,"_SD_init"
                           A  2562    	XREF _delayms:ROM
                           A  2563    	XREF _SD_CS_disable:ROM
                           A  2564    	XREF _SD_CS_enable:ROM
                           A  2565    	XREF _spi_transfer:ROM
                           A  2566    	XREF __stoiu:ROM
                           A  2567    	XREF __ladd_b:ROM
                           A  2568    	XDEF _SD_init
                           A  2569    	XDEF _SD_readSingleBlock
                           A  2570    	XDEF _SD_writeSingleBlock
                           A  2571    	XDEF _SD_writeBlocks
                           A  2572    	XDEF _SD_readBlocks
                           A  2573    	XDEF _SD_powerUpSeq
                           A  2574    	XDEF _SD_readOCR
                           A  2575    	XDEF _SD_sendOpCond
                           A  2576    	XDEF _SD_sendApp
                           A  2577    	XDEF _SD_sendIfCond
                           A  2578    	XDEF _SD_goIdleState
                           A  2579    	XDEF _SD_readRes7
                           A  2580    	XDEF _SD_readRes1
                           A  2581    	XDEF _SD_command
                           A  2582    	END


Errors: 0
Warnings: 0
Lines Assembled: 2583

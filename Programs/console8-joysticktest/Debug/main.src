; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optsize -noreduceopt -nopadbranch -debug
; -peephole -globalopt -localcse -const=ROM 
	FILE	"..\main.c"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "fmt_type",19
.DEFINE "status"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flags"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "size"
.VALUE 2
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "chr"
.VALUE 3
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "type"
.VALUE 4
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "field_width"
.VALUE 5
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "precision"
.VALUE 6
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "set_begin"
.VALUE 7
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "set_end"
.VALUE 10
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "pad_whole"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_pre_fract"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_post_fract"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_at"
.VALUE 16
.CLASS 8
.TYPE 34
.ENDEF
.ENDREC "fmt_type"
.BEGREC "flt_info",12
.DEFINE "flags"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "digits"
.VALUE 2
.CLASS 8
.DIM 10
.TYPE 108
.ENDEF
.ENDREC "flt_info"
.BEGREC "NONAME0",51
.DEFINE "clock"
.VALUE 0
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "vpd_protocol_flags"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keyascii"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keymods"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "cursorX"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "cursorY"
.VALUE 8
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrchar"
.VALUE 9
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrpixel"
.VALUE 10
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "audioChannel"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "audioSuccess"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrwidth"
.VALUE 15
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "scrheight"
.VALUE 17
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "scrcols"
.VALUE 19
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrrows"
.VALUE 20
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrcolours"
.VALUE 21
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrpixelIndex"
.VALUE 22
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keycode"
.VALUE 23
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keydown"
.VALUE 24
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keycount"
.VALUE 25
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "rtc"
.VALUE 26
.CLASS 8
.DIM 6
.TYPE 108
.ENDEF
.DEFINE "rtc_spare"
.VALUE 32
.CLASS 8
.DIM 2
.TYPE 108
.ENDEF
.DEFINE "keydelay"
.VALUE 34
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "keyrate"
.VALUE 36
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "keyled"
.VALUE 38
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrmode"
.VALUE 39
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "rtc_enable"
.VALUE 40
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "mouseX"
.VALUE 41
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "mouseY"
.VALUE 43
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "mouseButtons"
.VALUE 45
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "mouseWheel"
.VALUE 46
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "mouseXDelta"
.VALUE 47
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "mouseYDelta"
.VALUE 49
.CLASS 8
.TYPE 13
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",8
.DEFINE "baudRate"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "dataBits"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stopBits"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "parity"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flowcontrol"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "eir"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "NONAME1"
.BEGREC "NONAME2",15
.DEFINE "fs"
.VALUE 0
.CLASS 8
.TYPE 46
.ENDEF
.DEFINE "id"
.VALUE 3
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "attr"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stat"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "sclust"
.VALUE 7
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "objsize"
.VALUE 11
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME2"
.BEGREC "NONAME3",36
.DEFINE "obj"
.VALUE 0
.CLASS 8
.TAG "NONAME2"
.TYPE 8
.ENDEF
.DEFINE "flag"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "err"
.VALUE 16
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "fptr"
.VALUE 17
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "clust"
.VALUE 21
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "sect"
.VALUE 25
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "dir_sect"
.VALUE 29
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "dir_ptr"
.VALUE 33
.CLASS 8
.TYPE 46
.ENDEF
.ENDREC "NONAME3"
;    1	#include <stdio.h>
;    2	#include <ctype.h>
;    3	#include "mos-interface.h"
;    4	#include "vdp.h"
;    5	#include "agontimer.h"
;    6	#include <ez80f92.h>
;    7	
;    8	int main(int argc, char * argv[]) {
_main:
.DEFINE "_main"

.VALUE _main

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "main",8,"_main"

.LINE 8

.DEFINE "argc"

.CLASS 65

.VALUE 6

.TYPE 4

.ENDEF

.DEFINE "argv"

.CLASS 65

.VALUE 9

.TYPE 290

.ENDEF

.DEFINE "direction"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "fire"

.CLASS 65

.VALUE -2

.TYPE 12

.ENDEF

.DEFINE "sysvars"

.CLASS 65

.VALUE -41

.TAG "NONAME0"

.TYPE 40

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	LEA	HL,IX+%FFFFFFD7
	LD	SP,HL
;    9		uint8_t fire, direction;
;   10		sysvar_t* sysvars;
;   11		PC_DDR = 0xFF; // both joysticks
.LINE 11

	LD	A,%FF
	OUT0	(159),A
;   12		PD_DDR |= 0xF0; // both joysticks, leave non-joystick bits 0-3 as they are
.LINE 12

	IN0	A,(163)
	OR	A,%F0
	OUT0	(163),A
;   13	
;   14		sysvars = getsysvars();
.LINE 14

	CALL	_getsysvars
	LD	(IX+%FFFFFFD7),HL
;   15		vdp_cls();
.LINE 15

	CALL	_vdp_cls
;   16		printf("Console8 joystick test\r\n\r\n");
.LINE 16

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__0
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;   17	
;   18		while(1) {
L_51:
.LINE 18

;   19			fire = PD_DR;
.LINE 19

	IN0	A,(162)
	LD	(IX+%FFFFFFFE),A
;   20			direction = PC_DR;
.LINE 20

	IN0	A,(158)
	LD	(IX+%FFFFFFFF),A
;   21			vdp_cursorGoto(0, 2);
.LINE 21

	LD	BC,2
	PUSH	BC
	LD	BC,0
	PUSH	BC
	CALL	_vdp_cursorGoto
	POP	BC
	POP	BC
;   22			printf("  PORT1     PORT2\r\n\r\n");
.LINE 22

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__1
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;   23			printf("   Up : %d    Up : %d\r\n", ((direction&0x02)?0:1), ((direction&0x01)?0:1));
.LINE 23

	LD	A,(IX+%FFFFFFFF)
	AND	A,%2
	JR	Z,L_2
	LD	BC,0
	LD	(IX+%FFFFFFFB),BC
	JR	L_3
L_2:
	LD	BC,1
	LD	(IX+%FFFFFFFB),BC
L_3:
	LD	A,(IX+%FFFFFFFF)
	AND	A,%1
	JR	Z,L_6
	LD	BC,0
	LD	(IX+%FFFFFFF8),BC
	JR	L_7
L_6:
	LD	BC,1
	LD	(IX+%FFFFFFF8),BC
L_7:
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__4
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,(IX+%FFFFFFFB)
	CALL	__itol
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
	LD	BC,L__5
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,(IX+%FFFFFFF8)
	CALL	__itol
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
	LD	BC,L__6
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;   24			printf(" Down : %d  Down : %d\r\n", ((direction&0x08)?0:1), ((direction&0x04)?0:1));
.LINE 24

	LD	A,(IX+%FFFFFFFF)
	AND	A,%8
	JR	Z,L_10
	LD	BC,0
	LD	(IX+%FFFFFFF5),BC
	JR	L_11
L_10:
	LD	BC,1
	LD	(IX+%FFFFFFF5),BC
L_11:
	LD	A,(IX+%FFFFFFFF)
	AND	A,%4
	JR	Z,L_14
	LD	BC,0
	LD	(IX+%FFFFFFF2),BC
	JR	L_15
L_14:
	LD	BC,1
	LD	(IX+%FFFFFFF2),BC
L_15:
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__9
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,(IX+%FFFFFFF5)
	CALL	__itol
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
	LD	BC,L__10
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,(IX+%FFFFFFF2)
	CALL	__itol
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
	LD	BC,L__11
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;   25			printf(" Left : %d  Left : %d\r\n", ((direction&0x20)?0:1), ((direction&0x10)?0:1));
.LINE 25

	LD	A,(IX+%FFFFFFFF)
	AND	A,%20
	JR	Z,L_18
	LD	BC,0
	LD	(IX+%FFFFFFEF),BC
	JR	L_19
L_18:
	LD	BC,1
	LD	(IX+%FFFFFFEF),BC
L_19:
	LD	A,(IX+%FFFFFFFF)
	AND	A,%10
	JR	Z,L_22
	LD	BC,0
	LD	(IX+%FFFFFFEC),BC
	JR	L_23
L_22:
	LD	BC,1
	LD	(IX+%FFFFFFEC),BC
L_23:
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__14
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,(IX+%FFFFFFEF)
	CALL	__itol
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
	LD	BC,L__15
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,(IX+%FFFFFFEC)
	CALL	__itol
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
	LD	BC,L__16
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;   26			printf("Right : %d Right : %d\r\n", ((direction&0x80)?0:1), ((direction&0x40)?0:1));
.LINE 26

	LD	A,(IX+%FFFFFFFF)
	AND	A,%80
	JR	Z,L_26
	LD	BC,0
	LD	(IX+%FFFFFFE9),BC
	JR	L_27
L_26:
	LD	BC,1
	LD	(IX+%FFFFFFE9),BC
L_27:
	LD	A,(IX+%FFFFFFFF)
	AND	A,%40
	JR	Z,L_30
	LD	BC,0
	LD	(IX+%FFFFFFE6),BC
	JR	L_31
L_30:
	LD	BC,1
	LD	(IX+%FFFFFFE6),BC
L_31:
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__19
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,(IX+%FFFFFFE9)
	CALL	__itol
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
	LD	BC,L__20
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,(IX+%FFFFFFE6)
	CALL	__itol
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
	LD	BC,L__21
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;   27			printf("BTN 1 : %d BTN 1 : %d\r\n", ((fire&0x20)?0:1), ((fire&0x10)?0:1));
.LINE 27

	LD	A,(IX+%FFFFFFFE)
	AND	A,%20
	JR	Z,L_34
	LD	BC,0
	LD	(IX+%FFFFFFE3),BC
	JR	L_35
L_34:
	LD	BC,1
	LD	(IX+%FFFFFFE3),BC
L_35:
	LD	A,(IX+%FFFFFFFE)
	AND	A,%10
	JR	Z,L_38
	LD	BC,0
	LD	(IX+%FFFFFFE0),BC
	JR	L_39
L_38:
	LD	BC,1
	LD	(IX+%FFFFFFE0),BC
L_39:
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__24
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,(IX+%FFFFFFE3)
	CALL	__itol
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
	LD	BC,L__25
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,(IX+%FFFFFFE0)
	CALL	__itol
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
	LD	BC,L__26
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;   28			printf("BTN 2 : %d BTN 2 : %d\r\n", ((fire&0x80)?0:1), ((fire&0x40)?0:1));
.LINE 28

	LD	A,(IX+%FFFFFFFE)
	AND	A,%80
	JR	Z,L_42
	LD	BC,0
	LD	(IX+%FFFFFFDD),BC
	JR	L_43
L_42:
	LD	BC,1
	LD	(IX+%FFFFFFDD),BC
L_43:
	LD	A,(IX+%FFFFFFFE)
	AND	A,%40
	JR	Z,L_46
	LD	BC,0
	LD	(IX+%FFFFFFDA),BC
	JR	L_47
L_46:
	LD	BC,1
	LD	(IX+%FFFFFFDA),BC
L_47:
	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__29
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,(IX+%FFFFFFDD)
	CALL	__itol
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
	LD	BC,L__30
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	BC,(IX+%FFFFFFDA)
	CALL	__itol
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_itoa
	POP	BC
	POP	BC
	LD	BC,L__31
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;   29	
;   30			printf("\r\nPress ESC key to quit");
.LINE 30

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__32
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;   31			if(sysvars->keyascii == 0x1B) break;
.LINE 31

	LD	IY,(IX+%FFFFFFD7)
	LD	A,(IY+%5)
	CP	A,%1B
	JR	Z,L_52
;   32			delayms(10);
.LINE 32

	LD	BC,10
	PUSH	BC
	CALL	_delayms
	POP	BC
	JR	L_51
;   33		}
L_52:
.LINE 33

;   34		printf("\r\n");
.LINE 34

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__34
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;   35		return 0;
.LINE 35

	OR	A,A
	SBC	HL,HL
;   36	}
.LINE 36

	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;_delayms                            IMPORT  -----   function
;__u_itoa                            IMPORT  -----   function
;_vdp_cursorGoto                     IMPORT  -----   function
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_vdp_cls                            IMPORT  -----   function
;_getsysvars                         IMPORT  -----   function
;sysvars                              IX-41      3   variable
;temp44                               IX-38      3   variable
;temp40                               IX-35      3   variable
;temp36                               IX-32      3   variable
;temp32                               IX-29      3   variable
;temp28                               IX-26      3   variable
;temp24                               IX-23      3   variable
;temp20                               IX-20      3   variable
;temp16                               IX-17      3   variable
;temp12                               IX-14      3   variable
;temp8                                IX-11      3   variable
;temp4                                 IX-8      3   variable
;temp0                                 IX-5      3   variable
;fire                                  IX-2      1   variable
;direction                             IX-1      1   variable
;argv                                  IX+9      3   parameter
;argc                                  IX+6      3   parameter


; Stack Frame Size: 53 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "main",36,"_main"
	SEGMENT STRSECT
L__0:
	DB	"Console8 joystick test"
	DB	13,10,13,10,0
L__1:
	DB	"  PORT1     PORT2"
	DB	13,10,13,10,0
L__4:
	DB	"   Up : "
	DB	0
L__5:
	DB	"    Up : "
	DB	0
L__6:
	DB	13,10,0
L__9:
	DB	" Down : "
	DB	0
L__10:
	DB	"  Down : "
	DB	0
L__11:
	DB	13,10,0
L__14:
	DB	" Left : "
	DB	0
L__15:
	DB	"  Left : "
	DB	0
L__16:
	DB	13,10,0
L__19:
	DB	"Right : "
	DB	0
L__20:
	DB	" Right : "
	DB	0
L__21:
	DB	13,10,0
L__24:
	DB	"BTN 1 : "
	DB	0
L__25:
	DB	" BTN 1 : "
	DB	0
L__26:
	DB	13,10,0
L__29:
	DB	"BTN 2 : "
	DB	0
L__30:
	DB	" BTN 2 : "
	DB	0
L__31:
	DB	13,10,0
L__32:
	DB	13,10
	DB	"Press ESC key to quit"
	DB	0
L__34:
	DB	13,10,0
	XREF _delayms:ROM
	XREF _vdp_cursorGoto:ROM
	XREF _vdp_cls:ROM
	XREF _getsysvars:ROM
	XREF __u_itoa:ROM
	XREF ___print_sendstring:ROM
	XREF ___print_xputch:ROM
	XREF ___print_uputch:ROM
	XREF __itol:ROM
	XDEF _main
	END

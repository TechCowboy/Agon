Zilog eZ80 Macro Assembler Version 4.3 (19073001) RELISTED01-Nov-23     16:11:41     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optsize -noreduceopt -nopadbranch
                           A     3    ; -peephole -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\main.c"
                           A     5    	.assume ADL=1
                           A     6    .DEBUG "C"
                           A     7    	SEGMENT CODE
                           A     8    .BEGREC "fmt_type",19
                           A     9    .DEFINE "status"
                           A    10    .VALUE 0
                           A    11    .CLASS 8
                           A    12    .TYPE 12
                           A    13    .ENDEF
                           A    14    .DEFINE "flags"
                           A    15    .VALUE 1
                           A    16    .CLASS 8
                           A    17    .TYPE 12
                           A    18    .ENDEF
                           A    19    .DEFINE "size"
                           A    20    .VALUE 2
                           A    21    .CLASS 8
                           A    22    .TYPE 2
                           A    23    .ENDEF
                           A    24    .DEFINE "chr"
                           A    25    .VALUE 3
                           A    26    .CLASS 8
                           A    27    .TYPE 2
                           A    28    .ENDEF
                           A    29    .DEFINE "type"
                           A    30    .VALUE 4
                           A    31    .CLASS 8
                           A    32    .TYPE 2
                           A    33    .ENDEF
                           A    34    .DEFINE "field_width"
                           A    35    .VALUE 5
                           A    36    .CLASS 8
                           A    37    .TYPE 2
                           A    38    .ENDEF
                           A    39    .DEFINE "precision"
                           A    40    .VALUE 6
                           A    41    .CLASS 8
                           A    42    .TYPE 2
                           A    43    .ENDEF
                           A    44    .DEFINE "set_begin"
                           A    45    .VALUE 7
                           A    46    .CLASS 8
                           A    47    .TYPE 34
                           A    48    .ENDEF
                           A    49    .DEFINE "set_end"
                           A    50    .VALUE 10
                           A    51    .CLASS 8
                           A    52    .TYPE 34
                           A    53    .ENDEF
                           A    54    .DEFINE "pad_whole"
                           A    55    .VALUE 13
                           A    56    .CLASS 8
                           A    57    .TYPE 12
                           A    58    .ENDEF
                           A    59    .DEFINE "pad_pre_fract"
                           A    60    .VALUE 14
                           A    61    .CLASS 8
                           A    62    .TYPE 12
                           A    63    .ENDEF
                           A    64    .DEFINE "pad_post_fract"
                           A    65    .VALUE 15
                           A    66    .CLASS 8
                           A    67    .TYPE 12
                           A    68    .ENDEF
                           A    69    .DEFINE "pad_at"
                           A    70    .VALUE 16
                           A    71    .CLASS 8
                           A    72    .TYPE 34
                           A    73    .ENDEF
                           A    74    .ENDREC "fmt_type"
                           A    75    .BEGREC "flt_info",12
                           A    76    .DEFINE "flags"
                           A    77    .VALUE 0
                           A    78    .CLASS 8
                           A    79    .TYPE 12
                           A    80    .ENDEF
                           A    81    .DEFINE "exp"
                           A    82    .VALUE 1
                           A    83    .CLASS 8
                           A    84    .TYPE 2
                           A    85    .ENDEF
                           A    86    .DEFINE "digits"
                           A    87    .VALUE 2
                           A    88    .CLASS 8
                           A    89    .DIM 10
                           A    90    .TYPE 108
                           A    91    .ENDEF
                           A    92    .ENDREC "flt_info"
                           A    93    .BEGREC "NONAME0",51
                           A    94    .DEFINE "clock"
                           A    95    .VALUE 0
                           A    96    .CLASS 8
                           A    97    .TYPE 15
                           A    98    .ENDEF
                           A    99    .DEFINE "vpd_protocol_flags"
                           A   100    .VALUE 4
                           A   101    .CLASS 8
                           A   102    .TYPE 12
                           A   103    .ENDEF
                           A   104    .DEFINE "keyascii"
                           A   105    .VALUE 5
                           A   106    .CLASS 8
                           A   107    .TYPE 12
                           A   108    .ENDEF
                           A   109    .DEFINE "keymods"
                           A   110    .VALUE 6
                           A   111    .CLASS 8
                           A   112    .TYPE 12
                           A   113    .ENDEF
                           A   114    .DEFINE "cursorX"
                           A   115    .VALUE 7
                           A   116    .CLASS 8
                           A   117    .TYPE 12
                           A   118    .ENDEF
                           A   119    .DEFINE "cursorY"
                           A   120    .VALUE 8
                           A   121    .CLASS 8
                           A   122    .TYPE 12
                           A   123    .ENDEF
                           A   124    .DEFINE "scrchar"
                           A   125    .VALUE 9
                           A   126    .CLASS 8
                           A   127    .TYPE 12
                           A   128    .ENDEF
                           A   129    .DEFINE "scrpixel"
                           A   130    .VALUE 10
                           A   131    .CLASS 8
                           A   132    .TYPE 14
                           A   133    .ENDEF
                           A   134    .DEFINE "audioChannel"
                           A   135    .VALUE 13
                           A   136    .CLASS 8
                           A   137    .TYPE 12
                           A   138    .ENDEF
                           A   139    .DEFINE "audioSuccess"
                           A   140    .VALUE 14
                           A   141    .CLASS 8
                           A   142    .TYPE 12
                           A   143    .ENDEF
                           A   144    .DEFINE "scrwidth"
                           A   145    .VALUE 15
                           A   146    .CLASS 8
                           A   147    .TYPE 13
                           A   148    .ENDEF
                           A   149    .DEFINE "scrheight"
                           A   150    .VALUE 17
                           A   151    .CLASS 8
                           A   152    .TYPE 13
                           A   153    .ENDEF
                           A   154    .DEFINE "scrcols"
                           A   155    .VALUE 19
                           A   156    .CLASS 8
                           A   157    .TYPE 12
                           A   158    .ENDEF
                           A   159    .DEFINE "scrrows"
                           A   160    .VALUE 20
                           A   161    .CLASS 8
                           A   162    .TYPE 12
                           A   163    .ENDEF
                           A   164    .DEFINE "scrcolours"
                           A   165    .VALUE 21
                           A   166    .CLASS 8
                           A   167    .TYPE 12
                           A   168    .ENDEF
                           A   169    .DEFINE "scrpixelIndex"
                           A   170    .VALUE 22
                           A   171    .CLASS 8
                           A   172    .TYPE 12
                           A   173    .ENDEF
                           A   174    .DEFINE "keycode"
                           A   175    .VALUE 23
                           A   176    .CLASS 8
                           A   177    .TYPE 12
                           A   178    .ENDEF
                           A   179    .DEFINE "keydown"
                           A   180    .VALUE 24
                           A   181    .CLASS 8
                           A   182    .TYPE 12
                           A   183    .ENDEF
                           A   184    .DEFINE "keycount"
                           A   185    .VALUE 25
                           A   186    .CLASS 8
                           A   187    .TYPE 12
                           A   188    .ENDEF
                           A   189    .DEFINE "rtc"
                           A   190    .VALUE 26
                           A   191    .CLASS 8
                           A   192    .DIM 6
                           A   193    .TYPE 108
                           A   194    .ENDEF
                           A   195    .DEFINE "rtc_spare"
                           A   196    .VALUE 32
                           A   197    .CLASS 8
                           A   198    .DIM 2
                           A   199    .TYPE 108
                           A   200    .ENDEF
                           A   201    .DEFINE "keydelay"
                           A   202    .VALUE 34
                           A   203    .CLASS 8
                           A   204    .TYPE 13
                           A   205    .ENDEF
                           A   206    .DEFINE "keyrate"
                           A   207    .VALUE 36
                           A   208    .CLASS 8
                           A   209    .TYPE 13
                           A   210    .ENDEF
                           A   211    .DEFINE "keyled"
                           A   212    .VALUE 38
                           A   213    .CLASS 8
                           A   214    .TYPE 12
                           A   215    .ENDEF
                           A   216    .DEFINE "scrmode"
                           A   217    .VALUE 39
                           A   218    .CLASS 8
                           A   219    .TYPE 12
                           A   220    .ENDEF
                           A   221    .DEFINE "rtc_enable"
                           A   222    .VALUE 40
                           A   223    .CLASS 8
                           A   224    .TYPE 12
                           A   225    .ENDEF
                           A   226    .DEFINE "mouseX"
                           A   227    .VALUE 41
                           A   228    .CLASS 8
                           A   229    .TYPE 13
                           A   230    .ENDEF
                           A   231    .DEFINE "mouseY"
                           A   232    .VALUE 43
                           A   233    .CLASS 8
                           A   234    .TYPE 13
                           A   235    .ENDEF
                           A   236    .DEFINE "mouseButtons"
                           A   237    .VALUE 45
                           A   238    .CLASS 8
                           A   239    .TYPE 12
                           A   240    .ENDEF
                           A   241    .DEFINE "mouseWheel"
                           A   242    .VALUE 46
                           A   243    .CLASS 8
                           A   244    .TYPE 12
                           A   245    .ENDEF
                           A   246    .DEFINE "mouseXDelta"
                           A   247    .VALUE 47
                           A   248    .CLASS 8
                           A   249    .TYPE 13
                           A   250    .ENDEF
                           A   251    .DEFINE "mouseYDelta"
                           A   252    .VALUE 49
                           A   253    .CLASS 8
                           A   254    .TYPE 13
                           A   255    .ENDEF
                           A   256    .ENDREC "NONAME0"
                           A   257    .BEGREC "NONAME1",8
                           A   258    .DEFINE "baudRate"
                           A   259    .VALUE 0
                           A   260    .CLASS 8
                           A   261    .TYPE 4
                           A   262    .ENDEF
                           A   263    .DEFINE "dataBits"
                           A   264    .VALUE 3
                           A   265    .CLASS 8
                           A   266    .TYPE 12
                           A   267    .ENDEF
                           A   268    .DEFINE "stopBits"
                           A   269    .VALUE 4
                           A   270    .CLASS 8
                           A   271    .TYPE 12
                           A   272    .ENDEF
                           A   273    .DEFINE "parity"
                           A   274    .VALUE 5
                           A   275    .CLASS 8
                           A   276    .TYPE 12
                           A   277    .ENDEF
                           A   278    .DEFINE "flowcontrol"
                           A   279    .VALUE 6
                           A   280    .CLASS 8
                           A   281    .TYPE 12
                           A   282    .ENDEF
                           A   283    .DEFINE "eir"
                           A   284    .VALUE 7
                           A   285    .CLASS 8
                           A   286    .TYPE 12
                           A   287    .ENDEF
                           A   288    .ENDREC "NONAME1"
                           A   289    .BEGREC "NONAME2",15
                           A   290    .DEFINE "fs"
                           A   291    .VALUE 0
                           A   292    .CLASS 8
                           A   293    .TYPE 46
                           A   294    .ENDEF
                           A   295    .DEFINE "id"
                           A   296    .VALUE 3
                           A   297    .CLASS 8
                           A   298    .TYPE 13
                           A   299    .ENDEF
                           A   300    .DEFINE "attr"
                           A   301    .VALUE 5
                           A   302    .CLASS 8
                           A   303    .TYPE 12
                           A   304    .ENDEF
                           A   305    .DEFINE "stat"
                           A   306    .VALUE 6
                           A   307    .CLASS 8
                           A   308    .TYPE 12
                           A   309    .ENDEF
                           A   310    .DEFINE "sclust"
                           A   311    .VALUE 7
                           A   312    .CLASS 8
                           A   313    .TYPE 15
                           A   314    .ENDEF
                           A   315    .DEFINE "objsize"
                           A   316    .VALUE 11
                           A   317    .CLASS 8
                           A   318    .TYPE 15
                           A   319    .ENDEF
                           A   320    .ENDREC "NONAME2"
                           A   321    .BEGREC "NONAME3",36
                           A   322    .DEFINE "obj"
                           A   323    .VALUE 0
                           A   324    .CLASS 8
                           A   325    .TAG "NONAME2"
                           A   326    .TYPE 8
                           A   327    .ENDEF
                           A   328    .DEFINE "flag"
                           A   329    .VALUE 15
                           A   330    .CLASS 8
                           A   331    .TYPE 12
                           A   332    .ENDEF
                           A   333    .DEFINE "err"
                           A   334    .VALUE 16
                           A   335    .CLASS 8
                           A   336    .TYPE 12
                           A   337    .ENDEF
                           A   338    .DEFINE "fptr"
                           A   339    .VALUE 17
                           A   340    .CLASS 8
                           A   341    .TYPE 15
                           A   342    .ENDEF
                           A   343    .DEFINE "clust"
                           A   344    .VALUE 21
                           A   345    .CLASS 8
                           A   346    .TYPE 15
                           A   347    .ENDEF
                           A   348    .DEFINE "sect"
                           A   349    .VALUE 25
                           A   350    .CLASS 8
                           A   351    .TYPE 15
                           A   352    .ENDEF
                           A   353    .DEFINE "dir_sect"
                           A   354    .VALUE 29
                           A   355    .CLASS 8
                           A   356    .TYPE 15
                           A   357    .ENDEF
                           A   358    .DEFINE "dir_ptr"
                           A   359    .VALUE 33
                           A   360    .CLASS 8
                           A   361    .TYPE 46
                           A   362    .ENDEF
                           A   363    .ENDREC "NONAME3"
                           A   364    ;    1	#include <stdio.h>
                           A   365    ;    2	#include <ctype.h>
                           A   366    ;    3	#include "mos-interface.h"
                           A   367    ;    4	#include "vdp.h"
                           A   368    ;    5	#include "agontimer.h"
                           A   369    ;    6	
                           A   370    ;    7	void echoVDP(uint8_t value) {
0400E5                     A   371    _echoVDP:
                           A   372    .DEFINE "_echoVDP"
                           A   373    
                           A   374    .VALUE _echoVDP
                           A   375    
                           A   376    .CLASS 2
                           A   377    
                           A   378    .TYPE 65
                           A   379    
                           A   380    .ENDEF
                           A   381    
                           A   382    .BEGFUNC "echoVDP",7,"_echoVDP"
                           A   383    
                           A   384    .LINE 7
                           A   385    
                           A   386    .DEFINE "value"
                           A   387    
                           A   388    .CLASS 65
                           A   389    
                           A   390    .VALUE 6
                           A   391    
                           A   392    .TYPE 12
                           A   393    
                           A   394    .ENDEF
                           A   395    
0400E5 DDE5                A   396    	PUSH	IX
0400E7 DD210000 00         A   397    	LD	IX,0
0400EC DD39                A   398    	ADD	IX,SP
                           A   399    ;    8		putch(23);
                           A   400    .LINE 8
                           A   401    
0400EE 01170000            A   402    	LD	BC,23
0400F2 C5                  A   403    	PUSH	BC
0400F3 CD 87 0D 04         A   404    	CALL	_putch
0400F7 C1                  A   405    	POP	BC
                           A   406    ;    9		putch(0);
                           A   407    .LINE 9
                           A   408    
0400F8 01000000            A   409    	LD	BC,0
0400FC C5                  A   410    	PUSH	BC
0400FD CD 87 0D 04         A   411    	CALL	_putch
040101 C1                  A   412    	POP	BC
                           A   413    ;   10		putch(0x80);
                           A   414    .LINE 10
                           A   415    
040102 01800000            A   416    	LD	BC,128
040106 C5                  A   417    	PUSH	BC
040107 CD 87 0D 04         A   418    	CALL	_putch
04010B C1                  A   419    	POP	BC
                           A   420    ;   11		putch(value);
                           A   421    .LINE 11
                           A   422    
04010C DD7E06              A   423    	LD	A,(IX+%6)
04010F B7ED62              A   424    	UEXT	HL
040112 6F                  A   425    	LD	L,A
040113 E5                  A   426    	PUSH	HL
040114 CD 87 0D 04         A   427    	CALL	_putch
040118 C1                  A   428    	POP	BC
                           A   429    ;   12		delayms(100);
                           A   430    .LINE 12
                           A   431    
040119 01640000            A   432    	LD	BC,100
04011D C5                  A   433    	PUSH	BC
04011E CD F3 10 04         A   434    	CALL	_delayms
040122 C1                  A   435    	POP	BC
                           A   436    ;   13	}
                           A   437    .LINE 13
                           A   438    
040123 DDF9                A   439    	LD	SP,IX
040125 DDE1                A   440    	POP	IX
040127 C9                  A   441    	RET	
                           A   442    
                           A   443    
                           A   444    ;**************************** _echoVDP ********
                           A   445    ;Name                         Addr/Register   S
                           A   446    ;_delayms                            IMPORT  --
                           A   447    ;_putch                              IMPORT  --
                           A   448    ;value                                 IX+6    
                           A   449    
                           A   450    
                           A   451    ; Stack Frame Size: 9 (bytes)
                           A   452    ;       Spill Code: 0 (instruction)
                           A   453    
                           A   454    
                           A   455    .ENDFUNC "echoVDP",13,"_echoVDP"
                           A   456    ;   14	
                           A   457    ;   15	uint8_t *getGPAddress(uint8_t *sysvarst
040128                     A   458    _getGPAddress:
                           A   459    .DEFINE "_getGPAddress"
                           A   460    
                           A   461    .VALUE _getGPAddress
                           A   462    
                           A   463    .CLASS 2
                           A   464    
                           A   465    .TYPE 332
                           A   466    
                           A   467    .ENDEF
                           A   468    
                           A   469    .BEGFUNC "getGPAddress",15,"_getGPAddress"
                           A   470    
                           A   471    .LINE 15
                           A   472    
                           A   473    .DEFINE "sysvarstart"
                           A   474    
                           A   475    .CLASS 65
                           A   476    
                           A   477    .VALUE 6
                           A   478    
                           A   479    .TYPE 44
                           A   480    
                           A   481    .ENDEF
                           A   482    
                           A   483    .DEFINE "pattern"
                           A   484    
                           A   485    .CLASS 65
                           A   486    
                           A   487    .VALUE -1
                           A   488    
                           A   489    .TYPE 12
                           A   490    
                           A   491    .ENDEF
                           A   492    
                           A   493    .DEFINE "ptr"
                           A   494    
                           A   495    .CLASS 65
                           A   496    
                           A   497    .VALUE -4
                           A   498    
                           A   499    .TYPE 44
                           A   500    
                           A   501    .ENDEF
                           A   502    
                           A   503    .DEFINE "found"
                           A   504    
                           A   505    .CLASS 65
                           A   506    
                           A   507    .VALUE -5
                           A   508    
                           A   509    .TYPE 12
                           A   510    
                           A   511    .ENDEF
                           A   512    
040128 DDE5                A   513    	PUSH	IX
04012A DD210000 00         A   514    	LD	IX,0
04012F DD39                A   515    	ADD	IX,SP
040131 C5                  A   516    	PUSH	BC
040132 3B                  A   517    	DEC	SP
040133 3B                  A   518    	DEC	SP
                           A   519    ;   16		bool found = false;
                           A   520    .LINE 16
                           A   521    
040134 DD36FB00            A   522    	LD	(IX+%FFFFFFFB),%0
                           A   523    ;   17		uint8_t *ptr, pattern;
                           A   524    ;   18		ptr = sysvarstart;
                           A   525    .LINE 18
                           A   526    
040138 DD0706              A   527    	LD	BC,(IX+%6)
04013B DD0FFC              A   528    	LD	(IX+%FFFFFFFC),BC
                           A   529    ;   19		pattern = 0xaa;
                           A   530    .LINE 19
                           A   531    
04013E DD36FFAA            A   532    	LD	(IX+%FFFFFFFF),%AA
                           A   533    ;   20	
                           A   534    ;   21		echoVDP(pattern);
                           A   535    .LINE 21
                           A   536    
040142 01AA0000            A   537    	LD	BC,170
040146 C5                  A   538    	PUSH	BC
040147 CD E5 00 04         A   539    	CALL	_echoVDP
04014B C1                  A   540    	POP	BC
                           A   541    ;   22		while(!found) {
                           A   542    .LINE 22
                           A   543    
04014C 18 2D               A   544    	JR	L_9
                           A   545    ;   23			while(1) {
04014E                     A   546    L_5:
                           A   547    .LINE 23
                           A   548    
                           A   549    ;   24				if(*ptr == pattern) break;
                           A   550    .LINE 24
                           A   551    
04014E DD27FC              A   552    	LD	HL,(IX+%FFFFFFFC)
040151 7E                  A   553    	LD	A,(HL)
040152 DDBEFF              A   554    	CP	A,(IX+%FFFFFFFF)
040155 28 09               A   555    	JR	Z,L_7
                           A   556    ;   25				ptr++;
                           A   557    .LINE 25
                           A   558    
040157 DD07FC              A   559    	LD	BC,(IX+%FFFFFFFC)
04015A 03                  A   560    	INC	BC
04015B DD0FFC              A   561    	LD	(IX+%FFFFFFFC),BC
04015E 18 EE               A   562    	JR	L_5
                           A   563    ;   26			}
040160                     A   564    L_7:
                           A   565    .LINE 26
                           A   566    
                           A   567    ;   27			pattern++;
                           A   568    .LINE 27
                           A   569    
040160 DD34FF              A   570    	INC	(IX+%FFFFFFFF)
                           A   571    ;   28			echoVDP(pattern);
                           A   572    .LINE 28
                           A   573    
040163 DD4EFF              A   574    	LD	C,(IX+%FFFFFFFF)
040166 0600                A   575    	LD	B,%0
040168 C5                  A   576    	PUSH	BC
040169 CD E5 00 04         A   577    	CALL	_echoVDP
04016D C1                  A   578    	POP	BC
                           A   579    ;   29			if(*ptr == pattern) found = tru
                           A   580    .LINE 29
                           A   581    
04016E DD27FC              A   582    	LD	HL,(IX+%FFFFFFFC)
040171 7E                  A   583    	LD	A,(HL)
040172 DDBEFF              A   584    	CP	A,(IX+%FFFFFFFF)
040175 20 04               A   585    	JR	NZ,L_9
040177 DD36FB01            A   586    	LD	(IX+%FFFFFFFB),%1
                           A   587    ;   30		}
04017B                     A   588    L_9:
                           A   589    .LINE 30
                           A   590    
04017B DD7EFB              A   591    	LD	A,(IX+%FFFFFFFB)
04017E B7                  A   592    	OR	A,A
04017F 28 CD               A   593    	JR	Z,L_5
                           A   594    ;   31		return ptr;
                           A   595    .LINE 31
                           A   596    
040181 DD27FC              A   597    	LD	HL,(IX+%FFFFFFFC)
                           A   598    ;   32	}
                           A   599    .LINE 32
                           A   600    
040184 DDF9                A   601    	LD	SP,IX
040186 DDE1                A   602    	POP	IX
040188 C9                  A   603    	RET	
                           A   604    
                           A   605    
                           A   606    ;**************************** _getGPAddress ***
                           A   607    ;Name                         Addr/Register   S
                           A   608    ;found                                 IX-5    
                           A   609    ;ptr                                   IX-4    
                           A   610    ;pattern                               IX-1    
                           A   611    ;sysvarstart                           IX+6    
                           A   612    
                           A   613    
                           A   614    ; Stack Frame Size: 14 (bytes)
                           A   615    ;       Spill Code: 0 (instruction)
                           A   616    
                           A   617    
                           A   618    .ENDFUNC "getGPAddress",32,"_getGPAddress"
                           A   619    ;   33	
                           A   620    ;   34	int main(int argc, char * argv[]) {
040189                     A   621    _main:
                           A   622    .DEFINE "_main"
                           A   623    
                           A   624    .VALUE _main
                           A   625    
                           A   626    .CLASS 2
                           A   627    
                           A   628    .TYPE 68
                           A   629    
                           A   630    .ENDEF
                           A   631    
                           A   632    .BEGFUNC "main",34,"_main"
                           A   633    
                           A   634    .LINE 34
                           A   635    
                           A   636    .DEFINE "argc"
                           A   637    
                           A   638    .CLASS 65
                           A   639    
                           A   640    .VALUE 6
                           A   641    
                           A   642    .TYPE 4
                           A   643    
                           A   644    .ENDEF
                           A   645    
                           A   646    .DEFINE "argv"
                           A   647    
                           A   648    .CLASS 65
                           A   649    
                           A   650    .VALUE 9
                           A   651    
                           A   652    .TYPE 290
                           A   653    
                           A   654    .ENDEF
                           A   655    
                           A   656    .DEFINE "sysvars"
                           A   657    
                           A   658    .CLASS 65
                           A   659    
                           A   660    .VALUE -3
                           A   661    
                           A   662    .TAG "NONAME0"
                           A   663    
                           A   664    .TYPE 40
                           A   665    
                           A   666    .ENDEF
                           A   667    
                           A   668    .DEFINE "gpptr"
                           A   669    
                           A   670    .CLASS 65
                           A   671    
                           A   672    .VALUE -6
                           A   673    
                           A   674    .TYPE 44
                           A   675    
                           A   676    .ENDEF
                           A   677    
040189 DDE5                A   678    	PUSH	IX
04018B DD210000 00         A   679    	LD	IX,0
040190 DD39                A   680    	ADD	IX,SP
040192 C5                  A   681    	PUSH	BC
040193 C5                  A   682    	PUSH	BC
                           A   683    ;   35		uint8_t *gpptr;
                           A   684    ;   36		sysvar_t *sysvars = getsysvars();
                           A   685    .LINE 36
                           A   686    
040194 CD D4 0D 04         A   687    	CALL	_getsysvars
040198 DD2FFD              A   688    	LD	(IX+%FFFFFFFD),HL
                           A   689    ;   37		uint8_t *ptr = (uint8_t *)sysvars;
                           A   690    ;   38	
                           A   691    ;   39		gpptr = getGPAddress(ptr);
                           A   692    .LINE 39
                           A   693    
04019B E5C1                A   694    	LD	BC,HL
04019D C5                  A   695    	PUSH	BC
04019E CD 28 01 04         A   696    	CALL	_getGPAddress
0401A2 C1                  A   697    	POP	BC
0401A3 DD2FFA              A   698    	LD	(IX+%FFFFFFFA),HL
                           A   699    ;   40		printf("sysvars are at 0x%06X\r\n",
                           A   700    .LINE 40
                           A   701    
0401A6 01 2D 13 04         A   702    	LD	BC,___print_uputch
0401AA ED43 01 1A 04       A   703    	LD	(___print_xputch),BC
0401AF 01 04 1A 04         A   704    	LD	BC,L__5
0401B3 C5                  A   705    	PUSH	BC
0401B4 CD A1 11 04         A   706    	CALL	___print_sendstring
0401B8 C1                  A   707    	POP	BC
0401B9 3E06                A   708    	LD	A,%6
0401BB 32 44 1A 04         A   709    	LD	(___print_fmt+5),A
0401BF 3E60                A   710    	LD	A,%60
0401C1 32 40 1A 04         A   711    	LD	(___print_fmt+1),A
0401C5 3E78                A   712    	LD	A,%78
0401C7 32 43 1A 04         A   713    	LD	(___print_fmt+4),A
0401CB DD07FD              A   714    	LD	BC,(IX+%FFFFFFFD)
0401CE AF                  A   715    	XOR	A,A
0401CF C5D1                A   716    	LD	DE,BC
0401D1 4F                  A   717    	LD	C,A
0401D2 0600                A   718    	LD	B,%0
0401D4 C5                  A   719    	PUSH	BC
0401D5 D5                  A   720    	PUSH	DE
0401D6 CD B3 13 04         A   721    	CALL	__u_uitoa
0401DA C1                  A   722    	POP	BC
0401DB C1                  A   723    	POP	BC
0401DC 01 16 1A 04         A   724    	LD	BC,L__6
0401E0 C5                  A   725    	PUSH	BC
0401E1 CD A1 11 04         A   726    	CALL	___print_sendstring
0401E5 C1                  A   727    	POP	BC
                           A   728    ;   41		printf("      gp is at 0x%06X\r\n",
                           A   729    .LINE 41
                           A   730    
0401E6 01 2D 13 04         A   731    	LD	BC,___print_uputch
0401EA ED43 01 1A 04       A   732    	LD	(___print_xputch),BC
0401EF 01 19 1A 04         A   733    	LD	BC,L__7
0401F3 C5                  A   734    	PUSH	BC
0401F4 CD A1 11 04         A   735    	CALL	___print_sendstring
0401F8 C1                  A   736    	POP	BC
0401F9 3E06                A   737    	LD	A,%6
0401FB 32 44 1A 04         A   738    	LD	(___print_fmt+5),A
0401FF 3E60                A   739    	LD	A,%60
040201 32 40 1A 04         A   740    	LD	(___print_fmt+1),A
040205 3E78                A   741    	LD	A,%78
040207 32 43 1A 04         A   742    	LD	(___print_fmt+4),A
04020B DD07FA              A   743    	LD	BC,(IX+%FFFFFFFA)
04020E AF                  A   744    	XOR	A,A
04020F C5D1                A   745    	LD	DE,BC
040211 4F                  A   746    	LD	C,A
040212 0600                A   747    	LD	B,%0
040214 C5                  A   748    	PUSH	BC
040215 D5                  A   749    	PUSH	DE
040216 CD B3 13 04         A   750    	CALL	__u_uitoa
04021A C1                  A   751    	POP	BC
04021B C1                  A   752    	POP	BC
04021C 01 2B 1A 04         A   753    	LD	BC,L__8
040220 C5                  A   754    	PUSH	BC
040221 CD A1 11 04         A   755    	CALL	___print_sendstring
040225 C1                  A   756    	POP	BC
                           A   757    ;   42		return 0;
                           A   758    .LINE 42
                           A   759    
040226 B7                  A   760    	OR	A,A
040227 ED62                A   761    	SBC	HL,HL
                           A   762    ;   43	}
                           A   763    .LINE 43
                           A   764    
040229 DDF9                A   765    	LD	SP,IX
04022B DDE1                A   766    	POP	IX
04022D C9                  A   767    	RET	
                           A   768    
                           A   769    
                           A   770    ;**************************** _main ***********
                           A   771    ;Name                         Addr/Register   S
                           A   772    ;__u_uitoa                           IMPORT  --
                           A   773    ;___print_fmt                        IMPORT    
                           A   774    ;___print_sendstring                 IMPORT  --
                           A   775    ;___print_xputch                     IMPORT    
                           A   776    ;___print_uputch                     IMPORT  --
                           A   777    ;_getsysvars                         IMPORT  --
                           A   778    ;gpptr                                 IX-6    
                           A   779    ;sysvars                               IX-3    
                           A   780    ;argv                                  IX+9    
                           A   781    ;argc                                  IX+6    
                           A   782    
                           A   783    
                           A   784    ; Stack Frame Size: 18 (bytes)
                           A   785    ;       Spill Code: 0 (instruction)
                           A   786    
                           A   787    
                           A   788    .ENDFUNC "main",43,"_main"
                           A   789    	SEGMENT STRSECT
041A04                     A   790    L__5:
041A04 73797376 61727320   A   791    	DB	"sysvars are at 0x"
041A0C 61726520 61742030 
041A14 78 
041A15 00                  A   792    	DB	0
041A16                     A   793    L__6:
041A16 0D0A00              A   794    	DB	13,10,0
041A19                     A   795    L__7:
041A19 20202020 20206770   A   796    	DB	"      gp is at 0x"
041A21 20697320 61742030 
041A29 78 
041A2A 00                  A   797    	DB	0
041A2B                     A   798    L__8:
041A2B 0D0A00              A   799    	DB	13,10,0
                           A   800    	XREF _delayms:ROM
                           A   801    	XREF _getsysvars:ROM
                           A   802    	XREF _putch:ROM
                           A   803    	XREF __u_uitoa:ROM
                           A   804    	XREF ___print_sendstring:ROM
                           A   805    	XREF ___print_xputch:ROM
                           A   806    	XREF ___print_uputch:ROM
                           A   807    	XREF ___print_fmt:ROM
                           A   808    	XDEF _main
                           A   809    	XDEF _getGPAddress
                           A   810    	XDEF _echoVDP
                           A   811    	END


Errors: 0
Warnings: 0
Lines Assembled: 812

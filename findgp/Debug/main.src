; Zilog eZ80 ANSI C Compiler Release 3.4
; -nomodsect -optsize -noreduceopt -nopadbranch -debug
; -peephole -globalopt -localcse -const=ROM 
	FILE	"..\main.c"
	.assume ADL=1
.DEBUG "C"
	SEGMENT CODE
.BEGREC "fmt_type",19
.DEFINE "status"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flags"
.VALUE 1
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "size"
.VALUE 2
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "chr"
.VALUE 3
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "type"
.VALUE 4
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "field_width"
.VALUE 5
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "precision"
.VALUE 6
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "set_begin"
.VALUE 7
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "set_end"
.VALUE 10
.CLASS 8
.TYPE 34
.ENDEF
.DEFINE "pad_whole"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_pre_fract"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_post_fract"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "pad_at"
.VALUE 16
.CLASS 8
.TYPE 34
.ENDEF
.ENDREC "fmt_type"
.BEGREC "flt_info",12
.DEFINE "flags"
.VALUE 0
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "exp"
.VALUE 1
.CLASS 8
.TYPE 2
.ENDEF
.DEFINE "digits"
.VALUE 2
.CLASS 8
.DIM 10
.TYPE 108
.ENDEF
.ENDREC "flt_info"
.BEGREC "NONAME0",51
.DEFINE "clock"
.VALUE 0
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "vpd_protocol_flags"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keyascii"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keymods"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "cursorX"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "cursorY"
.VALUE 8
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrchar"
.VALUE 9
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrpixel"
.VALUE 10
.CLASS 8
.TYPE 14
.ENDEF
.DEFINE "audioChannel"
.VALUE 13
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "audioSuccess"
.VALUE 14
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrwidth"
.VALUE 15
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "scrheight"
.VALUE 17
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "scrcols"
.VALUE 19
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrrows"
.VALUE 20
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrcolours"
.VALUE 21
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrpixelIndex"
.VALUE 22
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keycode"
.VALUE 23
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keydown"
.VALUE 24
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "keycount"
.VALUE 25
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "rtc"
.VALUE 26
.CLASS 8
.DIM 6
.TYPE 108
.ENDEF
.DEFINE "rtc_spare"
.VALUE 32
.CLASS 8
.DIM 2
.TYPE 108
.ENDEF
.DEFINE "keydelay"
.VALUE 34
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "keyrate"
.VALUE 36
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "keyled"
.VALUE 38
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "scrmode"
.VALUE 39
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "rtc_enable"
.VALUE 40
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "mouseX"
.VALUE 41
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "mouseY"
.VALUE 43
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "mouseButtons"
.VALUE 45
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "mouseWheel"
.VALUE 46
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "mouseXDelta"
.VALUE 47
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "mouseYDelta"
.VALUE 49
.CLASS 8
.TYPE 13
.ENDEF
.ENDREC "NONAME0"
.BEGREC "NONAME1",8
.DEFINE "baudRate"
.VALUE 0
.CLASS 8
.TYPE 4
.ENDEF
.DEFINE "dataBits"
.VALUE 3
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stopBits"
.VALUE 4
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "parity"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "flowcontrol"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "eir"
.VALUE 7
.CLASS 8
.TYPE 12
.ENDEF
.ENDREC "NONAME1"
.BEGREC "NONAME2",15
.DEFINE "fs"
.VALUE 0
.CLASS 8
.TYPE 46
.ENDEF
.DEFINE "id"
.VALUE 3
.CLASS 8
.TYPE 13
.ENDEF
.DEFINE "attr"
.VALUE 5
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "stat"
.VALUE 6
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "sclust"
.VALUE 7
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "objsize"
.VALUE 11
.CLASS 8
.TYPE 15
.ENDEF
.ENDREC "NONAME2"
.BEGREC "NONAME3",36
.DEFINE "obj"
.VALUE 0
.CLASS 8
.TAG "NONAME2"
.TYPE 8
.ENDEF
.DEFINE "flag"
.VALUE 15
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "err"
.VALUE 16
.CLASS 8
.TYPE 12
.ENDEF
.DEFINE "fptr"
.VALUE 17
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "clust"
.VALUE 21
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "sect"
.VALUE 25
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "dir_sect"
.VALUE 29
.CLASS 8
.TYPE 15
.ENDEF
.DEFINE "dir_ptr"
.VALUE 33
.CLASS 8
.TYPE 46
.ENDEF
.ENDREC "NONAME3"
;    1	#include <stdio.h>
;    2	#include <ctype.h>
;    3	#include "mos-interface.h"
;    4	#include "vdp.h"
;    5	#include "agontimer.h"
;    6	
;    7	void echoVDP(uint8_t value) {
_echoVDP:
.DEFINE "_echoVDP"

.VALUE _echoVDP

.CLASS 2

.TYPE 65

.ENDEF

.BEGFUNC "echoVDP",7,"_echoVDP"

.LINE 7

.DEFINE "value"

.CLASS 65

.VALUE 6

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
;    8		putch(23);
.LINE 8

	LD	BC,23
	PUSH	BC
	CALL	_putch
	POP	BC
;    9		putch(0);
.LINE 9

	LD	BC,0
	PUSH	BC
	CALL	_putch
	POP	BC
;   10		putch(0x80);
.LINE 10

	LD	BC,128
	PUSH	BC
	CALL	_putch
	POP	BC
;   11		putch(value);
.LINE 11

	LD	A,(IX+%6)
	UEXT	HL
	LD	L,A
	PUSH	HL
	CALL	_putch
	POP	BC
;   12		delayms(100);
.LINE 12

	LD	BC,100
	PUSH	BC
	CALL	_delayms
	POP	BC
;   13	}
.LINE 13

	LD	SP,IX
	POP	IX
	RET	


;**************************** _echoVDP ***************************
;Name                         Addr/Register   Size   Type
;_delayms                            IMPORT  -----   function
;_putch                              IMPORT  -----   function
;value                                 IX+6      1   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "echoVDP",13,"_echoVDP"
;   14	
;   15	uint8_t *getGPAddress(uint8_t *sysvarstart) {
_getGPAddress:
.DEFINE "_getGPAddress"

.VALUE _getGPAddress

.CLASS 2

.TYPE 332

.ENDEF

.BEGFUNC "getGPAddress",15,"_getGPAddress"

.LINE 15

.DEFINE "sysvarstart"

.CLASS 65

.VALUE 6

.TYPE 44

.ENDEF

.DEFINE "pattern"

.CLASS 65

.VALUE -1

.TYPE 12

.ENDEF

.DEFINE "ptr"

.CLASS 65

.VALUE -4

.TYPE 44

.ENDEF

.DEFINE "found"

.CLASS 65

.VALUE -5

.TYPE 12

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	DEC	SP
	DEC	SP
;   16		bool found = false;
.LINE 16

	LD	(IX+%FFFFFFFB),%0
;   17		uint8_t *ptr, pattern;
;   18		ptr = sysvarstart;
.LINE 18

	LD	BC,(IX+%6)
	LD	(IX+%FFFFFFFC),BC
;   19		pattern = 0xaa;
.LINE 19

	LD	(IX+%FFFFFFFF),%AA
;   20	
;   21		echoVDP(pattern);
.LINE 21

	LD	BC,170
	PUSH	BC
	CALL	_echoVDP
	POP	BC
;   22		while(!found) {
.LINE 22

	JR	L_9
;   23			while(1) {
L_5:
.LINE 23

;   24				if(*ptr == pattern) break;
.LINE 24

	LD	HL,(IX+%FFFFFFFC)
	LD	A,(HL)
	CP	A,(IX+%FFFFFFFF)
	JR	Z,L_7
;   25				ptr++;
.LINE 25

	LD	BC,(IX+%FFFFFFFC)
	INC	BC
	LD	(IX+%FFFFFFFC),BC
	JR	L_5
;   26			}
L_7:
.LINE 26

;   27			pattern++;
.LINE 27

	INC	(IX+%FFFFFFFF)
;   28			echoVDP(pattern);
.LINE 28

	LD	C,(IX+%FFFFFFFF)
	LD	B,%0
	PUSH	BC
	CALL	_echoVDP
	POP	BC
;   29			if(*ptr == pattern) found = true;
.LINE 29

	LD	HL,(IX+%FFFFFFFC)
	LD	A,(HL)
	CP	A,(IX+%FFFFFFFF)
	JR	NZ,L_9
	LD	(IX+%FFFFFFFB),%1
;   30		}
L_9:
.LINE 30

	LD	A,(IX+%FFFFFFFB)
	OR	A,A
	JR	Z,L_5
;   31		return ptr;
.LINE 31

	LD	HL,(IX+%FFFFFFFC)
;   32	}
.LINE 32

	LD	SP,IX
	POP	IX
	RET	


;**************************** _getGPAddress ***************************
;Name                         Addr/Register   Size   Type
;found                                 IX-5      1   variable
;ptr                                   IX-4      3   variable
;pattern                               IX-1      1   variable
;sysvarstart                           IX+6      3   parameter


; Stack Frame Size: 14 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "getGPAddress",32,"_getGPAddress"
;   33	
;   34	int main(int argc, char * argv[]) {
_main:
.DEFINE "_main"

.VALUE _main

.CLASS 2

.TYPE 68

.ENDEF

.BEGFUNC "main",34,"_main"

.LINE 34

.DEFINE "argc"

.CLASS 65

.VALUE 6

.TYPE 4

.ENDEF

.DEFINE "argv"

.CLASS 65

.VALUE 9

.TYPE 290

.ENDEF

.DEFINE "sysvars"

.CLASS 65

.VALUE -3

.TAG "NONAME0"

.TYPE 40

.ENDEF

.DEFINE "gpptr"

.CLASS 65

.VALUE -6

.TYPE 44

.ENDEF

	PUSH	IX
	LD	IX,0
	ADD	IX,SP
	PUSH	BC
	PUSH	BC
;   35		uint8_t *gpptr;
;   36		sysvar_t *sysvars = getsysvars();
.LINE 36

	CALL	_getsysvars
	LD	(IX+%FFFFFFFD),HL
;   37		uint8_t *ptr = (uint8_t *)sysvars;
;   38	
;   39		gpptr = getGPAddress(ptr);
.LINE 39

	LD	BC,HL
	PUSH	BC
	CALL	_getGPAddress
	POP	BC
	LD	(IX+%FFFFFFFA),HL
;   40		printf("sysvars are at 0x%06X\r\n",sysvars);
.LINE 40

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__5
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	A,%6
	LD	(___print_fmt+5),A
	LD	A,%60
	LD	(___print_fmt+1),A
	LD	A,%78
	LD	(___print_fmt+4),A
	LD	BC,(IX+%FFFFFFFD)
	XOR	A,A
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_uitoa
	POP	BC
	POP	BC
	LD	BC,L__6
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;   41		printf("      gp is at 0x%06X\r\n",gpptr);
.LINE 41

	LD	BC,___print_uputch
	LD	(___print_xputch),BC
	LD	BC,L__7
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
	LD	A,%6
	LD	(___print_fmt+5),A
	LD	A,%60
	LD	(___print_fmt+1),A
	LD	A,%78
	LD	(___print_fmt+4),A
	LD	BC,(IX+%FFFFFFFA)
	XOR	A,A
	LD	DE,BC
	LD	C,A
	LD	B,%0
	PUSH	BC
	PUSH	DE
	CALL	__u_uitoa
	POP	BC
	POP	BC
	LD	BC,L__8
	PUSH	BC
	CALL	___print_sendstring
	POP	BC
;   42		return 0;
.LINE 42

	OR	A,A
	SBC	HL,HL
;   43	}
.LINE 43

	LD	SP,IX
	POP	IX
	RET	


;**************************** _main ***************************
;Name                         Addr/Register   Size   Type
;__u_uitoa                           IMPORT  -----   function
;___print_fmt                        IMPORT     19   variable
;___print_sendstring                 IMPORT  -----   function
;___print_xputch                     IMPORT      3   variable
;___print_uputch                     IMPORT  -----   function
;_getsysvars                         IMPORT  -----   function
;gpptr                                 IX-6      3   variable
;sysvars                               IX-3      3   variable
;argv                                  IX+9      3   parameter
;argc                                  IX+6      3   parameter


; Stack Frame Size: 18 (bytes)
;       Spill Code: 0 (instruction)


.ENDFUNC "main",43,"_main"
	SEGMENT STRSECT
L__5:
	DB	"sysvars are at 0x"
	DB	0
L__6:
	DB	13,10,0
L__7:
	DB	"      gp is at 0x"
	DB	0
L__8:
	DB	13,10,0
	XREF _delayms:ROM
	XREF _getsysvars:ROM
	XREF _putch:ROM
	XREF __u_uitoa:ROM
	XREF ___print_sendstring:ROM
	XREF ___print_xputch:ROM
	XREF ___print_uputch:ROM
	XREF ___print_fmt:ROM
	XDEF _main
	XDEF _getGPAddress
	XDEF _echoVDP
	END

Zilog eZ80 Macro Assembler Version 4.3 (19073001)22-Oct-22     18:06:06     page:   1


PC     Object              I  Line    Source 
                           A     1    ;**********************************************
                           A     2    ; cstartup.asm
                           A     3    ;
                           A     4    ; ZDS II C Runtime Startup for the eZ80 and eZ8
                           A     5    ;**********************************************
                           A     6    ; Copyright (C) 2005 by ZiLOG, Inc.  All Rights
                           A     7    ;**********************************************
                           A     8    ; Mofified to create loadable code with bare mi
                           A     9    
                           A    10    
                           A    11            XDEF _errno
                           A    12    
                           A    13    		XREF _main
                           A    14            XREF __low_bss         ; Low address of
                           A    15            XREF __len_bss         ; Length of bss 
                           A    16            XREF __low_data        ; Address of ini
                           A    17            XREF __low_romdata     ; Addr of initia
                           A    18            XREF __len_data        ; Length of init
                           A    19    
                           A    20    
                           A    21    ;**********************************************
                           A    22    ; Reset code
                           A    23            DEFINE .RESET, SPACE = ROM
                           A    24            SEGMENT .RESET
                           A    25    		.ASSUME ADL=1
000000                     A    26    _reset:
000000                     A    27    _rst0:
000000 5BC3 00 00 00       A    28        jp.lil __c_startup
                           A    29    	
                           A    30    
                           A    31    ;**********************************************
                           A    32    ; This segment must be aligned on a 512 byte bo
                           A    33    ; Each entry will be a 3-byte address in a 4-by
                           A    34            DEFINE .IVECTS, SPACE = ROM, ALIGN = 20
                           A    35            SEGMENT .IVECTS
                           A    36    		.ASSUME ADL=1
                           A    37    
                           A    38    ;**********************************************
                           A    39    ; Startup code
                           A    40            DEFINE .STARTUP, SPACE = ROM
                           A    41            SEGMENT .STARTUP
                           A    42            .ASSUME ADL=1
                           A    43    
                           A    44    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           A    45    ; Initializes the C environment
000000                     A    46    __c_startup:	
                           A    47        ;------------------------------------------
                           A    48        ; Clear the uninitialized data section
000000 01 00 00 00         A    49        ld bc, __len_bss           ; Check for non-
000004 3E 00               A    50        ld a, __len_bss >> 16
000006 B1                  A    51        or a, c
000007 B0                  A    52        or a, b
000008 28 16               A    53        jr z, _c_bss_done          ; BSS is zero-le
00000A AF                  A    54        xor a, a
00000B 32 00 00 00         A    55        ld (__low_bss), a
00000F ED62                A    56        sbc hl, hl                 ; hl = 0
000011 0B                  A    57        dec bc                     ; 1st byte's tak
000012 ED42                A    58        sbc hl, bc
000014 28 0A               A    59        jr z, _c_bss_done          ; Just 1 byte ..
000016 21 00 00 00         A    60        ld hl, __low_bss           ; reset hl
00001A 11 01 00 00         A    61        ld de, __low_bss + 1       ; [de] = bss + 1
00001E EDB0                A    62        ldir                       ; Clear this sec
000020                     A    63    _c_bss_done:
                           A    64        ;------------------------------------------
                           A    65        ; Copy the initialized data section
000020 01 00 00 00         A    66        ld bc, __len_data          ; [bc] = data le
000024 3E 00               A    67        ld a, __len_data >> 16     ; Check for non-
000026 B1                  A    68        or a, c
000027 B0                  A    69        or a, b
000028 28 0A               A    70        jr z, _c_data_done         ; __len_data is 
00002A 21 00 00 00         A    71        ld hl, __low_romdata       ; [hl] = data_co
00002E 11 00 00 00         A    72        ld de, __low_data          ; [de] = data
000032 EDB0                A    73        ldir                       ; Copy the data 
000034                     A    74    _c_data_done:
                           A    75        ; C environment created, continue with the 
                           A    76    
                           A    77        ;------------------------------------------
                           A    78        ; prepare to go to the main system rountine
000034 21000000            A    79        ld hl, 0                   ; hl = NULL
000038 E5                  A    80        push hl                    ; argv[0] = NULL
000039 DD210000 00         A    81        ld ix, 0
00003E DD39                A    82        add ix, sp                 ; ix = &argv[0]
000040 DDE5                A    83        push ix                    ; &argv[0]
000042 E1                  A    84        pop hl
000043 11000000            A    85        ld de, 0                   ; argc = 0
000047 CD 00 00 00         A    86        call _main                 ; int main(int a
00004B D1                  A    87        pop de                     ; clean the stac
                           A    88    
00004C                     A    89    __exit:
00004C                     A    90    _exit:
00004C                     A    91    _abort:
00004C 49C7                A    92    	rst.lis	00h			; Reset MOS
                           A    93    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           A    94    
                           A    95    ;**********************************************
                           A    96    ; Define global system var _errno. Used by floa
                           A    97            SEGMENT DATA
000000                     A    98    _errno:
000000                     A    99            DS 3                   ; extern int _er
                           A   100    		
                           A   101            END
                           A   102    
                           A   103    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                           A   104    _SysClkFreq:
                           A   105            DL _SYS_CLK_FREQ
                           A   106    
                           A   107    
                           A   108            XREF _SYS_CLK_FREQ
                           A   109            XDEF _SysClkFreq
                           A   110    
                           A   111            END


Errors: 0
Warnings: 0
Lines Assembled: 102

Zilog eZ80 Macro Assembler Version 4.3 (19073001)19-Jul-22     21:22:36     page:   1


PC     Object              I  Line    Source 
                           A     1    ;
                           A     2    ; Title:	AGON MOS - C Startup Code
                           A     3    ; Author:	Copyright (C) 2005 by ZiLOG, Inc.  
                           A     4    ; Modified By:	Dean Belfield
                           A     5    ; Created:	10/07/2022
                           A     6    ; Last Updated:	10/07/2022
                           A     7    ;
                           A     8    ; Modinfo:
                           A     9    ;
                           A    10    		XDEF _errno
                           A    11    		XDEF __c_startup
                           A    12    		XDEF __cstartup
                           A    13    		XREF _main
                           A    14    
                           A    15    		XREF __low_bss         ; Low address of
                           A    16    		XREF __len_bss         ; Length of bss 
                           A    17    	
                           A    18    		XREF __low_data        ; Address of ini
                           A    19    		XREF __low_romdata     ; Addr of initia
                           A    20    		XREF __len_data        ; Length of init
                           A    21    
                           A    22    		XREF __copy_code_to_ram
                           A    23    		XREF __len_code
                           A    24    		XREF __low_code
                           A    25    		XREF __low_romcode
                           A    26    
       00000001            A    27    __cstartup	EQU %1
                           A    28    
                           A    29    		DEFINE .STARTUP, SPACE = ROM
                           A    30    		SEGMENT .STARTUP
                           A    31    		.ASSUME ADL=1
                           A    32    
000000                     A    33    __c_startup:
000000                     A    34    _c_int0:
                           A    35    ;
                           A    36    ; Clear the uninitialized data section
                           A    37    ;
000000 01 00 00 00         A    38    		ld bc, __len_bss           ; Check for 
000004 3E 00               A    39    		ld a, __len_bss >> 16
000006 B1                  A    40    		or a, c
000007 B0                  A    41    		or a, b
000008 28 16               A    42    		jr z, _c_bss_done          ; BSS is zer
00000A AF                  A    43    		xor a, a
00000B 32 00 00 00         A    44    		ld (__low_bss), a
00000F ED62                A    45    		sbc hl, hl                 ; hl = 0
000011 0B                  A    46    		dec bc                     ; 1st byte's
000012 ED42                A    47    		sbc hl, bc
000014 28 0A               A    48    		jr z, _c_bss_done          ; Just 1 byt
000016 21 00 00 00         A    49    		ld hl, __low_bss           ; reset hl
00001A 11 01 00 00         A    50    		ld de, __low_bss + 1       ; [de] = bss
00001E EDB0                A    51    		ldir                       ; Clear this
                           A    52    
000020                     A    53    _c_bss_done:
                           A    54    
                           A    55     ; Copy the initialized data section
                           A    56     ;
000020 01 00 00 00         A    57    		ld bc, __len_data          ; [bc] = dat
000024 3E 00               A    58    		ld a, __len_data >> 16     ; Check for 
000026 B1                  A    59    		or a, c
000027 B0                  A    60    		or a, b
000028 28 0A               A    61    		jr z, _c_data_done         ; __len_data
00002A 21 00 00 00         A    62    		ld hl, __low_romdata       ; [hl] = dat
00002E 11 00 00 00         A    63    		ld de, __low_data          ; [de] = dat
000032 EDB0                A    64    		ldir                       ; Copy the d
                           A    65    
000034                     A    66    _c_data_done:
                           A    67    
                           A    68    ; Copy CODE (which may be in FLASH) to RAM if t
                           A    69    ; copy_code_to_ram symbol is set in the link co
                           A    70    ;
000034 3E 00               A    71    		ld a, __copy_code_to_ram
000036 B7                  A    72    		or a, a
000037 28 14               A    73    		jr z, _copy_code_to_ram_done
000039 01 00 00 00         A    74    		ld bc, __len_code          ; [bc] = cod
00003D 3E 00               A    75    		ld a, __len_code >> 16     ; Check for 
00003F B1                  A    76    		or a, c
000040 B0                  A    77    		or a, b
000041 28 0A               A    78    		jr z, _copy_code_to_ram_done  ; __len_c
000043 21 00 00 00         A    79    		ld hl, __low_romcode       ; [hl] = cod
000047 11 00 00 00         A    80    		ld de, __low_code          ; [de] = cod
00004B EDB0                A    81    		ldir                       ; Copy the c
                           A    82    
00004D                     A    83    _copy_code_to_ram_done:
                           A    84    ;
                           A    85    ; C environment created, continue with the init
                           A    86    ;
00004D C9                  A    87        ret
                           A    88    
                           A    89    ;
                           A    90    ; Define global system var _errno. Used by floa
                           A    91    ;
                           A    92    		SEGMENT DATA
                           A    93    
000000                     A    94    _errno:		DS 3				; extern int _e
                           A    95    
                           A    96    		END


Errors: 0
Warnings: 0
Lines Assembled: 97

Zilog eZ80 Macro Assembler Version 4.3 (19073001)19-Jul-22     21:22:35     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optsize -noreduceopt -nopadbranch
                           A     3    ; -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\src_fatfs\ff.c"
                           A     5    	.assume ADL=1
                           A     6    	SEGMENT BSS
000000                     A     7    _FatFs:
000000                     A     8    	DS	3
000003                     A     9    _Fsid:
000003                     A    10    	DS	2*1
                           A    11    	SEGMENT TEXT
000000                     A    12    _LfnOfs:
000000 01                  A    13    	DB	1
000001 03                  A    14    	DB	3
000002 05                  A    15    	DB	5
000003 07                  A    16    	DB	7
000004 09                  A    17    	DB	9
000005 0E                  A    18    	DB	14
000006 10                  A    19    	DB	16
000007 12                  A    20    	DB	18
000008 14                  A    21    	DB	20
000009 16                  A    22    	DB	22
00000A 18                  A    23    	DB	24
00000B 1C                  A    24    	DB	28
00000C 1E                  A    25    	DB	30
00000D                     A    26    _ExCvt:
00000D 80                  A    27    	DB	128
00000E 9A                  A    28    	DB	154
00000F 45                  A    29    	DB	69
000010 41                  A    30    	DB	65
000011 8E                  A    31    	DB	142
000012 41                  A    32    	DB	65
000013 8F                  A    33    	DB	143
000014 80                  A    34    	DB	128
000015 45                  A    35    	DB	69
000016 45                  A    36    	DB	69
000017 45                  A    37    	DB	69
000018 49                  A    38    	DB	73
000019 49                  A    39    	DB	73
00001A 49                  A    40    	DB	73
00001B 8E                  A    41    	DB	142
00001C 8F                  A    42    	DB	143
00001D 90                  A    43    	DB	144
00001E 92                  A    44    	DB	146
00001F 92                  A    45    	DB	146
000020 4F                  A    46    	DB	79
000021 99                  A    47    	DB	153
000022 4F                  A    48    	DB	79
000023 55                  A    49    	DB	85
000024 55                  A    50    	DB	85
000025 59                  A    51    	DB	89
000026 99                  A    52    	DB	153
000027 9A                  A    53    	DB	154
000028 9B                  A    54    	DB	155
000029 9C                  A    55    	DB	156
00002A 9D                  A    56    	DB	157
00002B 9E                  A    57    	DB	158
00002C 9F                  A    58    	DB	159
00002D 41                  A    59    	DB	65
00002E 49                  A    60    	DB	73
00002F 4F                  A    61    	DB	79
000030 55                  A    62    	DB	85
000031 A5                  A    63    	DB	165
000032 A5                  A    64    	DB	165
000033 A6                  A    65    	DB	166
000034 A7                  A    66    	DB	167
000035 A8                  A    67    	DB	168
000036 A9                  A    68    	DB	169
000037 AA                  A    69    	DB	170
000038 AB                  A    70    	DB	171
000039 AC                  A    71    	DB	172
00003A AD                  A    72    	DB	173
00003B AE                  A    73    	DB	174
00003C AF                  A    74    	DB	175
00003D B0                  A    75    	DB	176
00003E B1                  A    76    	DB	177
00003F B2                  A    77    	DB	178
000040 B3                  A    78    	DB	179
000041 B4                  A    79    	DB	180
000042 B5                  A    80    	DB	181
000043 B6                  A    81    	DB	182
000044 B7                  A    82    	DB	183
000045 B8                  A    83    	DB	184
000046 B9                  A    84    	DB	185
000047 BA                  A    85    	DB	186
000048 BB                  A    86    	DB	187
000049 BC                  A    87    	DB	188
00004A BD                  A    88    	DB	189
00004B BE                  A    89    	DB	190
00004C BF                  A    90    	DB	191
00004D C0                  A    91    	DB	192
00004E C1                  A    92    	DB	193
00004F C2                  A    93    	DB	194
000050 C3                  A    94    	DB	195
000051 C4                  A    95    	DB	196
000052 C5                  A    96    	DB	197
000053 C6                  A    97    	DB	198
000054 C7                  A    98    	DB	199
000055 C8                  A    99    	DB	200
000056 C9                  A   100    	DB	201
000057 CA                  A   101    	DB	202
000058 CB                  A   102    	DB	203
000059 CC                  A   103    	DB	204
00005A CD                  A   104    	DB	205
00005B CE                  A   105    	DB	206
00005C CF                  A   106    	DB	207
00005D D0                  A   107    	DB	208
00005E D1                  A   108    	DB	209
00005F D2                  A   109    	DB	210
000060 D3                  A   110    	DB	211
000061 D4                  A   111    	DB	212
000062 D5                  A   112    	DB	213
000063 D6                  A   113    	DB	214
000064 D7                  A   114    	DB	215
000065 D8                  A   115    	DB	216
000066 D9                  A   116    	DB	217
000067 DA                  A   117    	DB	218
000068 DB                  A   118    	DB	219
000069 DC                  A   119    	DB	220
00006A DD                  A   120    	DB	221
00006B DE                  A   121    	DB	222
00006C DF                  A   122    	DB	223
00006D E0                  A   123    	DB	224
00006E E1                  A   124    	DB	225
00006F E2                  A   125    	DB	226
000070 E3                  A   126    	DB	227
000071 E4                  A   127    	DB	228
000072 E5                  A   128    	DB	229
000073 E6                  A   129    	DB	230
000074 E7                  A   130    	DB	231
000075 E8                  A   131    	DB	232
000076 E9                  A   132    	DB	233
000077 EA                  A   133    	DB	234
000078 EB                  A   134    	DB	235
000079 EC                  A   135    	DB	236
00007A ED                  A   136    	DB	237
00007B EE                  A   137    	DB	238
00007C EF                  A   138    	DB	239
00007D F0                  A   139    	DB	240
00007E F1                  A   140    	DB	241
00007F F2                  A   141    	DB	242
000080 F3                  A   142    	DB	243
000081 F4                  A   143    	DB	244
000082 F5                  A   144    	DB	245
000083 F6                  A   145    	DB	246
000084 F7                  A   146    	DB	247
000085 F8                  A   147    	DB	248
000086 F9                  A   148    	DB	249
000087 FA                  A   149    	DB	250
000088 FB                  A   150    	DB	251
000089 FC                  A   151    	DB	252
00008A FD                  A   152    	DB	253
00008B FE                  A   153    	DB	254
00008C FF                  A   154    	DB	255
                           A   155    ;    1	/*-------------------------------------
                           A   156    ;    2	/  FatFs - Generic FAT Filesystem Modul
                           A   157    ;    3	/--------------------------------------
                           A   158    ;    4	/
                           A   159    ;    5	/ Copyright (C) 2021, ChaN, all right r
                           A   160    ;    6	/
                           A   161    ;    7	/ FatFs module is an open source softwa
                           A   162    ;    8	/ source and binary forms, with or with
                           A   163    ;    9	/ that the following condition is met:
                           A   164    ;   10	/
                           A   165    ;   11	/ 1. Redistributions of source code mus
                           A   166    ;   12	/    this condition and the following d
                           A   167    ;   13	/
                           A   168    ;   14	/ This software is provided by the copy
                           A   169    ;   15	/ and any warranties related to this so
                           A   170    ;   16	/ The copyright owner or contributors b
                           A   171    ;   17	/ by use of this software.
                           A   172    ;   18	/
                           A   173    ;   19	/--------------------------------------
                           A   174    ;   20	
                           A   175    ;   21	#include <string.h>
                           A   176    ;   22	
                           A   177    ;   23	#include "ff.h"			/* Declarations
                           A   178    ;   24	#include "diskio.h"		/* Declarations
                           A   179    ;   25	
                           A   180    ;   26	
                           A   181    ;   27	/*-------------------------------------
                           A   182    ;   28	
                           A   183    ;   29	   Module Private Definitions
                           A   184    ;   30	
                           A   185    ;   31	---------------------------------------
                           A   186    ;   32	
                           A   187    ;   33	#if FF_DEFINED != 86631	/* Revision ID 
                           A   188    ;   34	#error Wrong include file (ff.h).
                           A   189    ;   35	#endif
                           A   190    ;   36	
                           A   191    ;   37	
                           A   192    ;   38	/* Limits and boundaries */
                           A   193    ;   39	#define MAX_DIR		0x200000		/* 
                           A   194    ;   40	#define MAX_DIR_EX	0x10000000		/* 
                           A   195    ;   41	#define MAX_FAT12	0xFF5			/* 
                           A   196    ;   42	#define MAX_FAT16	0xFFF5			/* 
                           A   197    ;   43	#define MAX_FAT32	0x0FFFFFF5		/* 
                           A   198    ;   44	#define MAX_EXFAT	0x7FFFFFFD		/* 
                           A   199    ;   45	
                           A   200    ;   46	
                           A   201    ;   47	/* Character code support macros */
                           A   202    ;   48	#define IsUpper(c)		((c) >= 'A' && 
                           A   203    ;   49	#define IsLower(c)		((c) >= 'a' && 
                           A   204    ;   50	#define IsDigit(c)		((c) >= '0' && 
                           A   205    ;   51	#define IsSeparator(c)	((c) == '/' || 
                           A   206    ;   52	#define IsTerminator(c)	((UINT)(c) < (F
                           A   207    ;   53	#define IsSurrogate(c)	((c) >= 0xD800 
                           A   208    ;   54	#define IsSurrogateH(c)	((c) >= 0xD800 
                           A   209    ;   55	#define IsSurrogateL(c)	((c) >= 0xDC00 
                           A   210    ;   56	
                           A   211    ;   57	
                           A   212    ;   58	/* Additional file access control and f
                           A   213    ;   59	#define FA_SEEKEND	0x20	/* Seek to 
                           A   214    ;   60	#define FA_MODIFIED	0x40	/* File has
                           A   215    ;   61	#define FA_DIRTY	0x80	/* FIL.buf[
                           A   216    ;   62	
                           A   217    ;   63	
                           A   218    ;   64	/* Additional file attribute bits for i
                           A   219    ;   65	#define AM_VOL		0x08	/* Volume l
                           A   220    ;   66	#define AM_LFN		0x0F	/* LFN entr
                           A   221    ;   67	#define AM_MASK		0x3F	/* Mask of 
                           A   222    ;   68	#define AM_MASKX	0x37	/* Mask of 
                           A   223    ;   69	
                           A   224    ;   70	
                           A   225    ;   71	/* Name status flags in fn[11] */
                           A   226    ;   72	#define NSFLAG		11		/* Index of
                           A   227    ;   73	#define NS_LOSS		0x01	/* Out of 8
                           A   228    ;   74	#define NS_LFN		0x02	/* Force to
                           A   229    ;   75	#define NS_LAST		0x04	/* Last seg
                           A   230    ;   76	#define NS_BODY		0x08	/* Lower ca
                           A   231    ;   77	#define NS_EXT		0x10	/* Lower ca
                           A   232    ;   78	#define NS_DOT		0x20	/* Dot entr
                           A   233    ;   79	#define NS_NOLFN	0x40	/* Do not f
                           A   234    ;   80	#define NS_NONAME	0x80	/* Not foll
                           A   235    ;   81	
                           A   236    ;   82	
                           A   237    ;   83	/* exFAT directory entry types */
                           A   238    ;   84	#define	ET_BITMAP	0x81	/* Allocati
                           A   239    ;   85	#define	ET_UPCASE	0x82	/* Up-case 
                           A   240    ;   86	#define	ET_VLABEL	0x83	/* Volume l
                           A   241    ;   87	#define	ET_FILEDIR	0x85	/* File and
                           A   242    ;   88	#define	ET_STREAM	0xC0	/* Stream e
                           A   243    ;   89	#define	ET_FILENAME	0xC1	/* Name ext
                           A   244    ;   90	
                           A   245    ;   91	
                           A   246    ;   92	/* FatFs refers the FAT structure as si
                           A   247    ;   93	/ because the C structure is not binary
                           A   248    ;   94	
                           A   249    ;   95	#define BS_JmpBoot			0		/* 
                           A   250    ;   96	#define BS_OEMName			3		/* 
                           A   251    ;   97	#define BPB_BytsPerSec		11		/* 
                           A   252    ;   98	#define BPB_SecPerClus		13		/* 
                           A   253    ;   99	#define BPB_RsvdSecCnt		14		/* 
                           A   254    ;  100	#define BPB_NumFATs			16		/* 
                           A   255    ;  101	#define BPB_RootEntCnt		17		/* 
                           A   256    ;  102	#define BPB_TotSec16		19		/* 
                           A   257    ;  103	#define BPB_Media			21		/* 
                           A   258    ;  104	#define BPB_FATSz16			22		/* 
                           A   259    ;  105	#define BPB_SecPerTrk		24		/* 
                           A   260    ;  106	#define BPB_NumHeads		26		/* 
                           A   261    ;  107	#define BPB_HiddSec			28		/* 
                           A   262    ;  108	#define BPB_TotSec32		32		/* 
                           A   263    ;  109	#define BS_DrvNum			36		/* 
                           A   264    ;  110	#define BS_NTres			37		/* 
                           A   265    ;  111	#define BS_BootSig			38		/* 
                           A   266    ;  112	#define BS_VolID			39		/* 
                           A   267    ;  113	#define BS_VolLab			43		/* 
                           A   268    ;  114	#define BS_FilSysType		54		/* 
                           A   269    ;  115	#define BS_BootCode			62		/* 
                           A   270    ;  116	#define BS_55AA				510		/* 
                           A   271    ;  117	
                           A   272    ;  118	#define BPB_FATSz32			36		/* 
                           A   273    ;  119	#define BPB_ExtFlags32		40		/* 
                           A   274    ;  120	#define BPB_FSVer32			42		/* 
                           A   275    ;  121	#define BPB_RootClus32		44		/* 
                           A   276    ;  122	#define BPB_FSInfo32		48		/* 
                           A   277    ;  123	#define BPB_BkBootSec32		50		/* 
                           A   278    ;  124	#define BS_DrvNum32			64		/* 
                           A   279    ;  125	#define BS_NTres32			65		/* 
                           A   280    ;  126	#define BS_BootSig32		66		/* 
                           A   281    ;  127	#define BS_VolID32			67		/* 
                           A   282    ;  128	#define BS_VolLab32			71		/* 
                           A   283    ;  129	#define BS_FilSysType32		82		/* 
                           A   284    ;  130	#define BS_BootCode32		90		/* 
                           A   285    ;  131	
                           A   286    ;  132	#define BPB_ZeroedEx		11		/* 
                           A   287    ;  133	#define BPB_VolOfsEx		64		/* 
                           A   288    ;  134	#define BPB_TotSecEx		72		/* 
                           A   289    ;  135	#define BPB_FatOfsEx		80		/* 
                           A   290    ;  136	#define BPB_FatSzEx			84		/* 
                           A   291    ;  137	#define BPB_DataOfsEx		88		/* 
                           A   292    ;  138	#define BPB_NumClusEx		92		/* 
                           A   293    ;  139	#define BPB_RootClusEx		96		/* 
                           A   294    ;  140	#define BPB_VolIDEx			100		/* 
                           A   295    ;  141	#define BPB_FSVerEx			104		/* 
                           A   296    ;  142	#define BPB_VolFlagEx		106		/* 
                           A   297    ;  143	#define BPB_BytsPerSecEx	108		/* 
                           A   298    ;  144	#define BPB_SecPerClusEx	109		/* 
                           A   299    ;  145	#define BPB_NumFATsEx		110		/* 
                           A   300    ;  146	#define BPB_DrvNumEx		111		/* 
                           A   301    ;  147	#define BPB_PercInUseEx		112		/* 
                           A   302    ;  148	#define BPB_RsvdEx			113		/* 
                           A   303    ;  149	#define BS_BootCodeEx		120		/* 
                           A   304    ;  150	
                           A   305    ;  151	#define DIR_Name			0		/* 
                           A   306    ;  152	#define DIR_Attr			11		/* 
                           A   307    ;  153	#define DIR_NTres			12		/* 
                           A   308    ;  154	#define DIR_CrtTime10		13		/* 
                           A   309    ;  155	#define DIR_CrtTime			14		/* 
                           A   310    ;  156	#define DIR_LstAccDate		18		/* 
                           A   311    ;  157	#define DIR_FstClusHI		20		/* 
                           A   312    ;  158	#define DIR_ModTime			22		/* 
                           A   313    ;  159	#define DIR_FstClusLO		26		/* 
                           A   314    ;  160	#define DIR_FileSize		28		/* 
                           A   315    ;  161	#define LDIR_Ord			0		/* 
                           A   316    ;  162	#define LDIR_Attr			11		/* 
                           A   317    ;  163	#define LDIR_Type			12		/* 
                           A   318    ;  164	#define LDIR_Chksum			13		/* 
                           A   319    ;  165	#define LDIR_FstClusLO		26		/* 
                           A   320    ;  166	#define XDIR_Type			0		/* 
                           A   321    ;  167	#define XDIR_NumLabel		1		/* 
                           A   322    ;  168	#define XDIR_Label			2		/* 
                           A   323    ;  169	#define XDIR_CaseSum		4		/* 
                           A   324    ;  170	#define XDIR_NumSec			1		/* 
                           A   325    ;  171	#define XDIR_SetSum			2		/* 
                           A   326    ;  172	#define XDIR_Attr			4		/* 
                           A   327    ;  173	#define XDIR_CrtTime		8		/* 
                           A   328    ;  174	#define XDIR_ModTime		12		/* 
                           A   329    ;  175	#define XDIR_AccTime		16		/* 
                           A   330    ;  176	#define XDIR_CrtTime10		20		/* 
                           A   331    ;  177	#define XDIR_ModTime10		21		/* 
                           A   332    ;  178	#define XDIR_CrtTZ			22		/* 
                           A   333    ;  179	#define XDIR_ModTZ			23		/* 
                           A   334    ;  180	#define XDIR_AccTZ			24		/* 
                           A   335    ;  181	#define XDIR_GenFlags		33		/* 
                           A   336    ;  182	#define XDIR_NumName		35		/* 
                           A   337    ;  183	#define XDIR_NameHash		36		/* 
                           A   338    ;  184	#define XDIR_ValidFileSize	40		/* 
                           A   339    ;  185	#define XDIR_FstClus		52		/* 
                           A   340    ;  186	#define XDIR_FileSize		56		/* 
                           A   341    ;  187	
                           A   342    ;  188	#define SZDIRE				32		/* 
                           A   343    ;  189	#define DDEM				0xE5	/* 
                           A   344    ;  190	#define RDDEM				0x05	/* 
                           A   345    ;  191	#define LLEF				0x40	/* 
                           A   346    ;  192	
                           A   347    ;  193	#define FSI_LeadSig			0		/* 
                           A   348    ;  194	#define FSI_StrucSig		484		/* 
                           A   349    ;  195	#define FSI_Free_Count		488		/* 
                           A   350    ;  196	#define FSI_Nxt_Free		492		/* 
                           A   351    ;  197	
                           A   352    ;  198	#define MBR_Table			446		/* 
                           A   353    ;  199	#define SZ_PTE				16		/* 
                           A   354    ;  200	#define PTE_Boot			0		/* 
                           A   355    ;  201	#define PTE_StHead			1		/* 
                           A   356    ;  202	#define PTE_StSec			2		/* 
                           A   357    ;  203	#define PTE_StCyl			3		/* 
                           A   358    ;  204	#define PTE_System			4		/* 
                           A   359    ;  205	#define PTE_EdHead			5		/* 
                           A   360    ;  206	#define PTE_EdSec			6		/* 
                           A   361    ;  207	#define PTE_EdCyl			7		/* 
                           A   362    ;  208	#define PTE_StLba			8		/* 
                           A   363    ;  209	#define PTE_SizLba			12		/* 
                           A   364    ;  210	
                           A   365    ;  211	#define GPTH_Sign			0		/* 
                           A   366    ;  212	#define GPTH_Rev			8		/* 
                           A   367    ;  213	#define GPTH_Size			12		/* 
                           A   368    ;  214	#define GPTH_Bcc			16		/* 
                           A   369    ;  215	#define GPTH_CurLba			24		/* 
                           A   370    ;  216	#define GPTH_BakLba			32		/* 
                           A   371    ;  217	#define GPTH_FstLba			40		/* 
                           A   372    ;  218	#define GPTH_LstLba			48		/* 
                           A   373    ;  219	#define GPTH_DskGuid		56		/* 
                           A   374    ;  220	#define GPTH_PtOfs			72		/* 
                           A   375    ;  221	#define GPTH_PtNum			80		/* 
                           A   376    ;  222	#define GPTH_PteSize		84		/* 
                           A   377    ;  223	#define GPTH_PtBcc			88		/* 
                           A   378    ;  224	#define SZ_GPTE				128		/* 
                           A   379    ;  225	#define GPTE_PtGuid			0		/* 
                           A   380    ;  226	#define GPTE_UpGuid			16		/* 
                           A   381    ;  227	#define GPTE_FstLba			32		/* 
                           A   382    ;  228	#define GPTE_LstLba			40		/* 
                           A   383    ;  229	#define GPTE_Flags			48		/* 
                           A   384    ;  230	#define GPTE_Name			56		/* 
                           A   385    ;  231	
                           A   386    ;  232	
                           A   387    ;  233	/* Post process on fatal error in the f
                           A   388    ;  234	#define ABORT(fs, res)		{ fp->err =
                           A   389    ;  235	
                           A   390    ;  236	
                           A   391    ;  237	/* Re-entrancy related */
                           A   392    ;  238	#if FF_FS_REENTRANT
                           A   393    ;  239	#if FF_USE_LFN == 1
                           A   394    ;  240	#error Static LFN work area cannot be u
                           A   395    ;  241	#endif
                           A   396    ;  242	#define LEAVE_FF(fs, res)	{ unlock_fs
                           A   397    ;  243	#else
                           A   398    ;  244	#define LEAVE_FF(fs, res)	return res
                           A   399    ;  245	#endif
                           A   400    ;  246	
                           A   401    ;  247	
                           A   402    ;  248	/* Definitions of logical drive - physi
                           A   403    ;  249	#if FF_MULTI_PARTITION
                           A   404    ;  250	#define LD2PD(vol) VolToPart[vol].pd	
                           A   405    ;  251	#define LD2PT(vol) VolToPart[vol].pt	
                           A   406    ;  252	#else
                           A   407    ;  253	#define LD2PD(vol) (BYTE)(vol)	/* Each
                           A   408    ;  254	#define LD2PT(vol) 0			/* Auto
                           A   409    ;  255	#endif
                           A   410    ;  256	
                           A   411    ;  257	
                           A   412    ;  258	/* Definitions of sector size */
                           A   413    ;  259	#if (FF_MAX_SS < FF_MIN_SS) || (FF_MAX_
                           A   414    ;  260	#error Wrong sector size configuration
                           A   415    ;  261	#endif
                           A   416    ;  262	#if FF_MAX_SS == FF_MIN_SS
                           A   417    ;  263	#define SS(fs)	((UINT)FF_MAX_SS)	/* 
                           A   418    ;  264	#else
                           A   419    ;  265	#define SS(fs)	((fs)->ssize)	/* Vari
                           A   420    ;  266	#endif
                           A   421    ;  267	
                           A   422    ;  268	
                           A   423    ;  269	/* Timestamp */
                           A   424    ;  270	#if FF_FS_NORTC == 1
                           A   425    ;  271	#if FF_NORTC_YEAR < 1980 || FF_NORTC_YE
                           A   426    ;  272	#error Invalid FF_FS_NORTC settings
                           A   427    ;  273	#endif
                           A   428    ;  274	#define GET_FATTIME()	((DWORD)(FF_NOR
                           A   429    ;  275	#else
                           A   430    ;  276	#define GET_FATTIME()	get_fattime()
                           A   431    ;  277	#endif
                           A   432    ;  278	
                           A   433    ;  279	
                           A   434    ;  280	/* File lock controls */
                           A   435    ;  281	#if FF_FS_LOCK != 0
                           A   436    ;  282	#if FF_FS_READONLY
                           A   437    ;  283	#error FF_FS_LOCK must be 0 at read-onl
                           A   438    ;  284	#endif
                           A   439    ;  285	typedef struct {
                           A   440    ;  286		FATFS *fs;		/* Object ID 1, vol
                           A   441    ;  287		DWORD clu;		/* Object ID 2, con
                           A   442    ;  288		DWORD ofs;		/* Object ID 3, off
                           A   443    ;  289		WORD ctr;		/* Object open coun
                           A   444    ;  290	} FILESEM;
                           A   445    ;  291	#endif
                           A   446    ;  292	
                           A   447    ;  293	
                           A   448    ;  294	/* SBCS up-case tables (\x80-\xFF) */
                           A   449    ;  295	#define TBL_CT437  {0x80,0x9A,0x45,0x41
                           A   450    ;  296						0x90,0x92,0x92,0x4F
                           A   451    ;  297						0x41,0x49,0x4F,0x55
                           A   452    ;  298						0xB0,0xB1,0xB2,0xB3
                           A   453    ;  299						0xC0,0xC1,0xC2,0xC3
                           A   454    ;  300						0xD0,0xD1,0xD2,0xD3
                           A   455    ;  301						0xE0,0xE1,0xE2,0xE3
                           A   456    ;  302						0xF0,0xF1,0xF2,0xF3
                           A   457    ;  303	#define TBL_CT720  {0x80,0x81,0x82,0x83
                           A   458    ;  304						0x90,0x91,0x92,0x93
                           A   459    ;  305						0xA0,0xA1,0xA2,0xA3
                           A   460    ;  306						0xB0,0xB1,0xB2,0xB3
                           A   461    ;  307						0xC0,0xC1,0xC2,0xC3
                           A   462    ;  308						0xD0,0xD1,0xD2,0xD3
                           A   463    ;  309						0xE0,0xE1,0xE2,0xE3
                           A   464    ;  310						0xF0,0xF1,0xF2,0xF3
                           A   465    ;  311	#define TBL_CT737  {0x80,0x81,0x82,0x83
                           A   466    ;  312						0x90,0x92,0x92,0x93
                           A   467    ;  313						0x88,0x89,0x8A,0x8B
                           A   468    ;  314						0xB0,0xB1,0xB2,0xB3
                           A   469    ;  315						0xC0,0xC1,0xC2,0xC3
                           A   470    ;  316						0xD0,0xD1,0xD2,0xD3
                           A   471    ;  317						0x97,0xEA,0xEB,0xEC
                           A   472    ;  318						0xF0,0xF1,0xF2,0xF3
                           A   473    ;  319	#define TBL_CT771  {0x80,0x81,0x82,0x83
                           A   474    ;  320						0x90,0x91,0x92,0x93
                           A   475    ;  321						0x80,0x81,0x82,0x83
                           A   476    ;  322						0xB0,0xB1,0xB2,0xB3
                           A   477    ;  323						0xC0,0xC1,0xC2,0xC3
                           A   478    ;  324						0xD0,0xD1,0xD2,0xD3
                           A   479    ;  325						0x90,0x91,0x92,0x93
                           A   480    ;  326						0xF0,0xF0,0xF2,0xF2
                           A   481    ;  327	#define TBL_CT775  {0x80,0x9A,0x91,0xA0
                           A   482    ;  328						0x90,0x92,0x92,0xE2
                           A   483    ;  329						0xA0,0xA1,0xE0,0xA3
                           A   484    ;  330						0xB0,0xB1,0xB2,0xB3
                           A   485    ;  331						0xC0,0xC1,0xC2,0xC3
                           A   486    ;  332						0xB5,0xB6,0xB7,0xB8
                           A   487    ;  333						0xE0,0xE1,0xE2,0xE3
                           A   488    ;  334						0xF0,0xF1,0xF2,0xF3
                           A   489    ;  335	#define TBL_CT850  {0x43,0x55,0x45,0x41
                           A   490    ;  336						0x45,0x92,0x92,0x4F
                           A   491    ;  337						0x41,0x49,0x4F,0x55
                           A   492    ;  338						0xB0,0xB1,0xB2,0xB3
                           A   493    ;  339						0xC0,0xC1,0xC2,0xC3
                           A   494    ;  340						0xD1,0xD1,0x45,0x45
                           A   495    ;  341						0x4F,0xE1,0x4F,0x4F
                           A   496    ;  342						0xF0,0xF1,0xF2,0xF3
                           A   497    ;  343	#define TBL_CT852  {0x80,0x9A,0x90,0xB6
                           A   498    ;  344						0x90,0x91,0x91,0xE2
                           A   499    ;  345						0xB5,0xD6,0xE0,0xE9
                           A   500    ;  346						0xB0,0xB1,0xB2,0xB3
                           A   501    ;  347						0xC0,0xC1,0xC2,0xC3
                           A   502    ;  348						0xD1,0xD1,0xD2,0xD3
                           A   503    ;  349						0xE0,0xE1,0xE2,0xE3
                           A   504    ;  350						0xF0,0xF1,0xF2,0xF3
                           A   505    ;  351	#define TBL_CT855  {0x81,0x81,0x83,0x83
                           A   506    ;  352						0x91,0x91,0x93,0x93
                           A   507    ;  353						0xA1,0xA1,0xA3,0xA3
                           A   508    ;  354						0xB0,0xB1,0xB2,0xB3
                           A   509    ;  355						0xC0,0xC1,0xC2,0xC3
                           A   510    ;  356						0xD1,0xD1,0xD3,0xD3
                           A   511    ;  357						0xE0,0xE2,0xE2,0xE4
                           A   512    ;  358						0xF0,0xF2,0xF2,0xF4
                           A   513    ;  359	#define TBL_CT857  {0x80,0x9A,0x90,0xB6
                           A   514    ;  360						0x90,0x92,0x92,0xE2
                           A   515    ;  361						0xB5,0xD6,0xE0,0xE9
                           A   516    ;  362						0xB0,0xB1,0xB2,0xB3
                           A   517    ;  363						0xC0,0xC1,0xC2,0xC3
                           A   518    ;  364						0xD0,0xD1,0xD2,0xD3
                           A   519    ;  365						0xE0,0xE1,0xE2,0xE3
                           A   520    ;  366						0xF0,0xF1,0xF2,0xF3
                           A   521    ;  367	#define TBL_CT860  {0x80,0x9A,0x90,0x8F
                           A   522    ;  368						0x90,0x91,0x92,0x8C
                           A   523    ;  369						0x86,0x8B,0x9F,0x96
                           A   524    ;  370						0xB0,0xB1,0xB2,0xB3
                           A   525    ;  371						0xC0,0xC1,0xC2,0xC3
                           A   526    ;  372						0xD0,0xD1,0xD2,0xD3
                           A   527    ;  373						0xE0,0xE1,0xE2,0xE3
                           A   528    ;  374						0xF0,0xF1,0xF2,0xF3
                           A   529    ;  375	#define TBL_CT861  {0x80,0x9A,0x90,0x41
                           A   530    ;  376						0x90,0x92,0x92,0x4F
                           A   531    ;  377						0xA4,0xA5,0xA6,0xA7
                           A   532    ;  378						0xB0,0xB1,0xB2,0xB3
                           A   533    ;  379						0xC0,0xC1,0xC2,0xC3
                           A   534    ;  380						0xD0,0xD1,0xD2,0xD3
                           A   535    ;  381						0xE0,0xE1,0xE2,0xE3
                           A   536    ;  382						0xF0,0xF1,0xF2,0xF3
                           A   537    ;  383	#define TBL_CT862  {0x80,0x81,0x82,0x83
                           A   538    ;  384						0x90,0x91,0x92,0x93
                           A   539    ;  385						0x41,0x49,0x4F,0x55
                           A   540    ;  386						0xB0,0xB1,0xB2,0xB3
                           A   541    ;  387						0xC0,0xC1,0xC2,0xC3
                           A   542    ;  388						0xD0,0xD1,0xD2,0xD3
                           A   543    ;  389						0xE0,0xE1,0xE2,0xE3
                           A   544    ;  390						0xF0,0xF1,0xF2,0xF3
                           A   545    ;  391	#define TBL_CT863  {0x43,0x55,0x45,0x41
                           A   546    ;  392						0x45,0x45,0x45,0x4F
                           A   547    ;  393						0xA0,0xA1,0x4F,0x55
                           A   548    ;  394						0xB0,0xB1,0xB2,0xB3
                           A   549    ;  395						0xC0,0xC1,0xC2,0xC3
                           A   550    ;  396						0xD0,0xD1,0xD2,0xD3
                           A   551    ;  397						0xE0,0xE1,0xE2,0xE3
                           A   552    ;  398						0xF0,0xF1,0xF2,0xF3
                           A   553    ;  399	#define TBL_CT864  {0x80,0x9A,0x45,0x41
                           A   554    ;  400						0x90,0x92,0x92,0x4F
                           A   555    ;  401						0x41,0x49,0x4F,0x55
                           A   556    ;  402						0xB0,0xB1,0xB2,0xB3
                           A   557    ;  403						0xC0,0xC1,0xC2,0xC3
                           A   558    ;  404						0xD0,0xD1,0xD2,0xD3
                           A   559    ;  405						0xE0,0xE1,0xE2,0xE3
                           A   560    ;  406						0xF0,0xF1,0xF2,0xF3
                           A   561    ;  407	#define TBL_CT865  {0x80,0x9A,0x90,0x41
                           A   562    ;  408						0x90,0x92,0x92,0x4F
                           A   563    ;  409						0x41,0x49,0x4F,0x55
                           A   564    ;  410						0xB0,0xB1,0xB2,0xB3
                           A   565    ;  411						0xC0,0xC1,0xC2,0xC3
                           A   566    ;  412						0xD0,0xD1,0xD2,0xD3
                           A   567    ;  413						0xE0,0xE1,0xE2,0xE3
                           A   568    ;  414						0xF0,0xF1,0xF2,0xF3
                           A   569    ;  415	#define TBL_CT866  {0x80,0x81,0x82,0x83
                           A   570    ;  416						0x90,0x91,0x92,0x93
                           A   571    ;  417						0x80,0x81,0x82,0x83
                           A   572    ;  418						0xB0,0xB1,0xB2,0xB3
                           A   573    ;  419						0xC0,0xC1,0xC2,0xC3
                           A   574    ;  420						0xD0,0xD1,0xD2,0xD3
                           A   575    ;  421						0x90,0x91,0x92,0x93
                           A   576    ;  422						0xF0,0xF0,0xF2,0xF2
                           A   577    ;  423	#define TBL_CT869  {0x80,0x81,0x82,0x83
                           A   578    ;  424						0x90,0x91,0x92,0x93
                           A   579    ;  425						0x91,0x90,0x92,0x95
                           A   580    ;  426						0xB0,0xB1,0xB2,0xB3
                           A   581    ;  427						0xC0,0xC1,0xC2,0xC3
                           A   582    ;  428						0xD0,0xD1,0xD2,0xD3
                           A   583    ;  429						0xA9,0xAA,0xAC,0xAD
                           A   584    ;  430						0xF0,0xF1,0xD1,0xD2
                           A   585    ;  431	
                           A   586    ;  432	
                           A   587    ;  433	/* DBCS code range |----- 1st byte ----
                           A   588    ;  434	/*                  <------>    <------
                           A   589    ;  435	#define TBL_DC932 {0x81, 0x9F, 0xE0, 0x
                           A   590    ;  436	#define TBL_DC936 {0x81, 0xFE, 0x00, 0x
                           A   591    ;  437	#define TBL_DC949 {0x81, 0xFE, 0x00, 0x
                           A   592    ;  438	#define TBL_DC950 {0x81, 0xFE, 0x00, 0x
                           A   593    ;  439	
                           A   594    ;  440	
                           A   595    ;  441	/* Macros for table definitions */
                           A   596    ;  442	#define MERGE_2STR(a, b) a ## b
                           A   597    ;  443	#define MKCVTBL(hd, cp) MERGE_2STR(hd, 
                           A   598    ;  444	
                           A   599    ;  445	
                           A   600    ;  446	
                           A   601    ;  447	
                           A   602    ;  448	/*-------------------------------------
                           A   603    ;  449	
                           A   604    ;  450	   Module Private Work Area
                           A   605    ;  451	
                           A   606    ;  452	---------------------------------------
                           A   607    ;  453	/* Remark: Variables defined here witho
                           A   608    ;  454	/  zero/null at start-up. If not, the l
                           A   609    ;  455	/  not compliance with C standard. */
                           A   610    ;  456	
                           A   611    ;  457	/*--------------------------------*/
                           A   612    ;  458	/* File/Volume controls           */
                           A   613    ;  459	/*--------------------------------*/
                           A   614    ;  460	
                           A   615    ;  461	#if FF_VOLUMES < 1 || FF_VOLUMES > 10
                           A   616    ;  462	#error Wrong FF_VOLUMES setting
                           A   617    ;  463	#endif
                           A   618    ;  464	static FATFS* FatFs[FF_VOLUMES];	/* 
                           A   619    ;  465	static WORD Fsid;					/* 
                           A   620    ;  466	
                           A   621    ;  467	#if FF_FS_RPATH != 0
                           A   622    ;  468	static BYTE CurrVol;				/* 
                           A   623    ;  469	#endif
                           A   624    ;  470	
                           A   625    ;  471	#if FF_FS_LOCK != 0
                           A   626    ;  472	static FILESEM Files[FF_FS_LOCK];	/* 
                           A   627    ;  473	#endif
                           A   628    ;  474	
                           A   629    ;  475	#if FF_STR_VOLUME_ID
                           A   630    ;  476	#ifdef FF_VOLUME_STRS
                           A   631    ;  477	static const char* const VolumeStr[FF_V
                           A   632    ;  478	#endif
                           A   633    ;  479	#endif
                           A   634    ;  480	
                           A   635    ;  481	#if FF_LBA64
                           A   636    ;  482	#if FF_MIN_GPT > 0x100000000
                           A   637    ;  483	#error Wrong FF_MIN_GPT setting
                           A   638    ;  484	#endif
                           A   639    ;  485	static const BYTE GUID_MS_Basic[16] = {
                           A   640    ;  486	#endif
                           A   641    ;  487	
                           A   642    ;  488	
                           A   643    ;  489	
                           A   644    ;  490	/*--------------------------------*/
                           A   645    ;  491	/* LFN/Directory working buffer   */
                           A   646    ;  492	/*--------------------------------*/
                           A   647    ;  493	
                           A   648    ;  494	#if FF_USE_LFN == 0		/* Non-LFN conf
                           A   649    ;  495	#if FF_FS_EXFAT
                           A   650    ;  496	#error LFN must be enabled when enable 
                           A   651    ;  497	#endif
                           A   652    ;  498	#define DEF_NAMBUF
                           A   653    ;  499	#define INIT_NAMBUF(fs)
                           A   654    ;  500	#define FREE_NAMBUF()
                           A   655    ;  501	#define LEAVE_MKFS(res)	return res
                           A   656    ;  502	
                           A   657    ;  503	#else					/* LFN configur
                           A   658    ;  504	#if FF_MAX_LFN < 12 || FF_MAX_LFN > 255
                           A   659    ;  505	#error Wrong setting of FF_MAX_LFN
                           A   660    ;  506	#endif
                           A   661    ;  507	#if FF_LFN_BUF < FF_SFN_BUF || FF_SFN_B
                           A   662    ;  508	#error Wrong setting of FF_LFN_BUF or F
                           A   663    ;  509	#endif
                           A   664    ;  510	#if FF_LFN_UNICODE < 0 || FF_LFN_UNICOD
                           A   665    ;  511	#error Wrong setting of FF_LFN_UNICODE
                           A   666    ;  512	#endif
                           A   667    ;  513	static const BYTE LfnOfs[] = {1,3,5,7,9
                           A   668    ;  514	#define MAXDIRB(nc)	((nc + 44U) / 15 * 
                           A   669    ;  515	
                           A   670    ;  516	#if FF_USE_LFN == 1		/* LFN enabled 
                           A   671    ;  517	#if FF_FS_EXFAT
                           A   672    ;  518	static BYTE	DirBuf[MAXDIRB(FF_MAX_LFN)]
                           A   673    ;  519	#endif
                           A   674    ;  520	static WCHAR LfnBuf[FF_MAX_LFN + 1];	
                           A   675    ;  521	#define DEF_NAMBUF
                           A   676    ;  522	#define INIT_NAMBUF(fs)
                           A   677    ;  523	#define FREE_NAMBUF()
                           A   678    ;  524	#define LEAVE_MKFS(res)	return res
                           A   679    ;  525	
                           A   680    ;  526	#elif FF_USE_LFN == 2 	/* LFN enabled 
                           A   681    ;  527	#if FF_FS_EXFAT
                           A   682    ;  528	#define DEF_NAMBUF		WCHAR lbuf[FF_M
                           A   683    ;  529	#define INIT_NAMBUF(fs)	{ (fs)->lfnbuf 
                           A   684    ;  530	#define FREE_NAMBUF()
                           A   685    ;  531	#else
                           A   686    ;  532	#define DEF_NAMBUF		WCHAR lbuf[FF_M
                           A   687    ;  533	#define INIT_NAMBUF(fs)	{ (fs)->lfnbuf 
                           A   688    ;  534	#define FREE_NAMBUF()
                           A   689    ;  535	#endif
                           A   690    ;  536	#define LEAVE_MKFS(res)	return res
                           A   691    ;  537	
                           A   692    ;  538	#elif FF_USE_LFN == 3 	/* LFN enabled 
                           A   693    ;  539	#if FF_FS_EXFAT
                           A   694    ;  540	#define DEF_NAMBUF		WCHAR *lfn;	/* 
                           A   695    ;  541	#define INIT_NAMBUF(fs)	{ lfn = ff_mema
                           A   696    ;  542	#define FREE_NAMBUF()	ff_memfree(lfn)
                           A   697    ;  543	#else
                           A   698    ;  544	#define DEF_NAMBUF		WCHAR *lfn;	/* 
                           A   699    ;  545	#define INIT_NAMBUF(fs)	{ lfn = ff_mema
                           A   700    ;  546	#define FREE_NAMBUF()	ff_memfree(lfn)
                           A   701    ;  547	#endif
                           A   702    ;  548	#define LEAVE_MKFS(res)	{ if (!work) ff
                           A   703    ;  549	#define MAX_MALLOC	0x8000	/* Must be 
                           A   704    ;  550	
                           A   705    ;  551	#else
                           A   706    ;  552	#error Wrong setting of FF_USE_LFN
                           A   707    ;  553	
                           A   708    ;  554	#endif	/* FF_USE_LFN == 1 */
                           A   709    ;  555	#endif	/* FF_USE_LFN == 0 */
                           A   710    ;  556	
                           A   711    ;  557	
                           A   712    ;  558	
                           A   713    ;  559	/*--------------------------------*/
                           A   714    ;  560	/* Code conversion tables         */
                           A   715    ;  561	/*--------------------------------*/
                           A   716    ;  562	
                           A   717    ;  563	#if FF_CODE_PAGE == 0	/* Run-time cod
                           A   718    ;  564	#define CODEPAGE CodePage
                           A   719    ;  565	static WORD CodePage;	/* Current code
                           A   720    ;  566	static const BYTE *ExCvt, *DbcTbl;	/* 
                           A   721    ;  567	
                           A   722    ;  568	static const BYTE Ct437[] = TBL_CT437;
                           A   723    ;  569	static const BYTE Ct720[] = TBL_CT720;
                           A   724    ;  570	static const BYTE Ct737[] = TBL_CT737;
                           A   725    ;  571	static const BYTE Ct771[] = TBL_CT771;
                           A   726    ;  572	static const BYTE Ct775[] = TBL_CT775;
                           A   727    ;  573	static const BYTE Ct850[] = TBL_CT850;
                           A   728    ;  574	static const BYTE Ct852[] = TBL_CT852;
                           A   729    ;  575	static const BYTE Ct855[] = TBL_CT855;
                           A   730    ;  576	static const BYTE Ct857[] = TBL_CT857;
                           A   731    ;  577	static const BYTE Ct860[] = TBL_CT860;
                           A   732    ;  578	static const BYTE Ct861[] = TBL_CT861;
                           A   733    ;  579	static const BYTE Ct862[] = TBL_CT862;
                           A   734    ;  580	static const BYTE Ct863[] = TBL_CT863;
                           A   735    ;  581	static const BYTE Ct864[] = TBL_CT864;
                           A   736    ;  582	static const BYTE Ct865[] = TBL_CT865;
                           A   737    ;  583	static const BYTE Ct866[] = TBL_CT866;
                           A   738    ;  584	static const BYTE Ct869[] = TBL_CT869;
                           A   739    ;  585	static const BYTE Dc932[] = TBL_DC932;
                           A   740    ;  586	static const BYTE Dc936[] = TBL_DC936;
                           A   741    ;  587	static const BYTE Dc949[] = TBL_DC949;
                           A   742    ;  588	static const BYTE Dc950[] = TBL_DC950;
                           A   743    ;  589	
                           A   744    ;  590	#elif FF_CODE_PAGE < 900	/* Static c
                           A   745    ;  591	#define CODEPAGE FF_CODE_PAGE
                           A   746    ;  592	static const BYTE ExCvt[] = MKCVTBL(TBL
                           A   747    	SEGMENT CODE
                           A   748    ;  593	
                           A   749    ;  594	#else					/* Static code 
                           A   750    ;  595	#define CODEPAGE FF_CODE_PAGE
                           A   751    ;  596	static const BYTE DbcTbl[] = MKCVTBL(TB
                           A   752    ;  597	
                           A   753    ;  598	#endif
                           A   754    ;  599	
                           A   755    ;  600	
                           A   756    ;  601	
                           A   757    ;  602	
                           A   758    ;  603	/*-------------------------------------
                           A   759    ;  604	
                           A   760    ;  605	   Module Private Functions
                           A   761    ;  606	
                           A   762    ;  607	---------------------------------------
                           A   763    ;  608	
                           A   764    ;  609	
                           A   765    ;  610	/*-------------------------------------
                           A   766    ;  611	/* Load/Store multi-byte word in the FA
                           A   767    ;  612	/*-------------------------------------
                           A   768    ;  613	
                           A   769    ;  614	static WORD ld_word (const BYTE* ptr)	
                           A   770    ;  615	{
000000                     A   771    _ld_word:
000000 21FEFFFF            A   772    	LD	HL,-2
000004 CD 00 00 00         A   773    	CALL	__frameset
                           A   774    ;  616		WORD rv;
                           A   775    ;  617	
                           A   776    ;  618		rv = ptr[1];
000008 DD2706              A   777    	LD	HL,(IX+%6)
00000B 23                  A   778    	INC	HL
00000C 4E                  A   779    	LD	C,(HL)
00000D 0600                A   780    	LD	B,%0
00000F C5E1                A   781    	LD	HL,BC
000011 DD75FE              A   782    	LD	(IX+%FFFFFFFE),L
000014 DD74FF              A   783    	LD	(IX+%FFFFFFFF),H
                           A   784    ;  619		rv = rv << 8 | ptr[0];
000017 DD2706              A   785    	LD	HL,(IX+%6)
00001A 4E                  A   786    	LD	C,(HL)
00001B C5D1                A   787    	LD	DE,BC
00001D DD27FE              A   788    	LD	HL,(IX+%FFFFFFFE)
000020 65                  A   789    	LD	H,L
000021 2E00                A   790    	LD	L,%0
000023 E5C1                A   791    	LD	BC,HL
000025 D5E1                A   792    	LD	HL,DE
000027 CD 00 00 00         A   793    	CALL	__sor
00002B DD75FE              A   794    	LD	(IX+%FFFFFFFE),L
00002E DD74FF              A   795    	LD	(IX+%FFFFFFFF),H
                           A   796    ;  620		return rv;
000031 DD27FE              A   797    	LD	HL,(IX+%FFFFFFFE)
                           A   798    ;  621	}
000034 DDF9                A   799    	LD	SP,IX
000036 DDE1                A   800    	POP	IX
000038 C9                  A   801    	RET	
                           A   802    
                           A   803    
                           A   804    ;**************************** _ld_word ********
                           A   805    ;Name                         Addr/Register   S
                           A   806    ;rv                                    IX-2    
                           A   807    ;ptr                                   IX+6    
                           A   808    
                           A   809    
                           A   810    ; Stack Frame Size: 11 (bytes)
                           A   811    ;       Spill Code: 0 (instruction)
                           A   812    
                           A   813    
                           A   814    ;  622	
                           A   815    ;  623	static DWORD ld_dword (const BYTE* ptr)
                           A   816    ;  624	{
000039                     A   817    _ld_dword:
000039 21F3FFFF            A   818    	LD	HL,-13
00003D CD 00 00 00         A   819    	CALL	__frameset
                           A   820    ;  625		DWORD rv;
                           A   821    ;  626	
                           A   822    ;  627		rv = ptr[3];
000041 DD3106              A   823    	LD	IY,(IX+%6)
000044 B7ED62              A   824    	UEXT	HL
000047 FD6E03              A   825    	LD	L,(IY+%3)
00004A E5C1                A   826    	LD	BC,HL
00004C DD0FFC              A   827    	LD	(IX+%FFFFFFFC),BC
00004F DD74FF              A   828    	LD	(IX+%FFFFFFFF),H
                           A   829    ;  628		rv = rv << 8 | ptr[2];
000052 B7ED62              A   830    	UEXT	HL
000055 FD6E02              A   831    	LD	L,(IY+%2)
000058 DD2FF9              A   832    	LD	(IX+%FFFFFFF9),HL
00005B 5C                  A   833    	LD	E,H
00005C DD7EFF              A   834    	LD	A,(IX+%FFFFFFFF)
00005F 2E08                A   835    	LD	L,%8
000061 CD 00 00 00         A   836    	CALL	__lshl
000065 DD27F9              A   837    	LD	HL,(IX+%FFFFFFF9)
000068 CD 00 00 00         A   838    	CALL	__lor
00006C E5C1                A   839    	LD	BC,HL
00006E DD0FFC              A   840    	LD	(IX+%FFFFFFFC),BC
000071 DD73FF              A   841    	LD	(IX+%FFFFFFFF),E
                           A   842    ;  629		rv = rv << 8 | ptr[1];
000074 B7ED62              A   843    	UEXT	HL
000077 FD6E01              A   844    	LD	L,(IY+%1)
00007A DD2FF6              A   845    	LD	(IX+%FFFFFFF6),HL
00007D 5C                  A   846    	LD	E,H
00007E DD7EFF              A   847    	LD	A,(IX+%FFFFFFFF)
000081 2E08                A   848    	LD	L,%8
000083 CD 00 00 00         A   849    	CALL	__lshl
000087 DD27F6              A   850    	LD	HL,(IX+%FFFFFFF6)
00008A CD 00 00 00         A   851    	CALL	__lor
00008E DD2FFC              A   852    	LD	(IX+%FFFFFFFC),HL
000091 DD73FF              A   853    	LD	(IX+%FFFFFFFF),E
                           A   854    ;  630		rv = rv << 8 | ptr[0];
000094 E5C1                A   855    	LD	BC,HL
000096 DD7EFF              A   856    	LD	A,(IX+%FFFFFFFF)
000099 2E08                A   857    	LD	L,%8
00009B CD 00 00 00         A   858    	CALL	__lshl
00009F DD0FF3              A   859    	LD	(IX+%FFFFFFF3),BC
0000A2 5F                  A   860    	LD	E,A
0000A3 B7ED62              A   861    	UEXT	HL
0000A6 FD6E00              A   862    	LD	L,(IY)
0000A9 E5C1                A   863    	LD	BC,HL
0000AB 7C                  A   864    	LD	A,H
0000AC DD27F3              A   865    	LD	HL,(IX+%FFFFFFF3)
0000AF CD 00 00 00         A   866    	CALL	__lor
0000B3 DD2FFC              A   867    	LD	(IX+%FFFFFFFC),HL
0000B6 DD73FF              A   868    	LD	(IX+%FFFFFFFF),E
                           A   869    ;  631		return rv;
0000B9 DD27FC              A   870    	LD	HL,(IX+%FFFFFFFC)
0000BC DD5EFF              A   871    	LD	E,(IX+%FFFFFFFF)
                           A   872    ;  632	}
0000BF DDF9                A   873    	LD	SP,IX
0000C1 DDE1                A   874    	POP	IX
0000C3 C9                  A   875    	RET	
                           A   876    
                           A   877    
                           A   878    ;**************************** _ld_dword *******
                           A   879    ;Name                         Addr/Register   S
                           A   880    ;rv                                    IX-4    
                           A   881    ;ptr                                   IX+6    
                           A   882    
                           A   883    
                           A   884    ; Stack Frame Size: 22 (bytes)
                           A   885    ;       Spill Code: 0 (instruction)
                           A   886    
                           A   887    
                           A   888    ;  633	
                           A   889    ;  634	#if FF_FS_EXFAT
                           A   890    ;  635	static QWORD ld_qword (const BYTE* ptr)
                           A   891    ;  636	{
                           A   892    ;  637		QWORD rv;
                           A   893    ;  638	
                           A   894    ;  639		rv = ptr[7];
                           A   895    ;  640		rv = rv << 8 | ptr[6];
                           A   896    ;  641		rv = rv << 8 | ptr[5];
                           A   897    ;  642		rv = rv << 8 | ptr[4];
                           A   898    ;  643		rv = rv << 8 | ptr[3];
                           A   899    ;  644		rv = rv << 8 | ptr[2];
                           A   900    ;  645		rv = rv << 8 | ptr[1];
                           A   901    ;  646		rv = rv << 8 | ptr[0];
                           A   902    ;  647		return rv;
                           A   903    ;  648	}
                           A   904    ;  649	#endif
                           A   905    ;  650	
                           A   906    ;  651	#if !FF_FS_READONLY
                           A   907    ;  652	static void st_word (BYTE* ptr, WORD va
                           A   908    ;  653	{
0000C4                     A   909    _st_word:
0000C4 CD 00 00 00         A   910    	CALL	__frameset0
                           A   911    ;  654		*ptr++ = (BYTE)val; val >>= 8;
0000C8 DD7E09              A   912    	LD	A,(IX+%9)
0000CB DD2706              A   913    	LD	HL,(IX+%6)
0000CE 77                  A   914    	LD	(HL),A
0000CF DD0706              A   915    	LD	BC,(IX+%6)
0000D2 03                  A   916    	INC	BC
0000D3 DD0F06              A   917    	LD	(IX+%6),BC
0000D6 DD0709              A   918    	LD	BC,(IX+%9)
0000D9 CD 00 00 00         A   919    	CALL	__stoiu
0000DD 3E08                A   920    	LD	A,%8
0000DF CD 00 00 00         A   921    	CALL	__ishrs_b
0000E3 DD7509              A   922    	LD	(IX+%9),L
0000E6 DD740A              A   923    	LD	(IX+%A),H
                           A   924    ;  655		*ptr++ = (BYTE)val;
0000E9 DD7E09              A   925    	LD	A,(IX+%9)
0000EC DD2706              A   926    	LD	HL,(IX+%6)
0000EF 77                  A   927    	LD	(HL),A
                           A   928    ;  656	}
0000F0 DDF9                A   929    	LD	SP,IX
0000F2 DDE1                A   930    	POP	IX
0000F4 C9                  A   931    	RET	
                           A   932    
                           A   933    
                           A   934    ;**************************** _st_word ********
                           A   935    ;Name                         Addr/Register   S
                           A   936    ;val                                   IX+9    
                           A   937    ;ptr                                   IX+6    
                           A   938    
                           A   939    
                           A   940    ; Stack Frame Size: 12 (bytes)
                           A   941    ;       Spill Code: 0 (instruction)
                           A   942    
                           A   943    
                           A   944    ;  657	
                           A   945    ;  658	static void st_dword (BYTE* ptr, DWORD 
                           A   946    ;  659	{
0000F5                     A   947    _st_dword:
0000F5 CD 00 00 00         A   948    	CALL	__frameset0
                           A   949    ;  660		*ptr++ = (BYTE)val; val >>= 8;
0000F9 DD7E09              A   950    	LD	A,(IX+%9)
0000FC DD2706              A   951    	LD	HL,(IX+%6)
0000FF 77                  A   952    	LD	(HL),A
000100 DD0706              A   953    	LD	BC,(IX+%6)
000103 03                  A   954    	INC	BC
000104 DD0F06              A   955    	LD	(IX+%6),BC
000107 DD0709              A   956    	LD	BC,(IX+%9)
00010A DD7E0C              A   957    	LD	A,(IX+%C)
00010D 2E08                A   958    	LD	L,%8
00010F CD 00 00 00         A   959    	CALL	__lshru
000113 DD0F09              A   960    	LD	(IX+%9),BC
000116 DD770C              A   961    	LD	(IX+%C),A
                           A   962    ;  661		*ptr++ = (BYTE)val; val >>= 8;
000119 DD7E09              A   963    	LD	A,(IX+%9)
00011C DD2706              A   964    	LD	HL,(IX+%6)
00011F 77                  A   965    	LD	(HL),A
000120 DD1706              A   966    	LD	DE,(IX+%6)
000123 13                  A   967    	INC	DE
000124 DD1F06              A   968    	LD	(IX+%6),DE
000127 DD7E0C              A   969    	LD	A,(IX+%C)
00012A 2E08                A   970    	LD	L,%8
00012C CD 00 00 00         A   971    	CALL	__lshru
000130 DD0F09              A   972    	LD	(IX+%9),BC
000133 DD770C              A   973    	LD	(IX+%C),A
                           A   974    ;  662		*ptr++ = (BYTE)val; val >>= 8;
000136 DD7E09              A   975    	LD	A,(IX+%9)
000139 DD2706              A   976    	LD	HL,(IX+%6)
00013C 77                  A   977    	LD	(HL),A
00013D DD1706              A   978    	LD	DE,(IX+%6)
000140 13                  A   979    	INC	DE
000141 DD1F06              A   980    	LD	(IX+%6),DE
000144 DD7E0C              A   981    	LD	A,(IX+%C)
000147 2E08                A   982    	LD	L,%8
000149 CD 00 00 00         A   983    	CALL	__lshru
00014D DD0F09              A   984    	LD	(IX+%9),BC
000150 DD770C              A   985    	LD	(IX+%C),A
                           A   986    ;  663		*ptr++ = (BYTE)val;
000153 DD7E09              A   987    	LD	A,(IX+%9)
000156 DD2706              A   988    	LD	HL,(IX+%6)
000159 77                  A   989    	LD	(HL),A
                           A   990    ;  664	}
00015A DDF9                A   991    	LD	SP,IX
00015C DDE1                A   992    	POP	IX
00015E C9                  A   993    	RET	
                           A   994    
                           A   995    
                           A   996    ;**************************** _st_dword *******
                           A   997    ;Name                         Addr/Register   S
                           A   998    ;val                                   IX+9    
                           A   999    ;ptr                                   IX+6    
                           A  1000    
                           A  1001    
                           A  1002    ; Stack Frame Size: 15 (bytes)
                           A  1003    ;       Spill Code: 0 (instruction)
                           A  1004    
                           A  1005    
                           A  1006    ;  665	
                           A  1007    ;  666	#if FF_FS_EXFAT
                           A  1008    ;  667	static void st_qword (BYTE* ptr, QWORD 
                           A  1009    ;  668	{
                           A  1010    ;  669		*ptr++ = (BYTE)val; val >>= 8;
                           A  1011    ;  670		*ptr++ = (BYTE)val; val >>= 8;
                           A  1012    ;  671		*ptr++ = (BYTE)val; val >>= 8;
                           A  1013    ;  672		*ptr++ = (BYTE)val; val >>= 8;
                           A  1014    ;  673		*ptr++ = (BYTE)val; val >>= 8;
                           A  1015    ;  674		*ptr++ = (BYTE)val; val >>= 8;
                           A  1016    ;  675		*ptr++ = (BYTE)val; val >>= 8;
                           A  1017    ;  676		*ptr++ = (BYTE)val;
                           A  1018    ;  677	}
                           A  1019    ;  678	#endif
                           A  1020    ;  679	#endif	/* !FF_FS_READONLY */
                           A  1021    ;  680	
                           A  1022    ;  681	
                           A  1023    ;  682	
                           A  1024    ;  683	/*-------------------------------------
                           A  1025    ;  684	/* String functions                    
                           A  1026    ;  685	/*-------------------------------------
                           A  1027    ;  686	
                           A  1028    ;  687	/* Test if the byte is DBC 1st byte */
                           A  1029    ;  688	static int dbc_1st (BYTE c)
                           A  1030    ;  689	{
00015F                     A  1031    _dbc_1st:
00015F CD 00 00 00         A  1032    	CALL	__frameset0
                           A  1033    ;  690	#if FF_CODE_PAGE == 0		/* Variable
                           A  1034    ;  691		if (DbcTbl && c >= DbcTbl[0]) {
                           A  1035    ;  692			if (c <= DbcTbl[1]) return 1;	
                           A  1036    ;  693			if (c >= DbcTbl[2] && c <= DbcT
                           A  1037    ;  694		}
                           A  1038    ;  695	#elif FF_CODE_PAGE >= 900	/* DBCS fix
                           A  1039    ;  696		if (c >= DbcTbl[0]) {
                           A  1040    ;  697			if (c <= DbcTbl[1]) return 1;
                           A  1041    ;  698			if (c >= DbcTbl[2] && c <= DbcT
                           A  1042    ;  699		}
                           A  1043    ;  700	#else						/* SBCS fix
                           A  1044    ;  701		if (c != 0) return 0;	/* Always f
000163 DD7E06              A  1045    	LD	A,(IX+%6)
000166 B7                  A  1046    	OR	A,A
000167 28 05               A  1047    	JR	Z,L_11
000169 B7                  A  1048    	OR	A,A
00016A ED62                A  1049    	SBC	HL,HL
00016C 18 03               A  1050    	JR	L_12
00016E                     A  1051    L_11:
00016E B7                  A  1052    	OR	A,A
                           A  1053    ;  702	#endif
                           A  1054    ;  703		return 0;
00016F ED62                A  1055    	SBC	HL,HL
                           A  1056    ;  704	}
000171                     A  1057    L_12:
000171 DDF9                A  1058    	LD	SP,IX
000173 DDE1                A  1059    	POP	IX
000175 C9                  A  1060    	RET	
                           A  1061    
                           A  1062    
                           A  1063    ;**************************** _dbc_1st ********
                           A  1064    ;Name                         Addr/Register   S
                           A  1065    ;c                                     IX+6    
                           A  1066    
                           A  1067    
                           A  1068    ; Stack Frame Size: 9 (bytes)
                           A  1069    ;       Spill Code: 0 (instruction)
                           A  1070    
                           A  1071    
                           A  1072    ;  705	
                           A  1073    ;  706	
                           A  1074    ;  707	/* Test if the byte is DBC 2nd byte */
                           A  1075    ;  708	static int dbc_2nd (BYTE c)
                           A  1076    ;  709	{
000176                     A  1077    _dbc_2nd:
000176 CD 00 00 00         A  1078    	CALL	__frameset0
                           A  1079    ;  710	#if FF_CODE_PAGE == 0		/* Variable
                           A  1080    ;  711		if (DbcTbl && c >= DbcTbl[4]) {
                           A  1081    ;  712			if (c <= DbcTbl[5]) return 1;	
                           A  1082    ;  713			if (c >= DbcTbl[6] && c <= DbcT
                           A  1083    ;  714			if (c >= DbcTbl[8] && c <= DbcT
                           A  1084    ;  715		}
                           A  1085    ;  716	#elif FF_CODE_PAGE >= 900	/* DBCS fix
                           A  1086    ;  717		if (c >= DbcTbl[4]) {
                           A  1087    ;  718			if (c <= DbcTbl[5]) return 1;
                           A  1088    ;  719			if (c >= DbcTbl[6] && c <= DbcT
                           A  1089    ;  720			if (c >= DbcTbl[8] && c <= DbcT
                           A  1090    ;  721		}
                           A  1091    ;  722	#else						/* SBCS fix
                           A  1092    ;  723		if (c != 0) return 0;	/* Always f
00017A DD7E06              A  1093    	LD	A,(IX+%6)
00017D B7                  A  1094    	OR	A,A
00017E 28 05               A  1095    	JR	Z,L_14
000180 B7                  A  1096    	OR	A,A
000181 ED62                A  1097    	SBC	HL,HL
000183 18 03               A  1098    	JR	L_15
000185                     A  1099    L_14:
000185 B7                  A  1100    	OR	A,A
                           A  1101    ;  724	#endif
                           A  1102    ;  725		return 0;
000186 ED62                A  1103    	SBC	HL,HL
                           A  1104    ;  726	}
000188                     A  1105    L_15:
000188 DDF9                A  1106    	LD	SP,IX
00018A DDE1                A  1107    	POP	IX
00018C C9                  A  1108    	RET	
                           A  1109    
                           A  1110    
                           A  1111    ;**************************** _dbc_2nd ********
                           A  1112    ;Name                         Addr/Register   S
                           A  1113    ;c                                     IX+6    
                           A  1114    
                           A  1115    
                           A  1116    ; Stack Frame Size: 9 (bytes)
                           A  1117    ;       Spill Code: 0 (instruction)
                           A  1118    
                           A  1119    
                           A  1120    ;  727	
                           A  1121    ;  728	
                           A  1122    ;  729	#if FF_USE_LFN
                           A  1123    ;  730	
                           A  1124    ;  731	/* Get a Unicode code point from the TC
                           A  1125    ;  732	static DWORD tchar2uni (	/* Returns 
                           A  1126    ;  733		const TCHAR** str		/* Pointer 
                           A  1127    ;  734	)
                           A  1128    ;  735	{
00018D                     A  1129    _tchar2uni:
00018D 21F6FFFF            A  1130    	LD	HL,-10
000191 CD 00 00 00         A  1131    	CALL	__frameset
                           A  1132    ;  736		DWORD uc;
                           A  1133    ;  737		const TCHAR *p = *str;
000195 DD2706              A  1134    	LD	HL,(IX+%6)
000198 ED07                A  1135    	LD	BC,(HL)
00019A DD0FFD              A  1136    	LD	(IX+%FFFFFFFD),BC
                           A  1137    ;  738	
                           A  1138    ;  739	#if FF_LFN_UNICODE == 1		/* UTF-16 i
                           A  1139    ;  740		WCHAR wc;
                           A  1140    ;  741	
                           A  1141    ;  742		uc = *p++;	/* Get a unit */
                           A  1142    ;  743		if (IsSurrogate(uc)) {	/* Surrogat
                           A  1143    ;  744			wc = *p++;		/* Get low surr
                           A  1144    ;  745			if (!IsSurrogateH(uc) || !IsSur
                           A  1145    ;  746			uc = uc << 16 | wc;
                           A  1146    ;  747		}
                           A  1147    ;  748	
                           A  1148    ;  749	#elif FF_LFN_UNICODE == 2	/* UTF-8 in
                           A  1149    ;  750		BYTE b;
                           A  1150    ;  751		int nf;
                           A  1151    ;  752	
                           A  1152    ;  753		uc = (BYTE)*p++;	/* Get an encod
                           A  1153    ;  754		if (uc & 0x80) {	/* Multiple byt
                           A  1154    ;  755			if        ((uc & 0xE0) == 0xC0)
                           A  1155    ;  756				uc &= 0x1F; nf = 1;
                           A  1156    ;  757			} else if ((uc & 0xF0) == 0xE0)
                           A  1157    ;  758				uc &= 0x0F; nf = 2;
                           A  1158    ;  759			} else if ((uc & 0xF8) == 0xF0)
                           A  1159    ;  760				uc &= 0x07; nf = 3;
                           A  1160    ;  761			} else {						
                           A  1161    ;  762				return 0xFFFFFFFF;
                           A  1162    ;  763			}
                           A  1163    ;  764			do {	/* Get trailing bytes *
                           A  1164    ;  765				b = (BYTE)*p++;
                           A  1165    ;  766				if ((b & 0xC0) != 0x80) ret
                           A  1166    ;  767				uc = uc << 6 | (b & 0x3F);
                           A  1167    ;  768			} while (--nf != 0);
                           A  1168    ;  769			if (uc < 0x80 || IsSurrogate(uc
                           A  1169    ;  770			if (uc >= 0x010000) uc = 0xD800
                           A  1170    ;  771		}
                           A  1171    ;  772	
                           A  1172    ;  773	#elif FF_LFN_UNICODE == 3	/* UTF-32 i
                           A  1173    ;  774		uc = (TCHAR)*p++;	/* Get a unit *
                           A  1174    ;  775		if (uc >= 0x110000 || IsSurrogate(u
                           A  1175    ;  776		if (uc >= 0x010000) uc = 0xD800DC00
                           A  1176    ;  777	
                           A  1177    ;  778	#else		/* ANSI/OEM input */
                           A  1178    ;  779		BYTE b;
                           A  1179    ;  780		WCHAR wc;
                           A  1180    ;  781	
                           A  1181    ;  782		wc = (BYTE)*p++;			/* Get 
00019D C5E1                A  1182    	LD	HL,BC
00019F 4E                  A  1183    	LD	C,(HL)
0001A0 0600                A  1184    	LD	B,%0
0001A2 C5E1                A  1185    	LD	HL,BC
0001A4 DD75FB              A  1186    	LD	(IX+%FFFFFFFB),L
0001A7 DD74FC              A  1187    	LD	(IX+%FFFFFFFC),H
0001AA DD07FD              A  1188    	LD	BC,(IX+%FFFFFFFD)
0001AD 03                  A  1189    	INC	BC
0001AE DD0FFD              A  1190    	LD	(IX+%FFFFFFFD),BC
                           A  1191    ;  783		if (dbc_1st((BYTE)wc)) {	/* Is i
0001B1 DD4EFB              A  1192    	LD	C,(IX+%FFFFFFFB)
0001B4 0600                A  1193    	LD	B,%0
0001B6 C5                  A  1194    	PUSH	BC
0001B7 CD 5F 01 00         A  1195    	CALL	_dbc_1st
0001BB C1                  A  1196    	POP	BC
0001BC CD 00 00 00         A  1197    	CALL	__icmpzero
0001C0 28 3A               A  1198    	JR	Z,L_23
                           A  1199    ;  784			b = (BYTE)*p++;			/* Get 
0001C2 DD27FD              A  1200    	LD	HL,(IX+%FFFFFFFD)
0001C5 7E                  A  1201    	LD	A,(HL)
0001C6 DD77FA              A  1202    	LD	(IX+%FFFFFFFA),A
0001C9 DD07FD              A  1203    	LD	BC,(IX+%FFFFFFFD)
0001CC 03                  A  1204    	INC	BC
0001CD DD0FFD              A  1205    	LD	(IX+%FFFFFFFD),BC
                           A  1206    ;  785			if (!dbc_2nd(b)) return 0xFFFFF
0001D0 DD4EFA              A  1207    	LD	C,(IX+%FFFFFFFA)
0001D3 0600                A  1208    	LD	B,%0
0001D5 C5                  A  1209    	PUSH	BC
0001D6 CD 76 01 00         A  1210    	CALL	_dbc_2nd
0001DA C1                  A  1211    	POP	BC
0001DB CD 00 00 00         A  1212    	CALL	__icmpzero
0001DF 20 08               A  1213    	JR	NZ,L_19
0001E1 21FFFFFF            A  1214    	LD	HL,16777215
0001E5 1EFF                A  1215    	LD	E,%FF
0001E7 18 5E               A  1216    	JR	L_25
0001E9                     A  1217    L_19:
                           A  1218    ;  786			wc = (wc << 8) + b;		/* Make
0001E9 DD27FB              A  1219    	LD	HL,(IX+%FFFFFFFB)
0001EC 65                  A  1220    	LD	H,L
0001ED 2E00                A  1221    	LD	L,%0
0001EF DD4EFA              A  1222    	LD	C,(IX+%FFFFFFFA)
0001F2 0600                A  1223    	LD	B,%0
0001F4 4009                A  1224    	ADD.SIS	HL,BC
0001F6 DD75FB              A  1225    	LD	(IX+%FFFFFFFB),L
0001F9 DD74FC              A  1226    	LD	(IX+%FFFFFFFC),H
                           A  1227    ;  787		}
0001FC                     A  1228    L_23:
                           A  1229    ;  788		if (wc != 0) {
0001FC DD27FB              A  1230    	LD	HL,(IX+%FFFFFFFB)
0001FF CD 00 00 00         A  1231    	CALL	__scmpzero
000203 28 26               A  1232    	JR	Z,L_24
                           A  1233    ;  789			wc = ff_oem2uni(wc, CODEPAGE);	
000205 01B50100            A  1234    	LD	BC,437
000209 C5                  A  1235    	PUSH	BC
00020A DD07FB              A  1236    	LD	BC,(IX+%FFFFFFFB)
00020D C5                  A  1237    	PUSH	BC
00020E CD 00 00 00         A  1238    	CALL	_ff_oem2uni
000212 C1                  A  1239    	POP	BC
000213 C1                  A  1240    	POP	BC
000214 DD75FB              A  1241    	LD	(IX+%FFFFFFFB),L
000217 DD74FC              A  1242    	LD	(IX+%FFFFFFFC),H
                           A  1243    ;  790			if (wc == 0) return 0xFFFFFFFF;
00021A DD27FB              A  1244    	LD	HL,(IX+%FFFFFFFB)
00021D CD 00 00 00         A  1245    	CALL	__scmpzero
000221 20 08               A  1246    	JR	NZ,L_24
000223 21FFFFFF            A  1247    	LD	HL,16777215
000227 1EFF                A  1248    	LD	E,%FF
000229 18 1C               A  1249    	JR	L_25
                           A  1250    ;  791		}
00022B                     A  1251    L_24:
                           A  1252    ;  792		uc = wc;
00022B DD07FB              A  1253    	LD	BC,(IX+%FFFFFFFB)
00022E CD 00 00 00         A  1254    	CALL	__stoiu
000232 AF                  A  1255    	XOR	A,A
000233 DD2FF6              A  1256    	LD	(IX+%FFFFFFF6),HL
000236 DD77F9              A  1257    	LD	(IX+%FFFFFFF9),A
                           A  1258    ;  793	
                           A  1259    ;  794	#endif
                           A  1260    ;  795		*str = p;	/* Next read pointer */
000239 DD2706              A  1261    	LD	HL,(IX+%6)
00023C DD07FD              A  1262    	LD	BC,(IX+%FFFFFFFD)
00023F ED0F                A  1263    	LD	(HL),BC
                           A  1264    ;  796		return uc;
000241 DD27F6              A  1265    	LD	HL,(IX+%FFFFFFF6)
000244 DD5EF9              A  1266    	LD	E,(IX+%FFFFFFF9)
                           A  1267    ;  797	}
000247                     A  1268    L_25:
000247 DDF9                A  1269    	LD	SP,IX
000249 DDE1                A  1270    	POP	IX
00024B C9                  A  1271    	RET	
                           A  1272    
                           A  1273    
                           A  1274    ;**************************** _tchar2uni ******
                           A  1275    ;Name                         Addr/Register   S
                           A  1276    ;_ff_oem2uni                         IMPORT  --
                           A  1277    ;uc                                   IX-10    
                           A  1278    ;b                                     IX-6    
                           A  1279    ;wc                                    IX-5    
                           A  1280    ;p                                     IX-3    
                           A  1281    ;str                                   IX+6    
                           A  1282    
                           A  1283    
                           A  1284    ; Stack Frame Size: 19 (bytes)
                           A  1285    ;       Spill Code: 0 (instruction)
                           A  1286    
                           A  1287    
                           A  1288    ;  798	
                           A  1289    ;  799	
                           A  1290    ;  800	/* Store a Unicode char in defined API 
                           A  1291    ;  801	static UINT put_utf (	/* Returns numb
                           A  1292    ;  802		DWORD chr,	/* UTF-16 encoded chara
                           A  1293    ;  803		TCHAR* buf,	/* Output buffer */
                           A  1294    ;  804		UINT szb	/* Size of the buffer *
                           A  1295    ;  805	)
                           A  1296    ;  806	{
00024C                     A  1297    _put_utf:
00024C 21FEFFFF            A  1298    	LD	HL,-2
000250 CD 00 00 00         A  1299    	CALL	__frameset
                           A  1300    ;  807	#if FF_LFN_UNICODE == 1	/* UTF-16 outpu
                           A  1301    ;  808		WCHAR hs, wc;
                           A  1302    ;  809	
                           A  1303    ;  810		hs = (WCHAR)(chr >> 16);
                           A  1304    ;  811		wc = (WCHAR)chr;
                           A  1305    ;  812		if (hs == 0) {	/* Single encoding 
                           A  1306    ;  813			if (szb < 1 || IsSurrogate(wc))
                           A  1307    ;  814			*buf = wc;
                           A  1308    ;  815			return 1;
                           A  1309    ;  816		}
                           A  1310    ;  817		if (szb < 2 || !IsSurrogateH(hs) ||
                           A  1311    ;  818		*buf++ = hs;
                           A  1312    ;  819		*buf++ = wc;
                           A  1313    ;  820		return 2;
                           A  1314    ;  821	
                           A  1315    ;  822	#elif FF_LFN_UNICODE == 2	/* UTF-8 ou
                           A  1316    ;  823		DWORD hc;
                           A  1317    ;  824	
                           A  1318    ;  825		if (chr < 0x80) {	/* Single byte 
                           A  1319    ;  826			if (szb < 1) return 0;	/* Buff
                           A  1320    ;  827			*buf = (TCHAR)chr;
                           A  1321    ;  828			return 1;
                           A  1322    ;  829		}
                           A  1323    ;  830		if (chr < 0x800) {	/* 2-byte seque
                           A  1324    ;  831			if (szb < 2) return 0;	/* Buff
                           A  1325    ;  832			*buf++ = (TCHAR)(0xC0 | (chr >>
                           A  1326    ;  833			*buf++ = (TCHAR)(0x80 | (chr >>
                           A  1327    ;  834			return 2;
                           A  1328    ;  835		}
                           A  1329    ;  836		if (chr < 0x10000) {	/* 3-byte s
                           A  1330    ;  837			if (szb < 3 || IsSurrogate(chr)
                           A  1331    ;  838			*buf++ = (TCHAR)(0xE0 | (chr >>
                           A  1332    ;  839			*buf++ = (TCHAR)(0x80 | (chr >>
                           A  1333    ;  840			*buf++ = (TCHAR)(0x80 | (chr >>
                           A  1334    ;  841			return 3;
                           A  1335    ;  842		}
                           A  1336    ;  843		/* 4-byte sequence */
                           A  1337    ;  844		if (szb < 4) return 0;	/* Buffer o
                           A  1338    ;  845		hc = ((chr & 0xFFFF0000) - 0xD80000
                           A  1339    ;  846		chr = (chr & 0xFFFF) - 0xDC00;		
                           A  1340    ;  847		if (hc >= 0x100000 || chr >= 0x400)
                           A  1341    ;  848		chr = (hc | chr) + 0x10000;
                           A  1342    ;  849		*buf++ = (TCHAR)(0xF0 | (chr >> 18 
                           A  1343    ;  850		*buf++ = (TCHAR)(0x80 | (chr >> 12 
                           A  1344    ;  851		*buf++ = (TCHAR)(0x80 | (chr >> 6 &
                           A  1345    ;  852		*buf++ = (TCHAR)(0x80 | (chr >> 0 &
                           A  1346    ;  853		return 4;
                           A  1347    ;  854	
                           A  1348    ;  855	#elif FF_LFN_UNICODE == 3	/* UTF-32 o
                           A  1349    ;  856		DWORD hc;
                           A  1350    ;  857	
                           A  1351    ;  858		if (szb < 1) return 0;	/* Buffer o
                           A  1352    ;  859		if (chr >= 0x10000) {	/* Out of B
                           A  1353    ;  860			hc = ((chr & 0xFFFF0000) - 0xD8
                           A  1354    ;  861			chr = (chr & 0xFFFF) - 0xDC00;	
                           A  1355    ;  862			if (hc >= 0x100000 || chr >= 0x
                           A  1356    ;  863			chr = (hc | chr) + 0x10000;
                           A  1357    ;  864		}
                           A  1358    ;  865		*buf++ = (TCHAR)chr;
                           A  1359    ;  866		return 1;
                           A  1360    ;  867	
                           A  1361    ;  868	#else						/* ANSI/OEM
                           A  1362    ;  869		WCHAR wc;
                           A  1363    ;  870	
                           A  1364    ;  871		wc = ff_uni2oem(chr, CODEPAGE);
000254 01B50100            A  1365    	LD	BC,437
000258 C5                  A  1366    	PUSH	BC
000259 DD4E09              A  1367    	LD	C,(IX+%9)
00025C 0600                A  1368    	LD	B,%0
00025E C5                  A  1369    	PUSH	BC
00025F DD0706              A  1370    	LD	BC,(IX+%6)
000262 C5                  A  1371    	PUSH	BC
000263 CD 00 00 00         A  1372    	CALL	_ff_uni2oem
000267 C1                  A  1373    	POP	BC
000268 C1                  A  1374    	POP	BC
000269 C1                  A  1375    	POP	BC
00026A DD75FE              A  1376    	LD	(IX+%FFFFFFFE),L
00026D DD74FF              A  1377    	LD	(IX+%FFFFFFFF),H
                           A  1378    ;  872		if (wc >= 0x100) {	/* Is this a DB
000270 49010001            A  1379    	LD.LIS	BC,256
000274 DD27FE              A  1380    	LD	HL,(IX+%FFFFFFFE)
000277 B7                  A  1381    	OR	A,A
000278 40ED42              A  1382    	SBC.SIS	HL,BC
00027B 38 37               A  1383    	JR	C,L_33
                           A  1384    ;  873			if (szb < 2) return 0;
00027D 01020000            A  1385    	LD	BC,2
000281 DD270F              A  1386    	LD	HL,(IX+%F)
000284 B7                  A  1387    	OR	A,A
000285 ED42                A  1388    	SBC	HL,BC
000287 30 05               A  1389    	JR	NC,L_28
000289 B7                  A  1390    	OR	A,A
00028A ED62                A  1391    	SBC	HL,HL
00028C 18 4B               A  1392    	JR	L_36
00028E                     A  1393    L_28:
                           A  1394    ;  874			*buf++ = (char)(wc >> 8);	/* 
00028E DD07FE              A  1395    	LD	BC,(IX+%FFFFFFFE)
000291 CD 00 00 00         A  1396    	CALL	__stoiu
000295 3E08                A  1397    	LD	A,%8
000297 CD 00 00 00         A  1398    	CALL	__ishrs_b
00029B DD310C              A  1399    	LD	IY,(IX+%C)
00029E FD7500              A  1400    	LD	(IY),L
0002A1 DD070C              A  1401    	LD	BC,(IX+%C)
0002A4 03                  A  1402    	INC	BC
0002A5 DD0F0C              A  1403    	LD	(IX+%C),BC
                           A  1404    ;  875			*buf++ = (TCHAR)wc;			/* 
0002A8 DD7EFE              A  1405    	LD	A,(IX+%FFFFFFFE)
0002AB C5E1                A  1406    	LD	HL,BC
0002AD 77                  A  1407    	LD	(HL),A
                           A  1408    ;  876			return 2;
0002AE 21020000            A  1409    	LD	HL,2
0002B2 18 25               A  1410    	JR	L_36
                           A  1411    ;  877		}
0002B4                     A  1412    L_33:
                           A  1413    ;  878		if (wc == 0 || szb < 1) return 0;	
0002B4 DD27FE              A  1414    	LD	HL,(IX+%FFFFFFFE)
0002B7 CD 00 00 00         A  1415    	CALL	__scmpzero
0002BB 28 0C               A  1416    	JR	Z,L_32
0002BD 01010000            A  1417    	LD	BC,1
0002C1 DD270F              A  1418    	LD	HL,(IX+%F)
0002C4 B7                  A  1419    	OR	A,A
0002C5 ED42                A  1420    	SBC	HL,BC
0002C7 30 05               A  1421    	JR	NC,L_35
0002C9                     A  1422    L_32:
0002C9 B7                  A  1423    	OR	A,A
0002CA ED62                A  1424    	SBC	HL,HL
0002CC 18 0B               A  1425    	JR	L_36
0002CE                     A  1426    L_35:
                           A  1427    ;  879		*buf++ = (TCHAR)wc;					
0002CE DD7EFE              A  1428    	LD	A,(IX+%FFFFFFFE)
0002D1 DD270C              A  1429    	LD	HL,(IX+%C)
0002D4 77                  A  1430    	LD	(HL),A
                           A  1431    ;  880		return 1;
0002D5 21010000            A  1432    	LD	HL,1
                           A  1433    ;  881	#endif
                           A  1434    ;  882	}
0002D9                     A  1435    L_36:
0002D9 DDF9                A  1436    	LD	SP,IX
0002DB DDE1                A  1437    	POP	IX
0002DD C9                  A  1438    	RET	
                           A  1439    
                           A  1440    
                           A  1441    ;**************************** _put_utf ********
                           A  1442    ;Name                         Addr/Register   S
                           A  1443    ;_ff_uni2oem                         IMPORT  --
                           A  1444    ;wc                                    IX-2    
                           A  1445    ;szb                                  IX+15    
                           A  1446    ;buf                                  IX+12    
                           A  1447    ;chr                                   IX+6    
                           A  1448    
                           A  1449    
                           A  1450    ; Stack Frame Size: 20 (bytes)
                           A  1451    ;       Spill Code: 0 (instruction)
                           A  1452    
                           A  1453    
                           A  1454    ;  883	#endif	/* FF_USE_LFN */
                           A  1455    ;  884	
                           A  1456    ;  885	
                           A  1457    ;  886	#if FF_FS_REENTRANT
                           A  1458    ;  887	/*-------------------------------------
                           A  1459    ;  888	/* Request/Release grant to access the 
                           A  1460    ;  889	/*-------------------------------------
                           A  1461    ;  890	static int lock_fs (		/* 1:Ok, 0:
                           A  1462    ;  891		FATFS* fs		/* Filesystem objec
                           A  1463    ;  892	)
                           A  1464    ;  893	{
                           A  1465    ;  894		return ff_req_grant(fs->sobj);
                           A  1466    ;  895	}
                           A  1467    ;  896	
                           A  1468    ;  897	
                           A  1469    ;  898	static void unlock_fs (
                           A  1470    ;  899		FATFS* fs,		/* Filesystem objec
                           A  1471    ;  900		FRESULT res		/* Result code to b
                           A  1472    ;  901	)
                           A  1473    ;  902	{
                           A  1474    ;  903		if (fs && res != FR_NOT_ENABLED && 
                           A  1475    ;  904			ff_rel_grant(fs->sobj);
                           A  1476    ;  905		}
                           A  1477    ;  906	}
                           A  1478    ;  907	
                           A  1479    ;  908	#endif
                           A  1480    ;  909	
                           A  1481    ;  910	
                           A  1482    ;  911	
                           A  1483    ;  912	#if FF_FS_LOCK != 0
                           A  1484    ;  913	/*-------------------------------------
                           A  1485    ;  914	/* File lock control functions         
                           A  1486    ;  915	/*-------------------------------------
                           A  1487    ;  916	
                           A  1488    ;  917	static FRESULT chk_lock (	/* Check if
                           A  1489    ;  918		DIR* dp,		/* Directory object
                           A  1490    ;  919		int acc			/* Desired access t
                           A  1491    ;  920	)
                           A  1492    ;  921	{
                           A  1493    ;  922		UINT i, be;
                           A  1494    ;  923	
                           A  1495    ;  924		/* Search open object table for the
                           A  1496    ;  925		be = 0;
                           A  1497    ;  926		for (i = 0; i < FF_FS_LOCK; i++) {
                           A  1498    ;  927			if (Files[i].fs) {	/* Existing
                           A  1499    ;  928				if (Files[i].fs == dp->obj.
                           A  1500    ;  929					Files[i].clu == dp->obj
                           A  1501    ;  930					Files[i].ofs == dp->dpt
                           A  1502    ;  931			} else {			/* Blank en
                           A  1503    ;  932				be = 1;
                           A  1504    ;  933			}
                           A  1505    ;  934		}
                           A  1506    ;  935		if (i == FF_FS_LOCK) {	/* The obje
                           A  1507    ;  936			return (!be && acc != 2) ? FR_T
                           A  1508    ;  937		}
                           A  1509    ;  938	
                           A  1510    ;  939		/* The object was opened. Reject an
                           A  1511    ;  940		return (acc != 0 || Files[i].ctr ==
                           A  1512    ;  941	}
                           A  1513    ;  942	
                           A  1514    ;  943	
                           A  1515    ;  944	static int enq_lock (void)	/* Check if
                           A  1516    ;  945	{
                           A  1517    ;  946		UINT i;
                           A  1518    ;  947	
                           A  1519    ;  948		for (i = 0; i < FF_FS_LOCK && Files
                           A  1520    ;  949		return (i == FF_FS_LOCK) ? 0 : 1;
                           A  1521    ;  950	}
                           A  1522    ;  951	
                           A  1523    ;  952	
                           A  1524    ;  953	static UINT inc_lock (	/* Increment ob
                           A  1525    ;  954		DIR* dp,	/* Directory object poi
                           A  1526    ;  955		int acc		/* Desired access (0:Re
                           A  1527    ;  956	)
                           A  1528    ;  957	{
                           A  1529    ;  958		UINT i;
                           A  1530    ;  959	
                           A  1531    ;  960	
                           A  1532    ;  961		for (i = 0; i < FF_FS_LOCK; i++) {	
                           A  1533    ;  962			if (Files[i].fs == dp->obj.fs
                           A  1534    ;  963			 && Files[i].clu == dp->obj.scl
                           A  1535    ;  964			 && Files[i].ofs == dp->dptr) b
                           A  1536    ;  965		}
                           A  1537    ;  966	
                           A  1538    ;  967		if (i == FF_FS_LOCK) {			/* 
                           A  1539    ;  968			for (i = 0; i < FF_FS_LOCK && F
                           A  1540    ;  969			if (i == FF_FS_LOCK) return 0;	
                           A  1541    ;  970			Files[i].fs = dp->obj.fs;
                           A  1542    ;  971			Files[i].clu = dp->obj.sclust;
                           A  1543    ;  972			Files[i].ofs = dp->dptr;
                           A  1544    ;  973			Files[i].ctr = 0;
                           A  1545    ;  974		}
                           A  1546    ;  975	
                           A  1547    ;  976		if (acc >= 1 && Files[i].ctr) retur
                           A  1548    ;  977	
                           A  1549    ;  978		Files[i].ctr = acc ? 0x100 : Files[
                           A  1550    ;  979	
                           A  1551    ;  980		return i + 1;	/* Index number ori
                           A  1552    ;  981	}
                           A  1553    ;  982	
                           A  1554    ;  983	
                           A  1555    ;  984	static FRESULT dec_lock (	/* Decremen
                           A  1556    ;  985		UINT i			/* Semaphore index 
                           A  1557    ;  986	)
                           A  1558    ;  987	{
                           A  1559    ;  988		WORD n;
                           A  1560    ;  989		FRESULT res;
                           A  1561    ;  990	
                           A  1562    ;  991	
                           A  1563    ;  992		if (--i < FF_FS_LOCK) {	/* Index nu
                           A  1564    ;  993			n = Files[i].ctr;
                           A  1565    ;  994			if (n == 0x100) n = 0;	/* If w
                           A  1566    ;  995			if (n > 0) n--;			/* Decr
                           A  1567    ;  996			Files[i].ctr = n;
                           A  1568    ;  997			if (n == 0) Files[i].fs = 0;	
                           A  1569    ;  998			res = FR_OK;
                           A  1570    ;  999		} else {
                           A  1571    ; 1000			res = FR_INT_ERR;		/* Inva
                           A  1572    ; 1001		}
                           A  1573    ; 1002		return res;
                           A  1574    ; 1003	}
                           A  1575    ; 1004	
                           A  1576    ; 1005	
                           A  1577    ; 1006	static void clear_lock (	/* Clear lo
                           A  1578    ; 1007		FATFS *fs
                           A  1579    ; 1008	)
                           A  1580    ; 1009	{
                           A  1581    ; 1010		UINT i;
                           A  1582    ; 1011	
                           A  1583    ; 1012		for (i = 0; i < FF_FS_LOCK; i++) {
                           A  1584    ; 1013			if (Files[i].fs == fs) Files[i]
                           A  1585    ; 1014		}
                           A  1586    ; 1015	}
                           A  1587    ; 1016	
                           A  1588    ; 1017	#endif	/* FF_FS_LOCK != 0 */
                           A  1589    ; 1018	
                           A  1590    ; 1019	
                           A  1591    ; 1020	
                           A  1592    ; 1021	/*-------------------------------------
                           A  1593    ; 1022	/* Move/Flush disk access window in the
                           A  1594    ; 1023	/*-------------------------------------
                           A  1595    ; 1024	#if !FF_FS_READONLY
                           A  1596    ; 1025	static FRESULT sync_window (	/* Retu
                           A  1597    ; 1026		FATFS* fs			/* Filesystem o
                           A  1598    ; 1027	)
                           A  1599    ; 1028	{
0002DE                     A  1600    _sync_window:
0002DE 21F5FFFF            A  1601    	LD	HL,-11
0002E2 CD 00 00 00         A  1602    	CALL	__frameset
                           A  1603    ; 1029		FRESULT res = FR_OK;
0002E6 01000000            A  1604    	LD	BC,0
0002EA DD0FFD              A  1605    	LD	(IX+%FFFFFFFD),BC
                           A  1606    ; 1030	
                           A  1607    ; 1031	
                           A  1608    ; 1032		if (fs->wflag) {	/* Is the disk 
0002ED DD3106              A  1609    	LD	IY,(IX+%6)
0002F0 FD7E03              A  1610    	LD	A,(IY+%3)
0002F3 B7                  A  1611    	OR	A,A
0002F4 CA 9E 03 00         A  1612    	JR	Z,L_42
                           A  1613    ; 1033			if (disk_write(fs->pdrv, fs->wi
0002F8 01010000            A  1614    	LD	BC,1
0002FC C5                  A  1615    	PUSH	BC
0002FD DD3106              A  1616    	LD	IY,(IX+%6)
000300 FD072E              A  1617    	LD	BC,(IY+%2E)
000303 FD7E31              A  1618    	LD	A,(IY+%31)
000306 2600                A  1619    	LD	H,%0
000308 6F                  A  1620    	LD	L,A
000309 E5                  A  1621    	PUSH	HL
00030A C5                  A  1622    	PUSH	BC
00030B ED6632              A  1623    	PEA	IY+%32
00030E FD4E01              A  1624    	LD	C,(IY+%1)
000311 0600                A  1625    	LD	B,%0
000313 C5                  A  1626    	PUSH	BC
000314 CD 00 00 00         A  1627    	CALL	_disk_write
000318 C1                  A  1628    	POP	BC
000319 C1                  A  1629    	POP	BC
00031A C1                  A  1630    	POP	BC
00031B C1                  A  1631    	POP	BC
00031C C1                  A  1632    	POP	BC
00031D CD 00 00 00         A  1633    	CALL	__icmpzero
000321 20 74               A  1634    	JR	NZ,L_40
                           A  1635    ; 1034				fs->wflag = 0;	/* Clear wi
000323 DD3106              A  1636    	LD	IY,(IX+%6)
000326 FD360300            A  1637    	LD	(IY+%3),%0
                           A  1638    ; 1035				if (fs->winsect - fs->fatba
00032A FD072E              A  1639    	LD	BC,(IY+%2E)
00032D FD7E31              A  1640    	LD	A,(IY+%31)
000330 DD0FF5              A  1641    	LD	(IX+%FFFFFFF5),BC
000333 DD77F8              A  1642    	LD	(IX+%FFFFFFF8),A
000336 FD071A              A  1643    	LD	BC,(IY+%1A)
000339 FD7E1D              A  1644    	LD	A,(IY+%1D)
00033C DD0FF9              A  1645    	LD	(IX+%FFFFFFF9),BC
00033F DD77FC              A  1646    	LD	(IX+%FFFFFFFC),A
000342 DD27F5              A  1647    	LD	HL,(IX+%FFFFFFF5)
000345 DD5EF8              A  1648    	LD	E,(IX+%FFFFFFF8)
000348 FD0722              A  1649    	LD	BC,(IY+%22)
00034B FD7E25              A  1650    	LD	A,(IY+%25)
00034E CD 00 00 00         A  1651    	CALL	__lsub
000352 DD07F9              A  1652    	LD	BC,(IX+%FFFFFFF9)
000355 DD7EFC              A  1653    	LD	A,(IX+%FFFFFFFC)
000358 CD 00 00 00         A  1654    	CALL	__lcmpu
00035C 30 40               A  1655    	JR	NC,L_42
                           A  1656    ; 1036					if (fs->n_fats == 2) di
00035E DD3106              A  1657    	LD	IY,(IX+%6)
000361 FD7E02              A  1658    	LD	A,(IY+%2)
000364 FE02                A  1659    	CP	A,%2
000366 20 36               A  1660    	JR	NZ,L_42
000368 01010000            A  1661    	LD	BC,1
00036C C5                  A  1662    	PUSH	BC
00036D DD27F9              A  1663    	LD	HL,(IX+%FFFFFFF9)
000370 DD5EFC              A  1664    	LD	E,(IX+%FFFFFFFC)
000373 DD07F5              A  1665    	LD	BC,(IX+%FFFFFFF5)
000376 DD7EF8              A  1666    	LD	A,(IX+%FFFFFFF8)
000379 CD 00 00 00         A  1667    	CALL	__ladd
00037D 4B                  A  1668    	LD	C,E
00037E 0600                A  1669    	LD	B,%0
000380 C5                  A  1670    	PUSH	BC
000381 E5                  A  1671    	PUSH	HL
000382 DD3106              A  1672    	LD	IY,(IX+%6)
000385 ED6632              A  1673    	PEA	IY+%32
000388 FD4E01              A  1674    	LD	C,(IY+%1)
00038B C5                  A  1675    	PUSH	BC
00038C CD 00 00 00         A  1676    	CALL	_disk_write
000390 C1                  A  1677    	POP	BC
000391 C1                  A  1678    	POP	BC
000392 C1                  A  1679    	POP	BC
000393 C1                  A  1680    	POP	BC
000394 C1                  A  1681    	POP	BC
                           A  1682    ; 1037				}
                           A  1683    ; 1038			} else {
000395 18 07               A  1684    	JR	L_42
000397                     A  1685    L_40:
                           A  1686    ; 1039				res = FR_DISK_ERR;
000397 01010000            A  1687    	LD	BC,1
00039B DD0FFD              A  1688    	LD	(IX+%FFFFFFFD),BC
                           A  1689    ; 1040			}
                           A  1690    ; 1041		}
00039E                     A  1691    L_42:
                           A  1692    ; 1042		return res;
00039E DD27FD              A  1693    	LD	HL,(IX+%FFFFFFFD)
                           A  1694    ; 1043	}
0003A1 DDF9                A  1695    	LD	SP,IX
0003A3 DDE1                A  1696    	POP	IX
0003A5 C9                  A  1697    	RET	
                           A  1698    
                           A  1699    
                           A  1700    ;**************************** _sync_window ****
                           A  1701    ;Name                         Addr/Register   S
                           A  1702    ;_disk_write                         IMPORT  --
                           A  1703    ;G_0                                  IX-11    
                           A  1704    ;G_1                                   IX-7    
                           A  1705    ;res                                   IX-3    
                           A  1706    ;fs                                    IX+6    
                           A  1707    
                           A  1708    
                           A  1709    ; Stack Frame Size: 20 (bytes)
                           A  1710    ;       Spill Code: 0 (instruction)
                           A  1711    
                           A  1712    
                           A  1713    ; 1044	#endif
                           A  1714    ; 1045	
                           A  1715    ; 1046	
                           A  1716    ; 1047	static FRESULT move_window (	/* Retu
                           A  1717    ; 1048		FATFS* fs,		/* Filesystem objec
                           A  1718    ; 1049		LBA_t sect		/* Sector LBA to ma
                           A  1719    ; 1050	)
                           A  1720    ; 1051	{
0003A6                     A  1721    _move_window:
0003A6 21FDFFFF            A  1722    	LD	HL,-3
0003AA CD 00 00 00         A  1723    	CALL	__frameset
                           A  1724    ; 1052		FRESULT res = FR_OK;
0003AE 01000000            A  1725    	LD	BC,0
0003B2 DD0FFD              A  1726    	LD	(IX+%FFFFFFFD),BC
                           A  1727    ; 1053	
                           A  1728    ; 1054	
                           A  1729    ; 1055		if (sect != fs->winsect) {	/* Wind
0003B5 DD3106              A  1730    	LD	IY,(IX+%6)
0003B8 FD272E              A  1731    	LD	HL,(IY+%2E)
0003BB FD5E31              A  1732    	LD	E,(IY+%31)
0003BE DD0709              A  1733    	LD	BC,(IX+%9)
0003C1 DD7E0C              A  1734    	LD	A,(IX+%C)
0003C4 CD 00 00 00         A  1735    	CALL	__lcmpu
0003C8 28 5E               A  1736    	JR	Z,L_48
                           A  1737    ; 1056	#if !FF_FS_READONLY
                           A  1738    ; 1057			res = sync_window(fs);		/* 
0003CA DD0706              A  1739    	LD	BC,(IX+%6)
0003CD C5                  A  1740    	PUSH	BC
0003CE CD DE 02 00         A  1741    	CALL	_sync_window
0003D2 C1                  A  1742    	POP	BC
0003D3 DD2FFD              A  1743    	LD	(IX+%FFFFFFFD),HL
                           A  1744    ; 1058	#endif
                           A  1745    ; 1059			if (res == FR_OK) {			/* 
0003D6 CD 00 00 00         A  1746    	CALL	__icmpzero
0003DA 20 4C               A  1747    	JR	NZ,L_48
                           A  1748    ; 1060				if (disk_read(fs->pdrv, fs-
0003DC 01010000            A  1749    	LD	BC,1
0003E0 C5                  A  1750    	PUSH	BC
0003E1 DD4E0C              A  1751    	LD	C,(IX+%C)
0003E4 0600                A  1752    	LD	B,%0
0003E6 C5                  A  1753    	PUSH	BC
0003E7 DD0709              A  1754    	LD	BC,(IX+%9)
0003EA C5                  A  1755    	PUSH	BC
0003EB DD3106              A  1756    	LD	IY,(IX+%6)
0003EE ED6632              A  1757    	PEA	IY+%32
0003F1 FD4E01              A  1758    	LD	C,(IY+%1)
0003F4 0600                A  1759    	LD	B,%0
0003F6 C5                  A  1760    	PUSH	BC
0003F7 CD 00 00 00         A  1761    	CALL	_disk_read
0003FB C1                  A  1762    	POP	BC
0003FC C1                  A  1763    	POP	BC
0003FD C1                  A  1764    	POP	BC
0003FE C1                  A  1765    	POP	BC
0003FF C1                  A  1766    	POP	BC
000400 CD 00 00 00         A  1767    	CALL	__icmpzero
000404 28 13               A  1768    	JR	Z,L_45
                           A  1769    ; 1061					sect = (LBA_t)0 - 1;	
000406 01FFFFFF            A  1770    	LD	BC,16777215
00040A 3EFF                A  1771    	LD	A,%FF
00040C DD0F09              A  1772    	LD	(IX+%9),BC
00040F DD770C              A  1773    	LD	(IX+%C),A
                           A  1774    ; 1062					res = FR_DISK_ERR;
000412 01010000            A  1775    	LD	BC,1
000416 DD0FFD              A  1776    	LD	(IX+%FFFFFFFD),BC
                           A  1777    ; 1063				}
000419                     A  1778    L_45:
                           A  1779    ; 1064				fs->winsect = sect;
000419 DD0709              A  1780    	LD	BC,(IX+%9)
00041C DD7E0C              A  1781    	LD	A,(IX+%C)
00041F DD3106              A  1782    	LD	IY,(IX+%6)
000422 FD0F2E              A  1783    	LD	(IY+%2E),BC
000425 FD7731              A  1784    	LD	(IY+%31),A
                           A  1785    ; 1065			}
                           A  1786    ; 1066		}
000428                     A  1787    L_48:
                           A  1788    ; 1067		return res;
000428 DD27FD              A  1789    	LD	HL,(IX+%FFFFFFFD)
                           A  1790    ; 1068	}
00042B DDF9                A  1791    	LD	SP,IX
00042D DDE1                A  1792    	POP	IX
00042F C9                  A  1793    	RET	
                           A  1794    
                           A  1795    
                           A  1796    ;**************************** _move_window ****
                           A  1797    ;Name                         Addr/Register   S
                           A  1798    ;_disk_read                          IMPORT  --
                           A  1799    ;res                                   IX-3    
                           A  1800    ;sect                                  IX+9    
                           A  1801    ;fs                                    IX+6    
                           A  1802    
                           A  1803    
                           A  1804    ; Stack Frame Size: 18 (bytes)
                           A  1805    ;       Spill Code: 0 (instruction)
                           A  1806    
                           A  1807    
                           A  1808    ; 1069	
                           A  1809    ; 1070	
                           A  1810    ; 1071	
                           A  1811    ; 1072	
                           A  1812    ; 1073	#if !FF_FS_READONLY
                           A  1813    ; 1074	/*-------------------------------------
                           A  1814    ; 1075	/* Synchronize filesystem and data on t
                           A  1815    ; 1076	/*-------------------------------------
                           A  1816    ; 1077	
                           A  1817    ; 1078	static FRESULT sync_fs (	/* Returns 
                           A  1818    ; 1079		FATFS* fs		/* Filesystem objec
                           A  1819    ; 1080	)
                           A  1820    ; 1081	{
000430                     A  1821    _sync_fs:
000430 21FDFFFF            A  1822    	LD	HL,-3
000434 CD 00 00 00         A  1823    	CALL	__frameset
                           A  1824    ; 1082		FRESULT res;
                           A  1825    ; 1083	
                           A  1826    ; 1084	
                           A  1827    ; 1085		res = sync_window(fs);
000438 DD0706              A  1828    	LD	BC,(IX+%6)
00043B C5                  A  1829    	PUSH	BC
00043C CD DE 02 00         A  1830    	CALL	_sync_window
000440 C1                  A  1831    	POP	BC
000441 DD2FFD              A  1832    	LD	(IX+%FFFFFFFD),HL
                           A  1833    ; 1086		if (res == FR_OK) {
000444 CD 00 00 00         A  1834    	CALL	__icmpzero
000448 C2 63 05 00         A  1835    	JR	NZ,L_55
                           A  1836    ; 1087			if (fs->fs_type == FS_FAT32 && 
00044C DD3106              A  1837    	LD	IY,(IX+%6)
00044F FD7E00              A  1838    	LD	A,(IY+%0)
000452 FE03                A  1839    	CP	A,%3
000454 C2 40 05 00         A  1840    	JR	NZ,L_53
000458 DD3106              A  1841    	LD	IY,(IX+%6)
00045B FD7E04              A  1842    	LD	A,(IY+%4)
00045E FE01                A  1843    	CP	A,%1
000460 C2 40 05 00         A  1844    	JR	NZ,L_53
                           A  1845    ; 1088				/* Create FSInfo structure 
                           A  1846    ; 1089				memset(fs->win, 0, sizeof f
000464 01000200            A  1847    	LD	BC,512
000468 C5                  A  1848    	PUSH	BC
000469 01000000            A  1849    	LD	BC,0
00046D C5                  A  1850    	PUSH	BC
00046E DD3106              A  1851    	LD	IY,(IX+%6)
000471 ED6632              A  1852    	PEA	IY+%32
000474 CD 00 00 00         A  1853    	CALL	_memset
000478 C1                  A  1854    	POP	BC
000479 C1                  A  1855    	POP	BC
00047A C1                  A  1856    	POP	BC
                           A  1857    ; 1090				st_word(fs->win + BS_55AA, 
00047B 0155AA00            A  1858    	LD	BC,43605
00047F C5                  A  1859    	PUSH	BC
000480 01FE0100            A  1860    	LD	BC,510
000484 DD3106              A  1861    	LD	IY,(IX+%6)
000487 ED2332              A  1862    	LEA	HL,IY+%32
00048A 09                  A  1863    	ADD	HL,BC
00048B E5                  A  1864    	PUSH	HL
00048C CD C4 00 00         A  1865    	CALL	_st_word
000490 C1                  A  1866    	POP	BC
000491 C1                  A  1867    	POP	BC
                           A  1868    ; 1091				st_dword(fs->win + FSI_Lead
000492 01410000            A  1869    	LD	BC,65
000496 C5                  A  1870    	PUSH	BC
000497 01525261            A  1871    	LD	BC,6378066
00049B C5                  A  1872    	PUSH	BC
00049C DD3106              A  1873    	LD	IY,(IX+%6)
00049F ED6632              A  1874    	PEA	IY+%32
0004A2 CD F5 00 00         A  1875    	CALL	_st_dword
0004A6 C1                  A  1876    	POP	BC
0004A7 C1                  A  1877    	POP	BC
0004A8 C1                  A  1878    	POP	BC
                           A  1879    ; 1092				st_dword(fs->win + FSI_Stru
0004A9 01610000            A  1880    	LD	BC,97
0004AD C5                  A  1881    	PUSH	BC
0004AE 01727241            A  1882    	LD	BC,4289138
0004B2 C5                  A  1883    	PUSH	BC
0004B3 01E40100            A  1884    	LD	BC,484
0004B7 DD3106              A  1885    	LD	IY,(IX+%6)
0004BA ED2332              A  1886    	LEA	HL,IY+%32
0004BD 09                  A  1887    	ADD	HL,BC
0004BE E5                  A  1888    	PUSH	HL
0004BF CD F5 00 00         A  1889    	CALL	_st_dword
0004C3 C1                  A  1890    	POP	BC
0004C4 C1                  A  1891    	POP	BC
0004C5 C1                  A  1892    	POP	BC
                           A  1893    ; 1093				st_dword(fs->win + FSI_Free
0004C6 DD3106              A  1894    	LD	IY,(IX+%6)
0004C9 FD0712              A  1895    	LD	BC,(IY+%12)
0004CC FD7E15              A  1896    	LD	A,(IY+%15)
0004CF 2600                A  1897    	LD	H,%0
0004D1 6F                  A  1898    	LD	L,A
0004D2 E5                  A  1899    	PUSH	HL
0004D3 C5                  A  1900    	PUSH	BC
0004D4 01E80100            A  1901    	LD	BC,488
0004D8 ED2332              A  1902    	LEA	HL,IY+%32
0004DB 09                  A  1903    	ADD	HL,BC
0004DC E5                  A  1904    	PUSH	HL
0004DD CD F5 00 00         A  1905    	CALL	_st_dword
0004E1 C1                  A  1906    	POP	BC
0004E2 C1                  A  1907    	POP	BC
0004E3 C1                  A  1908    	POP	BC
                           A  1909    ; 1094				st_dword(fs->win + FSI_Nxt_
0004E4 DD3106              A  1910    	LD	IY,(IX+%6)
0004E7 FD070E              A  1911    	LD	BC,(IY+%E)
0004EA FD7E11              A  1912    	LD	A,(IY+%11)
0004ED 2600                A  1913    	LD	H,%0
0004EF 6F                  A  1914    	LD	L,A
0004F0 E5                  A  1915    	PUSH	HL
0004F1 C5                  A  1916    	PUSH	BC
0004F2 01EC0100            A  1917    	LD	BC,492
0004F6 ED2332              A  1918    	LEA	HL,IY+%32
0004F9 09                  A  1919    	ADD	HL,BC
0004FA E5                  A  1920    	PUSH	HL
0004FB CD F5 00 00         A  1921    	CALL	_st_dword
0004FF C1                  A  1922    	POP	BC
000500 C1                  A  1923    	POP	BC
000501 C1                  A  1924    	POP	BC
                           A  1925    ; 1095				fs->winsect = fs->volbase +
000502 DD3106              A  1926    	LD	IY,(IX+%6)
000505 FD271E              A  1927    	LD	HL,(IY+%1E)
000508 FD5E21              A  1928    	LD	E,(IY+%21)
00050B 3E01                A  1929    	LD	A,%1
00050D CD 00 00 00         A  1930    	CALL	__ladd_b
000511 FD2F2E              A  1931    	LD	(IY+%2E),HL
000514 FD7331              A  1932    	LD	(IY+%31),E
                           A  1933    ; 1096				disk_write(fs->pdrv, fs->wi
000517 01010000            A  1934    	LD	BC,1
00051B C5                  A  1935    	PUSH	BC
00051C FD072E              A  1936    	LD	BC,(IY+%2E)
00051F FD7E31              A  1937    	LD	A,(IY+%31)
000522 2600                A  1938    	LD	H,%0
000524 6F                  A  1939    	LD	L,A
000525 E5                  A  1940    	PUSH	HL
000526 C5                  A  1941    	PUSH	BC
000527 ED6632              A  1942    	PEA	IY+%32
00052A FD4E01              A  1943    	LD	C,(IY+%1)
00052D 0600                A  1944    	LD	B,%0
00052F C5                  A  1945    	PUSH	BC
000530 CD 00 00 00         A  1946    	CALL	_disk_write
000534 C1                  A  1947    	POP	BC
000535 C1                  A  1948    	POP	BC
000536 C1                  A  1949    	POP	BC
000537 C1                  A  1950    	POP	BC
000538 C1                  A  1951    	POP	BC
                           A  1952    ; 1097				fs->fsi_flag = 0;
000539 DD3106              A  1953    	LD	IY,(IX+%6)
00053C FD360400            A  1954    	LD	(IY+%4),%0
                           A  1955    ; 1098			}
000540                     A  1956    L_53:
                           A  1957    ; 1099			/* Make sure that no pending wr
                           A  1958    ; 1100			if (disk_ioctl(fs->pdrv, CTRL_S
000540 01000000            A  1959    	LD	BC,0
000544 C5                  A  1960    	PUSH	BC
000545 C5                  A  1961    	PUSH	BC
000546 DD3106              A  1962    	LD	IY,(IX+%6)
000549 FD4E01              A  1963    	LD	C,(IY+%1)
00054C 0600                A  1964    	LD	B,%0
00054E C5                  A  1965    	PUSH	BC
00054F CD 00 00 00         A  1966    	CALL	_disk_ioctl
000553 C1                  A  1967    	POP	BC
000554 C1                  A  1968    	POP	BC
000555 C1                  A  1969    	POP	BC
000556 CD 00 00 00         A  1970    	CALL	__icmpzero
00055A 28 07               A  1971    	JR	Z,L_55
00055C 01010000            A  1972    	LD	BC,1
000560 DD0FFD              A  1973    	LD	(IX+%FFFFFFFD),BC
                           A  1974    ; 1101		}
000563                     A  1975    L_55:
                           A  1976    ; 1102	
                           A  1977    ; 1103		return res;
000563 DD27FD              A  1978    	LD	HL,(IX+%FFFFFFFD)
                           A  1979    ; 1104	}
000566 DDF9                A  1980    	LD	SP,IX
000568 DDE1                A  1981    	POP	IX
00056A C9                  A  1982    	RET	
                           A  1983    
                           A  1984    
                           A  1985    ;**************************** _sync_fs ********
                           A  1986    ;Name                         Addr/Register   S
                           A  1987    ;_disk_ioctl                         IMPORT  --
                           A  1988    ;_disk_write                         IMPORT  --
                           A  1989    ;_memset                             IMPORT  --
                           A  1990    ;res                                   IX-3    
                           A  1991    ;fs                                    IX+6    
                           A  1992    
                           A  1993    
                           A  1994    ; Stack Frame Size: 12 (bytes)
                           A  1995    ;       Spill Code: 0 (instruction)
                           A  1996    
                           A  1997    
                           A  1998    ; 1105	
                           A  1999    ; 1106	#endif
                           A  2000    ; 1107	
                           A  2001    ; 1108	
                           A  2002    ; 1109	
                           A  2003    ; 1110	/*-------------------------------------
                           A  2004    ; 1111	/* Get physical sector number from clus
                           A  2005    ; 1112	/*-------------------------------------
                           A  2006    ; 1113	
                           A  2007    ; 1114	static LBA_t clst2sect (	/* !=0:Sect
                           A  2008    ; 1115		FATFS* fs,		/* Filesystem objec
                           A  2009    ; 1116		DWORD clst		/* Cluster# to be c
                           A  2010    ; 1117	)
                           A  2011    ; 1118	{
00056B                     A  2012    _clst2sect:
00056B CD 00 00 00         A  2013    	CALL	__frameset0
                           A  2014    ; 1119		clst -= 2;		/* Cluster number i
00056F DD2709              A  2015    	LD	HL,(IX+%9)
000572 DD5E0C              A  2016    	LD	E,(IX+%C)
000575 01020000            A  2017    	LD	BC,2
000579 AF                  A  2018    	XOR	A,A
00057A CD 00 00 00         A  2019    	CALL	__lsub
00057E DD2F09              A  2020    	LD	(IX+%9),HL
000581 DD730C              A  2021    	LD	(IX+%C),E
                           A  2022    ; 1120		if (clst >= fs->n_fatent - 2) retur
000584 DD3106              A  2023    	LD	IY,(IX+%6)
000587 FD2716              A  2024    	LD	HL,(IY+%16)
00058A FD5E19              A  2025    	LD	E,(IY+%19)
00058D 01020000            A  2026    	LD	BC,2
000591 AF                  A  2027    	XOR	A,A
000592 CD 00 00 00         A  2028    	CALL	__lsub
000596 7B                  A  2029    	LD	A,E
000597 E5C1                A  2030    	LD	BC,HL
000599 DD2709              A  2031    	LD	HL,(IX+%9)
00059C DD5E0C              A  2032    	LD	E,(IX+%C)
00059F CD 00 00 00         A  2033    	CALL	__lcmpu
0005A3 38 07               A  2034    	JR	C,L_58
0005A5 B7                  A  2035    	OR	A,A
0005A6 ED62                A  2036    	SBC	HL,HL
0005A8 1E00                A  2037    	LD	E,%0
0005AA 18 20               A  2038    	JR	L_59
0005AC                     A  2039    L_58:
                           A  2040    ; 1121		return fs->database + (LBA_t)fs->cs
0005AC DD3106              A  2041    	LD	IY,(IX+%6)
0005AF FD0709              A  2042    	LD	BC,(IY+%9)
0005B2 CD 00 00 00         A  2043    	CALL	__stoiu
0005B6 1E00                A  2044    	LD	E,%0
0005B8 DD0709              A  2045    	LD	BC,(IX+%9)
0005BB DD7E0C              A  2046    	LD	A,(IX+%C)
0005BE CD 00 00 00         A  2047    	CALL	__lmulu
0005C2 FD072A              A  2048    	LD	BC,(IY+%2A)
0005C5 FD7E2D              A  2049    	LD	A,(IY+%2D)
0005C8 CD 00 00 00         A  2050    	CALL	__ladd
                           A  2051    ; 1122	}
0005CC                     A  2052    L_59:
0005CC DDF9                A  2053    	LD	SP,IX
0005CE DDE1                A  2054    	POP	IX
0005D0 C9                  A  2055    	RET	
                           A  2056    
                           A  2057    
                           A  2058    ;**************************** _clst2sect ******
                           A  2059    ;Name                         Addr/Register   S
                           A  2060    ;clst                                  IX+9    
                           A  2061    ;fs                                    IX+6    
                           A  2062    
                           A  2063    
                           A  2064    ; Stack Frame Size: 15 (bytes)
                           A  2065    ;       Spill Code: 0 (instruction)
                           A  2066    
                           A  2067    
                           A  2068    ; 1123	
                           A  2069    ; 1124	
                           A  2070    ; 1125	
                           A  2071    ; 1126	
                           A  2072    ; 1127	/*-------------------------------------
                           A  2073    ; 1128	/* FAT access - Read value of an FAT en
                           A  2074    ; 1129	/*-------------------------------------
                           A  2075    ; 1130	
                           A  2076    ; 1131	static DWORD get_fat (		/* 0xFFFFFF
                           A  2077    ; 1132		FFOBJID* obj,	/* Corresponding ob
                           A  2078    ; 1133		DWORD clst		/* Cluster number t
                           A  2079    ; 1134	)
                           A  2080    ; 1135	{
0005D1                     A  2081    _get_fat:
0005D1 21F0FFFF            A  2082    	LD	HL,-16
0005D5 CD 00 00 00         A  2083    	CALL	__frameset
                           A  2084    ; 1136		UINT wc, bc;
                           A  2085    ; 1137		DWORD val;
                           A  2086    ; 1138		FATFS *fs = obj->fs;
0005D9 DD3106              A  2087    	LD	IY,(IX+%6)
0005DC FD0700              A  2088    	LD	BC,(IY+%0)
0005DF DD0FFD              A  2089    	LD	(IX+%FFFFFFFD),BC
                           A  2090    ; 1139	
                           A  2091    ; 1140	
                           A  2092    ; 1141		if (clst < 2 || clst >= fs->n_faten
0005E2 DD2709              A  2093    	LD	HL,(IX+%9)
0005E5 DD5E0C              A  2094    	LD	E,(IX+%C)
0005E8 01020000            A  2095    	LD	BC,2
0005EC AF                  A  2096    	XOR	A,A
0005ED CD 00 00 00         A  2097    	CALL	__lcmpu
0005F1 38 15               A  2098    	JR	C,L_78
0005F3 DD2709              A  2099    	LD	HL,(IX+%9)
0005F6 DD5E0C              A  2100    	LD	E,(IX+%C)
0005F9 DD31FD              A  2101    	LD	IY,(IX+%FFFFFFFD)
0005FC FD0716              A  2102    	LD	BC,(IY+%16)
0005FF FD7E19              A  2103    	LD	A,(IY+%19)
000602 CD 00 00 00         A  2104    	CALL	__lcmpu
000606 38 0F               A  2105    	JR	C,L_79
000608                     A  2106    L_78:
                           A  2107    ; 1142			val = 1;	/* Internal error *
000608 01010000            A  2108    	LD	BC,1
00060C AF                  A  2109    	XOR	A,A
00060D DD0FF6              A  2110    	LD	(IX+%FFFFFFF6),BC
000610 DD77F9              A  2111    	LD	(IX+%FFFFFFF9),A
                           A  2112    ; 1143	
                           A  2113    ; 1144		} else {
000613 C3 0D 08 00         A  2114    	JR	L_80
000617                     A  2115    L_79:
                           A  2116    ; 1145			val = 0xFFFFFFFF;	/* Default 
000617 01FFFFFF            A  2117    	LD	BC,16777215
00061B 3EFF                A  2118    	LD	A,%FF
00061D DD0FF6              A  2119    	LD	(IX+%FFFFFFF6),BC
000620 DD77F9              A  2120    	LD	(IX+%FFFFFFF9),A
                           A  2121    ; 1146	
                           A  2122    ; 1147			switch (fs->fs_type) {
000623 DD31FD              A  2123    	LD	IY,(IX+%FFFFFFFD)
000626 FD7E00              A  2124    	LD	A,(IY+%0)
000629 B7ED62              A  2125    	UEXT	HL
00062C 6F                  A  2126    	LD	L,A
00062D CD 00 00 00         A  2127    	CALL	__seqcase
000631                     A  2128    L__36:
000631 0300                A  2129    	DW	3
000633 0100                A  2130    	DW	1
000635 00                  A  2131    	DB	0
000636 420600              A  2132    	DW24	L_61	
                           A  2133    
000639 330700              A  2134    	DW24	L_71	
                           A  2135    
00063C 9A0700              A  2136    	DW24	L_74	
                           A  2137    
00063F 020800              A  2138    	DW24	L_77	
                           A  2139    
                           A  2140    ; 1148			case FS_FAT12 :
000642                     A  2141    L_61:
                           A  2142    ; 1149				bc = (UINT)clst; bc += bc /
000642 DD2709              A  2143    	LD	HL,(IX+%9)
000645 3E01                A  2144    	LD	A,%1
000647 CD 00 00 00         A  2145    	CALL	__ishru_b
00064B DD0709              A  2146    	LD	BC,(IX+%9)
00064E 09                  A  2147    	ADD	HL,BC
00064F DD2FFA              A  2148    	LD	(IX+%FFFFFFFA),HL
                           A  2149    ; 1150				if (move_window(fs, fs->fat
000652 3E09                A  2150    	LD	A,%9
000654 CD 00 00 00         A  2151    	CALL	__ishru_b
000658 E5C1                A  2152    	LD	BC,HL
00065A AF                  A  2153    	XOR	A,A
00065B DD31FD              A  2154    	LD	IY,(IX+%FFFFFFFD)
00065E FD2722              A  2155    	LD	HL,(IY+%22)
000661 FD5E25              A  2156    	LD	E,(IY+%25)
000664 CD 00 00 00         A  2157    	CALL	__ladd
000668 4B                  A  2158    	LD	C,E
000669 0600                A  2159    	LD	B,%0
00066B C5                  A  2160    	PUSH	BC
00066C E5                  A  2161    	PUSH	HL
00066D DD07FD              A  2162    	LD	BC,(IX+%FFFFFFFD)
000670 C5                  A  2163    	PUSH	BC
000671 CD A6 03 00         A  2164    	CALL	_move_window
000675 C1                  A  2165    	POP	BC
000676 C1                  A  2166    	POP	BC
000677 C1                  A  2167    	POP	BC
000678 CD 00 00 00         A  2168    	CALL	__icmpzero
00067C C2 0D 08 00         A  2169    	JR	NZ,L_80
                           A  2170    ; 1151				wc = fs->win[bc++ % SS(fs)]
000680 01FF0100            A  2171    	LD	BC,511
000684 DD27FA              A  2172    	LD	HL,(IX+%FFFFFFFA)
000687 CD 00 00 00         A  2173    	CALL	__iand
00068B E5C1                A  2174    	LD	BC,HL
00068D DD31FD              A  2175    	LD	IY,(IX+%FFFFFFFD)
000690 ED2332              A  2176    	LEA	HL,IY+%32
000693 09                  A  2177    	ADD	HL,BC
000694 7E                  A  2178    	LD	A,(HL)
000695 B7ED62              A  2179    	UEXT	HL
000698 6F                  A  2180    	LD	L,A
000699 DD2FF3              A  2181    	LD	(IX+%FFFFFFF3),HL
00069C DD07FA              A  2182    	LD	BC,(IX+%FFFFFFFA)
00069F 03                  A  2183    	INC	BC
0006A0 DD0FFA              A  2184    	LD	(IX+%FFFFFFFA),BC
                           A  2185    ; 1152				if (move_window(fs, fs->fat
0006A3 C5E1                A  2186    	LD	HL,BC
0006A5 3E09                A  2187    	LD	A,%9
0006A7 CD 00 00 00         A  2188    	CALL	__ishru_b
0006AB E5C1                A  2189    	LD	BC,HL
0006AD AF                  A  2190    	XOR	A,A
0006AE FD2722              A  2191    	LD	HL,(IY+%22)
0006B1 FD5E25              A  2192    	LD	E,(IY+%25)
0006B4 CD 00 00 00         A  2193    	CALL	__ladd
0006B8 4B                  A  2194    	LD	C,E
0006B9 0600                A  2195    	LD	B,%0
0006BB C5                  A  2196    	PUSH	BC
0006BC E5                  A  2197    	PUSH	HL
0006BD DD07FD              A  2198    	LD	BC,(IX+%FFFFFFFD)
0006C0 C5                  A  2199    	PUSH	BC
0006C1 CD A6 03 00         A  2200    	CALL	_move_window
0006C5 C1                  A  2201    	POP	BC
0006C6 C1                  A  2202    	POP	BC
0006C7 C1                  A  2203    	POP	BC
0006C8 CD 00 00 00         A  2204    	CALL	__icmpzero
0006CC C2 0D 08 00         A  2205    	JR	NZ,L_80
                           A  2206    ; 1153				wc |= fs->win[bc % SS(fs)] 
0006D0 01FF0100            A  2207    	LD	BC,511
0006D4 DD27FA              A  2208    	LD	HL,(IX+%FFFFFFFA)
0006D7 CD 00 00 00         A  2209    	CALL	__iand
0006DB E5C1                A  2210    	LD	BC,HL
0006DD DD31FD              A  2211    	LD	IY,(IX+%FFFFFFFD)
0006E0 ED2332              A  2212    	LEA	HL,IY+%32
0006E3 09                  A  2213    	ADD	HL,BC
0006E4 7E                  A  2214    	LD	A,(HL)
0006E5 B7ED62              A  2215    	UEXT	HL
0006E8 6F                  A  2216    	LD	L,A
0006E9 3E08                A  2217    	LD	A,%8
0006EB CD 00 00 00         A  2218    	CALL	__ishl_b
0006EF DD07F3              A  2219    	LD	BC,(IX+%FFFFFFF3)
0006F2 CD 00 00 00         A  2220    	CALL	__ior
0006F6 DD2FF3              A  2221    	LD	(IX+%FFFFFFF3),HL
                           A  2222    ; 1154				val = (clst & 1) ? (wc >> 4
0006F9 DD7E09              A  2223    	LD	A,(IX+%9)
0006FC E601                A  2224    	AND	A,%1
0006FE B7ED62              A  2225    	UEXT	HL
000701 6F                  A  2226    	LD	L,A
000702 5C                  A  2227    	LD	E,H
000703 CD 00 00 00         A  2228    	CALL	__lcmpzero
000707 28 0E               A  2229    	JR	Z,L_69
000709 DD27F3              A  2230    	LD	HL,(IX+%FFFFFFF3)
00070C 3E04                A  2231    	LD	A,%4
00070E CD 00 00 00         A  2232    	CALL	__ishru_b
000712 DD2FF0              A  2233    	LD	(IX+%FFFFFFF0),HL
000715 18 0E               A  2234    	JR	L_70
000717                     A  2235    L_69:
000717 01FF0F00            A  2236    	LD	BC,4095
00071B DD27F3              A  2237    	LD	HL,(IX+%FFFFFFF3)
00071E CD 00 00 00         A  2238    	CALL	__iand
000722 DD2FF0              A  2239    	LD	(IX+%FFFFFFF0),HL
000725                     A  2240    L_70:
000725 DD07F0              A  2241    	LD	BC,(IX+%FFFFFFF0)
000728 AF                  A  2242    	XOR	A,A
000729 DD0FF6              A  2243    	LD	(IX+%FFFFFFF6),BC
00072C DD77F9              A  2244    	LD	(IX+%FFFFFFF9),A
                           A  2245    ; 1155				break;
00072F C3 0D 08 00         A  2246    	JR	L_80
                           A  2247    ; 1156	
                           A  2248    ; 1157			case FS_FAT16 :
000733                     A  2249    L_71:
                           A  2250    ; 1158				if (move_window(fs, fs->fat
000733 DD0709              A  2251    	LD	BC,(IX+%9)
000736 DD7E0C              A  2252    	LD	A,(IX+%C)
000739 2E08                A  2253    	LD	L,%8
00073B CD 00 00 00         A  2254    	CALL	__lshru
00073F DD31FD              A  2255    	LD	IY,(IX+%FFFFFFFD)
000742 FD2722              A  2256    	LD	HL,(IY+%22)
000745 FD5E25              A  2257    	LD	E,(IY+%25)
000748 CD 00 00 00         A  2258    	CALL	__ladd
00074C 4B                  A  2259    	LD	C,E
00074D 0600                A  2260    	LD	B,%0
00074F C5                  A  2261    	PUSH	BC
000750 E5                  A  2262    	PUSH	HL
000751 DD07FD              A  2263    	LD	BC,(IX+%FFFFFFFD)
000754 C5                  A  2264    	PUSH	BC
000755 CD A6 03 00         A  2265    	CALL	_move_window
000759 C1                  A  2266    	POP	BC
00075A C1                  A  2267    	POP	BC
00075B C1                  A  2268    	POP	BC
00075C CD 00 00 00         A  2269    	CALL	__icmpzero
000760 C2 0D 08 00         A  2270    	JR	NZ,L_80
                           A  2271    ; 1159				val = ld_word(fs->win + cls
000764 DD2709              A  2272    	LD	HL,(IX+%9)
000767 DD5E0C              A  2273    	LD	E,(IX+%C)
00076A 01020000            A  2274    	LD	BC,2
00076E AF                  A  2275    	XOR	A,A
00076F CD 00 00 00         A  2276    	CALL	__lmulu
000773 01FF0100            A  2277    	LD	BC,511
000777 AF                  A  2278    	XOR	A,A
000778 CD 00 00 00         A  2279    	CALL	__land
00077C E5C1                A  2280    	LD	BC,HL
00077E DD31FD              A  2281    	LD	IY,(IX+%FFFFFFFD)
000781 ED2332              A  2282    	LEA	HL,IY+%32
000784 09                  A  2283    	ADD	HL,BC
000785 E5                  A  2284    	PUSH	HL
000786 CD 00 00 00         A  2285    	CALL	_ld_word
00078A C1                  A  2286    	POP	BC
00078B E5C1                A  2287    	LD	BC,HL
00078D CD 00 00 00         A  2288    	CALL	__stoiu
000791 AF                  A  2289    	XOR	A,A
000792 DD2FF6              A  2290    	LD	(IX+%FFFFFFF6),HL
000795 DD77F9              A  2291    	LD	(IX+%FFFFFFF9),A
                           A  2292    ; 1160				break;
000798 18 73               A  2293    	JR	L_80
                           A  2294    ; 1161	
                           A  2295    ; 1162			case FS_FAT32 :
00079A                     A  2296    L_74:
                           A  2297    ; 1163				if (move_window(fs, fs->fat
00079A DD0709              A  2298    	LD	BC,(IX+%9)
00079D DD7E0C              A  2299    	LD	A,(IX+%C)
0007A0 2E07                A  2300    	LD	L,%7
0007A2 CD 00 00 00         A  2301    	CALL	__lshru
0007A6 DD31FD              A  2302    	LD	IY,(IX+%FFFFFFFD)
0007A9 FD2722              A  2303    	LD	HL,(IY+%22)
0007AC FD5E25              A  2304    	LD	E,(IY+%25)
0007AF CD 00 00 00         A  2305    	CALL	__ladd
0007B3 4B                  A  2306    	LD	C,E
0007B4 0600                A  2307    	LD	B,%0
0007B6 C5                  A  2308    	PUSH	BC
0007B7 E5                  A  2309    	PUSH	HL
0007B8 DD07FD              A  2310    	LD	BC,(IX+%FFFFFFFD)
0007BB C5                  A  2311    	PUSH	BC
0007BC CD A6 03 00         A  2312    	CALL	_move_window
0007C0 C1                  A  2313    	POP	BC
0007C1 C1                  A  2314    	POP	BC
0007C2 C1                  A  2315    	POP	BC
0007C3 CD 00 00 00         A  2316    	CALL	__icmpzero
0007C7 20 44               A  2317    	JR	NZ,L_80
                           A  2318    ; 1164				val = ld_dword(fs->win + cl
0007C9 DD2709              A  2319    	LD	HL,(IX+%9)
0007CC DD5E0C              A  2320    	LD	E,(IX+%C)
0007CF 01040000            A  2321    	LD	BC,4
0007D3 AF                  A  2322    	XOR	A,A
0007D4 CD 00 00 00         A  2323    	CALL	__lmulu
0007D8 01FF0100            A  2324    	LD	BC,511
0007DC AF                  A  2325    	XOR	A,A
0007DD CD 00 00 00         A  2326    	CALL	__land
0007E1 E5C1                A  2327    	LD	BC,HL
0007E3 DD31FD              A  2328    	LD	IY,(IX+%FFFFFFFD)
0007E6 ED2332              A  2329    	LEA	HL,IY+%32
0007E9 09                  A  2330    	ADD	HL,BC
0007EA E5                  A  2331    	PUSH	HL
0007EB CD 39 00 00         A  2332    	CALL	_ld_dword
0007EF C1                  A  2333    	POP	BC
0007F0 01FFFFFF            A  2334    	LD	BC,16777215
0007F4 3E0F                A  2335    	LD	A,%F
0007F6 CD 00 00 00         A  2336    	CALL	__land
0007FA DD2FF6              A  2337    	LD	(IX+%FFFFFFF6),HL
0007FD DD73F9              A  2338    	LD	(IX+%FFFFFFF9),E
                           A  2339    ; 1165				break;
000800 18 0B               A  2340    	JR	L_80
                           A  2341    ; 1166	#if FF_FS_EXFAT
                           A  2342    ; 1167			case FS_EXFAT :
                           A  2343    ; 1168				if ((obj->objsize != 0 && o
                           A  2344    ; 1169					DWORD cofs = clst - obj
                           A  2345    ; 1170					DWORD clen = (DWORD)((L
                           A  2346    ; 1171	
                           A  2347    ; 1172					if (obj->stat == 2 && c
                           A  2348    ; 1173						val = (cofs == clen
                           A  2349    ; 1174						break;
                           A  2350    ; 1175					}
                           A  2351    ; 1176					if (obj->stat == 3 && c
                           A  2352    ; 1177						val = clst + 1; 	
                           A  2353    ; 1178						break;
                           A  2354    ; 1179					}
                           A  2355    ; 1180					if (obj->stat != 2) {	
                           A  2356    ; 1181						if (obj->n_frag != 
                           A  2357    ; 1182							val = 0x7FFFFFF
                           A  2358    ; 1183						} else {
                           A  2359    ; 1184							if (move_window
                           A  2360    ; 1185							val = ld_dword(
                           A  2361    ; 1186						}
                           A  2362    ; 1187						break;
                           A  2363    ; 1188					}
                           A  2364    ; 1189				}
                           A  2365    ; 1190				val = 1;	/* Internal err
                           A  2366    ; 1191				break;
                           A  2367    ; 1192	#endif
                           A  2368    ; 1193			default:
000802                     A  2369    L_77:
                           A  2370    ; 1194				val = 1;	/* Internal err
000802 01010000            A  2371    	LD	BC,1
000806 AF                  A  2372    	XOR	A,A
000807 DD0FF6              A  2373    	LD	(IX+%FFFFFFF6),BC
00080A DD77F9              A  2374    	LD	(IX+%FFFFFFF9),A
                           A  2375    ; 1195			}
                           A  2376    ; 1196		}
00080D                     A  2377    L_80:
                           A  2378    ; 1197	
                           A  2379    ; 1198		return val;
00080D DD27F6              A  2380    	LD	HL,(IX+%FFFFFFF6)
000810 DD5EF9              A  2381    	LD	E,(IX+%FFFFFFF9)
                           A  2382    ; 1199	}
000813 DDF9                A  2383    	LD	SP,IX
000815 DDE1                A  2384    	POP	IX
000817 C9                  A  2385    	RET	
                           A  2386    
                           A  2387    
                           A  2388    ;**************************** _get_fat ********
                           A  2389    ;Name                         Addr/Register   S
                           A  2390    ;temp67                               IX-16    
                           A  2391    ;wc                                   IX-13    
                           A  2392    ;val                                  IX-10    
                           A  2393    ;bc                                    IX-6    
                           A  2394    ;fs                                    IX-3    
                           A  2395    ;clst                                  IX+9    
                           A  2396    ;obj                                   IX+6    
                           A  2397    
                           A  2398    
                           A  2399    ; Stack Frame Size: 31 (bytes)
                           A  2400    ;       Spill Code: 0 (instruction)
                           A  2401    
                           A  2402    
                           A  2403    ; 1200	
                           A  2404    ; 1201	
                           A  2405    ; 1202	
                           A  2406    ; 1203	
                           A  2407    ; 1204	#if !FF_FS_READONLY
                           A  2408    ; 1205	/*-------------------------------------
                           A  2409    ; 1206	/* FAT access - Change value of an FAT 
                           A  2410    ; 1207	/*-------------------------------------
                           A  2411    ; 1208	
                           A  2412    ; 1209	static FRESULT put_fat (	/* FR_OK(0)
                           A  2413    ; 1210		FATFS* fs,		/* Corresponding fi
                           A  2414    ; 1211		DWORD clst,		/* FAT index number
                           A  2415    ; 1212		DWORD val		/* New value to be 
                           A  2416    ; 1213	)
                           A  2417    ; 1214	{
000818                     A  2418    _put_fat:
000818 21E6FFFF            A  2419    	LD	HL,-26
00081C CD 00 00 00         A  2420    	CALL	__frameset
                           A  2421    ; 1215		UINT bc;
                           A  2422    ; 1216		BYTE *p;
                           A  2423    ; 1217		FRESULT res = FR_INT_ERR;
000820 01020000            A  2424    	LD	BC,2
000824 DD0FFD              A  2425    	LD	(IX+%FFFFFFFD),BC
                           A  2426    ; 1218	
                           A  2427    ; 1219	
                           A  2428    ; 1220		if (clst >= 2 && clst < fs->n_faten
000827 DD2709              A  2429    	LD	HL,(IX+%9)
00082A DD5E0C              A  2430    	LD	E,(IX+%C)
00082D AF                  A  2431    	XOR	A,A
00082E CD 00 00 00         A  2432    	CALL	__lcmpu
000832 DA 03 0B 00         A  2433    	JR	C,L_106
000836 DD2709              A  2434    	LD	HL,(IX+%9)
000839 DD5E0C              A  2435    	LD	E,(IX+%C)
00083C DD3106              A  2436    	LD	IY,(IX+%6)
00083F FD0716              A  2437    	LD	BC,(IY+%16)
000842 FD7E19              A  2438    	LD	A,(IY+%19)
000845 CD 00 00 00         A  2439    	CALL	__lcmpu
000849 D2 03 0B 00         A  2440    	JR	NC,L_106
                           A  2441    ; 1221			switch (fs->fs_type) {
00084D DD3106              A  2442    	LD	IY,(IX+%6)
000850 FD7E00              A  2443    	LD	A,(IY+%0)
000853 B7ED62              A  2444    	UEXT	HL
000856 6F                  A  2445    	LD	L,A
000857 CD 00 00 00         A  2446    	CALL	__seqcase
00085B                     A  2447    L__45:
00085B 0300                A  2448    	DW	3
00085D 0100                A  2449    	DW	1
00085F 00                  A  2450    	DB	0
000860 6C0800              A  2451    	DW24	L_83	
                           A  2452    
000863 D00900              A  2453    	DW24	L_97	
                           A  2454    
000866 3B0A00              A  2455    	DW24	L_100	
                           A  2456    
000869 030B00              A  2457    	DW24	L_106	
                           A  2458    
                           A  2459    ; 1222			case FS_FAT12:
00086C                     A  2460    L_83:
                           A  2461    ; 1223				bc = (UINT)clst; bc += bc /
00086C DD2709              A  2462    	LD	HL,(IX+%9)
00086F 3E01                A  2463    	LD	A,%1
000871 CD 00 00 00         A  2464    	CALL	__ishru_b
000875 DD0709              A  2465    	LD	BC,(IX+%9)
000878 09                  A  2466    	ADD	HL,BC
000879 DD2FFA              A  2467    	LD	(IX+%FFFFFFFA),HL
                           A  2468    ; 1224				res = move_window(fs, fs->f
00087C 3E09                A  2469    	LD	A,%9
00087E CD 00 00 00         A  2470    	CALL	__ishru_b
000882 E5C1                A  2471    	LD	BC,HL
000884 AF                  A  2472    	XOR	A,A
000885 DD3106              A  2473    	LD	IY,(IX+%6)
000888 FD2722              A  2474    	LD	HL,(IY+%22)
00088B FD5E25              A  2475    	LD	E,(IY+%25)
00088E CD 00 00 00         A  2476    	CALL	__ladd
000892 4B                  A  2477    	LD	C,E
000893 0600                A  2478    	LD	B,%0
000895 C5                  A  2479    	PUSH	BC
000896 E5                  A  2480    	PUSH	HL
000897 DD0706              A  2481    	LD	BC,(IX+%6)
00089A C5                  A  2482    	PUSH	BC
00089B CD A6 03 00         A  2483    	CALL	_move_window
00089F C1                  A  2484    	POP	BC
0008A0 C1                  A  2485    	POP	BC
0008A1 C1                  A  2486    	POP	BC
0008A2 DD2FFD              A  2487    	LD	(IX+%FFFFFFFD),HL
                           A  2488    ; 1225				if (res != FR_OK) break;
0008A5 CD 00 00 00         A  2489    	CALL	__icmpzero
0008A9 C2 03 0B 00         A  2490    	JR	NZ,L_106
                           A  2491    ; 1226				p = fs->win + bc++ % SS(fs)
0008AD DD3106              A  2492    	LD	IY,(IX+%6)
0008B0 ED0332              A  2493    	LEA	BC,IY+%32
0008B3 DD0FED              A  2494    	LD	(IX+%FFFFFFED),BC
0008B6 DD07FA              A  2495    	LD	BC,(IX+%FFFFFFFA)
0008B9 03                  A  2496    	INC	BC
0008BA DD0FFA              A  2497    	LD	(IX+%FFFFFFFA),BC
                           A  2498    ; 1227				*p = (clst & 1) ? ((*p & 0x
0008BD DD7E09              A  2499    	LD	A,(IX+%9)
0008C0 E601                A  2500    	AND	A,%1
0008C2 B7ED62              A  2501    	UEXT	HL
0008C5 6F                  A  2502    	LD	L,A
0008C6 5C                  A  2503    	LD	E,H
0008C7 CD 00 00 00         A  2504    	CALL	__lcmpzero
0008CB 20 04               A  2505    	JR	NZ,L__48
0008CD 3E01                A  2506    	LD	A,%1
0008CF 18 01               A  2507    	JR	L__49
0008D1                     A  2508    L__48:
0008D1 AF                  A  2509    	XOR	A,A
0008D2                     A  2510    L__49:
0008D2 DD77F9              A  2511    	LD	(IX+%FFFFFFF9),A
0008D5 B7                  A  2512    	OR	A,A
0008D6 20 3B               A  2513    	JR	NZ,L_89
0008D8 DD3106              A  2514    	LD	IY,(IX+%6)
0008DB ED0332              A  2515    	LEA	BC,IY+%32
0008DE DD0FED              A  2516    	LD	(IX+%FFFFFFED),BC
0008E1 01FF0100            A  2517    	LD	BC,511
0008E5 DD27FA              A  2518    	LD	HL,(IX+%FFFFFFFA)
0008E8 CD 00 00 00         A  2519    	CALL	__iand
0008EC E5C1                A  2520    	LD	BC,HL
0008EE ED2332              A  2521    	LEA	HL,IY+%32
0008F1 09                  A  2522    	ADD	HL,BC
0008F2 7E                  A  2523    	LD	A,(HL)
0008F3 E60F                A  2524    	AND	A,%F
0008F5 B7ED62              A  2525    	UEXT	HL
0008F8 6F                  A  2526    	LD	L,A
0008F9 E5D1                A  2527    	LD	DE,HL
0008FB DD7E0F              A  2528    	LD	A,(IX+%F)
0008FE B7ED62              A  2529    	UEXT	HL
000901 6F                  A  2530    	LD	L,A
000902 29                  A  2531    	ADD	HL,HL
000903 29                  A  2532    	ADD	HL,HL
000904 29                  A  2533    	ADD	HL,HL
000905 29                  A  2534    	ADD	HL,HL
000906 E5C1                A  2535    	LD	BC,HL
000908 D5E1                A  2536    	LD	HL,DE
00090A CD 00 00 00         A  2537    	CALL	__ior
00090E DD2FF6              A  2538    	LD	(IX+%FFFFFFF6),HL
000911 18 0A               A  2539    	JR	L_90
000913                     A  2540    L_89:
000913 DD7E0F              A  2541    	LD	A,(IX+%F)
000916 B7ED62              A  2542    	UEXT	HL
000919 6F                  A  2543    	LD	L,A
00091A DD2FF6              A  2544    	LD	(IX+%FFFFFFF6),HL
00091D                     A  2545    L_90:
00091D 01FF0100            A  2546    	LD	BC,511
000921 DD27FA              A  2547    	LD	HL,(IX+%FFFFFFFA)
000924 CD 00 00 00         A  2548    	CALL	__iand
000928 DD2FEA              A  2549    	LD	(IX+%FFFFFFEA),HL
00092B DD7EF6              A  2550    	LD	A,(IX+%FFFFFFF6)
00092E DD07ED              A  2551    	LD	BC,(IX+%FFFFFFED)
000931 09                  A  2552    	ADD	HL,BC
000932 77                  A  2553    	LD	(HL),A
                           A  2554    ; 1228				fs->wflag = 1;
000933 DD3106              A  2555    	LD	IY,(IX+%6)
000936 FD360301            A  2556    	LD	(IY+%3),%1
                           A  2557    ; 1229				res = move_window(fs, fs->f
00093A DD27FA              A  2558    	LD	HL,(IX+%FFFFFFFA)
00093D 3E09                A  2559    	LD	A,%9
00093F CD 00 00 00         A  2560    	CALL	__ishru_b
000943 E5C1                A  2561    	LD	BC,HL
000945 AF                  A  2562    	XOR	A,A
000946 FD2722              A  2563    	LD	HL,(IY+%22)
000949 FD5E25              A  2564    	LD	E,(IY+%25)
00094C CD 00 00 00         A  2565    	CALL	__ladd
000950 4B                  A  2566    	LD	C,E
000951 0600                A  2567    	LD	B,%0
000953 C5                  A  2568    	PUSH	BC
000954 E5                  A  2569    	PUSH	HL
000955 DD0706              A  2570    	LD	BC,(IX+%6)
000958 C5                  A  2571    	PUSH	BC
000959 CD A6 03 00         A  2572    	CALL	_move_window
00095D C1                  A  2573    	POP	BC
00095E C1                  A  2574    	POP	BC
00095F C1                  A  2575    	POP	BC
000960 DD2FFD              A  2576    	LD	(IX+%FFFFFFFD),HL
                           A  2577    ; 1230				if (res != FR_OK) break;
000963 CD 00 00 00         A  2578    	CALL	__icmpzero
000967 C2 03 0B 00         A  2579    	JR	NZ,L_106
                           A  2580    ; 1231				p = fs->win + bc % SS(fs);
00096B DD07EA              A  2581    	LD	BC,(IX+%FFFFFFEA)
00096E DD3106              A  2582    	LD	IY,(IX+%6)
000971 ED2332              A  2583    	LEA	HL,IY+%32
000974 09                  A  2584    	ADD	HL,BC
000975 DD2FF0              A  2585    	LD	(IX+%FFFFFFF0),HL
                           A  2586    ; 1232				*p = (clst & 1) ? (BYTE)(va
000978 DD7EF9              A  2587    	LD	A,(IX+%FFFFFFF9)
00097B B7                  A  2588    	OR	A,A
00097C 20 16               A  2589    	JR	NZ,L_95
00097E DD070F              A  2590    	LD	BC,(IX+%F)
000981 DD7E12              A  2591    	LD	A,(IX+%12)
000984 2E04                A  2592    	LD	L,%4
000986 CD 00 00 00         A  2593    	CALL	__lshru
00098A 79                  A  2594    	LD	A,C
00098B B7ED62              A  2595    	UEXT	HL
00098E 6F                  A  2596    	LD	L,A
00098F DD2FF3              A  2597    	LD	(IX+%FFFFFFF3),HL
000992 18 2A               A  2598    	JR	L_96
000994                     A  2599    L_95:
000994 DD070F              A  2600    	LD	BC,(IX+%F)
000997 DD7E12              A  2601    	LD	A,(IX+%12)
00099A 2E08                A  2602    	LD	L,%8
00099C CD 00 00 00         A  2603    	CALL	__lshru
0009A0 79                  A  2604    	LD	A,C
0009A1 E60F                A  2605    	AND	A,%F
0009A3 B7ED62              A  2606    	UEXT	HL
0009A6 6F                  A  2607    	LD	L,A
0009A7 E5D1                A  2608    	LD	DE,HL
0009A9 DD27F0              A  2609    	LD	HL,(IX+%FFFFFFF0)
0009AC 7E                  A  2610    	LD	A,(HL)
0009AD E6F0                A  2611    	AND	A,%F0
0009AF B7ED62              A  2612    	UEXT	HL
0009B2 6F                  A  2613    	LD	L,A
0009B3 E5C1                A  2614    	LD	BC,HL
0009B5 D5E1                A  2615    	LD	HL,DE
0009B7 CD 00 00 00         A  2616    	CALL	__ior
0009BB DD2FF3              A  2617    	LD	(IX+%FFFFFFF3),HL
0009BE                     A  2618    L_96:
0009BE DD7EF3              A  2619    	LD	A,(IX+%FFFFFFF3)
0009C1 DD27F0              A  2620    	LD	HL,(IX+%FFFFFFF0)
0009C4 77                  A  2621    	LD	(HL),A
                           A  2622    ; 1233				fs->wflag = 1;
0009C5 DD3106              A  2623    	LD	IY,(IX+%6)
0009C8 FD360301            A  2624    	LD	(IY+%3),%1
                           A  2625    ; 1234				break;
0009CC C3 03 0B 00         A  2626    	JR	L_106
                           A  2627    ; 1235	
                           A  2628    ; 1236			case FS_FAT16:
0009D0                     A  2629    L_97:
                           A  2630    ; 1237				res = move_window(fs, fs->f
0009D0 DD0709              A  2631    	LD	BC,(IX+%9)
0009D3 DD7E0C              A  2632    	LD	A,(IX+%C)
0009D6 2E08                A  2633    	LD	L,%8
0009D8 CD 00 00 00         A  2634    	CALL	__lshru
0009DC DD3106              A  2635    	LD	IY,(IX+%6)
0009DF FD2722              A  2636    	LD	HL,(IY+%22)
0009E2 FD5E25              A  2637    	LD	E,(IY+%25)
0009E5 CD 00 00 00         A  2638    	CALL	__ladd
0009E9 4B                  A  2639    	LD	C,E
0009EA 0600                A  2640    	LD	B,%0
0009EC C5                  A  2641    	PUSH	BC
0009ED E5                  A  2642    	PUSH	HL
0009EE DD0706              A  2643    	LD	BC,(IX+%6)
0009F1 C5                  A  2644    	PUSH	BC
0009F2 CD A6 03 00         A  2645    	CALL	_move_window
0009F6 C1                  A  2646    	POP	BC
0009F7 C1                  A  2647    	POP	BC
0009F8 C1                  A  2648    	POP	BC
0009F9 DD2FFD              A  2649    	LD	(IX+%FFFFFFFD),HL
                           A  2650    ; 1238				if (res != FR_OK) break;
0009FC CD 00 00 00         A  2651    	CALL	__icmpzero
000A00 C2 03 0B 00         A  2652    	JR	NZ,L_106
                           A  2653    ; 1239				st_word(fs->win + clst * 2 
000A04 DD070F              A  2654    	LD	BC,(IX+%F)
000A07 C5                  A  2655    	PUSH	BC
000A08 DD2709              A  2656    	LD	HL,(IX+%9)
000A0B DD5E0C              A  2657    	LD	E,(IX+%C)
000A0E 01020000            A  2658    	LD	BC,2
000A12 AF                  A  2659    	XOR	A,A
000A13 CD 00 00 00         A  2660    	CALL	__lmulu
000A17 01FF0100            A  2661    	LD	BC,511
000A1B AF                  A  2662    	XOR	A,A
000A1C CD 00 00 00         A  2663    	CALL	__land
000A20 E5C1                A  2664    	LD	BC,HL
000A22 DD3106              A  2665    	LD	IY,(IX+%6)
000A25 ED2332              A  2666    	LEA	HL,IY+%32
000A28 09                  A  2667    	ADD	HL,BC
000A29 E5                  A  2668    	PUSH	HL
000A2A CD C4 00 00         A  2669    	CALL	_st_word
000A2E C1                  A  2670    	POP	BC
000A2F C1                  A  2671    	POP	BC
                           A  2672    ; 1240				fs->wflag = 1;
000A30 DD3106              A  2673    	LD	IY,(IX+%6)
000A33 FD360301            A  2674    	LD	(IY+%3),%1
                           A  2675    ; 1241				break;
000A37 C3 03 0B 00         A  2676    	JR	L_106
                           A  2677    ; 1242	
                           A  2678    ; 1243			case FS_FAT32:
000A3B                     A  2679    L_100:
                           A  2680    ; 1244	#if FF_FS_EXFAT
                           A  2681    ; 1245			case FS_EXFAT:
                           A  2682    ; 1246	#endif
                           A  2683    ; 1247				res = move_window(fs, fs->f
000A3B DD0709              A  2684    	LD	BC,(IX+%9)
000A3E DD7E0C              A  2685    	LD	A,(IX+%C)
000A41 2E07                A  2686    	LD	L,%7
000A43 CD 00 00 00         A  2687    	CALL	__lshru
000A47 DD3106              A  2688    	LD	IY,(IX+%6)
000A4A FD2722              A  2689    	LD	HL,(IY+%22)
000A4D FD5E25              A  2690    	LD	E,(IY+%25)
000A50 CD 00 00 00         A  2691    	CALL	__ladd
000A54 4B                  A  2692    	LD	C,E
000A55 0600                A  2693    	LD	B,%0
000A57 C5                  A  2694    	PUSH	BC
000A58 E5                  A  2695    	PUSH	HL
000A59 DD0706              A  2696    	LD	BC,(IX+%6)
000A5C C5                  A  2697    	PUSH	BC
000A5D CD A6 03 00         A  2698    	CALL	_move_window
000A61 C1                  A  2699    	POP	BC
000A62 C1                  A  2700    	POP	BC
000A63 C1                  A  2701    	POP	BC
000A64 DD2FFD              A  2702    	LD	(IX+%FFFFFFFD),HL
                           A  2703    ; 1248				if (res != FR_OK) break;
000A67 CD 00 00 00         A  2704    	CALL	__icmpzero
000A6B C2 03 0B 00         A  2705    	JR	NZ,L_106
                           A  2706    ; 1249				if (!FF_FS_EXFAT || fs->fs_
                           A  2707    ; 1250					val = (val & 0x0FFFFFFF
000A6F DD2709              A  2708    	LD	HL,(IX+%9)
000A72 DD5E0C              A  2709    	LD	E,(IX+%C)
000A75 01040000            A  2710    	LD	BC,4
000A79 AF                  A  2711    	XOR	A,A
000A7A CD 00 00 00         A  2712    	CALL	__lmulu
000A7E 01FF0100            A  2713    	LD	BC,511
000A82 AF                  A  2714    	XOR	A,A
000A83 CD 00 00 00         A  2715    	CALL	__land
000A87 E5C1                A  2716    	LD	BC,HL
000A89 DD3106              A  2717    	LD	IY,(IX+%6)
000A8C ED2332              A  2718    	LEA	HL,IY+%32
000A8F 09                  A  2719    	ADD	HL,BC
000A90 E5                  A  2720    	PUSH	HL
000A91 CD 39 00 00         A  2721    	CALL	_ld_dword
000A95 C1                  A  2722    	POP	BC
000A96 01000000            A  2723    	LD	BC,0
000A9A 3EF0                A  2724    	LD	A,%F0
000A9C CD 00 00 00         A  2725    	CALL	__land
000AA0 DD73E9              A  2726    	LD	(IX+%FFFFFFE9),E
000AA3 DD2FE6              A  2727    	LD	(IX+%FFFFFFE6),HL
000AA6 DD270F              A  2728    	LD	HL,(IX+%F)
000AA9 DD5E12              A  2729    	LD	E,(IX+%12)
000AAC 01FFFFFF            A  2730    	LD	BC,16777215
000AB0 3E0F                A  2731    	LD	A,%F
000AB2 CD 00 00 00         A  2732    	CALL	__land
000AB6 7B                  A  2733    	LD	A,E
000AB7 E5C1                A  2734    	LD	BC,HL
000AB9 DD5EE9              A  2735    	LD	E,(IX+%FFFFFFE9)
000ABC DD27E6              A  2736    	LD	HL,(IX+%FFFFFFE6)
000ABF CD 00 00 00         A  2737    	CALL	__lor
000AC3 DD2F0F              A  2738    	LD	(IX+%F),HL
000AC6 DD7312              A  2739    	LD	(IX+%12),E
                           A  2740    ; 1251				}
                           A  2741    ; 1252				st_dword(fs->win + clst * 4
000AC9 DD4E12              A  2742    	LD	C,(IX+%12)
000ACC 0600                A  2743    	LD	B,%0
000ACE C5                  A  2744    	PUSH	BC
000ACF DD070F              A  2745    	LD	BC,(IX+%F)
000AD2 C5                  A  2746    	PUSH	BC
000AD3 DD2709              A  2747    	LD	HL,(IX+%9)
000AD6 DD5E0C              A  2748    	LD	E,(IX+%C)
000AD9 01040000            A  2749    	LD	BC,4
000ADD AF                  A  2750    	XOR	A,A
000ADE CD 00 00 00         A  2751    	CALL	__lmulu
000AE2 01FF0100            A  2752    	LD	BC,511
000AE6 AF                  A  2753    	XOR	A,A
000AE7 CD 00 00 00         A  2754    	CALL	__land
000AEB E5C1                A  2755    	LD	BC,HL
000AED DD3106              A  2756    	LD	IY,(IX+%6)
000AF0 ED2332              A  2757    	LEA	HL,IY+%32
000AF3 09                  A  2758    	ADD	HL,BC
000AF4 E5                  A  2759    	PUSH	HL
000AF5 CD F5 00 00         A  2760    	CALL	_st_dword
000AF9 C1                  A  2761    	POP	BC
000AFA C1                  A  2762    	POP	BC
000AFB C1                  A  2763    	POP	BC
                           A  2764    ; 1253				fs->wflag = 1;
000AFC DD3106              A  2765    	LD	IY,(IX+%6)
000AFF FD360301            A  2766    	LD	(IY+%3),%1
                           A  2767    ; 1254				break;
                           A  2768    ; 1255			}
                           A  2769    ; 1256		}
000B03                     A  2770    L_106:
                           A  2771    ; 1257		return res;
000B03 DD27FD              A  2772    	LD	HL,(IX+%FFFFFFFD)
                           A  2773    ; 1258	}
000B06 DDF9                A  2774    	LD	SP,IX
000B08 DDE1                A  2775    	POP	IX
000B0A C9                  A  2776    	RET	
                           A  2777    
                           A  2778    
                           A  2779    ;**************************** _put_fat ********
                           A  2780    ;Name                         Addr/Register   S
                           A  2781    ;G_7                                  IX-22    
                           A  2782    ;G_6                                  IX-19    
                           A  2783    ;p                                    IX-16    
                           A  2784    ;temp93                               IX-13    
                           A  2785    ;temp87                               IX-10    
                           A  2786    ;G_8                                   IX-7    
                           A  2787    ;bc                                    IX-6    
                           A  2788    ;res                                   IX-3    
                           A  2789    ;val                                  IX+15    
                           A  2790    ;clst                                  IX+9    
                           A  2791    ;fs                                    IX+6    
                           A  2792    
                           A  2793    
                           A  2794    ; Stack Frame Size: 47 (bytes)
                           A  2795    ;       Spill Code: 0 (instruction)
                           A  2796    
                           A  2797    
                           A  2798    ; 1259	
                           A  2799    ; 1260	#endif /* !FF_FS_READONLY */
                           A  2800    ; 1261	
                           A  2801    ; 1262	
                           A  2802    ; 1263	
                           A  2803    ; 1264	
                           A  2804    ; 1265	#if FF_FS_EXFAT && !FF_FS_READONLY
                           A  2805    ; 1266	/*-------------------------------------
                           A  2806    ; 1267	/* exFAT: Accessing FAT and Allocation 
                           A  2807    ; 1268	/*-------------------------------------
                           A  2808    ; 1269	
                           A  2809    ; 1270	/*-------------------------------------
                           A  2810    ; 1271	/* Find a contiguous free cluster block
                           A  2811    ; 1272	/*-------------------------------------
                           A  2812    ; 1273	
                           A  2813    ; 1274	static DWORD find_bitmap (	/* 0:Not fo
                           A  2814    ; 1275		FATFS* fs,	/* Filesystem object */
                           A  2815    ; 1276		DWORD clst,	/* Cluster number to sc
                           A  2816    ; 1277		DWORD ncl	/* Number of contiguous
                           A  2817    ; 1278	)
                           A  2818    ; 1279	{
                           A  2819    ; 1280		BYTE bm, bv;
                           A  2820    ; 1281		UINT i;
                           A  2821    ; 1282		DWORD val, scl, ctr;
                           A  2822    ; 1283	
                           A  2823    ; 1284	
                           A  2824    ; 1285		clst -= 2;	/* The first bit in the
                           A  2825    ; 1286		if (clst >= fs->n_fatent - 2) clst 
                           A  2826    ; 1287		scl = val = clst; ctr = 0;
                           A  2827    ; 1288		for (;;) {
                           A  2828    ; 1289			if (move_window(fs, fs->bitbase
                           A  2829    ; 1290			i = val / 8 % SS(fs); bm = 1 <<
                           A  2830    ; 1291			do {
                           A  2831    ; 1292				do {
                           A  2832    ; 1293					bv = fs->win[i] & bm; b
                           A  2833    ; 1294					if (++val >= fs->n_fate
                           A  2834    ; 1295						val = 0; bm = 0; i 
                           A  2835    ; 1296					}
                           A  2836    ; 1297					if (bv == 0) {	/* Is i
                           A  2837    ; 1298						if (++ctr == ncl) r
                           A  2838    ; 1299					} else {
                           A  2839    ; 1300						scl = val; ctr = 0;
                           A  2840    ; 1301					}
                           A  2841    ; 1302					if (val == clst) return
                           A  2842    ; 1303				} while (bm != 0);
                           A  2843    ; 1304				bm = 1;
                           A  2844    ; 1305			} while (++i < SS(fs));
                           A  2845    ; 1306		}
                           A  2846    ; 1307	}
                           A  2847    ; 1308	
                           A  2848    ; 1309	
                           A  2849    ; 1310	/*-------------------------------------
                           A  2850    ; 1311	/* Set/Clear a block of allocation bitm
                           A  2851    ; 1312	/*-------------------------------------
                           A  2852    ; 1313	
                           A  2853    ; 1314	static FRESULT change_bitmap (
                           A  2854    ; 1315		FATFS* fs,	/* Filesystem object */
                           A  2855    ; 1316		DWORD clst,	/* Cluster number to ch
                           A  2856    ; 1317		DWORD ncl,	/* Number of clusters t
                           A  2857    ; 1318		int bv		/* bit value to be set 
                           A  2858    ; 1319	)
                           A  2859    ; 1320	{
                           A  2860    ; 1321		BYTE bm;
                           A  2861    ; 1322		UINT i;
                           A  2862    ; 1323		LBA_t sect;
                           A  2863    ; 1324	
                           A  2864    ; 1325	
                           A  2865    ; 1326		clst -= 2;	/* The first bit corres
                           A  2866    ; 1327		sect = fs->bitbase + clst / 8 / SS(
                           A  2867    ; 1328		i = clst / 8 % SS(fs);				
                           A  2868    ; 1329		bm = 1 << (clst % 8);				
                           A  2869    ; 1330		for (;;) {
                           A  2870    ; 1331			if (move_window(fs, sect++) != 
                           A  2871    ; 1332			do {
                           A  2872    ; 1333				do {
                           A  2873    ; 1334					if (bv == (int)((fs->wi
                           A  2874    ; 1335					fs->win[i] ^= bm;	/* 
                           A  2875    ; 1336					fs->wflag = 1;
                           A  2876    ; 1337					if (--ncl == 0) return 
                           A  2877    ; 1338				} while (bm <<= 1);		/* 
                           A  2878    ; 1339				bm = 1;
                           A  2879    ; 1340			} while (++i < SS(fs));		/* 
                           A  2880    ; 1341			i = 0;
                           A  2881    ; 1342		}
                           A  2882    ; 1343	}
                           A  2883    ; 1344	
                           A  2884    ; 1345	
                           A  2885    ; 1346	/*-------------------------------------
                           A  2886    ; 1347	/* Fill the first fragment of the FAT c
                           A  2887    ; 1348	/*-------------------------------------
                           A  2888    ; 1349	
                           A  2889    ; 1350	static FRESULT fill_first_frag (
                           A  2890    ; 1351		FFOBJID* obj	/* Pointer to the c
                           A  2891    ; 1352	)
                           A  2892    ; 1353	{
                           A  2893    ; 1354		FRESULT res;
                           A  2894    ; 1355		DWORD cl, n;
                           A  2895    ; 1356	
                           A  2896    ; 1357	
                           A  2897    ; 1358		if (obj->stat == 3) {	/* Has the 
                           A  2898    ; 1359			for (cl = obj->sclust, n = obj-
                           A  2899    ; 1360				res = put_fat(obj->fs, cl, 
                           A  2900    ; 1361				if (res != FR_OK) return re
                           A  2901    ; 1362			}
                           A  2902    ; 1363			obj->stat = 0;	/* Change statu
                           A  2903    ; 1364		}
                           A  2904    ; 1365		return FR_OK;
                           A  2905    ; 1366	}
                           A  2906    ; 1367	
                           A  2907    ; 1368	
                           A  2908    ; 1369	/*-------------------------------------
                           A  2909    ; 1370	/* Fill the last fragment of the FAT ch
                           A  2910    ; 1371	/*-------------------------------------
                           A  2911    ; 1372	
                           A  2912    ; 1373	static FRESULT fill_last_frag (
                           A  2913    ; 1374		FFOBJID* obj,	/* Pointer to the c
                           A  2914    ; 1375		DWORD lcl,		/* Last cluster of 
                           A  2915    ; 1376		DWORD term		/* Value to set the
                           A  2916    ; 1377	)
                           A  2917    ; 1378	{
                           A  2918    ; 1379		FRESULT res;
                           A  2919    ; 1380	
                           A  2920    ; 1381	
                           A  2921    ; 1382		while (obj->n_frag > 0) {	/* Crea
                           A  2922    ; 1383			res = put_fat(obj->fs, lcl - ob
                           A  2923    ; 1384			if (res != FR_OK) return res;
                           A  2924    ; 1385			obj->n_frag--;
                           A  2925    ; 1386		}
                           A  2926    ; 1387		return FR_OK;
                           A  2927    ; 1388	}
                           A  2928    ; 1389	
                           A  2929    ; 1390	#endif	/* FF_FS_EXFAT && !FF_FS_READON
                           A  2930    ; 1391	
                           A  2931    ; 1392	
                           A  2932    ; 1393	
                           A  2933    ; 1394	#if !FF_FS_READONLY
                           A  2934    ; 1395	/*-------------------------------------
                           A  2935    ; 1396	/* FAT handling - Remove a cluster chai
                           A  2936    ; 1397	/*-------------------------------------
                           A  2937    ; 1398	
                           A  2938    ; 1399	static FRESULT remove_chain (	/* FR_O
                           A  2939    ; 1400		FFOBJID* obj,		/* Correspondin
                           A  2940    ; 1401		DWORD clst,			/* Cluster to r
                           A  2941    ; 1402		DWORD pclst			/* Previous clu
                           A  2942    ; 1403	)
                           A  2943    ; 1404	{
000B0B                     A  2944    _remove_chain:
000B0B 21F2FFFF            A  2945    	LD	HL,-14
000B0F CD 00 00 00         A  2946    	CALL	__frameset
                           A  2947    ; 1405		FRESULT res = FR_OK;
000B13 01000000            A  2948    	LD	BC,0
000B17 DD0FFA              A  2949    	LD	(IX+%FFFFFFFA),BC
                           A  2950    ; 1406		DWORD nxt;
                           A  2951    ; 1407		FATFS *fs = obj->fs;
000B1A DD3106              A  2952    	LD	IY,(IX+%6)
000B1D FD0700              A  2953    	LD	BC,(IY+%0)
000B20 DD0FFD              A  2954    	LD	(IX+%FFFFFFFD),BC
                           A  2955    ; 1408	#if FF_FS_EXFAT || FF_USE_TRIM
                           A  2956    ; 1409		DWORD scl = clst, ecl = clst;
                           A  2957    ; 1410	#endif
                           A  2958    ; 1411	#if FF_USE_TRIM
                           A  2959    ; 1412		LBA_t rt[2];
                           A  2960    ; 1413	#endif
                           A  2961    ; 1414	
                           A  2962    ; 1415		if (clst < 2 || clst >= fs->n_faten
000B23 DD2709              A  2963    	LD	HL,(IX+%9)
000B26 DD5E0C              A  2964    	LD	E,(IX+%C)
000B29 01020000            A  2965    	LD	BC,2
000B2D AF                  A  2966    	XOR	A,A
000B2E CD 00 00 00         A  2967    	CALL	__lcmpu
000B32 38 15               A  2968    	JR	C,L_109
000B34 DD2709              A  2969    	LD	HL,(IX+%9)
000B37 DD5E0C              A  2970    	LD	E,(IX+%C)
000B3A DD31FD              A  2971    	LD	IY,(IX+%FFFFFFFD)
000B3D FD0716              A  2972    	LD	BC,(IY+%16)
000B40 FD7E19              A  2973    	LD	A,(IY+%19)
000B43 CD 00 00 00         A  2974    	CALL	__lcmpu
000B47 38 08               A  2975    	JR	C,L_113
000B49                     A  2976    L_109:
000B49 21020000            A  2977    	LD	HL,2
000B4D C3 85 0C 00         A  2978    	JR	L_130
000B51                     A  2979    L_113:
                           A  2980    ; 1416	
                           A  2981    ; 1417		/* Mark the previous cluster 'EOC' 
                           A  2982    ; 1418		if (pclst != 0 && (!FF_FS_EXFAT || 
000B51 DD270F              A  2983    	LD	HL,(IX+%F)
000B54 DD5E12              A  2984    	LD	E,(IX+%12)
000B57 CD 00 00 00         A  2985    	CALL	__lcmpzero
000B5B 28 31               A  2986    	JR	Z,L_126
                           A  2987    ; 1419			res = put_fat(fs, pclst, 0xFFFF
000B5D 01FF0000            A  2988    	LD	BC,255
000B61 C5                  A  2989    	PUSH	BC
000B62 01FFFFFF            A  2990    	LD	BC,16777215
000B66 C5                  A  2991    	PUSH	BC
000B67 DD4E12              A  2992    	LD	C,(IX+%12)
000B6A 0600                A  2993    	LD	B,%0
000B6C C5                  A  2994    	PUSH	BC
000B6D DD070F              A  2995    	LD	BC,(IX+%F)
000B70 C5                  A  2996    	PUSH	BC
000B71 DD07FD              A  2997    	LD	BC,(IX+%FFFFFFFD)
000B74 C5                  A  2998    	PUSH	BC
000B75 CD 18 08 00         A  2999    	CALL	_put_fat
000B79 C1                  A  3000    	POP	BC
000B7A C1                  A  3001    	POP	BC
000B7B C1                  A  3002    	POP	BC
000B7C C1                  A  3003    	POP	BC
000B7D C1                  A  3004    	POP	BC
000B7E DD2FFA              A  3005    	LD	(IX+%FFFFFFFA),HL
                           A  3006    ; 1420			if (res != FR_OK) return res;
000B81 CD 00 00 00         A  3007    	CALL	__icmpzero
000B85 28 07               A  3008    	JR	Z,L_126
000B87 DD27FA              A  3009    	LD	HL,(IX+%FFFFFFFA)
000B8A C3 85 0C 00         A  3010    	JR	L_130
                           A  3011    ; 1421		}
                           A  3012    ; 1422	
                           A  3013    ; 1423		/* Remove the chain */
                           A  3014    ; 1424		do {
000B8E                     A  3015    L_126:
                           A  3016    ; 1425			nxt = get_fat(obj, clst);		
000B8E DD4E0C              A  3017    	LD	C,(IX+%C)
000B91 0600                A  3018    	LD	B,%0
000B93 C5                  A  3019    	PUSH	BC
000B94 DD0709              A  3020    	LD	BC,(IX+%9)
000B97 C5                  A  3021    	PUSH	BC
000B98 DD0706              A  3022    	LD	BC,(IX+%6)
000B9B C5                  A  3023    	PUSH	BC
000B9C CD D1 05 00         A  3024    	CALL	_get_fat
000BA0 C1                  A  3025    	POP	BC
000BA1 C1                  A  3026    	POP	BC
000BA2 C1                  A  3027    	POP	BC
000BA3 DD2FF6              A  3028    	LD	(IX+%FFFFFFF6),HL
000BA6 DD73F9              A  3029    	LD	(IX+%FFFFFFF9),E
                           A  3030    ; 1426			if (nxt == 0) break;			
000BA9 DD27F6              A  3031    	LD	HL,(IX+%FFFFFFF6)
000BAC DD5EF9              A  3032    	LD	E,(IX+%FFFFFFF9)
000BAF CD 00 00 00         A  3033    	CALL	__lcmpzero
000BB3 CA 82 0C 00         A  3034    	JR	Z,L_129
                           A  3035    ; 1427			if (nxt == 1) return FR_INT_ERR
000BB7 DD27F6              A  3036    	LD	HL,(IX+%FFFFFFF6)
000BBA DD5EF9              A  3037    	LD	E,(IX+%FFFFFFF9)
000BBD 01010000            A  3038    	LD	BC,1
000BC1 AF                  A  3039    	XOR	A,A
000BC2 CD 00 00 00         A  3040    	CALL	__lcmpu
000BC6 20 08               A  3041    	JR	NZ,L_118
000BC8 21020000            A  3042    	LD	HL,2
000BCC C3 85 0C 00         A  3043    	JR	L_130
000BD0                     A  3044    L_118:
                           A  3045    ; 1428			if (nxt == 0xFFFFFFFF) return F
000BD0 DD27F6              A  3046    	LD	HL,(IX+%FFFFFFF6)
000BD3 DD5EF9              A  3047    	LD	E,(IX+%FFFFFFF9)
000BD6 01FFFFFF            A  3048    	LD	BC,16777215
000BDA 3EFF                A  3049    	LD	A,%FF
000BDC CD 00 00 00         A  3050    	CALL	__lcmpu
000BE0 20 08               A  3051    	JR	NZ,L_120
000BE2 21010000            A  3052    	LD	HL,1
000BE6 C3 85 0C 00         A  3053    	JR	L_130
                           A  3054    ; 1429			if (!FF_FS_EXFAT || fs->fs_type
000BEA                     A  3055    L_120:
                           A  3056    ; 1430				res = put_fat(fs, clst, 0);
000BEA 01000000            A  3057    	LD	BC,0
000BEE C5                  A  3058    	PUSH	BC
000BEF C5                  A  3059    	PUSH	BC
000BF0 DD4E0C              A  3060    	LD	C,(IX+%C)
000BF3 0600                A  3061    	LD	B,%0
000BF5 C5                  A  3062    	PUSH	BC
000BF6 DD0709              A  3063    	LD	BC,(IX+%9)
000BF9 C5                  A  3064    	PUSH	BC
000BFA DD07FD              A  3065    	LD	BC,(IX+%FFFFFFFD)
000BFD C5                  A  3066    	PUSH	BC
000BFE CD 18 08 00         A  3067    	CALL	_put_fat
000C02 C1                  A  3068    	POP	BC
000C03 C1                  A  3069    	POP	BC
000C04 C1                  A  3070    	POP	BC
000C05 C1                  A  3071    	POP	BC
000C06 C1                  A  3072    	POP	BC
000C07 DD2FFA              A  3073    	LD	(IX+%FFFFFFFA),HL
                           A  3074    ; 1431				if (res != FR_OK) return re
000C0A CD 00 00 00         A  3075    	CALL	__icmpzero
000C0E 28 05               A  3076    	JR	Z,L_124
000C10 DD27FA              A  3077    	LD	HL,(IX+%FFFFFFFA)
000C13 18 70               A  3078    	JR	L_130
                           A  3079    ; 1432			}
000C15                     A  3080    L_124:
                           A  3081    ; 1433			if (fs->free_clst < fs->n_faten
000C15 DD31FD              A  3082    	LD	IY,(IX+%FFFFFFFD)
000C18 FD0712              A  3083    	LD	BC,(IY+%12)
000C1B FD7E15              A  3084    	LD	A,(IY+%15)
000C1E DD0FF2              A  3085    	LD	(IX+%FFFFFFF2),BC
000C21 DD77F5              A  3086    	LD	(IX+%FFFFFFF5),A
000C24 FD2716              A  3087    	LD	HL,(IY+%16)
000C27 FD5E19              A  3088    	LD	E,(IY+%19)
000C2A 01020000            A  3089    	LD	BC,2
000C2E AF                  A  3090    	XOR	A,A
000C2F CD 00 00 00         A  3091    	CALL	__lsub
000C33 7B                  A  3092    	LD	A,E
000C34 E5C1                A  3093    	LD	BC,HL
000C36 DD27F2              A  3094    	LD	HL,(IX+%FFFFFFF2)
000C39 DD5EF5              A  3095    	LD	E,(IX+%FFFFFFF5)
000C3C CD 00 00 00         A  3096    	CALL	__lcmpu
000C40 30 1D               A  3097    	JR	NC,L_125
                           A  3098    ; 1434				fs->free_clst++;
000C42 DD27F2              A  3099    	LD	HL,(IX+%FFFFFFF2)
000C45 DD5EF5              A  3100    	LD	E,(IX+%FFFFFFF5)
000C48 3E01                A  3101    	LD	A,%1
000C4A CD 00 00 00         A  3102    	CALL	__ladd_b
000C4E DD31FD              A  3103    	LD	IY,(IX+%FFFFFFFD)
000C51 FD2F12              A  3104    	LD	(IY+%12),HL
000C54 FD7315              A  3105    	LD	(IY+%15),E
                           A  3106    ; 1435				fs->fsi_flag |= 1;
000C57 FD7E04              A  3107    	LD	A,(IY+%4)
000C5A CBC7                A  3108    	SET	%0,A
000C5C FD7704              A  3109    	LD	(IY+%4),A
                           A  3110    ; 1436			}
000C5F                     A  3111    L_125:
                           A  3112    ; 1437	#if FF_FS_EXFAT || FF_USE_TRIM
                           A  3113    ; 1438			if (ecl + 1 == nxt) {	/* Is n
                           A  3114    ; 1439				ecl = nxt;
                           A  3115    ; 1440			} else {				/* End 
                           A  3116    ; 1441	#if FF_FS_EXFAT
                           A  3117    ; 1442				if (fs->fs_type == FS_EXFAT
                           A  3118    ; 1443					res = change_bitmap(fs,
                           A  3119    ; 1444					if (res != FR_OK) retur
                           A  3120    ; 1445				}
                           A  3121    ; 1446	#endif
                           A  3122    ; 1447	#if FF_USE_TRIM
                           A  3123    ; 1448				rt[0] = clst2sect(fs, scl);
                           A  3124    ; 1449				rt[1] = clst2sect(fs, ecl) 
                           A  3125    ; 1450				disk_ioctl(fs->pdrv, CTRL_T
                           A  3126    ; 1451	#endif
                           A  3127    ; 1452				scl = ecl = nxt;
                           A  3128    ; 1453			}
                           A  3129    ; 1454	#endif
                           A  3130    ; 1455			clst = nxt;					/* 
000C5F DD07F6              A  3131    	LD	BC,(IX+%FFFFFFF6)
000C62 DD7EF9              A  3132    	LD	A,(IX+%FFFFFFF9)
000C65 DD0F09              A  3133    	LD	(IX+%9),BC
000C68 DD770C              A  3134    	LD	(IX+%C),A
                           A  3135    ; 1456		} while (clst < fs->n_fatent);	/* 
000C6B DD27F6              A  3136    	LD	HL,(IX+%FFFFFFF6)
000C6E DD5EF9              A  3137    	LD	E,(IX+%FFFFFFF9)
000C71 DD31FD              A  3138    	LD	IY,(IX+%FFFFFFFD)
000C74 FD0716              A  3139    	LD	BC,(IY+%16)
000C77 FD7E19              A  3140    	LD	A,(IY+%19)
000C7A CD 00 00 00         A  3141    	CALL	__lcmpu
000C7E DA 8E 0B 00         A  3142    	JR	C,L_126
000C82                     A  3143    L_129:
000C82 B7                  A  3144    	OR	A,A
                           A  3145    ; 1457	
                           A  3146    ; 1458	#if FF_FS_EXFAT
                           A  3147    ; 1459		/* Some post processes for chain st
                           A  3148    ; 1460		if (fs->fs_type == FS_EXFAT) {
                           A  3149    ; 1461			if (pclst == 0) {	/* Has the 
                           A  3150    ; 1462				obj->stat = 0;		/* Chan
                           A  3151    ; 1463			} else {
                           A  3152    ; 1464				if (obj->stat == 0) {	/* 
                           A  3153    ; 1465					clst = obj->sclust;		
                           A  3154    ; 1466					while (clst != pclst) {
                           A  3155    ; 1467						nxt = get_fat(obj, 
                           A  3156    ; 1468						if (nxt < 2) return
                           A  3157    ; 1469						if (nxt == 0xFFFFFF
                           A  3158    ; 1470						if (nxt != clst + 1
                           A  3159    ; 1471						clst++;
                           A  3160    ; 1472					}
                           A  3161    ; 1473					if (clst == pclst) {	
                           A  3162    ; 1474						obj->stat = 2;		
                           A  3163    ; 1475					}
                           A  3164    ; 1476				} else {
                           A  3165    ; 1477					if (obj->stat == 3 && p
                           A  3166    ; 1478						obj->stat = 2;	/* 
                           A  3167    ; 1479					}
                           A  3168    ; 1480				}
                           A  3169    ; 1481			}
                           A  3170    ; 1482		}
                           A  3171    ; 1483	#endif
                           A  3172    ; 1484		return FR_OK;
000C83 ED62                A  3173    	SBC	HL,HL
                           A  3174    ; 1485	}
000C85                     A  3175    L_130:
000C85 DDF9                A  3176    	LD	SP,IX
000C87 DDE1                A  3177    	POP	IX
000C89 C9                  A  3178    	RET	
                           A  3179    
                           A  3180    
                           A  3181    ;**************************** _remove_chain ***
                           A  3182    ;Name                         Addr/Register   S
                           A  3183    ;G_9                                  IX-14    
                           A  3184    ;nxt                                  IX-10    
                           A  3185    ;res                                   IX-6    
                           A  3186    ;fs                                    IX-3    
                           A  3187    ;pclst                                IX+15    
                           A  3188    ;clst                                  IX+9    
                           A  3189    ;obj                                   IX+6    
                           A  3190    
                           A  3191    
                           A  3192    ; Stack Frame Size: 35 (bytes)
                           A  3193    ;       Spill Code: 0 (instruction)
                           A  3194    
                           A  3195    
                           A  3196    ; 1486	
                           A  3197    ; 1487	
                           A  3198    ; 1488	
                           A  3199    ; 1489	
                           A  3200    ; 1490	/*-------------------------------------
                           A  3201    ; 1491	/* FAT handling - Stretch a chain or Cr
                           A  3202    ; 1492	/*-------------------------------------
                           A  3203    ; 1493	
                           A  3204    ; 1494	static DWORD create_chain (	/* 0:No fre
                           A  3205    ; 1495		FFOBJID* obj,		/* Correspondin
                           A  3206    ; 1496		DWORD clst			/* Cluster# to 
                           A  3207    ; 1497	)
                           A  3208    ; 1498	{
000C8A                     A  3209    _create_chain:
000C8A 21E6FFFF            A  3210    	LD	HL,-26
000C8E CD 00 00 00         A  3211    	CALL	__frameset
                           A  3212    ; 1499		DWORD cs, ncl, scl;
                           A  3213    ; 1500		FRESULT res;
                           A  3214    ; 1501		FATFS *fs = obj->fs;
000C92 DD3106              A  3215    	LD	IY,(IX+%6)
000C95 FD0700              A  3216    	LD	BC,(IY+%0)
000C98 DD0FF5              A  3217    	LD	(IX+%FFFFFFF5),BC
                           A  3218    ; 1502	
                           A  3219    ; 1503	
                           A  3220    ; 1504		if (clst == 0) {	/* Create a new
000C9B DD2709              A  3221    	LD	HL,(IX+%9)
000C9E DD5E0C              A  3222    	LD	E,(IX+%C)
000CA1 CD 00 00 00         A  3223    	CALL	__lcmpzero
000CA5 20 3E               A  3224    	JR	NZ,L_140
                           A  3225    ; 1505			scl = fs->last_clst;			
000CA7 DD31F5              A  3226    	LD	IY,(IX+%FFFFFFF5)
000CAA FD070E              A  3227    	LD	BC,(IY+%E)
000CAD FD7E11              A  3228    	LD	A,(IY+%11)
000CB0 DD0FF1              A  3229    	LD	(IX+%FFFFFFF1),BC
000CB3 DD77F4              A  3230    	LD	(IX+%FFFFFFF4),A
                           A  3231    ; 1506			if (scl == 0 || scl >= fs->n_fa
000CB6 C5E1                A  3232    	LD	HL,BC
000CB8 DD5EF4              A  3233    	LD	E,(IX+%FFFFFFF4)
000CBB CD 00 00 00         A  3234    	CALL	__lcmpzero
000CBF 28 17               A  3235    	JR	Z,L_132
000CC1 DD27F1              A  3236    	LD	HL,(IX+%FFFFFFF1)
000CC4 DD5EF4              A  3237    	LD	E,(IX+%FFFFFFF4)
000CC7 DD31F5              A  3238    	LD	IY,(IX+%FFFFFFF5)
000CCA FD0716              A  3239    	LD	BC,(IY+%16)
000CCD FD7E19              A  3240    	LD	A,(IY+%19)
000CD0 CD 00 00 00         A  3241    	CALL	__lcmpu
000CD4 DA 62 0D 00         A  3242    	JR	C,L_142
000CD8                     A  3243    L_132:
000CD8 01010000            A  3244    	LD	BC,1
000CDC AF                  A  3245    	XOR	A,A
000CDD DD0FF1              A  3246    	LD	(IX+%FFFFFFF1),BC
000CE0 DD77F4              A  3247    	LD	(IX+%FFFFFFF4),A
                           A  3248    ; 1507		}
                           A  3249    ; 1508		else {				/* Stretch a ch
000CE3 18 7D               A  3250    	JR	L_142
000CE5                     A  3251    L_140:
                           A  3252    ; 1509			cs = get_fat(obj, clst);		
000CE5 DD4E0C              A  3253    	LD	C,(IX+%C)
000CE8 0600                A  3254    	LD	B,%0
000CEA C5                  A  3255    	PUSH	BC
000CEB DD0709              A  3256    	LD	BC,(IX+%9)
000CEE C5                  A  3257    	PUSH	BC
000CEF DD0706              A  3258    	LD	BC,(IX+%6)
000CF2 C5                  A  3259    	PUSH	BC
000CF3 CD D1 05 00         A  3260    	CALL	_get_fat
000CF7 C1                  A  3261    	POP	BC
000CF8 C1                  A  3262    	POP	BC
000CF9 C1                  A  3263    	POP	BC
000CFA DD2FFC              A  3264    	LD	(IX+%FFFFFFFC),HL
000CFD DD73FF              A  3265    	LD	(IX+%FFFFFFFF),E
                           A  3266    ; 1510			if (cs < 2) return 1;			
000D00 DD27FC              A  3267    	LD	HL,(IX+%FFFFFFFC)
000D03 DD5EFF              A  3268    	LD	E,(IX+%FFFFFFFF)
000D06 01020000            A  3269    	LD	BC,2
000D0A AF                  A  3270    	XOR	A,A
000D0B CD 00 00 00         A  3271    	CALL	__lcmpu
000D0F 30 0A               A  3272    	JR	NC,L_135
000D11 21010000            A  3273    	LD	HL,1
000D15 1E00                A  3274    	LD	E,%0
000D17 C3 2E 10 00         A  3275    	JR	L_182
000D1B                     A  3276    L_135:
                           A  3277    ; 1511			if (cs == 0xFFFFFFFF) return cs
000D1B DD27FC              A  3278    	LD	HL,(IX+%FFFFFFFC)
000D1E DD5EFF              A  3279    	LD	E,(IX+%FFFFFFFF)
000D21 01FFFFFF            A  3280    	LD	BC,16777215
000D25 3EFF                A  3281    	LD	A,%FF
000D27 CD 00 00 00         A  3282    	CALL	__lcmpu
000D2B 20 0A               A  3283    	JR	NZ,L_137
000D2D DD27FC              A  3284    	LD	HL,(IX+%FFFFFFFC)
000D30 DD5EFF              A  3285    	LD	E,(IX+%FFFFFFFF)
000D33 C3 2E 10 00         A  3286    	JR	L_182
000D37                     A  3287    L_137:
                           A  3288    ; 1512			if (cs < fs->n_fatent) return c
000D37 DD27FC              A  3289    	LD	HL,(IX+%FFFFFFFC)
000D3A DD5EFF              A  3290    	LD	E,(IX+%FFFFFFFF)
000D3D DD31F5              A  3291    	LD	IY,(IX+%FFFFFFF5)
000D40 FD0716              A  3292    	LD	BC,(IY+%16)
000D43 FD7E19              A  3293    	LD	A,(IY+%19)
000D46 CD 00 00 00         A  3294    	CALL	__lcmpu
000D4A 30 0A               A  3295    	JR	NC,L_138
000D4C DD27FC              A  3296    	LD	HL,(IX+%FFFFFFFC)
000D4F DD5EFF              A  3297    	LD	E,(IX+%FFFFFFFF)
000D52 C3 2E 10 00         A  3298    	JR	L_182
000D56                     A  3299    L_138:
                           A  3300    ; 1513			scl = clst;						
000D56 DD0709              A  3301    	LD	BC,(IX+%9)
000D59 DD7E0C              A  3302    	LD	A,(IX+%C)
000D5C DD0FF1              A  3303    	LD	(IX+%FFFFFFF1),BC
000D5F DD77F4              A  3304    	LD	(IX+%FFFFFFF4),A
                           A  3305    ; 1514		}
000D62                     A  3306    L_142:
                           A  3307    ; 1515		if (fs->free_clst == 0) return 0;	
000D62 DD31F5              A  3308    	LD	IY,(IX+%FFFFFFF5)
000D65 FD2712              A  3309    	LD	HL,(IY+%12)
000D68 FD5E15              A  3310    	LD	E,(IY+%15)
000D6B CD 00 00 00         A  3311    	CALL	__lcmpzero
000D6F 20 09               A  3312    	JR	NZ,L_170
000D71 B7                  A  3313    	OR	A,A
000D72 ED62                A  3314    	SBC	HL,HL
000D74 1E00                A  3315    	LD	E,%0
000D76 C3 2E 10 00         A  3316    	JR	L_182
000D7A                     A  3317    L_170:
                           A  3318    ; 1516	
                           A  3319    ; 1517	#if FF_FS_EXFAT
                           A  3320    ; 1518		if (fs->fs_type == FS_EXFAT) {	/* 
                           A  3321    ; 1519			ncl = find_bitmap(fs, scl, 1);	
                           A  3322    ; 1520			if (ncl == 0 || ncl == 0xFFFFFF
                           A  3323    ; 1521			res = change_bitmap(fs, ncl, 1,
                           A  3324    ; 1522			if (res == FR_INT_ERR) return 1
                           A  3325    ; 1523			if (res == FR_DISK_ERR) return 
                           A  3326    ; 1524			if (clst == 0) {				
                           A  3327    ; 1525				obj->stat = 2;				
                           A  3328    ; 1526			} else {						
                           A  3329    ; 1527				if (obj->stat == 2 && ncl !
                           A  3330    ; 1528					obj->n_cont = scl - obj
                           A  3331    ; 1529					obj->stat = 3;			
                           A  3332    ; 1530				}
                           A  3333    ; 1531			}
                           A  3334    ; 1532			if (obj->stat != 2) {	/* Is t
                           A  3335    ; 1533				if (ncl == clst + 1) {	/* 
                           A  3336    ; 1534					obj->n_frag = obj->n_fr
                           A  3337    ; 1535				} else {				/* 
                           A  3338    ; 1536					if (obj->n_frag == 0) o
                           A  3339    ; 1537					res = fill_last_frag(ob
                           A  3340    ; 1538					if (res == FR_OK) obj->
                           A  3341    ; 1539				}
                           A  3342    ; 1540			}
                           A  3343    ; 1541		} else
                           A  3344    ; 1542	#endif
                           A  3345    ; 1543		{	/* On the FAT/FAT32 volume */
                           A  3346    ; 1544			ncl = 0;
000D7A 01000000            A  3347    	LD	BC,0
000D7E AF                  A  3348    	XOR	A,A
000D7F DD0FF8              A  3349    	LD	(IX+%FFFFFFF8),BC
000D82 DD77FB              A  3350    	LD	(IX+%FFFFFFFB),A
                           A  3351    ; 1545			if (scl == clst) {				
000D85 DD27F1              A  3352    	LD	HL,(IX+%FFFFFFF1)
000D88 DD5EF4              A  3353    	LD	E,(IX+%FFFFFFF4)
000D8B DD0709              A  3354    	LD	BC,(IX+%9)
000D8E DD7E0C              A  3355    	LD	A,(IX+%C)
000D91 CD 00 00 00         A  3356    	CALL	__lcmpu
000D95 C2 6A 0E 00         A  3357    	JR	NZ,L_166
                           A  3358    ; 1546				ncl = scl + 1;				
000D99 DD27F1              A  3359    	LD	HL,(IX+%FFFFFFF1)
000D9C DD5EF4              A  3360    	LD	E,(IX+%FFFFFFF4)
000D9F 3E01                A  3361    	LD	A,%1
000DA1 CD 00 00 00         A  3362    	CALL	__ladd_b
000DA5 DD2FF8              A  3363    	LD	(IX+%FFFFFFF8),HL
000DA8 DD73FB              A  3364    	LD	(IX+%FFFFFFFB),E
                           A  3365    ; 1547				if (ncl >= fs->n_fatent) nc
000DAB DD27F8              A  3366    	LD	HL,(IX+%FFFFFFF8)
000DAE DD5EFB              A  3367    	LD	E,(IX+%FFFFFFFB)
000DB1 DD31F5              A  3368    	LD	IY,(IX+%FFFFFFF5)
000DB4 FD0716              A  3369    	LD	BC,(IY+%16)
000DB7 FD7E19              A  3370    	LD	A,(IY+%19)
000DBA CD 00 00 00         A  3371    	CALL	__lcmpu
000DBE 38 0B               A  3372    	JR	C,L_144
000DC0 01020000            A  3373    	LD	BC,2
000DC4 AF                  A  3374    	XOR	A,A
000DC5 DD0FF8              A  3375    	LD	(IX+%FFFFFFF8),BC
000DC8 DD77FB              A  3376    	LD	(IX+%FFFFFFFB),A
000DCB                     A  3377    L_144:
                           A  3378    ; 1548				cs = get_fat(obj, ncl);		
000DCB DD4EFB              A  3379    	LD	C,(IX+%FFFFFFFB)
000DCE 0600                A  3380    	LD	B,%0
000DD0 C5                  A  3381    	PUSH	BC
000DD1 DD07F8              A  3382    	LD	BC,(IX+%FFFFFFF8)
000DD4 C5                  A  3383    	PUSH	BC
000DD5 DD0706              A  3384    	LD	BC,(IX+%6)
000DD8 C5                  A  3385    	PUSH	BC
000DD9 CD D1 05 00         A  3386    	CALL	_get_fat
000DDD C1                  A  3387    	POP	BC
000DDE C1                  A  3388    	POP	BC
000DDF C1                  A  3389    	POP	BC
000DE0 DD2FFC              A  3390    	LD	(IX+%FFFFFFFC),HL
000DE3 DD73FF              A  3391    	LD	(IX+%FFFFFFFF),E
                           A  3392    ; 1549				if (cs == 1 || cs == 0xFFFF
000DE6 DD27FC              A  3393    	LD	HL,(IX+%FFFFFFFC)
000DE9 DD5EFF              A  3394    	LD	E,(IX+%FFFFFFFF)
000DEC 01010000            A  3395    	LD	BC,1
000DF0 AF                  A  3396    	XOR	A,A
000DF1 CD 00 00 00         A  3397    	CALL	__lcmpu
000DF5 28 12               A  3398    	JR	Z,L_146
000DF7 DD27FC              A  3399    	LD	HL,(IX+%FFFFFFFC)
000DFA DD5EFF              A  3400    	LD	E,(IX+%FFFFFFFF)
000DFD 01FFFFFF            A  3401    	LD	BC,16777215
000E01 3EFF                A  3402    	LD	A,%FF
000E03 CD 00 00 00         A  3403    	CALL	__lcmpu
000E07 20 0A               A  3404    	JR	NZ,L_151
000E09                     A  3405    L_146:
000E09 DD27FC              A  3406    	LD	HL,(IX+%FFFFFFFC)
000E0C DD5EFF              A  3407    	LD	E,(IX+%FFFFFFFF)
000E0F C3 2E 10 00         A  3408    	JR	L_182
000E13                     A  3409    L_151:
                           A  3410    ; 1550				if (cs != 0) {				
000E13 DD27FC              A  3411    	LD	HL,(IX+%FFFFFFFC)
000E16 DD5EFF              A  3412    	LD	E,(IX+%FFFFFFFF)
000E19 CD 00 00 00         A  3413    	CALL	__lcmpzero
000E1D 28 4B               A  3414    	JR	Z,L_166
                           A  3415    ; 1551					cs = fs->last_clst;		
000E1F DD31F5              A  3416    	LD	IY,(IX+%FFFFFFF5)
000E22 FD070E              A  3417    	LD	BC,(IY+%E)
000E25 FD7E11              A  3418    	LD	A,(IY+%11)
000E28 DD0FFC              A  3419    	LD	(IX+%FFFFFFFC),BC
000E2B DD77FF              A  3420    	LD	(IX+%FFFFFFFF),A
                           A  3421    ; 1552					if (cs >= 2 && cs < fs-
000E2E C5E1                A  3422    	LD	HL,BC
000E30 DD5EFF              A  3423    	LD	E,(IX+%FFFFFFFF)
000E33 01020000            A  3424    	LD	BC,2
000E37 AF                  A  3425    	XOR	A,A
000E38 CD 00 00 00         A  3426    	CALL	__lcmpu
000E3C 38 21               A  3427    	JR	C,L_149
000E3E DD27FC              A  3428    	LD	HL,(IX+%FFFFFFFC)
000E41 DD5EFF              A  3429    	LD	E,(IX+%FFFFFFFF)
000E44 DD31F5              A  3430    	LD	IY,(IX+%FFFFFFF5)
000E47 FD0716              A  3431    	LD	BC,(IY+%16)
000E4A FD7E19              A  3432    	LD	A,(IY+%19)
000E4D CD 00 00 00         A  3433    	CALL	__lcmpu
000E51 30 0C               A  3434    	JR	NC,L_149
000E53 DD07FC              A  3435    	LD	BC,(IX+%FFFFFFFC)
000E56 DD7EFF              A  3436    	LD	A,(IX+%FFFFFFFF)
000E59 DD0FF1              A  3437    	LD	(IX+%FFFFFFF1),BC
000E5C DD77F4              A  3438    	LD	(IX+%FFFFFFF4),A
000E5F                     A  3439    L_149:
                           A  3440    ; 1553					ncl = 0;
000E5F 01000000            A  3441    	LD	BC,0
000E63 AF                  A  3442    	XOR	A,A
000E64 DD0FF8              A  3443    	LD	(IX+%FFFFFFF8),BC
000E67 DD77FB              A  3444    	LD	(IX+%FFFFFFFB),A
                           A  3445    ; 1554				}
                           A  3446    ; 1555			}
000E6A                     A  3447    L_166:
                           A  3448    ; 1556			if (ncl == 0) {	/* The new clus
000E6A DD27F8              A  3449    	LD	HL,(IX+%FFFFFFF8)
000E6D DD5EFB              A  3450    	LD	E,(IX+%FFFFFFFB)
000E70 CD 00 00 00         A  3451    	CALL	__lcmpzero
000E74 C2 3D 0F 00         A  3452    	JR	NZ,L_167
                           A  3453    ; 1557				ncl = scl;	/* Start cluste
000E78 DD07F1              A  3454    	LD	BC,(IX+%FFFFFFF1)
000E7B DD7EF4              A  3455    	LD	A,(IX+%FFFFFFF4)
000E7E DD0FF8              A  3456    	LD	(IX+%FFFFFFF8),BC
000E81 DD77FB              A  3457    	LD	(IX+%FFFFFFFB),A
                           A  3458    ; 1558				for (;;) {
000E84                     A  3459    L_163:
                           A  3460    ; 1559					ncl++;					
000E84 DD27F8              A  3461    	LD	HL,(IX+%FFFFFFF8)
000E87 DD5EFB              A  3462    	LD	E,(IX+%FFFFFFFB)
000E8A 3E01                A  3463    	LD	A,%1
000E8C CD 00 00 00         A  3464    	CALL	__ladd_b
000E90 DD2FF8              A  3465    	LD	(IX+%FFFFFFF8),HL
000E93 DD73FB              A  3466    	LD	(IX+%FFFFFFFB),E
                           A  3467    ; 1560					if (ncl >= fs->n_fatent
000E96 DD27F8              A  3468    	LD	HL,(IX+%FFFFFFF8)
000E99 DD5EFB              A  3469    	LD	E,(IX+%FFFFFFFB)
000E9C DD31F5              A  3470    	LD	IY,(IX+%FFFFFFF5)
000E9F FD0716              A  3471    	LD	BC,(IY+%16)
000EA2 FD7E19              A  3472    	LD	A,(IY+%19)
000EA5 CD 00 00 00         A  3473    	CALL	__lcmpu
000EA9 38 21               A  3474    	JR	C,L_156
                           A  3475    ; 1561						ncl = 2;
000EAB 01020000            A  3476    	LD	BC,2
000EAF AF                  A  3477    	XOR	A,A
000EB0 DD0FF8              A  3478    	LD	(IX+%FFFFFFF8),BC
000EB3 DD77FB              A  3479    	LD	(IX+%FFFFFFFB),A
                           A  3480    ; 1562						if (ncl > scl) retu
000EB6 DD27F1              A  3481    	LD	HL,(IX+%FFFFFFF1)
000EB9 DD5EF4              A  3482    	LD	E,(IX+%FFFFFFF4)
000EBC AF                  A  3483    	XOR	A,A
000EBD CD 00 00 00         A  3484    	CALL	__lcmpu
000EC1 30 09               A  3485    	JR	NC,L_156
000EC3 B7                  A  3486    	OR	A,A
000EC4 ED62                A  3487    	SBC	HL,HL
000EC6 1E00                A  3488    	LD	E,%0
000EC8 C3 2E 10 00         A  3489    	JR	L_182
                           A  3490    ; 1563					}
000ECC                     A  3491    L_156:
                           A  3492    ; 1564					cs = get_fat(obj, ncl);
000ECC DD4EFB              A  3493    	LD	C,(IX+%FFFFFFFB)
000ECF 0600                A  3494    	LD	B,%0
000ED1 C5                  A  3495    	PUSH	BC
000ED2 DD07F8              A  3496    	LD	BC,(IX+%FFFFFFF8)
000ED5 C5                  A  3497    	PUSH	BC
000ED6 DD0706              A  3498    	LD	BC,(IX+%6)
000ED9 C5                  A  3499    	PUSH	BC
000EDA CD D1 05 00         A  3500    	CALL	_get_fat
000EDE C1                  A  3501    	POP	BC
000EDF C1                  A  3502    	POP	BC
000EE0 C1                  A  3503    	POP	BC
000EE1 DD2FFC              A  3504    	LD	(IX+%FFFFFFFC),HL
000EE4 DD73FF              A  3505    	LD	(IX+%FFFFFFFF),E
                           A  3506    ; 1565					if (cs == 0) break;		
000EE7 DD27FC              A  3507    	LD	HL,(IX+%FFFFFFFC)
000EEA DD5EFF              A  3508    	LD	E,(IX+%FFFFFFFF)
000EED CD 00 00 00         A  3509    	CALL	__lcmpzero
000EF1 28 4A               A  3510    	JR	Z,L_167
                           A  3511    ; 1566					if (cs == 1 || cs == 0x
000EF3 DD27FC              A  3512    	LD	HL,(IX+%FFFFFFFC)
000EF6 DD5EFF              A  3513    	LD	E,(IX+%FFFFFFFF)
000EF9 01010000            A  3514    	LD	BC,1
000EFD AF                  A  3515    	XOR	A,A
000EFE CD 00 00 00         A  3516    	CALL	__lcmpu
000F02 28 12               A  3517    	JR	Z,L_159
000F04 DD27FC              A  3518    	LD	HL,(IX+%FFFFFFFC)
000F07 DD5EFF              A  3519    	LD	E,(IX+%FFFFFFFF)
000F0A 01FFFFFF            A  3520    	LD	BC,16777215
000F0E 3EFF                A  3521    	LD	A,%FF
000F10 CD 00 00 00         A  3522    	CALL	__lcmpu
000F14 20 0A               A  3523    	JR	NZ,L_162
000F16                     A  3524    L_159:
000F16 DD27FC              A  3525    	LD	HL,(IX+%FFFFFFFC)
000F19 DD5EFF              A  3526    	LD	E,(IX+%FFFFFFFF)
000F1C C3 2E 10 00         A  3527    	JR	L_182
000F20                     A  3528    L_162:
                           A  3529    ; 1567					if (ncl == scl) return 
000F20 DD27F8              A  3530    	LD	HL,(IX+%FFFFFFF8)
000F23 DD5EFB              A  3531    	LD	E,(IX+%FFFFFFFB)
000F26 DD07F1              A  3532    	LD	BC,(IX+%FFFFFFF1)
000F29 DD7EF4              A  3533    	LD	A,(IX+%FFFFFFF4)
000F2C CD 00 00 00         A  3534    	CALL	__lcmpu
000F30 C2 84 0E 00         A  3535    	JR	NZ,L_163
000F34 B7                  A  3536    	OR	A,A
000F35 ED62                A  3537    	SBC	HL,HL
000F37 1E00                A  3538    	LD	E,%0
000F39 C3 2E 10 00         A  3539    	JR	L_182
                           A  3540    ; 1568				}
                           A  3541    ; 1569			}
000F3D                     A  3542    L_167:
                           A  3543    ; 1570			res = put_fat(fs, ncl, 0xFFFFFF
000F3D 01FF0000            A  3544    	LD	BC,255
000F41 C5                  A  3545    	PUSH	BC
000F42 01FFFFFF            A  3546    	LD	BC,16777215
000F46 C5                  A  3547    	PUSH	BC
000F47 DD4EFB              A  3548    	LD	C,(IX+%FFFFFFFB)
000F4A 0600                A  3549    	LD	B,%0
000F4C C5                  A  3550    	PUSH	BC
000F4D DD07F8              A  3551    	LD	BC,(IX+%FFFFFFF8)
000F50 C5                  A  3552    	PUSH	BC
000F51 DD07F5              A  3553    	LD	BC,(IX+%FFFFFFF5)
000F54 C5                  A  3554    	PUSH	BC
000F55 CD 18 08 00         A  3555    	CALL	_put_fat
000F59 C1                  A  3556    	POP	BC
000F5A C1                  A  3557    	POP	BC
000F5B C1                  A  3558    	POP	BC
000F5C C1                  A  3559    	POP	BC
000F5D C1                  A  3560    	POP	BC
000F5E DD2FEE              A  3561    	LD	(IX+%FFFFFFEE),HL
                           A  3562    ; 1571			if (res == FR_OK && clst != 0) 
000F61 CD 00 00 00         A  3563    	CALL	__icmpzero
000F65 20 30               A  3564    	JR	NZ,L_180
000F67 DD2709              A  3565    	LD	HL,(IX+%9)
000F6A DD5E0C              A  3566    	LD	E,(IX+%C)
000F6D CD 00 00 00         A  3567    	CALL	__lcmpzero
000F71 28 24               A  3568    	JR	Z,L_180
                           A  3569    ; 1572				res = put_fat(fs, clst, ncl
000F73 DD4EFB              A  3570    	LD	C,(IX+%FFFFFFFB)
000F76 0600                A  3571    	LD	B,%0
000F78 C5                  A  3572    	PUSH	BC
000F79 DD07F8              A  3573    	LD	BC,(IX+%FFFFFFF8)
000F7C C5                  A  3574    	PUSH	BC
000F7D DD4E0C              A  3575    	LD	C,(IX+%C)
000F80 0600                A  3576    	LD	B,%0
000F82 C5                  A  3577    	PUSH	BC
000F83 DD0709              A  3578    	LD	BC,(IX+%9)
000F86 C5                  A  3579    	PUSH	BC
000F87 DD07F5              A  3580    	LD	BC,(IX+%FFFFFFF5)
000F8A C5                  A  3581    	PUSH	BC
000F8B CD 18 08 00         A  3582    	CALL	_put_fat
000F8F C1                  A  3583    	POP	BC
000F90 C1                  A  3584    	POP	BC
000F91 C1                  A  3585    	POP	BC
000F92 C1                  A  3586    	POP	BC
000F93 C1                  A  3587    	POP	BC
000F94 DD2FEE              A  3588    	LD	(IX+%FFFFFFEE),HL
                           A  3589    ; 1573			}
                           A  3590    ; 1574		}
000F97                     A  3591    L_180:
                           A  3592    ; 1575	
                           A  3593    ; 1576		if (res == FR_OK) {			/* Upda
000F97 DD27EE              A  3594    	LD	HL,(IX+%FFFFFFEE)
000F9A CD 00 00 00         A  3595    	CALL	__icmpzero
000F9E 20 5B               A  3596    	JR	NZ,L_179
                           A  3597    ; 1577			fs->last_clst = ncl;
000FA0 DD07F8              A  3598    	LD	BC,(IX+%FFFFFFF8)
000FA3 DD7EFB              A  3599    	LD	A,(IX+%FFFFFFFB)
000FA6 DD31F5              A  3600    	LD	IY,(IX+%FFFFFFF5)
000FA9 FD0F0E              A  3601    	LD	(IY+%E),BC
000FAC FD7711              A  3602    	LD	(IY+%11),A
                           A  3603    ; 1578			if (fs->free_clst <= fs->n_fate
000FAF FD0712              A  3604    	LD	BC,(IY+%12)
000FB2 FD7E15              A  3605    	LD	A,(IY+%15)
000FB5 DD0FEA              A  3606    	LD	(IX+%FFFFFFEA),BC
000FB8 DD77ED              A  3607    	LD	(IX+%FFFFFFED),A
000FBB FD2716              A  3608    	LD	HL,(IY+%16)
000FBE FD5E19              A  3609    	LD	E,(IY+%19)
000FC1 01020000            A  3610    	LD	BC,2
000FC5 AF                  A  3611    	XOR	A,A
000FC6 CD 00 00 00         A  3612    	CALL	__lsub
000FCA DD07EA              A  3613    	LD	BC,(IX+%FFFFFFEA)
000FCD DD7EED              A  3614    	LD	A,(IX+%FFFFFFED)
000FD0 CD 00 00 00         A  3615    	CALL	__lcmpu
000FD4 38 18               A  3616    	JR	C,L_173
000FD6 DD27EA              A  3617    	LD	HL,(IX+%FFFFFFEA)
000FD9 DD5EED              A  3618    	LD	E,(IX+%FFFFFFED)
000FDC 01010000            A  3619    	LD	BC,1
000FE0 AF                  A  3620    	XOR	A,A
000FE1 CD 00 00 00         A  3621    	CALL	__lsub
000FE5 DD31F5              A  3622    	LD	IY,(IX+%FFFFFFF5)
000FE8 FD2F12              A  3623    	LD	(IY+%12),HL
000FEB FD7315              A  3624    	LD	(IY+%15),E
000FEE                     A  3625    L_173:
                           A  3626    ; 1579			fs->fsi_flag |= 1;
000FEE DD31F5              A  3627    	LD	IY,(IX+%FFFFFFF5)
000FF1 FD7E04              A  3628    	LD	A,(IY+%4)
000FF4 CBC7                A  3629    	SET	%0,A
000FF6 FD7704              A  3630    	LD	(IY+%4),A
                           A  3631    ; 1580		} else {
000FF9 18 2D               A  3632    	JR	L_181
000FFB                     A  3633    L_179:
                           A  3634    ; 1581			ncl = (res == FR_DISK_ERR) ? 0x
000FFB 01010000            A  3635    	LD	BC,1
000FFF DD27EE              A  3636    	LD	HL,(IX+%FFFFFFEE)
001002 B7                  A  3637    	OR	A,A
001003 ED42                A  3638    	SBC	HL,BC
001005 20 0E               A  3639    	JR	NZ,L_176
001007 01FFFFFF            A  3640    	LD	BC,16777215
00100B 3EFF                A  3641    	LD	A,%FF
00100D DD0FE6              A  3642    	LD	(IX+%FFFFFFE6),BC
001010 DD77E9              A  3643    	LD	(IX+%FFFFFFE9),A
001013 18 07               A  3644    	JR	L_177
001015                     A  3645    L_176:
001015 AF                  A  3646    	XOR	A,A
001016 DD0FE6              A  3647    	LD	(IX+%FFFFFFE6),BC
001019 DD77E9              A  3648    	LD	(IX+%FFFFFFE9),A
00101C                     A  3649    L_177:
00101C DD07E6              A  3650    	LD	BC,(IX+%FFFFFFE6)
00101F DD7EE9              A  3651    	LD	A,(IX+%FFFFFFE9)
001022 DD0FF8              A  3652    	LD	(IX+%FFFFFFF8),BC
001025 DD77FB              A  3653    	LD	(IX+%FFFFFFFB),A
                           A  3654    ; 1582		}
001028                     A  3655    L_181:
                           A  3656    ; 1583	
                           A  3657    ; 1584		return ncl;		/* Return new clust
001028 DD27F8              A  3658    	LD	HL,(IX+%FFFFFFF8)
00102B DD5EFB              A  3659    	LD	E,(IX+%FFFFFFFB)
                           A  3660    ; 1585	}
00102E                     A  3661    L_182:
00102E DDF9                A  3662    	LD	SP,IX
001030 DDE1                A  3663    	POP	IX
001032 C9                  A  3664    	RET	
                           A  3665    
                           A  3666    
                           A  3667    ;**************************** _create_chain ***
                           A  3668    ;Name                         Addr/Register   S
                           A  3669    ;temp174                              IX-26    
                           A  3670    ;G_10                                 IX-22    
                           A  3671    ;res                                  IX-18    
                           A  3672    ;scl                                  IX-15    
                           A  3673    ;fs                                   IX-11    
                           A  3674    ;ncl                                   IX-8    
                           A  3675    ;cs                                    IX-4    
                           A  3676    ;clst                                  IX+9    
                           A  3677    ;obj                                   IX+6    
                           A  3678    
                           A  3679    
                           A  3680    ; Stack Frame Size: 41 (bytes)
                           A  3681    ;       Spill Code: 0 (instruction)
                           A  3682    
                           A  3683    
                           A  3684    ; 1586	
                           A  3685    ; 1587	#endif /* !FF_FS_READONLY */
                           A  3686    ; 1588	
                           A  3687    ; 1589	
                           A  3688    ; 1590	
                           A  3689    ; 1591	
                           A  3690    ; 1592	#if FF_USE_FASTSEEK
                           A  3691    ; 1593	/*-------------------------------------
                           A  3692    ; 1594	/* FAT handling - Convert offset into c
                           A  3693    ; 1595	/*-------------------------------------
                           A  3694    ; 1596	
                           A  3695    ; 1597	static DWORD clmt_clust (	/* <2:Error
                           A  3696    ; 1598		FIL* fp,		/* Pointer to the f
                           A  3697    ; 1599		FSIZE_t ofs		/* File offset to b
                           A  3698    ; 1600	)
                           A  3699    ; 1601	{
                           A  3700    ; 1602		DWORD cl, ncl, *tbl;
                           A  3701    ; 1603		FATFS *fs = fp->obj.fs;
                           A  3702    ; 1604	
                           A  3703    ; 1605	
                           A  3704    ; 1606		tbl = fp->cltbl + 1;	/* Top of C
                           A  3705    ; 1607		cl = (DWORD)(ofs / SS(fs) / fs->csi
                           A  3706    ; 1608		for (;;) {
                           A  3707    ; 1609			ncl = *tbl++;			/* Numb
                           A  3708    ; 1610			if (ncl == 0) return 0;	/* End 
                           A  3709    ; 1611			if (cl < ncl) break;	/* In t
                           A  3710    ; 1612			cl -= ncl; tbl++;		/* Next
                           A  3711    ; 1613		}
                           A  3712    ; 1614		return cl + *tbl;	/* Return the c
                           A  3713    ; 1615	}
                           A  3714    ; 1616	
                           A  3715    ; 1617	#endif	/* FF_USE_FASTSEEK */
                           A  3716    ; 1618	
                           A  3717    ; 1619	
                           A  3718    ; 1620	
                           A  3719    ; 1621	
                           A  3720    ; 1622	/*-------------------------------------
                           A  3721    ; 1623	/* Directory handling - Fill a cluster 
                           A  3722    ; 1624	/*-------------------------------------
                           A  3723    ; 1625	
                           A  3724    ; 1626	#if !FF_FS_READONLY
                           A  3725    ; 1627	static FRESULT dir_clear (	/* Returns 
                           A  3726    ; 1628		FATFS *fs,		/* Filesystem objec
                           A  3727    ; 1629		DWORD clst		/* Directory table 
                           A  3728    ; 1630	)
                           A  3729    ; 1631	{
001033                     A  3730    _dir_clear:
001033 21F3FFFF            A  3731    	LD	HL,-13
001037 CD 00 00 00         A  3732    	CALL	__frameset
                           A  3733    ; 1632		LBA_t sect;
                           A  3734    ; 1633		UINT n, szb;
                           A  3735    ; 1634		BYTE *ibuf;
                           A  3736    ; 1635	
                           A  3737    ; 1636	
                           A  3738    ; 1637		if (sync_window(fs) != FR_OK) retur
00103B DD0706              A  3739    	LD	BC,(IX+%6)
00103E C5                  A  3740    	PUSH	BC
00103F CD DE 02 00         A  3741    	CALL	_sync_window
001043 C1                  A  3742    	POP	BC
001044 CD 00 00 00         A  3743    	CALL	__icmpzero
001048 28 08               A  3744    	JR	Z,L_184
00104A 21010000            A  3745    	LD	HL,1
00104E C3 13 11 00         A  3746    	JR	L_194
001052                     A  3747    L_184:
                           A  3748    ; 1638		sect = clst2sect(fs, clst);		/* 
001052 DD4E0C              A  3749    	LD	C,(IX+%C)
001055 0600                A  3750    	LD	B,%0
001057 C5                  A  3751    	PUSH	BC
001058 DD0709              A  3752    	LD	BC,(IX+%9)
00105B C5                  A  3753    	PUSH	BC
00105C DD0706              A  3754    	LD	BC,(IX+%6)
00105F C5                  A  3755    	PUSH	BC
001060 CD 6B 05 00         A  3756    	CALL	_clst2sect
001064 C1                  A  3757    	POP	BC
001065 C1                  A  3758    	POP	BC
001066 C1                  A  3759    	POP	BC
001067 DD2FF3              A  3760    	LD	(IX+%FFFFFFF3),HL
00106A DD73F6              A  3761    	LD	(IX+%FFFFFFF6),E
                           A  3762    ; 1639		fs->winsect = sect;				/* 
00106D DD7EF6              A  3763    	LD	A,(IX+%FFFFFFF6)
001070 DD3106              A  3764    	LD	IY,(IX+%6)
001073 FD2F2E              A  3765    	LD	(IY+%2E),HL
001076 FD7731              A  3766    	LD	(IY+%31),A
                           A  3767    ; 1640		memset(fs->win, 0, sizeof fs->win);
001079 01000200            A  3768    	LD	BC,512
00107D C5                  A  3769    	PUSH	BC
00107E 01000000            A  3770    	LD	BC,0
001082 C5                  A  3771    	PUSH	BC
001083 ED6632              A  3772    	PEA	IY+%32
001086 CD 00 00 00         A  3773    	CALL	_memset
00108A C1                  A  3774    	POP	BC
00108B C1                  A  3775    	POP	BC
00108C C1                  A  3776    	POP	BC
                           A  3777    ; 1641	#if FF_USE_LFN == 3		/* Quick table 
                           A  3778    ; 1642		/* Allocate a temporary buffer */
                           A  3779    ; 1643		for (szb = ((DWORD)fs->csize * SS(f
                           A  3780    ; 1644		if (szb > SS(fs)) {		/* Buffer a
                           A  3781    ; 1645			memset(ibuf, 0, szb);
                           A  3782    ; 1646			szb /= SS(fs);		/* Bytes ->
                           A  3783    ; 1647			for (n = 0; n < fs->csize && di
                           A  3784    ; 1648			ff_memfree(ibuf);
                           A  3785    ; 1649		} else
                           A  3786    ; 1650	#endif
                           A  3787    ; 1651		{
                           A  3788    ; 1652			ibuf = fs->win; szb = 1;	/* 
00108D DD3106              A  3789    	LD	IY,(IX+%6)
001090 ED0332              A  3790    	LEA	BC,IY+%32
001093 DD0FF7              A  3791    	LD	(IX+%FFFFFFF7),BC
                           A  3792    ; 1653			for (n = 0; n < fs->csize && di
001096 01000000            A  3793    	LD	BC,0
00109A DD0FFD              A  3794    	LD	(IX+%FFFFFFFD),BC
00109D 18 07               A  3795    	JR	L_188
00109F                     A  3796    L_186:
00109F DD07FD              A  3797    	LD	BC,(IX+%FFFFFFFD)
0010A2 03                  A  3798    	INC	BC
0010A3 DD0FFD              A  3799    	LD	(IX+%FFFFFFFD),BC
0010A6                     A  3800    L_188:
0010A6 DD3106              A  3801    	LD	IY,(IX+%6)
0010A9 FD0709              A  3802    	LD	BC,(IY+%9)
0010AC CD 00 00 00         A  3803    	CALL	__stoiu
0010B0 E5C1                A  3804    	LD	BC,HL
0010B2 DD27FD              A  3805    	LD	HL,(IX+%FFFFFFFD)
0010B5 B7                  A  3806    	OR	A,A
0010B6 ED42                A  3807    	SBC	HL,BC
0010B8 30 34               A  3808    	JR	NC,L_193
0010BA 01010000            A  3809    	LD	BC,1
0010BE C5                  A  3810    	PUSH	BC
0010BF DD07FD              A  3811    	LD	BC,(IX+%FFFFFFFD)
0010C2 AF                  A  3812    	XOR	A,A
0010C3 DD27F3              A  3813    	LD	HL,(IX+%FFFFFFF3)
0010C6 DD5EF6              A  3814    	LD	E,(IX+%FFFFFFF6)
0010C9 CD 00 00 00         A  3815    	CALL	__ladd
0010CD 4B                  A  3816    	LD	C,E
0010CE 0600                A  3817    	LD	B,%0
0010D0 C5                  A  3818    	PUSH	BC
0010D1 E5                  A  3819    	PUSH	HL
0010D2 DD07F7              A  3820    	LD	BC,(IX+%FFFFFFF7)
0010D5 C5                  A  3821    	PUSH	BC
0010D6 DD3106              A  3822    	LD	IY,(IX+%6)
0010D9 FD4E01              A  3823    	LD	C,(IY+%1)
0010DC 0600                A  3824    	LD	B,%0
0010DE C5                  A  3825    	PUSH	BC
0010DF CD 00 00 00         A  3826    	CALL	_disk_write
0010E3 C1                  A  3827    	POP	BC
0010E4 C1                  A  3828    	POP	BC
0010E5 C1                  A  3829    	POP	BC
0010E6 C1                  A  3830    	POP	BC
0010E7 C1                  A  3831    	POP	BC
0010E8 CD 00 00 00         A  3832    	CALL	__icmpzero
0010EC 28 B1               A  3833    	JR	Z,L_186
                           A  3834    ; 1654		}
0010EE                     A  3835    L_193:
                           A  3836    ; 1655		return (n == fs->csize) ? FR_OK : F
0010EE DD3106              A  3837    	LD	IY,(IX+%6)
0010F1 FD0709              A  3838    	LD	BC,(IY+%9)
0010F4 CD 00 00 00         A  3839    	CALL	__stoiu
0010F8 DD07FD              A  3840    	LD	BC,(IX+%FFFFFFFD)
0010FB B7                  A  3841    	OR	A,A
0010FC ED42                A  3842    	SBC	HL,BC
0010FE 20 09               A  3843    	JR	NZ,L_191
001100 01000000            A  3844    	LD	BC,0
001104 DD0FFA              A  3845    	LD	(IX+%FFFFFFFA),BC
001107 18 07               A  3846    	JR	L_192
001109                     A  3847    L_191:
001109 01010000            A  3848    	LD	BC,1
00110D DD0FFA              A  3849    	LD	(IX+%FFFFFFFA),BC
001110                     A  3850    L_192:
001110 DD27FA              A  3851    	LD	HL,(IX+%FFFFFFFA)
                           A  3852    ; 1656	}
001113                     A  3853    L_194:
001113 DDF9                A  3854    	LD	SP,IX
001115 DDE1                A  3855    	POP	IX
001117 C9                  A  3856    	RET	
                           A  3857    
                           A  3858    
                           A  3859    ;**************************** _dir_clear ******
                           A  3860    ;Name                         Addr/Register   S
                           A  3861    ;_disk_write                         IMPORT  --
                           A  3862    ;_memset                             IMPORT  --
                           A  3863    ;sect                                 IX-13    
                           A  3864    ;ibuf                                  IX-9    
                           A  3865    ;temp189                               IX-6    
                           A  3866    ;n                                     IX-3    
                           A  3867    ;clst                                  IX+9    
                           A  3868    ;fs                                    IX+6    
                           A  3869    
                           A  3870    
                           A  3871    ; Stack Frame Size: 28 (bytes)
                           A  3872    ;       Spill Code: 0 (instruction)
                           A  3873    
                           A  3874    
                           A  3875    ; 1657	#endif	/* !FF_FS_READONLY */
                           A  3876    ; 1658	
                           A  3877    ; 1659	
                           A  3878    ; 1660	
                           A  3879    ; 1661	
                           A  3880    ; 1662	/*-------------------------------------
                           A  3881    ; 1663	/* Directory handling - Set directory i
                           A  3882    ; 1664	/*-------------------------------------
                           A  3883    ; 1665	
                           A  3884    ; 1666	static FRESULT dir_sdi (	/* FR_OK(0)
                           A  3885    ; 1667		DIR* dp,		/* Pointer to direc
                           A  3886    ; 1668		DWORD ofs		/* Offset of direct
                           A  3887    ; 1669	)
                           A  3888    ; 1670	{
001118                     A  3889    _dir_sdi:
001118 21F0FFFF            A  3890    	LD	HL,-16
00111C CD 00 00 00         A  3891    	CALL	__frameset
                           A  3892    ; 1671		DWORD csz, clst;
                           A  3893    ; 1672		FATFS *fs = dp->obj.fs;
001120 DD3106              A  3894    	LD	IY,(IX+%6)
001123 FD0700              A  3895    	LD	BC,(IY+%0)
001126 DD0FF9              A  3896    	LD	(IX+%FFFFFFF9),BC
                           A  3897    ; 1673	
                           A  3898    ; 1674	
                           A  3899    ; 1675		if (ofs >= (DWORD)((FF_FS_EXFAT && 
001129 DD2709              A  3900    	LD	HL,(IX+%9)
00112C DD5E0C              A  3901    	LD	E,(IX+%C)
00112F 01000020            A  3902    	LD	BC,2097152
001133 AF                  A  3903    	XOR	A,A
001134 CD 00 00 00         A  3904    	CALL	__lcmpu
001138 30 10               A  3905    	JR	NC,L_196
00113A DD7E09              A  3906    	LD	A,(IX+%9)
00113D E61F                A  3907    	AND	A,%1F
00113F B7ED62              A  3908    	UEXT	HL
001142 6F                  A  3909    	LD	L,A
001143 5C                  A  3910    	LD	E,H
001144 CD 00 00 00         A  3911    	CALL	__lcmpzero
001148 28 08               A  3912    	JR	Z,L_197
00114A                     A  3913    L_196:
                           A  3914    ; 1676			return FR_INT_ERR;
00114A 21020000            A  3915    	LD	HL,2
00114E C3 14 13 00         A  3916    	JR	L_217
                           A  3917    ; 1677		}
001152                     A  3918    L_197:
                           A  3919    ; 1678		dp->dptr = ofs;				/* Set 
001152 DD0709              A  3920    	LD	BC,(IX+%9)
001155 DD7E0C              A  3921    	LD	A,(IX+%C)
001158 DD3106              A  3922    	LD	IY,(IX+%6)
00115B FD0F0F              A  3923    	LD	(IY+%F),BC
00115E FD7712              A  3924    	LD	(IY+%12),A
                           A  3925    ; 1679		clst = dp->obj.sclust;		/* Tabl
001161 FD0707              A  3926    	LD	BC,(IY+%7)
001164 FD7E0A              A  3927    	LD	A,(IY+%A)
001167 DD0FFC              A  3928    	LD	(IX+%FFFFFFFC),BC
00116A DD77FF              A  3929    	LD	(IX+%FFFFFFFF),A
                           A  3930    ; 1680		if (clst == 0 && fs->fs_type >= FS_
00116D C5E1                A  3931    	LD	HL,BC
00116F DD5EFF              A  3932    	LD	E,(IX+%FFFFFFFF)
001172 CD 00 00 00         A  3933    	CALL	__lcmpzero
001176 20 19               A  3934    	JR	NZ,L_213
001178 DD31F9              A  3935    	LD	IY,(IX+%FFFFFFF9)
00117B FD7E00              A  3936    	LD	A,(IY+%0)
00117E FE03                A  3937    	CP	A,%3
001180 38 0F               A  3938    	JR	C,L_213
                           A  3939    ; 1681			clst = (DWORD)fs->dirbase;
001182 DD31F9              A  3940    	LD	IY,(IX+%FFFFFFF9)
001185 FD0726              A  3941    	LD	BC,(IY+%26)
001188 FD7E29              A  3942    	LD	A,(IY+%29)
00118B DD0FFC              A  3943    	LD	(IX+%FFFFFFFC),BC
00118E DD77FF              A  3944    	LD	(IX+%FFFFFFFF),A
                           A  3945    ; 1682			if (FF_FS_EXFAT) dp->obj.stat =
                           A  3946    ; 1683		}
001191                     A  3947    L_213:
                           A  3948    ; 1684	
                           A  3949    ; 1685		if (clst == 0) {	/* Static table
001191 DD27FC              A  3950    	LD	HL,(IX+%FFFFFFFC)
001194 DD5EFF              A  3951    	LD	E,(IX+%FFFFFFFF)
001197 CD 00 00 00         A  3952    	CALL	__lcmpzero
00119B 20 4C               A  3953    	JR	NZ,L_212
                           A  3954    ; 1686			if (ofs / SZDIRE >= fs->n_rootd
00119D DD31F9              A  3955    	LD	IY,(IX+%FFFFFFF9)
0011A0 FD0707              A  3956    	LD	BC,(IY+%7)
0011A3 CD 00 00 00         A  3957    	CALL	__stoiu
0011A7 DD2FF2              A  3958    	LD	(IX+%FFFFFFF2),HL
0011AA 0600                A  3959    	LD	B,%0
0011AC DD70F0              A  3960    	LD	(IX+%FFFFFFF0),B	; spill
0011AF DD0709              A  3961    	LD	BC,(IX+%9)
0011B2 DD7E0C              A  3962    	LD	A,(IX+%C)
0011B5 2E05                A  3963    	LD	L,%5
0011B7 CD 00 00 00         A  3964    	CALL	__lshru
0011BB 5F                  A  3965    	LD	E,A
0011BC C5E1                A  3966    	LD	HL,BC
0011BE DD46F0              A  3967    	LD	B,(IX+%FFFFFFF0)	; unspill
0011C1 78                  A  3968    	LD	A,B
0011C2 DD07F2              A  3969    	LD	BC,(IX+%FFFFFFF2)
0011C5 CD 00 00 00         A  3970    	CALL	__lcmpu
0011C9 38 08               A  3971    	JR	C,L_202
0011CB 21020000            A  3972    	LD	HL,2
0011CF C3 14 13 00         A  3973    	JR	L_217
0011D3                     A  3974    L_202:
                           A  3975    ; 1687			dp->sect = fs->dirbase;
0011D3 DD31F9              A  3976    	LD	IY,(IX+%FFFFFFF9)
0011D6 FD0726              A  3977    	LD	BC,(IY+%26)
0011D9 FD7E29              A  3978    	LD	A,(IY+%29)
0011DC DD3106              A  3979    	LD	IY,(IX+%6)
0011DF FD0F17              A  3980    	LD	(IY+%17),BC
0011E2 FD771A              A  3981    	LD	(IY+%1A),A
                           A  3982    ; 1688	
                           A  3983    ; 1689		} else {			/* Dynamic tabl
0011E5 C3 B3 12 00         A  3984    	JR	L_214
0011E9                     A  3985    L_212:
                           A  3986    ; 1690			csz = (DWORD)fs->csize * SS(fs)
0011E9 DD31F9              A  3987    	LD	IY,(IX+%FFFFFFF9)
0011EC FD0709              A  3988    	LD	BC,(IY+%9)
0011EF CD 00 00 00         A  3989    	CALL	__stoiu
0011F3 1E00                A  3990    	LD	E,%0
0011F5 01000200            A  3991    	LD	BC,512
0011F9 AF                  A  3992    	XOR	A,A
0011FA CD 00 00 00         A  3993    	CALL	__lmulu
0011FE DD2FF5              A  3994    	LD	(IX+%FFFFFFF5),HL
001201 DD73F8              A  3995    	LD	(IX+%FFFFFFF8),E
                           A  3996    ; 1691			while (ofs >= csz) {			
001204 18 7B               A  3997    	JR	L_208
001206                     A  3998    L_209:
                           A  3999    ; 1692				clst = get_fat(&dp->obj, cl
001206 DD4EFF              A  4000    	LD	C,(IX+%FFFFFFFF)
001209 0600                A  4001    	LD	B,%0
00120B C5                  A  4002    	PUSH	BC
00120C DD07FC              A  4003    	LD	BC,(IX+%FFFFFFFC)
00120F C5                  A  4004    	PUSH	BC
001210 DD3106              A  4005    	LD	IY,(IX+%6)
001213 ED6600              A  4006    	PEA	IY+%0
001216 CD D1 05 00         A  4007    	CALL	_get_fat
00121A C1                  A  4008    	POP	BC
00121B C1                  A  4009    	POP	BC
00121C C1                  A  4010    	POP	BC
00121D DD2FFC              A  4011    	LD	(IX+%FFFFFFFC),HL
001220 DD73FF              A  4012    	LD	(IX+%FFFFFFFF),E
                           A  4013    ; 1693				if (clst == 0xFFFFFFFF) ret
001223 DD27FC              A  4014    	LD	HL,(IX+%FFFFFFFC)
001226 DD5EFF              A  4015    	LD	E,(IX+%FFFFFFFF)
001229 01FFFFFF            A  4016    	LD	BC,16777215
00122D 3EFF                A  4017    	LD	A,%FF
00122F CD 00 00 00         A  4018    	CALL	__lcmpu
001233 20 08               A  4019    	JR	NZ,L_206
001235 21010000            A  4020    	LD	HL,1
001239 C3 14 13 00         A  4021    	JR	L_217
00123D                     A  4022    L_206:
                           A  4023    ; 1694				if (clst < 2 || clst >= fs-
00123D DD27FC              A  4024    	LD	HL,(IX+%FFFFFFFC)
001240 DD5EFF              A  4025    	LD	E,(IX+%FFFFFFFF)
001243 01020000            A  4026    	LD	BC,2
001247 AF                  A  4027    	XOR	A,A
001248 CD 00 00 00         A  4028    	CALL	__lcmpu
00124C 38 15               A  4029    	JR	C,L_205
00124E DD27FC              A  4030    	LD	HL,(IX+%FFFFFFFC)
001251 DD5EFF              A  4031    	LD	E,(IX+%FFFFFFFF)
001254 DD31F9              A  4032    	LD	IY,(IX+%FFFFFFF9)
001257 FD0716              A  4033    	LD	BC,(IY+%16)
00125A FD7E19              A  4034    	LD	A,(IY+%19)
00125D CD 00 00 00         A  4035    	CALL	__lcmpu
001261 38 08               A  4036    	JR	C,L_207
001263                     A  4037    L_205:
001263 21020000            A  4038    	LD	HL,2
001267 C3 14 13 00         A  4039    	JR	L_217
00126B                     A  4040    L_207:
                           A  4041    ; 1695				ofs -= csz;
00126B DD2709              A  4042    	LD	HL,(IX+%9)
00126E DD5E0C              A  4043    	LD	E,(IX+%C)
001271 DD07F5              A  4044    	LD	BC,(IX+%FFFFFFF5)
001274 DD7EF8              A  4045    	LD	A,(IX+%FFFFFFF8)
001277 CD 00 00 00         A  4046    	CALL	__lsub
00127B DD2F09              A  4047    	LD	(IX+%9),HL
00127E DD730C              A  4048    	LD	(IX+%C),E
                           A  4049    ; 1696			}
001281                     A  4050    L_208:
001281 DD2709              A  4051    	LD	HL,(IX+%9)
001284 DD5E0C              A  4052    	LD	E,(IX+%C)
001287 DD07F5              A  4053    	LD	BC,(IX+%FFFFFFF5)
00128A DD7EF8              A  4054    	LD	A,(IX+%FFFFFFF8)
00128D CD 00 00 00         A  4055    	CALL	__lcmpu
001291 D2 06 12 00         A  4056    	JR	NC,L_209
                           A  4057    ; 1697			dp->sect = clst2sect(fs, clst);
001295 DD4EFF              A  4058    	LD	C,(IX+%FFFFFFFF)
001298 0600                A  4059    	LD	B,%0
00129A C5                  A  4060    	PUSH	BC
00129B DD07FC              A  4061    	LD	BC,(IX+%FFFFFFFC)
00129E C5                  A  4062    	PUSH	BC
00129F DD07F9              A  4063    	LD	BC,(IX+%FFFFFFF9)
0012A2 C5                  A  4064    	PUSH	BC
0012A3 CD 6B 05 00         A  4065    	CALL	_clst2sect
0012A7 C1                  A  4066    	POP	BC
0012A8 C1                  A  4067    	POP	BC
0012A9 C1                  A  4068    	POP	BC
0012AA DD3106              A  4069    	LD	IY,(IX+%6)
0012AD FD2F17              A  4070    	LD	(IY+%17),HL
0012B0 FD731A              A  4071    	LD	(IY+%1A),E
                           A  4072    ; 1698		}
0012B3                     A  4073    L_214:
                           A  4074    ; 1699		dp->clust = clst;					
0012B3 DD07FC              A  4075    	LD	BC,(IX+%FFFFFFFC)
0012B6 DD7EFF              A  4076    	LD	A,(IX+%FFFFFFFF)
0012B9 DD3106              A  4077    	LD	IY,(IX+%6)
0012BC FD0F13              A  4078    	LD	(IY+%13),BC
0012BF FD7716              A  4079    	LD	(IY+%16),A
                           A  4080    ; 1700		if (dp->sect == 0) return FR_INT_ER
0012C2 FD2717              A  4081    	LD	HL,(IY+%17)
0012C5 FD5E1A              A  4082    	LD	E,(IY+%1A)
0012C8 CD 00 00 00         A  4083    	CALL	__lcmpzero
0012CC 20 06               A  4084    	JR	NZ,L_216
0012CE 21020000            A  4085    	LD	HL,2
0012D2 18 40               A  4086    	JR	L_217
0012D4                     A  4087    L_216:
                           A  4088    ; 1701		dp->sect += ofs / SS(fs);			
0012D4 DD0709              A  4089    	LD	BC,(IX+%9)
0012D7 DD7E0C              A  4090    	LD	A,(IX+%C)
0012DA 2E09                A  4091    	LD	L,%9
0012DC CD 00 00 00         A  4092    	CALL	__lshru
0012E0 DD3106              A  4093    	LD	IY,(IX+%6)
0012E3 FD2717              A  4094    	LD	HL,(IY+%17)
0012E6 FD5E1A              A  4095    	LD	E,(IY+%1A)
0012E9 CD 00 00 00         A  4096    	CALL	__ladd
0012ED FD2F17              A  4097    	LD	(IY+%17),HL
0012F0 FD731A              A  4098    	LD	(IY+%1A),E
                           A  4099    ; 1702		dp->dir = fs->win + (ofs % SS(fs));
0012F3 DD2709              A  4100    	LD	HL,(IX+%9)
0012F6 DD5E0C              A  4101    	LD	E,(IX+%C)
0012F9 01FF0100            A  4102    	LD	BC,511
0012FD AF                  A  4103    	XOR	A,A
0012FE CD 00 00 00         A  4104    	CALL	__land
001302 E5C1                A  4105    	LD	BC,HL
001304 DD31F9              A  4106    	LD	IY,(IX+%FFFFFFF9)
001307 ED2332              A  4107    	LEA	HL,IY+%32
00130A 09                  A  4108    	ADD	HL,BC
00130B DD3106              A  4109    	LD	IY,(IX+%6)
00130E FD2F1B              A  4110    	LD	(IY+%1B),HL
001311 B7                  A  4111    	OR	A,A
                           A  4112    ; 1703	
                           A  4113    ; 1704		return FR_OK;
001312 ED62                A  4114    	SBC	HL,HL
                           A  4115    ; 1705	}
001314                     A  4116    L_217:
001314 DDF9                A  4117    	LD	SP,IX
001316 DDE1                A  4118    	POP	IX
001318 C9                  A  4119    	RET	
                           A  4120    
                           A  4121    
                           A  4122    ;**************************** _dir_sdi ********
                           A  4123    ;Name                         Addr/Register   S
                           A  4124    ;csz                                  IX-11    
                           A  4125    ;fs                                    IX-7    
                           A  4126    ;clst                                  IX-4    
                           A  4127    ;ofs                                   IX+9    
                           A  4128    ;dp                                    IX+6    
                           A  4129    
                           A  4130    
                           A  4131    ; Stack Frame Size: 31 (bytes)
                           A  4132    ;       Spill Code: 0 (instruction)
                           A  4133    
                           A  4134    
                           A  4135    ; 1706	
                           A  4136    ; 1707	
                           A  4137    ; 1708	
                           A  4138    ; 1709	
                           A  4139    ; 1710	/*-------------------------------------
                           A  4140    ; 1711	/* Directory handling - Move directory 
                           A  4141    ; 1712	/*-------------------------------------
                           A  4142    ; 1713	
                           A  4143    ; 1714	static FRESULT dir_next (	/* FR_OK(0)
                           A  4144    ; 1715		DIR* dp,				/* Pointer 
                           A  4145    ; 1716		int stretch				/* 0: Do no
                           A  4146    ; 1717	)
                           A  4147    ; 1718	{
001319                     A  4148    _dir_next:
001319 21E5FFFF            A  4149    	LD	HL,-27
00131D CD 00 00 00         A  4150    	CALL	__frameset
                           A  4151    ; 1719		DWORD ofs, clst;
                           A  4152    ; 1720		FATFS *fs = dp->obj.fs;
001321 DD3106              A  4153    	LD	IY,(IX+%6)
001324 FD0700              A  4154    	LD	BC,(IY+%0)
001327 DD0FF9              A  4155    	LD	(IX+%FFFFFFF9),BC
                           A  4156    ; 1721	
                           A  4157    ; 1722	
                           A  4158    ; 1723		ofs = dp->dptr + SZDIRE;	/* Next
00132A FD270F              A  4159    	LD	HL,(IY+%F)
00132D FD5E12              A  4160    	LD	E,(IY+%12)
001330 3E20                A  4161    	LD	A,%20
001332 CD 00 00 00         A  4162    	CALL	__ladd_b
001336 DD2FF5              A  4163    	LD	(IX+%FFFFFFF5),HL
001339 DD73F8              A  4164    	LD	(IX+%FFFFFFF8),E
                           A  4165    ; 1724		if (ofs >= (DWORD)((FF_FS_EXFAT && 
00133C DD27F5              A  4166    	LD	HL,(IX+%FFFFFFF5)
00133F DD5EF8              A  4167    	LD	E,(IX+%FFFFFFF8)
001342 01000020            A  4168    	LD	BC,2097152
001346 AF                  A  4169    	XOR	A,A
001347 CD 00 00 00         A  4170    	CALL	__lcmpu
00134B 38 0E               A  4171    	JR	C,L_220
00134D 01000000            A  4172    	LD	BC,0
001351 DD3106              A  4173    	LD	IY,(IX+%6)
001354 FD0F17              A  4174    	LD	(IY+%17),BC
001357 FD361A00            A  4175    	LD	(IY+%1A),%0
00135B                     A  4176    L_220:
                           A  4177    ; 1725		if (dp->sect == 0) return FR_NO_FIL
00135B DD3106              A  4178    	LD	IY,(IX+%6)
00135E FD0717              A  4179    	LD	BC,(IY+%17)
001361 FD7E1A              A  4180    	LD	A,(IY+%1A)
001364 DD0FF1              A  4181    	LD	(IX+%FFFFFFF1),BC
001367 DD77F4              A  4182    	LD	(IX+%FFFFFFF4),A
00136A C5E1                A  4183    	LD	HL,BC
00136C DD5EF4              A  4184    	LD	E,(IX+%FFFFFFF4)
00136F CD 00 00 00         A  4185    	CALL	__lcmpzero
001373 20 08               A  4186    	JR	NZ,L_244
001375 21040000            A  4187    	LD	HL,4
001379 C3 9D 15 00         A  4188    	JR	L_246
00137D                     A  4189    L_244:
                           A  4190    ; 1726	
                           A  4191    ; 1727		if (ofs % SS(fs) == 0) {	/* Sect
00137D DD27F5              A  4192    	LD	HL,(IX+%FFFFFFF5)
001380 DD5EF8              A  4193    	LD	E,(IX+%FFFFFFF8)
001383 01FF0100            A  4194    	LD	BC,511
001387 AF                  A  4195    	XOR	A,A
001388 CD 00 00 00         A  4196    	CALL	__land
00138C CD 00 00 00         A  4197    	CALL	__lcmpzero
001390 C2 6D 15 00         A  4198    	JR	NZ,L_245
                           A  4199    ; 1728			dp->sect++;				/* Next
001394 DD27F1              A  4200    	LD	HL,(IX+%FFFFFFF1)
001397 DD5EF4              A  4201    	LD	E,(IX+%FFFFFFF4)
00139A 3E01                A  4202    	LD	A,%1
00139C CD 00 00 00         A  4203    	CALL	__ladd_b
0013A0 DD3106              A  4204    	LD	IY,(IX+%6)
0013A3 FD2F17              A  4205    	LD	(IY+%17),HL
0013A6 FD731A              A  4206    	LD	(IY+%1A),E
                           A  4207    ; 1729	
                           A  4208    ; 1730			if (dp->clust == 0) {	/* Stat
0013A9 FD0713              A  4209    	LD	BC,(IY+%13)
0013AC FD7E16              A  4210    	LD	A,(IY+%16)
0013AF DD0FED              A  4211    	LD	(IX+%FFFFFFED),BC
0013B2 DD77F0              A  4212    	LD	(IX+%FFFFFFF0),A
0013B5 C5E1                A  4213    	LD	HL,BC
0013B7 DD5EF0              A  4214    	LD	E,(IX+%FFFFFFF0)
0013BA CD 00 00 00         A  4215    	CALL	__lcmpzero
0013BE 20 46               A  4216    	JR	NZ,L_242
                           A  4217    ; 1731				if (ofs / SZDIRE >= fs->n_r
0013C0 DD31F9              A  4218    	LD	IY,(IX+%FFFFFFF9)
0013C3 FD0707              A  4219    	LD	BC,(IY+%7)
0013C6 CD 00 00 00         A  4220    	CALL	__stoiu
0013CA DD2FE7              A  4221    	LD	(IX+%FFFFFFE7),HL
0013CD 0600                A  4222    	LD	B,%0
0013CF DD70E5              A  4223    	LD	(IX+%FFFFFFE5),B	; spill
0013D2 DD07F5              A  4224    	LD	BC,(IX+%FFFFFFF5)
0013D5 DD7EF8              A  4225    	LD	A,(IX+%FFFFFFF8)
0013D8 2E05                A  4226    	LD	L,%5
0013DA CD 00 00 00         A  4227    	CALL	__lshru
0013DE 5F                  A  4228    	LD	E,A
0013DF C5E1                A  4229    	LD	HL,BC
0013E1 DD46E5              A  4230    	LD	B,(IX+%FFFFFFE5)	; unspill
0013E4 78                  A  4231    	LD	A,B
0013E5 DD07E7              A  4232    	LD	BC,(IX+%FFFFFFE7)
0013E8 CD 00 00 00         A  4233    	CALL	__lcmpu
0013EC DA 6D 15 00         A  4234    	JR	C,L_245
                           A  4235    ; 1732					dp->sect = 0; return FR
0013F0 01000000            A  4236    	LD	BC,0
0013F4 DD3106              A  4237    	LD	IY,(IX+%6)
0013F7 FD0F17              A  4238    	LD	(IY+%17),BC
0013FA FD361A00            A  4239    	LD	(IY+%1A),%0
0013FE 21040000            A  4240    	LD	HL,4
001402 C3 9D 15 00         A  4241    	JR	L_246
                           A  4242    ; 1733				}
                           A  4243    ; 1734			}
                           A  4244    ; 1735			else {					/* Dyna
001406                     A  4245    L_242:
                           A  4246    ; 1736				if ((ofs / SS(fs) & (fs->cs
001406 DD31F9              A  4247    	LD	IY,(IX+%FFFFFFF9)
001409 FD0709              A  4248    	LD	BC,(IY+%9)
00140C CD 00 00 00         A  4249    	CALL	__stoiu
001410 2B                  A  4250    	DEC	HL
001411 E5C1                A  4251    	LD	BC,HL
001413 CD 00 00 00         A  4252    	CALL	__itol
001417 DD0FEA              A  4253    	LD	(IX+%FFFFFFEA),BC
00141A 5F                  A  4254    	LD	E,A
00141B DD07F5              A  4255    	LD	BC,(IX+%FFFFFFF5)
00141E DD7EF8              A  4256    	LD	A,(IX+%FFFFFFF8)
001421 2E09                A  4257    	LD	L,%9
001423 CD 00 00 00         A  4258    	CALL	__lshru
001427 DD27EA              A  4259    	LD	HL,(IX+%FFFFFFEA)
00142A CD 00 00 00         A  4260    	CALL	__land
00142E CD 00 00 00         A  4261    	CALL	__lcmpzero
001432 C2 6D 15 00         A  4262    	JR	NZ,L_245
                           A  4263    ; 1737					clst = get_fat(&dp->obj
001436 DD4EF0              A  4264    	LD	C,(IX+%FFFFFFF0)
001439 0600                A  4265    	LD	B,%0
00143B C5                  A  4266    	PUSH	BC
00143C DD07ED              A  4267    	LD	BC,(IX+%FFFFFFED)
00143F C5                  A  4268    	PUSH	BC
001440 DD3106              A  4269    	LD	IY,(IX+%6)
001443 ED6600              A  4270    	PEA	IY+%0
001446 CD D1 05 00         A  4271    	CALL	_get_fat
00144A C1                  A  4272    	POP	BC
00144B C1                  A  4273    	POP	BC
00144C C1                  A  4274    	POP	BC
00144D E5C1                A  4275    	LD	BC,HL
00144F DD0FFC              A  4276    	LD	(IX+%FFFFFFFC),BC
001452 DD73FF              A  4277    	LD	(IX+%FFFFFFFF),E
                           A  4278    ; 1738					if (clst <= 1) return F
001455 21010000            A  4279    	LD	HL,1
001459 1E00                A  4280    	LD	E,%0
00145B DD7EFF              A  4281    	LD	A,(IX+%FFFFFFFF)
00145E CD 00 00 00         A  4282    	CALL	__lcmpu
001462 38 08               A  4283    	JR	C,L_225
001464 21020000            A  4284    	LD	HL,2
001468 C3 9D 15 00         A  4285    	JR	L_246
00146C                     A  4286    L_225:
                           A  4287    ; 1739					if (clst == 0xFFFFFFFF)
00146C DD27FC              A  4288    	LD	HL,(IX+%FFFFFFFC)
00146F DD5EFF              A  4289    	LD	E,(IX+%FFFFFFFF)
001472 01FFFFFF            A  4290    	LD	BC,16777215
001476 3EFF                A  4291    	LD	A,%FF
001478 CD 00 00 00         A  4292    	CALL	__lcmpu
00147C 20 08               A  4293    	JR	NZ,L_238
00147E 21010000            A  4294    	LD	HL,1
001482 C3 9D 15 00         A  4295    	JR	L_246
001486                     A  4296    L_238:
                           A  4297    ; 1740					if (clst >= fs->n_faten
001486 DD27FC              A  4298    	LD	HL,(IX+%FFFFFFFC)
001489 DD5EFF              A  4299    	LD	E,(IX+%FFFFFFFF)
00148C DD31F9              A  4300    	LD	IY,(IX+%FFFFFFF9)
00148F FD0716              A  4301    	LD	BC,(IY+%16)
001492 FD7E19              A  4302    	LD	A,(IY+%19)
001495 CD 00 00 00         A  4303    	CALL	__lcmpu
001499 DA 40 15 00         A  4304    	JR	C,L_239
                           A  4305    ; 1741	#if !FF_FS_READONLY
                           A  4306    ; 1742						if (!stretch) {		
00149D DD2709              A  4307    	LD	HL,(IX+%9)
0014A0 CD 00 00 00         A  4308    	CALL	__icmpzero
0014A4 20 16               A  4309    	JR	NZ,L_227
                           A  4310    ; 1743							dp->sect = 0; r
0014A6 01000000            A  4311    	LD	BC,0
0014AA DD3106              A  4312    	LD	IY,(IX+%6)
0014AD FD0F17              A  4313    	LD	(IY+%17),BC
0014B0 FD361A00            A  4314    	LD	(IY+%1A),%0
0014B4 21040000            A  4315    	LD	HL,4
0014B8 C3 9D 15 00         A  4316    	JR	L_246
                           A  4317    ; 1744						}
0014BC                     A  4318    L_227:
                           A  4319    ; 1745						clst = create_chain
0014BC DD3106              A  4320    	LD	IY,(IX+%6)
0014BF FD0713              A  4321    	LD	BC,(IY+%13)
0014C2 FD7E16              A  4322    	LD	A,(IY+%16)
0014C5 2600                A  4323    	LD	H,%0
0014C7 6F                  A  4324    	LD	L,A
0014C8 E5                  A  4325    	PUSH	HL
0014C9 C5                  A  4326    	PUSH	BC
0014CA ED6600              A  4327    	PEA	IY+%0
0014CD CD 8A 0C 00         A  4328    	CALL	_create_chain
0014D1 C1                  A  4329    	POP	BC
0014D2 C1                  A  4330    	POP	BC
0014D3 C1                  A  4331    	POP	BC
0014D4 DD2FFC              A  4332    	LD	(IX+%FFFFFFFC),HL
0014D7 DD73FF              A  4333    	LD	(IX+%FFFFFFFF),E
                           A  4334    ; 1746						if (clst == 0) retu
0014DA DD27FC              A  4335    	LD	HL,(IX+%FFFFFFFC)
0014DD DD5EFF              A  4336    	LD	E,(IX+%FFFFFFFF)
0014E0 CD 00 00 00         A  4337    	CALL	__lcmpzero
0014E4 20 08               A  4338    	JR	NZ,L_230
0014E6 21070000            A  4339    	LD	HL,7
0014EA C3 9D 15 00         A  4340    	JR	L_246
0014EE                     A  4341    L_230:
                           A  4342    ; 1747						if (clst == 1) retu
0014EE DD27FC              A  4343    	LD	HL,(IX+%FFFFFFFC)
0014F1 DD5EFF              A  4344    	LD	E,(IX+%FFFFFFFF)
0014F4 01010000            A  4345    	LD	BC,1
0014F8 AF                  A  4346    	XOR	A,A
0014F9 CD 00 00 00         A  4347    	CALL	__lcmpu
0014FD 20 08               A  4348    	JR	NZ,L_232
0014FF 21020000            A  4349    	LD	HL,2
001503 C3 9D 15 00         A  4350    	JR	L_246
001507                     A  4351    L_232:
                           A  4352    ; 1748						if (clst == 0xFFFFF
001507 DD27FC              A  4353    	LD	HL,(IX+%FFFFFFFC)
00150A DD5EFF              A  4354    	LD	E,(IX+%FFFFFFFF)
00150D 01FFFFFF            A  4355    	LD	BC,16777215
001511 3EFF                A  4356    	LD	A,%FF
001513 CD 00 00 00         A  4357    	CALL	__lcmpu
001517 20 06               A  4358    	JR	NZ,L_234
001519 21010000            A  4359    	LD	HL,1
00151D 18 7E               A  4360    	JR	L_246
00151F                     A  4361    L_234:
                           A  4362    ; 1749						if (dir_clear(fs, c
00151F DD4EFF              A  4363    	LD	C,(IX+%FFFFFFFF)
001522 0600                A  4364    	LD	B,%0
001524 C5                  A  4365    	PUSH	BC
001525 DD07FC              A  4366    	LD	BC,(IX+%FFFFFFFC)
001528 C5                  A  4367    	PUSH	BC
001529 DD07F9              A  4368    	LD	BC,(IX+%FFFFFFF9)
00152C C5                  A  4369    	PUSH	BC
00152D CD 33 10 00         A  4370    	CALL	_dir_clear
001531 C1                  A  4371    	POP	BC
001532 C1                  A  4372    	POP	BC
001533 C1                  A  4373    	POP	BC
001534 CD 00 00 00         A  4374    	CALL	__icmpzero
001538 28 06               A  4375    	JR	Z,L_239
00153A 21010000            A  4376    	LD	HL,1
00153E 18 5D               A  4377    	JR	L_246
                           A  4378    ; 1750						if (FF_FS_EXFAT) dp
                           A  4379    ; 1751	#else
                           A  4380    ; 1752						if (!stretch) dp->s
                           A  4381    ; 1753						dp->sect = 0; retur
                           A  4382    ; 1754	#endif
                           A  4383    ; 1755					}
001540                     A  4384    L_239:
                           A  4385    ; 1756					dp->clust = clst;		
001540 DD07FC              A  4386    	LD	BC,(IX+%FFFFFFFC)
001543 DD7EFF              A  4387    	LD	A,(IX+%FFFFFFFF)
001546 DD3106              A  4388    	LD	IY,(IX+%6)
001549 FD0F13              A  4389    	LD	(IY+%13),BC
00154C FD7716              A  4390    	LD	(IY+%16),A
                           A  4391    ; 1757					dp->sect = clst2sect(fs
00154F DD4EFF              A  4392    	LD	C,(IX+%FFFFFFFF)
001552 0600                A  4393    	LD	B,%0
001554 C5                  A  4394    	PUSH	BC
001555 DD07FC              A  4395    	LD	BC,(IX+%FFFFFFFC)
001558 C5                  A  4396    	PUSH	BC
001559 DD07F9              A  4397    	LD	BC,(IX+%FFFFFFF9)
00155C C5                  A  4398    	PUSH	BC
00155D CD 6B 05 00         A  4399    	CALL	_clst2sect
001561 C1                  A  4400    	POP	BC
001562 C1                  A  4401    	POP	BC
001563 C1                  A  4402    	POP	BC
001564 DD3106              A  4403    	LD	IY,(IX+%6)
001567 FD2F17              A  4404    	LD	(IY+%17),HL
00156A FD731A              A  4405    	LD	(IY+%1A),E
                           A  4406    ; 1758				}
                           A  4407    ; 1759			}
                           A  4408    ; 1760		}
00156D                     A  4409    L_245:
                           A  4410    ; 1761		dp->dptr = ofs;						
00156D DD07F5              A  4411    	LD	BC,(IX+%FFFFFFF5)
001570 DD7EF8              A  4412    	LD	A,(IX+%FFFFFFF8)
001573 DD3106              A  4413    	LD	IY,(IX+%6)
001576 FD0F0F              A  4414    	LD	(IY+%F),BC
001579 FD7712              A  4415    	LD	(IY+%12),A
                           A  4416    ; 1762		dp->dir = fs->win + ofs % SS(fs);	
00157C DD27F5              A  4417    	LD	HL,(IX+%FFFFFFF5)
00157F DD5EF8              A  4418    	LD	E,(IX+%FFFFFFF8)
001582 01FF0100            A  4419    	LD	BC,511
001586 AF                  A  4420    	XOR	A,A
001587 CD 00 00 00         A  4421    	CALL	__land
00158B E5C1                A  4422    	LD	BC,HL
00158D DD31F9              A  4423    	LD	IY,(IX+%FFFFFFF9)
001590 ED2332              A  4424    	LEA	HL,IY+%32
001593 09                  A  4425    	ADD	HL,BC
001594 DD3106              A  4426    	LD	IY,(IX+%6)
001597 FD2F1B              A  4427    	LD	(IY+%1B),HL
00159A B7                  A  4428    	OR	A,A
                           A  4429    ; 1763	
                           A  4430    ; 1764		return FR_OK;
00159B ED62                A  4431    	SBC	HL,HL
                           A  4432    ; 1765	}
00159D                     A  4433    L_246:
00159D DDF9                A  4434    	LD	SP,IX
00159F DDE1                A  4435    	POP	IX
0015A1 C9                  A  4436    	RET	
                           A  4437    
                           A  4438    
                           A  4439    ;**************************** _dir_next *******
                           A  4440    ;Name                         Addr/Register   S
                           A  4441    ;G_12                                 IX-19    
                           A  4442    ;G_11                                 IX-15    
                           A  4443    ;ofs                                  IX-11    
                           A  4444    ;fs                                    IX-7    
                           A  4445    ;clst                                  IX-4    
                           A  4446    ;stretch                               IX+9    
                           A  4447    ;dp                                    IX+6    
                           A  4448    
                           A  4449    
                           A  4450    ; Stack Frame Size: 39 (bytes)
                           A  4451    ;       Spill Code: 0 (instruction)
                           A  4452    
                           A  4453    
                           A  4454    ; 1766	
                           A  4455    ; 1767	
                           A  4456    ; 1768	
                           A  4457    ; 1769	
                           A  4458    ; 1770	#if !FF_FS_READONLY
                           A  4459    ; 1771	/*-------------------------------------
                           A  4460    ; 1772	/* Directory handling - Reserve a block
                           A  4461    ; 1773	/*-------------------------------------
                           A  4462    ; 1774	
                           A  4463    ; 1775	static FRESULT dir_alloc (	/* FR_OK(0)
                           A  4464    ; 1776		DIR* dp,				/* Pointer 
                           A  4465    ; 1777		UINT n_ent				/* Number o
                           A  4466    ; 1778	)
                           A  4467    ; 1779	{
0015A2                     A  4468    _dir_alloc:
0015A2 21F4FFFF            A  4469    	LD	HL,-12
0015A6 CD 00 00 00         A  4470    	CALL	__frameset
                           A  4471    ; 1780		FRESULT res;
                           A  4472    ; 1781		UINT n;
                           A  4473    ; 1782		FATFS *fs = dp->obj.fs;
0015AA DD3106              A  4474    	LD	IY,(IX+%6)
0015AD FD0700              A  4475    	LD	BC,(IY+%0)
0015B0 DD0FF4              A  4476    	LD	(IX+%FFFFFFF4),BC
                           A  4477    ; 1783	
                           A  4478    ; 1784	
                           A  4479    ; 1785		res = dir_sdi(dp, 0);
0015B3 01000000            A  4480    	LD	BC,0
0015B7 C5                  A  4481    	PUSH	BC
0015B8 C5                  A  4482    	PUSH	BC
0015B9 DD0706              A  4483    	LD	BC,(IX+%6)
0015BC C5                  A  4484    	PUSH	BC
0015BD CD 18 11 00         A  4485    	CALL	_dir_sdi
0015C1 C1                  A  4486    	POP	BC
0015C2 C1                  A  4487    	POP	BC
0015C3 C1                  A  4488    	POP	BC
0015C4 DD2FFD              A  4489    	LD	(IX+%FFFFFFFD),HL
                           A  4490    ; 1786		if (res == FR_OK) {
0015C7 CD 00 00 00         A  4491    	CALL	__icmpzero
0015CB 20 7C               A  4492    	JR	NZ,L_258
                           A  4493    ; 1787			n = 0;
0015CD 01000000            A  4494    	LD	BC,0
0015D1 DD0FFA              A  4495    	LD	(IX+%FFFFFFFA),BC
                           A  4496    ; 1788			do {
0015D4                     A  4497    L_254:
                           A  4498    ; 1789				res = move_window(fs, dp->s
0015D4 DD3106              A  4499    	LD	IY,(IX+%6)
0015D7 FD0717              A  4500    	LD	BC,(IY+%17)
0015DA FD7E1A              A  4501    	LD	A,(IY+%1A)
0015DD 2600                A  4502    	LD	H,%0
0015DF 6F                  A  4503    	LD	L,A
0015E0 E5                  A  4504    	PUSH	HL
0015E1 C5                  A  4505    	PUSH	BC
0015E2 DD07F4              A  4506    	LD	BC,(IX+%FFFFFFF4)
0015E5 C5                  A  4507    	PUSH	BC
0015E6 CD A6 03 00         A  4508    	CALL	_move_window
0015EA C1                  A  4509    	POP	BC
0015EB C1                  A  4510    	POP	BC
0015EC C1                  A  4511    	POP	BC
0015ED DD2FFD              A  4512    	LD	(IX+%FFFFFFFD),HL
                           A  4513    ; 1790				if (res != FR_OK) break;
0015F0 CD 00 00 00         A  4514    	CALL	__icmpzero
0015F4 20 53               A  4515    	JR	NZ,L_258
                           A  4516    ; 1791	#if FF_FS_EXFAT
                           A  4517    ; 1792				if ((fs->fs_type == FS_EXFA
                           A  4518    ; 1793	#else
                           A  4519    ; 1794				if (dp->dir[DIR_Name] == DD
0015F6 DD3106              A  4520    	LD	IY,(IX+%6)
0015F9 FD071B              A  4521    	LD	BC,(IY+%1B)
0015FC DD0FF7              A  4522    	LD	(IX+%FFFFFFF7),BC
0015FF C5E1                A  4523    	LD	HL,BC
001601 7E                  A  4524    	LD	A,(HL)
001602 B7ED62              A  4525    	UEXT	HL
001605 6F                  A  4526    	LD	L,A
001606 01E50000            A  4527    	LD	BC,229
00160A B7                  A  4528    	OR	A,A
00160B ED42                A  4529    	SBC	HL,BC
00160D 28 07               A  4530    	JR	Z,L_250
00160F DD27F7              A  4531    	LD	HL,(IX+%FFFFFFF7)
001612 7E                  A  4532    	LD	A,(HL)
001613 B7                  A  4533    	OR	A,A
001614 20 14               A  4534    	JR	NZ,L_251
001616                     A  4535    L_250:
                           A  4536    ; 1795	#endif
                           A  4537    ; 1796					if (++n == n_ent) break
001616 DD07FA              A  4538    	LD	BC,(IX+%FFFFFFFA)
001619 03                  A  4539    	INC	BC
00161A DD0FFA              A  4540    	LD	(IX+%FFFFFFFA),BC
00161D DD0709              A  4541    	LD	BC,(IX+%9)
001620 DD27FA              A  4542    	LD	HL,(IX+%FFFFFFFA)
001623 B7                  A  4543    	OR	A,A
001624 ED42                A  4544    	SBC	HL,BC
001626 28 21               A  4545    	JR	Z,L_258
001628 18 07               A  4546    	JR	L_253
                           A  4547    ; 1797				} else {
00162A                     A  4548    L_251:
                           A  4549    ; 1798					n = 0;				/* 
00162A 01000000            A  4550    	LD	BC,0
00162E DD0FFA              A  4551    	LD	(IX+%FFFFFFFA),BC
                           A  4552    ; 1799				}
001631                     A  4553    L_253:
                           A  4554    ; 1800				res = dir_next(dp, 1);	/* 
001631 01010000            A  4555    	LD	BC,1
001635 C5                  A  4556    	PUSH	BC
001636 DD0706              A  4557    	LD	BC,(IX+%6)
001639 C5                  A  4558    	PUSH	BC
00163A CD 19 13 00         A  4559    	CALL	_dir_next
00163E C1                  A  4560    	POP	BC
00163F C1                  A  4561    	POP	BC
001640 DD2FFD              A  4562    	LD	(IX+%FFFFFFFD),HL
                           A  4563    ; 1801			} while (res == FR_OK);
001643 CD 00 00 00         A  4564    	CALL	__icmpzero
001647 28 8B               A  4565    	JR	Z,L_254
                           A  4566    ; 1802		}
001649                     A  4567    L_258:
                           A  4568    ; 1803	
                           A  4569    ; 1804		if (res == FR_NO_FILE) res = FR_DEN
001649 01040000            A  4570    	LD	BC,4
00164D DD27FD              A  4571    	LD	HL,(IX+%FFFFFFFD)
001650 B7                  A  4572    	OR	A,A
001651 ED42                A  4573    	SBC	HL,BC
001653 20 07               A  4574    	JR	NZ,L_259
001655 01070000            A  4575    	LD	BC,7
001659 DD0FFD              A  4576    	LD	(IX+%FFFFFFFD),BC
00165C                     A  4577    L_259:
                           A  4578    ; 1805		return res;
00165C DD27FD              A  4579    	LD	HL,(IX+%FFFFFFFD)
                           A  4580    ; 1806	}
00165F DDF9                A  4581    	LD	SP,IX
001661 DDE1                A  4582    	POP	IX
001663 C9                  A  4583    	RET	
                           A  4584    
                           A  4585    
                           A  4586    ;**************************** _dir_alloc ******
                           A  4587    ;Name                         Addr/Register   S
                           A  4588    ;fs                                   IX-12    
                           A  4589    ;G_13                                  IX-9    
                           A  4590    ;n                                     IX-6    
                           A  4591    ;res                                   IX-3    
                           A  4592    ;n_ent                                 IX+9    
                           A  4593    ;dp                                    IX+6    
                           A  4594    
                           A  4595    
                           A  4596    ; Stack Frame Size: 24 (bytes)
                           A  4597    ;       Spill Code: 0 (instruction)
                           A  4598    
                           A  4599    
                           A  4600    ; 1807	
                           A  4601    ; 1808	#endif	/* !FF_FS_READONLY */
                           A  4602    ; 1809	
                           A  4603    ; 1810	
                           A  4604    ; 1811	
                           A  4605    ; 1812	
                           A  4606    ; 1813	/*-------------------------------------
                           A  4607    ; 1814	/* FAT: Directory handling - Load/Store
                           A  4608    ; 1815	/*-------------------------------------
                           A  4609    ; 1816	
                           A  4610    ; 1817	static DWORD ld_clust (	/* Returns the 
                           A  4611    ; 1818		FATFS* fs,			/* Pointer to t
                           A  4612    ; 1819		const BYTE* dir		/* Pointer to t
                           A  4613    ; 1820	)
                           A  4614    ; 1821	{
001664                     A  4615    _ld_clust:
001664 21FCFFFF            A  4616    	LD	HL,-4
001668 CD 00 00 00         A  4617    	CALL	__frameset
                           A  4618    ; 1822		DWORD cl;
                           A  4619    ; 1823	
                           A  4620    ; 1824		cl = ld_word(dir + DIR_FstClusLO);
00166C DD3109              A  4621    	LD	IY,(IX+%9)
00166F ED031A              A  4622    	LEA	BC,IY+%1A
001672 C5                  A  4623    	PUSH	BC
001673 CD 00 00 00         A  4624    	CALL	_ld_word
001677 C1                  A  4625    	POP	BC
001678 E5C1                A  4626    	LD	BC,HL
00167A CD 00 00 00         A  4627    	CALL	__stoiu
00167E AF                  A  4628    	XOR	A,A
00167F DD2FFC              A  4629    	LD	(IX+%FFFFFFFC),HL
001682 DD77FF              A  4630    	LD	(IX+%FFFFFFFF),A
                           A  4631    ; 1825		if (fs->fs_type == FS_FAT32) {
001685 DD3106              A  4632    	LD	IY,(IX+%6)
001688 FD7E00              A  4633    	LD	A,(IY+%0)
00168B FE03                A  4634    	CP	A,%3
00168D 20 2E               A  4635    	JR	NZ,L_262
                           A  4636    ; 1826			cl |= (DWORD)ld_word(dir + DIR_
00168F DD3109              A  4637    	LD	IY,(IX+%9)
001692 ED0314              A  4638    	LEA	BC,IY+%14
001695 C5                  A  4639    	PUSH	BC
001696 CD 00 00 00         A  4640    	CALL	_ld_word
00169A C1                  A  4641    	POP	BC
00169B E5C1                A  4642    	LD	BC,HL
00169D CD 00 00 00         A  4643    	CALL	__stoiu
0016A1 AF                  A  4644    	XOR	A,A
0016A2 E5C1                A  4645    	LD	BC,HL
0016A4 2E10                A  4646    	LD	L,%10
0016A6 CD 00 00 00         A  4647    	CALL	__lshl
0016AA 5F                  A  4648    	LD	E,A
0016AB C5E1                A  4649    	LD	HL,BC
0016AD DD07FC              A  4650    	LD	BC,(IX+%FFFFFFFC)
0016B0 DD7EFF              A  4651    	LD	A,(IX+%FFFFFFFF)
0016B3 CD 00 00 00         A  4652    	CALL	__lor
0016B7 DD2FFC              A  4653    	LD	(IX+%FFFFFFFC),HL
0016BA DD73FF              A  4654    	LD	(IX+%FFFFFFFF),E
                           A  4655    ; 1827		}
0016BD                     A  4656    L_262:
                           A  4657    ; 1828	
                           A  4658    ; 1829		return cl;
0016BD DD27FC              A  4659    	LD	HL,(IX+%FFFFFFFC)
0016C0 DD5EFF              A  4660    	LD	E,(IX+%FFFFFFFF)
                           A  4661    ; 1830	}
0016C3 DDF9                A  4662    	LD	SP,IX
0016C5 DDE1                A  4663    	POP	IX
0016C7 C9                  A  4664    	RET	
                           A  4665    
                           A  4666    
                           A  4667    ;**************************** _ld_clust *******
                           A  4668    ;Name                         Addr/Register   S
                           A  4669    ;cl                                    IX-4    
                           A  4670    ;dir                                   IX+9    
                           A  4671    ;fs                                    IX+6    
                           A  4672    
                           A  4673    
                           A  4674    ; Stack Frame Size: 16 (bytes)
                           A  4675    ;       Spill Code: 0 (instruction)
                           A  4676    
                           A  4677    
                           A  4678    ; 1831	
                           A  4679    ; 1832	
                           A  4680    ; 1833	#if !FF_FS_READONLY
                           A  4681    ; 1834	static void st_clust (
                           A  4682    ; 1835		FATFS* fs,	/* Pointer to the fs ob
                           A  4683    ; 1836		BYTE* dir,	/* Pointer to the key e
                           A  4684    ; 1837		DWORD cl	/* Value to be set */
                           A  4685    ; 1838	)
                           A  4686    ; 1839	{
0016C8                     A  4687    _st_clust:
0016C8 CD 00 00 00         A  4688    	CALL	__frameset0
                           A  4689    ; 1840		st_word(dir + DIR_FstClusLO, (WORD)
0016CC DD070C              A  4690    	LD	BC,(IX+%C)
0016CF C5                  A  4691    	PUSH	BC
0016D0 DD3109              A  4692    	LD	IY,(IX+%9)
0016D3 ED031A              A  4693    	LEA	BC,IY+%1A
0016D6 C5                  A  4694    	PUSH	BC
0016D7 CD C4 00 00         A  4695    	CALL	_st_word
0016DB C1                  A  4696    	POP	BC
0016DC C1                  A  4697    	POP	BC
                           A  4698    ; 1841		if (fs->fs_type == FS_FAT32) {
0016DD DD3106              A  4699    	LD	IY,(IX+%6)
0016E0 FD7E00              A  4700    	LD	A,(IY+%0)
0016E3 FE03                A  4701    	CP	A,%3
0016E5 20 1A               A  4702    	JR	NZ,L_265
                           A  4703    ; 1842			st_word(dir + DIR_FstClusHI, (W
0016E7 DD070C              A  4704    	LD	BC,(IX+%C)
0016EA DD7E0F              A  4705    	LD	A,(IX+%F)
0016ED 2E10                A  4706    	LD	L,%10
0016EF CD 00 00 00         A  4707    	CALL	__lshru
0016F3 C5                  A  4708    	PUSH	BC
0016F4 DD3109              A  4709    	LD	IY,(IX+%9)
0016F7 ED0314              A  4710    	LEA	BC,IY+%14
0016FA C5                  A  4711    	PUSH	BC
0016FB CD C4 00 00         A  4712    	CALL	_st_word
0016FF C1                  A  4713    	POP	BC
001700 C1                  A  4714    	POP	BC
                           A  4715    ; 1843		}
                           A  4716    ; 1844	}
001701                     A  4717    L_265:
001701 DDF9                A  4718    	LD	SP,IX
001703 DDE1                A  4719    	POP	IX
001705 C9                  A  4720    	RET	
                           A  4721    
                           A  4722    
                           A  4723    ;**************************** _st_clust *******
                           A  4724    ;Name                         Addr/Register   S
                           A  4725    ;cl                                   IX+12    
                           A  4726    ;dir                                   IX+9    
                           A  4727    ;fs                                    IX+6    
                           A  4728    
                           A  4729    
                           A  4730    ; Stack Frame Size: 18 (bytes)
                           A  4731    ;       Spill Code: 0 (instruction)
                           A  4732    
                           A  4733    
                           A  4734    ; 1845	#endif
                           A  4735    ; 1846	
                           A  4736    ; 1847	
                           A  4737    ; 1848	
                           A  4738    ; 1849	#if FF_USE_LFN
                           A  4739    ; 1850	/*-------------------------------------
                           A  4740    ; 1851	/* FAT-LFN: Compare a part of file name
                           A  4741    ; 1852	/*-------------------------------------
                           A  4742    ; 1853	
                           A  4743    ; 1854	static int cmp_lfn (		/* 1:matche
                           A  4744    ; 1855		const WCHAR* lfnbuf,	/* Pointer 
                           A  4745    ; 1856		BYTE* dir				/* Pointer 
                           A  4746    ; 1857	)
                           A  4747    ; 1858	{
001706                     A  4748    _cmp_lfn:
001706 21F2FFFF            A  4749    	LD	HL,-14
00170A CD 00 00 00         A  4750    	CALL	__frameset
                           A  4751    ; 1859		UINT i, s;
                           A  4752    ; 1860		WCHAR wc, uc;
                           A  4753    ; 1861	
                           A  4754    ; 1862	
                           A  4755    ; 1863		if (ld_word(dir + LDIR_FstClusLO) !
00170E DD3109              A  4756    	LD	IY,(IX+%9)
001711 ED031A              A  4757    	LEA	BC,IY+%1A
001714 C5                  A  4758    	PUSH	BC
001715 CD 00 00 00         A  4759    	CALL	_ld_word
001719 C1                  A  4760    	POP	BC
00171A CD 00 00 00         A  4761    	CALL	__scmpzero
00171E 28 07               A  4762    	JR	Z,L_267
001720 B7                  A  4763    	OR	A,A
001721 ED62                A  4764    	SBC	HL,HL
001723 C3 2A 18 00         A  4765    	JR	L_284
001727                     A  4766    L_267:
                           A  4767    ; 1864	
                           A  4768    ; 1865		i = ((dir[LDIR_Ord] & 0x3F) - 1) * 
001727 DD2709              A  4769    	LD	HL,(IX+%9)
00172A 7E                  A  4770    	LD	A,(HL)
00172B E63F                A  4771    	AND	A,%3F
00172D B7ED62              A  4772    	UEXT	HL
001730 6F                  A  4773    	LD	L,A
001731 2B                  A  4774    	DEC	HL
001732 3E0D                A  4775    	LD	A,%D
001734 CD 00 00 00         A  4776    	CALL	__imul_b
001738 DD2FFD              A  4777    	LD	(IX+%FFFFFFFD),HL
                           A  4778    ; 1866	
                           A  4779    ; 1867		for (wc = 1, s = 0; s < 13; s++) {	
00173B DD36F801            A  4780    	LD	(IX+%FFFFFFF8),%1
00173F DD36F900            A  4781    	LD	(IX+%FFFFFFF9),%0
001743 01000000            A  4782    	LD	BC,0
001747 DD0FFA              A  4783    	LD	(IX+%FFFFFFFA),BC
00174A C3 F2 17 00         A  4784    	JR	L_278
00174E                     A  4785    L_276:
                           A  4786    ; 1868			uc = ld_word(dir + LfnOfs[s]);	
00174E 01 00 00 00         A  4787    	LD	BC,_LfnOfs
001752 DD27FA              A  4788    	LD	HL,(IX+%FFFFFFFA)
001755 09                  A  4789    	ADD	HL,BC
001756 7E                  A  4790    	LD	A,(HL)
001757 B7ED62              A  4791    	UEXT	HL
00175A 6F                  A  4792    	LD	L,A
00175B DD0709              A  4793    	LD	BC,(IX+%9)
00175E 09                  A  4794    	ADD	HL,BC
00175F E5                  A  4795    	PUSH	HL
001760 CD 00 00 00         A  4796    	CALL	_ld_word
001764 C1                  A  4797    	POP	BC
001765 DD75F6              A  4798    	LD	(IX+%FFFFFFF6),L
001768 DD74F7              A  4799    	LD	(IX+%FFFFFFF7),H
                           A  4800    ; 1869			if (wc != 0) {
00176B DD27F8              A  4801    	LD	HL,(IX+%FFFFFFF8)
00176E CD 00 00 00         A  4802    	CALL	__scmpzero
001772 28 65               A  4803    	JR	Z,L_275
                           A  4804    ; 1870				if (i >= FF_MAX_LFN + 1 || 
001774 01000100            A  4805    	LD	BC,256
001778 DD27FD              A  4806    	LD	HL,(IX+%FFFFFFFD)
00177B B7                  A  4807    	OR	A,A
00177C ED42                A  4808    	SBC	HL,BC
00177E 30 49               A  4809    	JR	NC,L_271
001780 DD27FD              A  4810    	LD	HL,(IX+%FFFFFFFD)
001783 DD07FD              A  4811    	LD	BC,(IX+%FFFFFFFD)
001786 03                  A  4812    	INC	BC
001787 DD0FFD              A  4813    	LD	(IX+%FFFFFFFD),BC
00178A 29                  A  4814    	ADD	HL,HL
00178B DD0706              A  4815    	LD	BC,(IX+%6)
00178E 09                  A  4816    	ADD	HL,BC
00178F ED07                A  4817    	LD	BC,(HL)
001791 CD 00 00 00         A  4818    	CALL	__stoiu
001795 0E00                A  4819    	LD	C,%0
001797 0600                A  4820    	LD	B,%0
001799 C5                  A  4821    	PUSH	BC
00179A E5                  A  4822    	PUSH	HL
00179B CD 00 00 00         A  4823    	CALL	_ff_wtoupper
00179F C1                  A  4824    	POP	BC
0017A0 C1                  A  4825    	POP	BC
0017A1 DD73F5              A  4826    	LD	(IX+%FFFFFFF5),E
0017A4 DD2FF2              A  4827    	LD	(IX+%FFFFFFF2),HL
0017A7 DD07F6              A  4828    	LD	BC,(IX+%FFFFFFF6)
0017AA CD 00 00 00         A  4829    	CALL	__stoiu
0017AE 0E00                A  4830    	LD	C,%0
0017B0 0600                A  4831    	LD	B,%0
0017B2 C5                  A  4832    	PUSH	BC
0017B3 E5                  A  4833    	PUSH	HL
0017B4 CD 00 00 00         A  4834    	CALL	_ff_wtoupper
0017B8 C1                  A  4835    	POP	BC
0017B9 C1                  A  4836    	POP	BC
0017BA 7B                  A  4837    	LD	A,E
0017BB E5C1                A  4838    	LD	BC,HL
0017BD DD5EF5              A  4839    	LD	E,(IX+%FFFFFFF5)
0017C0 DD27F2              A  4840    	LD	HL,(IX+%FFFFFFF2)
0017C3 CD 00 00 00         A  4841    	CALL	__lcmpu
0017C7 28 05               A  4842    	JR	Z,L_272
0017C9                     A  4843    L_271:
0017C9 B7                  A  4844    	OR	A,A
                           A  4845    ; 1871					return 0;				
0017CA ED62                A  4846    	SBC	HL,HL
0017CC 18 5C               A  4847    	JR	L_284
                           A  4848    ; 1872				}
0017CE                     A  4849    L_272:
                           A  4850    ; 1873				wc = uc;
0017CE DD07F6              A  4851    	LD	BC,(IX+%FFFFFFF6)
0017D1 DD71F8              A  4852    	LD	(IX+%FFFFFFF8),C
0017D4 DD70F9              A  4853    	LD	(IX+%FFFFFFF9),B
                           A  4854    ; 1874			} else {
0017D7 18 12               A  4855    	JR	L_277
0017D9                     A  4856    L_275:
                           A  4857    ; 1875				if (uc != 0xFFFF) return 0;
0017D9 4901FFFF            A  4858    	LD.LIS	BC,65535
0017DD DD27F6              A  4859    	LD	HL,(IX+%FFFFFFF6)
0017E0 B7                  A  4860    	OR	A,A
0017E1 40ED42              A  4861    	SBC.SIS	HL,BC
0017E4 28 05               A  4862    	JR	Z,L_277
0017E6 B7                  A  4863    	OR	A,A
0017E7 ED62                A  4864    	SBC	HL,HL
0017E9 18 3F               A  4865    	JR	L_284
                           A  4866    ; 1876			}
                           A  4867    ; 1877		}
0017EB                     A  4868    L_277:
0017EB DD07FA              A  4869    	LD	BC,(IX+%FFFFFFFA)
0017EE 03                  A  4870    	INC	BC
0017EF DD0FFA              A  4871    	LD	(IX+%FFFFFFFA),BC
0017F2                     A  4872    L_278:
0017F2 010D0000            A  4873    	LD	BC,13
0017F6 DD27FA              A  4874    	LD	HL,(IX+%FFFFFFFA)
0017F9 B7                  A  4875    	OR	A,A
0017FA ED42                A  4876    	SBC	HL,BC
0017FC DA 4E 17 00         A  4877    	JR	C,L_276
                           A  4878    ; 1878	
                           A  4879    ; 1879		if ((dir[LDIR_Ord] & LLEF) && wc &&
001800 DD2709              A  4880    	LD	HL,(IX+%9)
001803 7E                  A  4881    	LD	A,(HL)
001804 E640                A  4882    	AND	A,%40
001806 28 1E               A  4883    	JR	Z,L_283
001808 DD27F8              A  4884    	LD	HL,(IX+%FFFFFFF8)
00180B CD 00 00 00         A  4885    	CALL	__scmpzero
00180F 28 15               A  4886    	JR	Z,L_283
001811 DD27FD              A  4887    	LD	HL,(IX+%FFFFFFFD)
001814 29                  A  4888    	ADD	HL,HL
001815 DD0706              A  4889    	LD	BC,(IX+%6)
001818 09                  A  4890    	ADD	HL,BC
001819 ED27                A  4891    	LD	HL,(HL)
00181B CD 00 00 00         A  4892    	CALL	__scmpzero
00181F 28 05               A  4893    	JR	Z,L_283
001821 B7                  A  4894    	OR	A,A
001822 ED62                A  4895    	SBC	HL,HL
001824 18 04               A  4896    	JR	L_284
001826                     A  4897    L_283:
                           A  4898    ; 1880	
                           A  4899    ; 1881		return 1;		/* The part of LFN 
001826 21010000            A  4900    	LD	HL,1
                           A  4901    ; 1882	}
00182A                     A  4902    L_284:
00182A DDF9                A  4903    	LD	SP,IX
00182C DDE1                A  4904    	POP	IX
00182E C9                  A  4905    	RET	
                           A  4906    
                           A  4907    
                           A  4908    ;**************************** _cmp_lfn ********
                           A  4909    ;Name                         Addr/Register   S
                           A  4910    ;_ff_wtoupper                        IMPORT  --
                           A  4911    ;_LfnOfs                             STATIC    
                           A  4912    ;uc                                   IX-10    
                           A  4913    ;wc                                    IX-8    
                           A  4914    ;s                                     IX-6    
                           A  4915    ;i                                     IX-3    
                           A  4916    ;dir                                   IX+9    
                           A  4917    ;lfnbuf                                IX+6    
                           A  4918    
                           A  4919    
                           A  4920    ; Stack Frame Size: 26 (bytes)
                           A  4921    ;       Spill Code: 0 (instruction)
                           A  4922    
                           A  4923    
                           A  4924    ; 1883	
                           A  4925    ; 1884	
                           A  4926    ; 1885	#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH 
                           A  4927    ; 1886	/*-------------------------------------
                           A  4928    ; 1887	/* FAT-LFN: Pick a part of file name fr
                           A  4929    ; 1888	/*-------------------------------------
                           A  4930    ; 1889	
                           A  4931    ; 1890	static int pick_lfn (	/* 1:succeeded,
                           A  4932    ; 1891		WCHAR* lfnbuf,		/* Pointer to t
                           A  4933    ; 1892		BYTE* dir			/* Pointer to t
                           A  4934    ; 1893	)
                           A  4935    ; 1894	{
00182F                     A  4936    _pick_lfn:
00182F 21F6FFFF            A  4937    	LD	HL,-10
001833 CD 00 00 00         A  4938    	CALL	__frameset
                           A  4939    ; 1895		UINT i, s;
                           A  4940    ; 1896		WCHAR wc, uc;
                           A  4941    ; 1897	
                           A  4942    ; 1898	
                           A  4943    ; 1899		if (ld_word(dir + LDIR_FstClusLO) !
001837 DD3109              A  4944    	LD	IY,(IX+%9)
00183A ED031A              A  4945    	LEA	BC,IY+%1A
00183D C5                  A  4946    	PUSH	BC
00183E CD 00 00 00         A  4947    	CALL	_ld_word
001842 C1                  A  4948    	POP	BC
001843 CD 00 00 00         A  4949    	CALL	__scmpzero
001847 28 07               A  4950    	JR	Z,L_286
001849 B7                  A  4951    	OR	A,A
00184A ED62                A  4952    	SBC	HL,HL
00184C C3 27 19 00         A  4953    	JR	L_303
001850                     A  4954    L_286:
                           A  4955    ; 1900	
                           A  4956    ; 1901		i = ((dir[LDIR_Ord] & ~LLEF) - 1) *
001850 DD2709              A  4957    	LD	HL,(IX+%9)
001853 7E                  A  4958    	LD	A,(HL)
001854 CBB7                A  4959    	RES	%6,A
001856 B7ED62              A  4960    	UEXT	HL
001859 6F                  A  4961    	LD	L,A
00185A 2B                  A  4962    	DEC	HL
00185B 3E0D                A  4963    	LD	A,%D
00185D CD 00 00 00         A  4964    	CALL	__imul_b
001861 DD2FFD              A  4965    	LD	(IX+%FFFFFFFD),HL
                           A  4966    ; 1902	
                           A  4967    ; 1903		for (wc = 1, s = 0; s < 13; s++) {	
001864 DD36F801            A  4968    	LD	(IX+%FFFFFFF8),%1
001868 DD36F900            A  4969    	LD	(IX+%FFFFFFF9),%0
00186C 01000000            A  4970    	LD	BC,0
001870 DD0FFA              A  4971    	LD	(IX+%FFFFFFFA),BC
001873 18 73               A  4972    	JR	L_296
001875                     A  4973    L_294:
                           A  4974    ; 1904			uc = ld_word(dir + LfnOfs[s]);	
001875 01 00 00 00         A  4975    	LD	BC,_LfnOfs
001879 DD27FA              A  4976    	LD	HL,(IX+%FFFFFFFA)
00187C 09                  A  4977    	ADD	HL,BC
00187D 7E                  A  4978    	LD	A,(HL)
00187E B7ED62              A  4979    	UEXT	HL
001881 6F                  A  4980    	LD	L,A
001882 DD0709              A  4981    	LD	BC,(IX+%9)
001885 09                  A  4982    	ADD	HL,BC
001886 E5                  A  4983    	PUSH	HL
001887 CD 00 00 00         A  4984    	CALL	_ld_word
00188B C1                  A  4985    	POP	BC
00188C DD75F6              A  4986    	LD	(IX+%FFFFFFF6),L
00188F DD74F7              A  4987    	LD	(IX+%FFFFFFF7),H
                           A  4988    ; 1905			if (wc != 0) {
001892 DD27F8              A  4989    	LD	HL,(IX+%FFFFFFF8)
001895 CD 00 00 00         A  4990    	CALL	__scmpzero
001899 28 34               A  4991    	JR	Z,L_293
                           A  4992    ; 1906				if (i >= FF_MAX_LFN + 1) re
00189B 01000100            A  4993    	LD	BC,256
00189F DD27FD              A  4994    	LD	HL,(IX+%FFFFFFFD)
0018A2 B7                  A  4995    	OR	A,A
0018A3 ED42                A  4996    	SBC	HL,BC
0018A5 38 05               A  4997    	JR	C,L_290
0018A7 B7                  A  4998    	OR	A,A
0018A8 ED62                A  4999    	SBC	HL,HL
0018AA 18 7B               A  5000    	JR	L_303
0018AC                     A  5001    L_290:
                           A  5002    ; 1907				lfnbuf[i++] = wc = uc;		
0018AC DD07F6              A  5003    	LD	BC,(IX+%FFFFFFF6)
0018AF DD71F8              A  5004    	LD	(IX+%FFFFFFF8),C
0018B2 DD70F9              A  5005    	LD	(IX+%FFFFFFF9),B
0018B5 DD27FD              A  5006    	LD	HL,(IX+%FFFFFFFD)
0018B8 29                  A  5007    	ADD	HL,HL
0018B9 DD0706              A  5008    	LD	BC,(IX+%6)
0018BC 09                  A  5009    	ADD	HL,BC
0018BD DD7EF6              A  5010    	LD	A,(IX+%FFFFFFF6)
0018C0 77                  A  5011    	LD	(HL),A
0018C1 23                  A  5012    	INC	HL
0018C2 DD7EF7              A  5013    	LD	A,(IX+%FFFFFFF7)
0018C5 77                  A  5014    	LD	(HL),A
0018C6 DD07FD              A  5015    	LD	BC,(IX+%FFFFFFFD)
0018C9 03                  A  5016    	INC	BC
0018CA DD0FFD              A  5017    	LD	(IX+%FFFFFFFD),BC
                           A  5018    ; 1908			} else {
0018CD 18 12               A  5019    	JR	L_295
0018CF                     A  5020    L_293:
                           A  5021    ; 1909				if (uc != 0xFFFF) return 0;
0018CF 4901FFFF            A  5022    	LD.LIS	BC,65535
0018D3 DD27F6              A  5023    	LD	HL,(IX+%FFFFFFF6)
0018D6 B7                  A  5024    	OR	A,A
0018D7 40ED42              A  5025    	SBC.SIS	HL,BC
0018DA 28 05               A  5026    	JR	Z,L_295
0018DC B7                  A  5027    	OR	A,A
0018DD ED62                A  5028    	SBC	HL,HL
0018DF 18 46               A  5029    	JR	L_303
                           A  5030    ; 1910			}
                           A  5031    ; 1911		}
0018E1                     A  5032    L_295:
0018E1 DD07FA              A  5033    	LD	BC,(IX+%FFFFFFFA)
0018E4 03                  A  5034    	INC	BC
0018E5 DD0FFA              A  5035    	LD	(IX+%FFFFFFFA),BC
0018E8                     A  5036    L_296:
0018E8 010D0000            A  5037    	LD	BC,13
0018EC DD27FA              A  5038    	LD	HL,(IX+%FFFFFFFA)
0018EF B7                  A  5039    	OR	A,A
0018F0 ED42                A  5040    	SBC	HL,BC
0018F2 38 81               A  5041    	JR	C,L_294
                           A  5042    ; 1912	
                           A  5043    ; 1913		if (dir[LDIR_Ord] & LLEF && wc != 0
0018F4 DD2709              A  5044    	LD	HL,(IX+%9)
0018F7 7E                  A  5045    	LD	A,(HL)
0018F8 E640                A  5046    	AND	A,%40
0018FA 28 27               A  5047    	JR	Z,L_302
0018FC DD27F8              A  5048    	LD	HL,(IX+%FFFFFFF8)
0018FF CD 00 00 00         A  5049    	CALL	__scmpzero
001903 28 1E               A  5050    	JR	Z,L_302
                           A  5051    ; 1914			if (i >= FF_MAX_LFN + 1) return
001905 01000100            A  5052    	LD	BC,256
001909 DD27FD              A  5053    	LD	HL,(IX+%FFFFFFFD)
00190C B7                  A  5054    	OR	A,A
00190D ED42                A  5055    	SBC	HL,BC
00190F 38 05               A  5056    	JR	C,L_299
001911 B7                  A  5057    	OR	A,A
001912 ED62                A  5058    	SBC	HL,HL
001914 18 11               A  5059    	JR	L_303
001916                     A  5060    L_299:
                           A  5061    ; 1915			lfnbuf[i] = 0;
001916 DD27FD              A  5062    	LD	HL,(IX+%FFFFFFFD)
001919 29                  A  5063    	ADD	HL,HL
00191A DD0706              A  5064    	LD	BC,(IX+%6)
00191D 09                  A  5065    	ADD	HL,BC
00191E 3600                A  5066    	LD	(HL),%0
001920 23                  A  5067    	INC	HL
001921 3600                A  5068    	LD	(HL),%0
                           A  5069    ; 1916		}
001923                     A  5070    L_302:
                           A  5071    ; 1917	
                           A  5072    ; 1918		return 1;		/* The part of LFN 
001923 21010000            A  5073    	LD	HL,1
                           A  5074    ; 1919	}
001927                     A  5075    L_303:
001927 DDF9                A  5076    	LD	SP,IX
001929 DDE1                A  5077    	POP	IX
00192B C9                  A  5078    	RET	
                           A  5079    
                           A  5080    
                           A  5081    ;**************************** _pick_lfn *******
                           A  5082    ;Name                         Addr/Register   S
                           A  5083    ;_LfnOfs                             STATIC    
                           A  5084    ;uc                                   IX-10    
                           A  5085    ;wc                                    IX-8    
                           A  5086    ;s                                     IX-6    
                           A  5087    ;i                                     IX-3    
                           A  5088    ;dir                                   IX+9    
                           A  5089    ;lfnbuf                                IX+6    
                           A  5090    
                           A  5091    
                           A  5092    ; Stack Frame Size: 22 (bytes)
                           A  5093    ;       Spill Code: 0 (instruction)
                           A  5094    
                           A  5095    
                           A  5096    ; 1920	#endif
                           A  5097    ; 1921	
                           A  5098    ; 1922	
                           A  5099    ; 1923	#if !FF_FS_READONLY
                           A  5100    ; 1924	/*-------------------------------------
                           A  5101    ; 1925	/* FAT-LFN: Create an entry of LFN entr
                           A  5102    ; 1926	/*-------------------------------------
                           A  5103    ; 1927	
                           A  5104    ; 1928	static void put_lfn (
                           A  5105    ; 1929		const WCHAR* lfn,	/* Pointer to t
                           A  5106    ; 1930		BYTE* dir,			/* Pointer to t
                           A  5107    ; 1931		BYTE ord,			/* LFN order (1
                           A  5108    ; 1932		BYTE sum			/* Checksum of 
                           A  5109    ; 1933	)
                           A  5110    ; 1934	{
00192C                     A  5111    _put_lfn:
00192C 21F8FFFF            A  5112    	LD	HL,-8
001930 CD 00 00 00         A  5113    	CALL	__frameset
                           A  5114    ; 1935		UINT i, s;
                           A  5115    ; 1936		WCHAR wc;
                           A  5116    ; 1937	
                           A  5117    ; 1938	
                           A  5118    ; 1939		dir[LDIR_Chksum] = sum;			/* 
001934 DD3109              A  5119    	LD	IY,(IX+%9)
001937 ED230D              A  5120    	LEA	HL,IY+%D
00193A DD7E0F              A  5121    	LD	A,(IX+%F)
00193D 77                  A  5122    	LD	(HL),A
                           A  5123    ; 1940		dir[LDIR_Attr] = AM_LFN;		/* 
00193E ED230B              A  5124    	LEA	HL,IY+%B
001941 360F                A  5125    	LD	(HL),%F
                           A  5126    ; 1941		dir[LDIR_Type] = 0;
001943 ED230C              A  5127    	LEA	HL,IY+%C
001946 3600                A  5128    	LD	(HL),%0
                           A  5129    ; 1942		st_word(dir + LDIR_FstClusLO, 0);
001948 01000000            A  5130    	LD	BC,0
00194C C5                  A  5131    	PUSH	BC
00194D ED031A              A  5132    	LEA	BC,IY+%1A
001950 C5                  A  5133    	PUSH	BC
001951 CD C4 00 00         A  5134    	CALL	_st_word
001955 C1                  A  5135    	POP	BC
001956 C1                  A  5136    	POP	BC
                           A  5137    ; 1943	
                           A  5138    ; 1944		i = (ord - 1) * 13;				/* 
001957 DD7E0C              A  5139    	LD	A,(IX+%C)
00195A B7ED62              A  5140    	UEXT	HL
00195D 6F                  A  5141    	LD	L,A
00195E 2B                  A  5142    	DEC	HL
00195F 3E0D                A  5143    	LD	A,%D
001961 CD 00 00 00         A  5144    	CALL	__imul_b
001965 DD2FF8              A  5145    	LD	(IX+%FFFFFFF8),HL
                           A  5146    ; 1945		s = wc = 0;
001968 DD36FE00            A  5147    	LD	(IX+%FFFFFFFE),%0
00196C DD36FF00            A  5148    	LD	(IX+%FFFFFFFF),%0
001970 01000000            A  5149    	LD	BC,0
001974 DD0FFB              A  5150    	LD	(IX+%FFFFFFFB),BC
                           A  5151    ; 1946		do {
001977                     A  5152    L_308:
                           A  5153    ; 1947			if (wc != 0xFFFF) wc = lfn[i++]
001977 4901FFFF            A  5154    	LD.LIS	BC,65535
00197B DD27FE              A  5155    	LD	HL,(IX+%FFFFFFFE)
00197E B7                  A  5156    	OR	A,A
00197F 40ED42              A  5157    	SBC.SIS	HL,BC
001982 28 17               A  5158    	JR	Z,L_306
001984 DD27F8              A  5159    	LD	HL,(IX+%FFFFFFF8)
001987 29                  A  5160    	ADD	HL,HL
001988 DD0706              A  5161    	LD	BC,(IX+%6)
00198B 09                  A  5162    	ADD	HL,BC
00198C ED07                A  5163    	LD	BC,(HL)
00198E DD71FE              A  5164    	LD	(IX+%FFFFFFFE),C
001991 DD70FF              A  5165    	LD	(IX+%FFFFFFFF),B
001994 DD07F8              A  5166    	LD	BC,(IX+%FFFFFFF8)
001997 03                  A  5167    	INC	BC
001998 DD0FF8              A  5168    	LD	(IX+%FFFFFFF8),BC
00199B                     A  5169    L_306:
                           A  5170    ; 1948			st_word(dir + LfnOfs[s], wc);	
00199B DD07FE              A  5171    	LD	BC,(IX+%FFFFFFFE)
00199E C5                  A  5172    	PUSH	BC
00199F 01 00 00 00         A  5173    	LD	BC,_LfnOfs
0019A3 DD27FB              A  5174    	LD	HL,(IX+%FFFFFFFB)
0019A6 09                  A  5175    	ADD	HL,BC
0019A7 7E                  A  5176    	LD	A,(HL)
0019A8 B7ED62              A  5177    	UEXT	HL
0019AB 6F                  A  5178    	LD	L,A
0019AC DD0709              A  5179    	LD	BC,(IX+%9)
0019AF 09                  A  5180    	ADD	HL,BC
0019B0 E5                  A  5181    	PUSH	HL
0019B1 CD C4 00 00         A  5182    	CALL	_st_word
0019B5 C1                  A  5183    	POP	BC
0019B6 C1                  A  5184    	POP	BC
                           A  5185    ; 1949			if (wc == 0) wc = 0xFFFF;		
0019B7 DD27FE              A  5186    	LD	HL,(IX+%FFFFFFFE)
0019BA CD 00 00 00         A  5187    	CALL	__scmpzero
0019BE 20 08               A  5188    	JR	NZ,L_309
0019C0 DD36FEFF            A  5189    	LD	(IX+%FFFFFFFE),%FF
0019C4 DD36FFFF            A  5190    	LD	(IX+%FFFFFFFF),%FF
                           A  5191    ; 1950		} while (++s < 13);
0019C8                     A  5192    L_309:
0019C8 DD07FB              A  5193    	LD	BC,(IX+%FFFFFFFB)
0019CB 03                  A  5194    	INC	BC
0019CC DD0FFB              A  5195    	LD	(IX+%FFFFFFFB),BC
0019CF 010D0000            A  5196    	LD	BC,13
0019D3 DD27FB              A  5197    	LD	HL,(IX+%FFFFFFFB)
0019D6 B7                  A  5198    	OR	A,A
0019D7 ED42                A  5199    	SBC	HL,BC
0019D9 38 9C               A  5200    	JR	C,L_308
                           A  5201    ; 1951		if (wc == 0xFFFF || !lfn[i]) ord |=
0019DB 4901FFFF            A  5202    	LD.LIS	BC,65535
0019DF DD27FE              A  5203    	LD	HL,(IX+%FFFFFFFE)
0019E2 B7                  A  5204    	OR	A,A
0019E3 40ED42              A  5205    	SBC.SIS	HL,BC
0019E6 28 10               A  5206    	JR	Z,L_311
0019E8 DD27F8              A  5207    	LD	HL,(IX+%FFFFFFF8)
0019EB 29                  A  5208    	ADD	HL,HL
0019EC DD0706              A  5209    	LD	BC,(IX+%6)
0019EF 09                  A  5210    	ADD	HL,BC
0019F0 ED27                A  5211    	LD	HL,(HL)
0019F2 CD 00 00 00         A  5212    	CALL	__scmpzero
0019F6 20 08               A  5213    	JR	NZ,L_313
0019F8                     A  5214    L_311:
0019F8 DD7E0C              A  5215    	LD	A,(IX+%C)
0019FB CBF7                A  5216    	SET	%6,A
0019FD DD770C              A  5217    	LD	(IX+%C),A
001A00                     A  5218    L_313:
                           A  5219    ; 1952		dir[LDIR_Ord] = ord;			/* 
001A00 DD2709              A  5220    	LD	HL,(IX+%9)
001A03 DD7E0C              A  5221    	LD	A,(IX+%C)
001A06 77                  A  5222    	LD	(HL),A
                           A  5223    ; 1953	}
001A07 DDF9                A  5224    	LD	SP,IX
001A09 DDE1                A  5225    	POP	IX
001A0B C9                  A  5226    	RET	
                           A  5227    
                           A  5228    
                           A  5229    ;**************************** _put_lfn ********
                           A  5230    ;Name                         Addr/Register   S
                           A  5231    ;_LfnOfs                             STATIC    
                           A  5232    ;i                                     IX-8    
                           A  5233    ;s                                     IX-5    
                           A  5234    ;wc                                    IX-2    
                           A  5235    ;sum                                  IX+15    
                           A  5236    ;ord                                  IX+12    
                           A  5237    ;dir                                   IX+9    
                           A  5238    ;lfn                                   IX+6    
                           A  5239    
                           A  5240    
                           A  5241    ; Stack Frame Size: 26 (bytes)
                           A  5242    ;       Spill Code: 0 (instruction)
                           A  5243    
                           A  5244    
                           A  5245    ; 1954	
                           A  5246    ; 1955	#endif	/* !FF_FS_READONLY */
                           A  5247    ; 1956	#endif	/* FF_USE_LFN */
                           A  5248    ; 1957	
                           A  5249    ; 1958	
                           A  5250    ; 1959	
                           A  5251    ; 1960	#if FF_USE_LFN && !FF_FS_READONLY
                           A  5252    ; 1961	/*-------------------------------------
                           A  5253    ; 1962	/* FAT-LFN: Create a Numbered SFN      
                           A  5254    ; 1963	/*-------------------------------------
                           A  5255    ; 1964	
                           A  5256    ; 1965	static void gen_numname (
                           A  5257    ; 1966		BYTE* dst,			/* Pointer to t
                           A  5258    ; 1967		const BYTE* src,	/* Pointer to S
                           A  5259    ; 1968		const WCHAR* lfn,	/* Pointer to L
                           A  5260    ; 1969		UINT seq			/* Sequence num
                           A  5261    ; 1970	)
                           A  5262    ; 1971	{
001A0C                     A  5263    _gen_numname:
001A0C 21DCFFFF            A  5264    	LD	HL,-36
001A10 CD 00 00 00         A  5265    	CALL	__frameset
                           A  5266    ; 1972		BYTE ns[8], c;
                           A  5267    ; 1973		UINT i, j;
                           A  5268    ; 1974		WCHAR wc;
                           A  5269    ; 1975		DWORD sreg;
                           A  5270    ; 1976	
                           A  5271    ; 1977	
                           A  5272    ; 1978		memcpy(dst, src, 11);	/* Prepare 
001A14 010B0000            A  5273    	LD	BC,11
001A18 C5                  A  5274    	PUSH	BC
001A19 DD0709              A  5275    	LD	BC,(IX+%9)
001A1C C5                  A  5276    	PUSH	BC
001A1D DD0706              A  5277    	LD	BC,(IX+%6)
001A20 C5                  A  5278    	PUSH	BC
001A21 CD 00 00 00         A  5279    	CALL	_memcpy
001A25 C1                  A  5280    	POP	BC
001A26 C1                  A  5281    	POP	BC
001A27 C1                  A  5282    	POP	BC
                           A  5283    ; 1979	
                           A  5284    ; 1980		if (seq > 5) {	/* In case of many 
001A28 DD070F              A  5285    	LD	BC,(IX+%F)
001A2B 21050000            A  5286    	LD	HL,5
001A2F B7                  A  5287    	OR	A,A
001A30 ED42                A  5288    	SBC	HL,BC
001A32 D2 F0 1A 00         A  5289    	JR	NC,L_325
                           A  5290    ; 1981			sreg = seq;
001A36 DD070F              A  5291    	LD	BC,(IX+%F)
001A39 AF                  A  5292    	XOR	A,A
001A3A DD0FF5              A  5293    	LD	(IX+%FFFFFFF5),BC
001A3D DD77F8              A  5294    	LD	(IX+%FFFFFFF8),A
                           A  5295    ; 1982			while (*lfn) {	/* Create a CRC
001A40 C3 DD 1A 00         A  5296    	JR	L_321
001A44                     A  5297    L_322:
                           A  5298    ; 1983				wc = *lfn++;
001A44 DD270C              A  5299    	LD	HL,(IX+%C)
001A47 ED07                A  5300    	LD	BC,(HL)
001A49 DD71F3              A  5301    	LD	(IX+%FFFFFFF3),C
001A4C DD70F4              A  5302    	LD	(IX+%FFFFFFF4),B
001A4F DD310C              A  5303    	LD	IY,(IX+%C)
001A52 ED3302              A  5304    	LEA	IY,IY+%2
001A55 DD3E0C              A  5305    	LD	(IX+%C),IY
                           A  5306    ; 1984				for (i = 0; i < 16; i++) {
001A58 01000000            A  5307    	LD	BC,0
001A5C DD0FFD              A  5308    	LD	(IX+%FFFFFFFD),BC
001A5F 18 70               A  5309    	JR	L_320
001A61                     A  5310    L_318:
                           A  5311    ; 1985					sreg = (sreg << 1) + (w
001A61 DD07F5              A  5312    	LD	BC,(IX+%FFFFFFF5)
001A64 DD7EF8              A  5313    	LD	A,(IX+%FFFFFFF8)
001A67 2E01                A  5314    	LD	L,%1
001A69 CD 00 00 00         A  5315    	CALL	__lshl
001A6D DD0FDC              A  5316    	LD	(IX+%FFFFFFDC),BC
001A70 5F                  A  5317    	LD	E,A
001A71 DD7EF3              A  5318    	LD	A,(IX+%FFFFFFF3)
001A74 E601                A  5319    	AND	A,%1
001A76 4F                  A  5320    	LD	C,A
001A77 0600                A  5321    	LD	B,%0
001A79 CD 00 00 00         A  5322    	CALL	__stoiu
001A7D E5C1                A  5323    	LD	BC,HL
001A7F AF                  A  5324    	XOR	A,A
001A80 DD27DC              A  5325    	LD	HL,(IX+%FFFFFFDC)
001A83 CD 00 00 00         A  5326    	CALL	__ladd
001A87 DD2FF5              A  5327    	LD	(IX+%FFFFFFF5),HL
001A8A DD73F8              A  5328    	LD	(IX+%FFFFFFF8),E
                           A  5329    ; 1986					wc >>= 1;
001A8D DD07F3              A  5330    	LD	BC,(IX+%FFFFFFF3)
001A90 CD 00 00 00         A  5331    	CALL	__stoiu
001A94 3E01                A  5332    	LD	A,%1
001A96 CD 00 00 00         A  5333    	CALL	__ishrs_b
001A9A DD75F3              A  5334    	LD	(IX+%FFFFFFF3),L
001A9D DD74F4              A  5335    	LD	(IX+%FFFFFFF4),H
                           A  5336    ; 1987					if (sreg & 0x10000) sre
001AA0 DD27F5              A  5337    	LD	HL,(IX+%FFFFFFF5)
001AA3 DD5EF8              A  5338    	LD	E,(IX+%FFFFFFF8)
001AA6 01000001            A  5339    	LD	BC,65536
001AAA AF                  A  5340    	XOR	A,A
001AAB CD 00 00 00         A  5341    	CALL	__land
001AAF CD 00 00 00         A  5342    	CALL	__lcmpzero
001AB3 28 15               A  5343    	JR	Z,L_319
001AB5 DD27F5              A  5344    	LD	HL,(IX+%FFFFFFF5)
001AB8 DD5EF8              A  5345    	LD	E,(IX+%FFFFFFF8)
001ABB 01211001            A  5346    	LD	BC,69665
001ABF AF                  A  5347    	XOR	A,A
001AC0 CD 00 00 00         A  5348    	CALL	__lxor
001AC4 DD2FF5              A  5349    	LD	(IX+%FFFFFFF5),HL
001AC7 DD73F8              A  5350    	LD	(IX+%FFFFFFF8),E
                           A  5351    ; 1988				}
001ACA                     A  5352    L_319:
001ACA DD07FD              A  5353    	LD	BC,(IX+%FFFFFFFD)
001ACD 03                  A  5354    	INC	BC
001ACE DD0FFD              A  5355    	LD	(IX+%FFFFFFFD),BC
001AD1                     A  5356    L_320:
001AD1 01100000            A  5357    	LD	BC,16
001AD5 DD27FD              A  5358    	LD	HL,(IX+%FFFFFFFD)
001AD8 B7                  A  5359    	OR	A,A
001AD9 ED42                A  5360    	SBC	HL,BC
001ADB 38 84               A  5361    	JR	C,L_318
                           A  5362    ; 1989			}
001ADD                     A  5363    L_321:
001ADD DD270C              A  5364    	LD	HL,(IX+%C)
001AE0 ED27                A  5365    	LD	HL,(HL)
001AE2 CD 00 00 00         A  5366    	CALL	__scmpzero
001AE6 C2 44 1A 00         A  5367    	JR	NZ,L_322
                           A  5368    ; 1990			seq = (UINT)sreg;
001AEA DD07F5              A  5369    	LD	BC,(IX+%FFFFFFF5)
001AED DD0F0F              A  5370    	LD	(IX+%F),BC
                           A  5371    ; 1991		}
001AF0                     A  5372    L_325:
                           A  5373    ; 1992	
                           A  5374    ; 1993		/* Make suffix (~ + hexdecimal) */
                           A  5375    ; 1994		i = 7;
001AF0 01070000            A  5376    	LD	BC,7
001AF4 DD0FFD              A  5377    	LD	(IX+%FFFFFFFD),BC
                           A  5378    ; 1995		do {
001AF7                     A  5379    L_330:
                           A  5380    ; 1996			c = (BYTE)((seq % 16) + '0'); s
001AF7 DD7E0F              A  5381    	LD	A,(IX+%F)
001AFA E60F                A  5382    	AND	A,%F
001AFC B7ED62              A  5383    	UEXT	HL
001AFF 6F                  A  5384    	LD	L,A
001B00 E5FDE1              A  5385    	LD	IY,HL
001B03 ED2330              A  5386    	LEA	HL,IY+%30
001B06 DD75F9              A  5387    	LD	(IX+%FFFFFFF9),L
001B09 DD270F              A  5388    	LD	HL,(IX+%F)
001B0C 3E04                A  5389    	LD	A,%4
001B0E CD 00 00 00         A  5390    	CALL	__ishru_b
001B12 DD2F0F              A  5391    	LD	(IX+%F),HL
                           A  5392    ; 1997			if (c > '9') c += 7;
001B15 3E39                A  5393    	LD	A,%39
001B17 DDBEF9              A  5394    	CP	A,(IX+%FFFFFFF9)
001B1A 30 08               A  5395    	JR	NC,L_328
001B1C DD7EF9              A  5396    	LD	A,(IX+%FFFFFFF9)
001B1F C607                A  5397    	ADD	A,%7
001B21 DD77F9              A  5398    	LD	(IX+%FFFFFFF9),A
001B24                     A  5399    L_328:
                           A  5400    ; 1998			ns[i--] = c;
001B24 DD07FD              A  5401    	LD	BC,(IX+%FFFFFFFD)
001B27 ED22DF              A  5402    	LEA	HL,IX+%FFFFFFDF
001B2A 09                  A  5403    	ADD	HL,BC
001B2B DD7EF9              A  5404    	LD	A,(IX+%FFFFFFF9)
001B2E 77                  A  5405    	LD	(HL),A
001B2F DD31FD              A  5406    	LD	IY,(IX+%FFFFFFFD)
001B32 ED33FF              A  5407    	LEA	IY,IY+%FFFFFFFF
001B35 DD3EFD              A  5408    	LD	(IX+%FFFFFFFD),IY
                           A  5409    ; 1999		} while (i && seq);
001B38 DD27FD              A  5410    	LD	HL,(IX+%FFFFFFFD)
001B3B CD 00 00 00         A  5411    	CALL	__icmpzero
001B3F 28 09               A  5412    	JR	Z,L_332
001B41 DD270F              A  5413    	LD	HL,(IX+%F)
001B44 CD 00 00 00         A  5414    	CALL	__icmpzero
001B48 20 AD               A  5415    	JR	NZ,L_330
001B4A                     A  5416    L_332:
                           A  5417    ; 2000		ns[i] = '~';
001B4A DD07FD              A  5418    	LD	BC,(IX+%FFFFFFFD)
001B4D ED22DF              A  5419    	LEA	HL,IX+%FFFFFFDF
001B50 09                  A  5420    	ADD	HL,BC
001B51 367E                A  5421    	LD	(HL),%7E
                           A  5422    ; 2001	
                           A  5423    ; 2002		/* Append the suffix to the SFN bod
                           A  5424    ; 2003		for (j = 0; j < i && dst[j] != ' ';
001B53 01000000            A  5425    	LD	BC,0
001B57 DD0FFA              A  5426    	LD	(IX+%FFFFFFFA),BC
001B5A 18 2E               A  5427    	JR	L_341
001B5C                     A  5428    L_339:
                           A  5429    ; 2004			if (dbc_1st(dst[j])) {	/* To a
001B5C DD27ED              A  5430    	LD	HL,(IX+%FFFFFFED)
001B5F 4E                  A  5431    	LD	C,(HL)
001B60 0600                A  5432    	LD	B,%0
001B62 C5                  A  5433    	PUSH	BC
001B63 CD 5F 01 00         A  5434    	CALL	_dbc_1st
001B67 C1                  A  5435    	POP	BC
001B68 CD 00 00 00         A  5436    	CALL	__icmpzero
001B6C 28 15               A  5437    	JR	Z,L_340
                           A  5438    ; 2005				if (j == i - 1) break;
001B6E DD31FD              A  5439    	LD	IY,(IX+%FFFFFFFD)
001B71 ED23FF              A  5440    	LEA	HL,IY+%FFFFFFFF
001B74 DD07FA              A  5441    	LD	BC,(IX+%FFFFFFFA)
001B77 B7                  A  5442    	OR	A,A
001B78 ED42                A  5443    	SBC	HL,BC
001B7A 28 31               A  5444    	JR	Z,L_348
                           A  5445    ; 2006				j++;
001B7C DD07FA              A  5446    	LD	BC,(IX+%FFFFFFFA)
001B7F 03                  A  5447    	INC	BC
001B80 DD0FFA              A  5448    	LD	(IX+%FFFFFFFA),BC
                           A  5449    ; 2007			}
                           A  5450    ; 2008		}
001B83                     A  5451    L_340:
001B83 DD07FA              A  5452    	LD	BC,(IX+%FFFFFFFA)
001B86 03                  A  5453    	INC	BC
001B87 DD0FFA              A  5454    	LD	(IX+%FFFFFFFA),BC
001B8A                     A  5455    L_341:
001B8A DD07FD              A  5456    	LD	BC,(IX+%FFFFFFFD)
001B8D DD27FA              A  5457    	LD	HL,(IX+%FFFFFFFA)
001B90 B7                  A  5458    	OR	A,A
001B91 ED42                A  5459    	SBC	HL,BC
001B93 30 18               A  5460    	JR	NC,L_348
001B95 DD07FA              A  5461    	LD	BC,(IX+%FFFFFFFA)
001B98 DD2706              A  5462    	LD	HL,(IX+%6)
001B9B 09                  A  5463    	ADD	HL,BC
001B9C DD2FED              A  5464    	LD	(IX+%FFFFFFED),HL
001B9F 7E                  A  5465    	LD	A,(HL)
001BA0 B7ED62              A  5466    	UEXT	HL
001BA3 6F                  A  5467    	LD	L,A
001BA4 01200000            A  5468    	LD	BC,32
001BA8 B7                  A  5469    	OR	A,A
001BA9 ED42                A  5470    	SBC	HL,BC
001BAB 20 AF               A  5471    	JR	NZ,L_339
                           A  5472    ; 2009		do {	/* Append the suffix */
001BAD                     A  5473    L_348:
                           A  5474    ; 2010			dst[j++] = (i < 8) ? ns[i++] : 
001BAD 01080000            A  5475    	LD	BC,8
001BB1 DD27FD              A  5476    	LD	HL,(IX+%FFFFFFFD)
001BB4 B7                  A  5477    	OR	A,A
001BB5 ED42                A  5478    	SBC	HL,BC
001BB7 30 1E               A  5479    	JR	NC,L_346
001BB9 DD07FD              A  5480    	LD	BC,(IX+%FFFFFFFD)
001BBC DD0FE7              A  5481    	LD	(IX+%FFFFFFE7),BC
001BBF DD07FD              A  5482    	LD	BC,(IX+%FFFFFFFD)
001BC2 03                  A  5483    	INC	BC
001BC3 DD0FFD              A  5484    	LD	(IX+%FFFFFFFD),BC
001BC6 DD07E7              A  5485    	LD	BC,(IX+%FFFFFFE7)
001BC9 ED22DF              A  5486    	LEA	HL,IX+%FFFFFFDF
001BCC 09                  A  5487    	ADD	HL,BC
001BCD 7E                  A  5488    	LD	A,(HL)
001BCE B7ED62              A  5489    	UEXT	HL
001BD1 6F                  A  5490    	LD	L,A
001BD2 DD2FF0              A  5491    	LD	(IX+%FFFFFFF0),HL
001BD5 18 07               A  5492    	JR	L_347
001BD7                     A  5493    L_346:
001BD7 01200000            A  5494    	LD	BC,32
001BDB DD0FF0              A  5495    	LD	(IX+%FFFFFFF0),BC
001BDE                     A  5496    L_347:
001BDE DD07FA              A  5497    	LD	BC,(IX+%FFFFFFFA)
001BE1 DD0FEA              A  5498    	LD	(IX+%FFFFFFEA),BC
001BE4 DD7EF0              A  5499    	LD	A,(IX+%FFFFFFF0)
001BE7 DD07EA              A  5500    	LD	BC,(IX+%FFFFFFEA)
001BEA DD2706              A  5501    	LD	HL,(IX+%6)
001BED 09                  A  5502    	ADD	HL,BC
001BEE 77                  A  5503    	LD	(HL),A
001BEF DD07FA              A  5504    	LD	BC,(IX+%FFFFFFFA)
001BF2 03                  A  5505    	INC	BC
001BF3 DD0FFA              A  5506    	LD	(IX+%FFFFFFFA),BC
                           A  5507    ; 2011		} while (j < 8);
001BF6 01080000            A  5508    	LD	BC,8
001BFA DD27FA              A  5509    	LD	HL,(IX+%FFFFFFFA)
001BFD B7                  A  5510    	OR	A,A
001BFE ED42                A  5511    	SBC	HL,BC
001C00 38 AB               A  5512    	JR	C,L_348
                           A  5513    ; 2012	}
001C02 DDF9                A  5514    	LD	SP,IX
001C04 DDE1                A  5515    	POP	IX
001C06 C9                  A  5516    	RET	
                           A  5517    
                           A  5518    
                           A  5519    ;**************************** _gen_numname ****
                           A  5520    ;Name                         Addr/Register   S
                           A  5521    ;_memcpy                             IMPORT  --
                           A  5522    ;ns                                   IX-33    
                           A  5523    ;temp343                              IX-25    
                           A  5524    ;temp342                              IX-22    
                           A  5525    ;G_14                                 IX-19    
                           A  5526    ;temp344                              IX-16    
                           A  5527    ;wc                                   IX-13    
                           A  5528    ;sreg                                 IX-11    
                           A  5529    ;c                                     IX-7    
                           A  5530    ;j                                     IX-6    
                           A  5531    ;i                                     IX-3    
                           A  5532    ;seq                                  IX+15    
                           A  5533    ;lfn                                  IX+12    
                           A  5534    ;src                                   IX+9    
                           A  5535    ;dst                                   IX+6    
                           A  5536    
                           A  5537    
                           A  5538    ; Stack Frame Size: 54 (bytes)
                           A  5539    ;       Spill Code: 0 (instruction)
                           A  5540    
                           A  5541    
                           A  5542    ; 2013	#endif	/* FF_USE_LFN && !FF_FS_READONL
                           A  5543    ; 2014	
                           A  5544    ; 2015	
                           A  5545    ; 2016	
                           A  5546    ; 2017	#if FF_USE_LFN
                           A  5547    ; 2018	/*-------------------------------------
                           A  5548    ; 2019	/* FAT-LFN: Calculate checksum of an SF
                           A  5549    ; 2020	/*-------------------------------------
                           A  5550    ; 2021	
                           A  5551    ; 2022	static BYTE sum_sfn (
                           A  5552    ; 2023		const BYTE* dir		/* Pointer to t
                           A  5553    ; 2024	)
                           A  5554    ; 2025	{
001C07                     A  5555    _sum_sfn:
001C07 21FCFFFF            A  5556    	LD	HL,-4
001C0B CD 00 00 00         A  5557    	CALL	__frameset
                           A  5558    ; 2026		BYTE sum = 0;
001C0F DD36FF00            A  5559    	LD	(IX+%FFFFFFFF),%0
                           A  5560    ; 2027		UINT n = 11;
001C13 010B0000            A  5561    	LD	BC,11
001C17 DD0FFC              A  5562    	LD	(IX+%FFFFFFFC),BC
                           A  5563    ; 2028	
                           A  5564    ; 2029		do {
001C1A                     A  5565    L_353:
                           A  5566    ; 2030			sum = (sum >> 1) + (sum << 7) +
001C1A DD7EFF              A  5567    	LD	A,(IX+%FFFFFFFF)
001C1D B7ED62              A  5568    	UEXT	HL
001C20 6F                  A  5569    	LD	L,A
001C21 3E01                A  5570    	LD	A,%1
001C23 CD 00 00 00         A  5571    	CALL	__ishrs_b
001C27 0607                A  5572    	LD	B,%7
001C29 DD7EFF              A  5573    	LD	A,(IX+%FFFFFFFF)
001C2C CD 00 00 00         A  5574    	CALL	__bshl
001C30 47                  A  5575    	LD	B,A
001C31 7D                  A  5576    	LD	A,L
001C32 80                  A  5577    	ADD	A,B
001C33 DD2706              A  5578    	LD	HL,(IX+%6)
001C36 86                  A  5579    	ADD	A,(HL)
001C37 DD77FF              A  5580    	LD	(IX+%FFFFFFFF),A
001C3A DD0706              A  5581    	LD	BC,(IX+%6)
001C3D 03                  A  5582    	INC	BC
001C3E DD0F06              A  5583    	LD	(IX+%6),BC
                           A  5584    ; 2031		} while (--n);
001C41 DD31FC              A  5585    	LD	IY,(IX+%FFFFFFFC)
001C44 ED33FF              A  5586    	LEA	IY,IY+%FFFFFFFF
001C47 DD3EFC              A  5587    	LD	(IX+%FFFFFFFC),IY
001C4A DD27FC              A  5588    	LD	HL,(IX+%FFFFFFFC)
001C4D CD 00 00 00         A  5589    	CALL	__icmpzero
001C51 20 C7               A  5590    	JR	NZ,L_353
                           A  5591    ; 2032		return sum;
001C53 DD7EFF              A  5592    	LD	A,(IX+%FFFFFFFF)
                           A  5593    ; 2033	}
001C56 DDF9                A  5594    	LD	SP,IX
001C58 DDE1                A  5595    	POP	IX
001C5A C9                  A  5596    	RET	
                           A  5597    
                           A  5598    
                           A  5599    ;**************************** _sum_sfn ********
                           A  5600    ;Name                         Addr/Register   S
                           A  5601    ;n                                     IX-4    
                           A  5602    ;sum                                   IX-1    
                           A  5603    ;dir                                   IX+6    
                           A  5604    
                           A  5605    
                           A  5606    ; Stack Frame Size: 13 (bytes)
                           A  5607    ;       Spill Code: 0 (instruction)
                           A  5608    
                           A  5609    
                           A  5610    ; 2034	
                           A  5611    ; 2035	#endif	/* FF_USE_LFN */
                           A  5612    ; 2036	
                           A  5613    ; 2037	
                           A  5614    ; 2038	
                           A  5615    ; 2039	#if FF_FS_EXFAT
                           A  5616    ; 2040	/*-------------------------------------
                           A  5617    ; 2041	/* exFAT: Checksum                     
                           A  5618    ; 2042	/*-------------------------------------
                           A  5619    ; 2043	
                           A  5620    ; 2044	static WORD xdir_sum (	/* Get checksum
                           A  5621    ; 2045		const BYTE* dir		/* Directory en
                           A  5622    ; 2046	)
                           A  5623    ; 2047	{
                           A  5624    ; 2048		UINT i, szblk;
                           A  5625    ; 2049		WORD sum;
                           A  5626    ; 2050	
                           A  5627    ; 2051	
                           A  5628    ; 2052		szblk = (dir[XDIR_NumSec] + 1) * SZ
                           A  5629    ; 2053		for (i = sum = 0; i < szblk; i++) {
                           A  5630    ; 2054			if (i == XDIR_SetSum) {	/* Skip
                           A  5631    ; 2055				i++;
                           A  5632    ; 2056			} else {
                           A  5633    ; 2057				sum = ((sum & 1) ? 0x8000 :
                           A  5634    ; 2058			}
                           A  5635    ; 2059		}
                           A  5636    ; 2060		return sum;
                           A  5637    ; 2061	}
                           A  5638    ; 2062	
                           A  5639    ; 2063	
                           A  5640    ; 2064	
                           A  5641    ; 2065	static WORD xname_sum (	/* Get check su
                           A  5642    ; 2066		const WCHAR* name	/* File name to
                           A  5643    ; 2067	)
                           A  5644    ; 2068	{
                           A  5645    ; 2069		WCHAR chr;
                           A  5646    ; 2070		WORD sum = 0;
                           A  5647    ; 2071	
                           A  5648    ; 2072	
                           A  5649    ; 2073		while ((chr = *name++) != 0) {
                           A  5650    ; 2074			chr = (WCHAR)ff_wtoupper(chr);	
                           A  5651    ; 2075			sum = ((sum & 1) ? 0x8000 : 0) 
                           A  5652    ; 2076			sum = ((sum & 1) ? 0x8000 : 0) 
                           A  5653    ; 2077		}
                           A  5654    ; 2078		return sum;
                           A  5655    ; 2079	}
                           A  5656    ; 2080	
                           A  5657    ; 2081	
                           A  5658    ; 2082	#if !FF_FS_READONLY && FF_USE_MKFS
                           A  5659    ; 2083	static DWORD xsum32 (	/* Returns 32-b
                           A  5660    ; 2084		BYTE  dat,			/* Byte to be c
                           A  5661    ; 2085		DWORD sum			/* Previous sum
                           A  5662    ; 2086	)
                           A  5663    ; 2087	{
                           A  5664    ; 2088		sum = ((sum & 1) ? 0x80000000 : 0) 
                           A  5665    ; 2089		return sum;
                           A  5666    ; 2090	}
                           A  5667    ; 2091	#endif
                           A  5668    ; 2092	
                           A  5669    ; 2093	
                           A  5670    ; 2094	
                           A  5671    ; 2095	/*-----------------------------------*/
                           A  5672    ; 2096	/* exFAT: Get a directry entry block */
                           A  5673    ; 2097	/*-----------------------------------*/
                           A  5674    ; 2098	
                           A  5675    ; 2099	static FRESULT load_xdir (	/* FR_INT_E
                           A  5676    ; 2100		DIR* dp					/* Reading 
                           A  5677    ; 2101	)
                           A  5678    ; 2102	{
                           A  5679    ; 2103		FRESULT res;
                           A  5680    ; 2104		UINT i, sz_ent;
                           A  5681    ; 2105		BYTE *dirb = dp->obj.fs->dirbuf;	
                           A  5682    ; 2106	
                           A  5683    ; 2107	
                           A  5684    ; 2108		/* Load file directory entry */
                           A  5685    ; 2109		res = move_window(dp->obj.fs, dp->s
                           A  5686    ; 2110		if (res != FR_OK) return res;
                           A  5687    ; 2111		if (dp->dir[XDIR_Type] != ET_FILEDI
                           A  5688    ; 2112		memcpy(dirb + 0 * SZDIRE, dp->dir, 
                           A  5689    ; 2113		sz_ent = (dirb[XDIR_NumSec] + 1) * 
                           A  5690    ; 2114		if (sz_ent < 3 * SZDIRE || sz_ent >
                           A  5691    ; 2115	
                           A  5692    ; 2116		/* Load stream extension entry */
                           A  5693    ; 2117		res = dir_next(dp, 0);
                           A  5694    ; 2118		if (res == FR_NO_FILE) res = FR_INT
                           A  5695    ; 2119		if (res != FR_OK) return res;
                           A  5696    ; 2120		res = move_window(dp->obj.fs, dp->s
                           A  5697    ; 2121		if (res != FR_OK) return res;
                           A  5698    ; 2122		if (dp->dir[XDIR_Type] != ET_STREAM
                           A  5699    ; 2123		memcpy(dirb + 1 * SZDIRE, dp->dir, 
                           A  5700    ; 2124		if (MAXDIRB(dirb[XDIR_NumName]) > s
                           A  5701    ; 2125	
                           A  5702    ; 2126		/* Load file name entries */
                           A  5703    ; 2127		i = 2 * SZDIRE;	/* Name offset to l
                           A  5704    ; 2128		do {
                           A  5705    ; 2129			res = dir_next(dp, 0);
                           A  5706    ; 2130			if (res == FR_NO_FILE) res = FR
                           A  5707    ; 2131			if (res != FR_OK) return res;
                           A  5708    ; 2132			res = move_window(dp->obj.fs, d
                           A  5709    ; 2133			if (res != FR_OK) return res;
                           A  5710    ; 2134			if (dp->dir[XDIR_Type] != ET_FI
                           A  5711    ; 2135			if (i < MAXDIRB(FF_MAX_LFN)) me
                           A  5712    ; 2136		} while ((i += SZDIRE) < sz_ent);
                           A  5713    ; 2137	
                           A  5714    ; 2138		/* Sanity check (do it for only acc
                           A  5715    ; 2139		if (i <= MAXDIRB(FF_MAX_LFN)) {
                           A  5716    ; 2140			if (xdir_sum(dirb) != ld_word(d
                           A  5717    ; 2141		}
                           A  5718    ; 2142		return FR_OK;
                           A  5719    ; 2143	}
                           A  5720    ; 2144	
                           A  5721    ; 2145	
                           A  5722    ; 2146	/*-------------------------------------
                           A  5723    ; 2147	/* exFAT: Initialize object allocation 
                           A  5724    ; 2148	/*-------------------------------------
                           A  5725    ; 2149	
                           A  5726    ; 2150	static void init_alloc_info (
                           A  5727    ; 2151		FATFS* fs,		/* Filesystem objec
                           A  5728    ; 2152		FFOBJID* obj	/* Object allocatio
                           A  5729    ; 2153	)
                           A  5730    ; 2154	{
                           A  5731    ; 2155		obj->sclust = ld_dword(fs->dirbuf +
                           A  5732    ; 2156		obj->objsize = ld_qword(fs->dirbuf 
                           A  5733    ; 2157		obj->stat = fs->dirbuf[XDIR_GenFlag
                           A  5734    ; 2158		obj->n_frag = 0;					
                           A  5735    ; 2159	}
                           A  5736    ; 2160	
                           A  5737    ; 2161	
                           A  5738    ; 2162	
                           A  5739    ; 2163	#if !FF_FS_READONLY || FF_FS_RPATH != 0
                           A  5740    ; 2164	/*-------------------------------------
                           A  5741    ; 2165	/* exFAT: Load the object's directory e
                           A  5742    ; 2166	/*-------------------------------------
                           A  5743    ; 2167	
                           A  5744    ; 2168	static FRESULT load_obj_xdir (
                           A  5745    ; 2169		DIR* dp,			/* Blank direct
                           A  5746    ; 2170		const FFOBJID* obj	/* Object with 
                           A  5747    ; 2171	)
                           A  5748    ; 2172	{
                           A  5749    ; 2173		FRESULT res;
                           A  5750    ; 2174	
                           A  5751    ; 2175		/* Open object containing directory
                           A  5752    ; 2176		dp->obj.fs = obj->fs;
                           A  5753    ; 2177		dp->obj.sclust = obj->c_scl;
                           A  5754    ; 2178		dp->obj.stat = (BYTE)obj->c_size;
                           A  5755    ; 2179		dp->obj.objsize = obj->c_size & 0xF
                           A  5756    ; 2180		dp->obj.n_frag = 0;
                           A  5757    ; 2181		dp->blk_ofs = obj->c_ofs;
                           A  5758    ; 2182	
                           A  5759    ; 2183		res = dir_sdi(dp, dp->blk_ofs);	/* 
                           A  5760    ; 2184		if (res == FR_OK) {
                           A  5761    ; 2185			res = load_xdir(dp);		/* 
                           A  5762    ; 2186		}
                           A  5763    ; 2187		return res;
                           A  5764    ; 2188	}
                           A  5765    ; 2189	#endif
                           A  5766    ; 2190	
                           A  5767    ; 2191	
                           A  5768    ; 2192	#if !FF_FS_READONLY
                           A  5769    ; 2193	/*-------------------------------------
                           A  5770    ; 2194	/* exFAT: Store the directory entry blo
                           A  5771    ; 2195	/*-------------------------------------
                           A  5772    ; 2196	
                           A  5773    ; 2197	static FRESULT store_xdir (
                           A  5774    ; 2198		DIR* dp				/* Pointer to t
                           A  5775    ; 2199	)
                           A  5776    ; 2200	{
                           A  5777    ; 2201		FRESULT res;
                           A  5778    ; 2202		UINT nent;
                           A  5779    ; 2203		BYTE *dirb = dp->obj.fs->dirbuf;	
                           A  5780    ; 2204	
                           A  5781    ; 2205		/* Create set sum */
                           A  5782    ; 2206		st_word(dirb + XDIR_SetSum, xdir_su
                           A  5783    ; 2207		nent = dirb[XDIR_NumSec] + 1;
                           A  5784    ; 2208	
                           A  5785    ; 2209		/* Store the direcotry entry block 
                           A  5786    ; 2210		res = dir_sdi(dp, dp->blk_ofs);
                           A  5787    ; 2211		while (res == FR_OK) {
                           A  5788    ; 2212			res = move_window(dp->obj.fs, d
                           A  5789    ; 2213			if (res != FR_OK) break;
                           A  5790    ; 2214			memcpy(dp->dir, dirb, SZDIRE);
                           A  5791    ; 2215			dp->obj.fs->wflag = 1;
                           A  5792    ; 2216			if (--nent == 0) break;
                           A  5793    ; 2217			dirb += SZDIRE;
                           A  5794    ; 2218			res = dir_next(dp, 0);
                           A  5795    ; 2219		}
                           A  5796    ; 2220		return (res == FR_OK || res == FR_D
                           A  5797    ; 2221	}
                           A  5798    ; 2222	
                           A  5799    ; 2223	
                           A  5800    ; 2224	
                           A  5801    ; 2225	/*-------------------------------------
                           A  5802    ; 2226	/* exFAT: Create a new directory enrty 
                           A  5803    ; 2227	/*-------------------------------------
                           A  5804    ; 2228	
                           A  5805    ; 2229	static void create_xdir (
                           A  5806    ; 2230		BYTE* dirb,			/* Pointer to t
                           A  5807    ; 2231		const WCHAR* lfn	/* Pointer to t
                           A  5808    ; 2232	)
                           A  5809    ; 2233	{
                           A  5810    ; 2234		UINT i;
                           A  5811    ; 2235		BYTE nc1, nlen;
                           A  5812    ; 2236		WCHAR wc;
                           A  5813    ; 2237	
                           A  5814    ; 2238	
                           A  5815    ; 2239		/* Create file-directory and stream
                           A  5816    ; 2240		memset(dirb, 0, 2 * SZDIRE);
                           A  5817    ; 2241		dirb[0 * SZDIRE + XDIR_Type] = ET_F
                           A  5818    ; 2242		dirb[1 * SZDIRE + XDIR_Type] = ET_S
                           A  5819    ; 2243	
                           A  5820    ; 2244		/* Create file-name entries */
                           A  5821    ; 2245		i = SZDIRE * 2;	/* Top of file_name
                           A  5822    ; 2246		nlen = nc1 = 0; wc = 1;
                           A  5823    ; 2247		do {
                           A  5824    ; 2248			dirb[i++] = ET_FILENAME; dirb[i
                           A  5825    ; 2249			do {	/* Fill name field */
                           A  5826    ; 2250				if (wc != 0 && (wc = lfn[nl
                           A  5827    ; 2251				st_word(dirb + i, wc); 	/* 
                           A  5828    ; 2252				i += 2;
                           A  5829    ; 2253			} while (i % SZDIRE != 0);
                           A  5830    ; 2254			nc1++;
                           A  5831    ; 2255		} while (lfn[nlen]);	/* Fill nex
                           A  5832    ; 2256	
                           A  5833    ; 2257		dirb[XDIR_NumName] = nlen;		/* 
                           A  5834    ; 2258		dirb[XDIR_NumSec] = 1 + nc1;	/* 
                           A  5835    ; 2259		st_word(dirb + XDIR_NameHash, xname
                           A  5836    ; 2260	}
                           A  5837    ; 2261	
                           A  5838    ; 2262	#endif	/* !FF_FS_READONLY */
                           A  5839    ; 2263	#endif	/* FF_FS_EXFAT */
                           A  5840    ; 2264	
                           A  5841    ; 2265	
                           A  5842    ; 2266	
                           A  5843    ; 2267	#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH 
                           A  5844    ; 2268	/*-------------------------------------
                           A  5845    ; 2269	/* Read an object from the directory   
                           A  5846    ; 2270	/*-------------------------------------
                           A  5847    ; 2271	
                           A  5848    ; 2272	#define DIR_READ_FILE(dp) dir_read(dp, 
                           A  5849    ; 2273	#define DIR_READ_LABEL(dp) dir_read(dp,
                           A  5850    ; 2274	
                           A  5851    ; 2275	static FRESULT dir_read (
                           A  5852    ; 2276		DIR* dp,		/* Pointer to the d
                           A  5853    ; 2277		int vol			/* Filtered by 0:fi
                           A  5854    ; 2278	)
                           A  5855    ; 2279	{
001C5B                     A  5856    _dir_read:
001C5B 21E9FFFF            A  5857    	LD	HL,-23
001C5F CD 00 00 00         A  5858    	CALL	__frameset
                           A  5859    ; 2280		FRESULT res = FR_NO_FILE;
001C63 01040000            A  5860    	LD	BC,4
001C67 DD0FFB              A  5861    	LD	(IX+%FFFFFFFB),BC
                           A  5862    ; 2281		FATFS *fs = dp->obj.fs;
001C6A DD3106              A  5863    	LD	IY,(IX+%6)
001C6D FD0700              A  5864    	LD	BC,(IY+%0)
001C70 DD0FF6              A  5865    	LD	(IX+%FFFFFFF6),BC
                           A  5866    ; 2282		BYTE attr, b;
                           A  5867    ; 2283	#if FF_USE_LFN
                           A  5868    ; 2284		BYTE ord = 0xFF, sum = 0xFF;
001C73 DD36FEFF            A  5869    	LD	(IX+%FFFFFFFE),%FF
001C77 DD36F9FF            A  5870    	LD	(IX+%FFFFFFF9),%FF
                           A  5871    ; 2285	#endif
                           A  5872    ; 2286	
                           A  5873    ; 2287		while (dp->sect) {
001C7B C3 C1 1D 00         A  5874    	JR	L_380
001C7F                     A  5875    L_381:
                           A  5876    ; 2288			res = move_window(fs, dp->sect)
001C7F DD4EEC              A  5877    	LD	C,(IX+%FFFFFFEC)
001C82 0600                A  5878    	LD	B,%0
001C84 C5                  A  5879    	PUSH	BC
001C85 DD07E9              A  5880    	LD	BC,(IX+%FFFFFFE9)
001C88 C5                  A  5881    	PUSH	BC
001C89 DD07F6              A  5882    	LD	BC,(IX+%FFFFFFF6)
001C8C C5                  A  5883    	PUSH	BC
001C8D CD A6 03 00         A  5884    	CALL	_move_window
001C91 C1                  A  5885    	POP	BC
001C92 C1                  A  5886    	POP	BC
001C93 C1                  A  5887    	POP	BC
001C94 DD2FFB              A  5888    	LD	(IX+%FFFFFFFB),HL
                           A  5889    ; 2289			if (res != FR_OK) break;
001C97 CD 00 00 00         A  5890    	CALL	__icmpzero
001C9B C2 DD 1D 00         A  5891    	JR	NZ,L_383
                           A  5892    ; 2290			b = dp->dir[DIR_Name];	/* Test
001C9F DD3106              A  5893    	LD	IY,(IX+%6)
001CA2 FD071B              A  5894    	LD	BC,(IY+%1B)
001CA5 DD0FF0              A  5895    	LD	(IX+%FFFFFFF0),BC
001CA8 C5E1                A  5896    	LD	HL,BC
001CAA 7E                  A  5897    	LD	A,(HL)
001CAB DD77FF              A  5898    	LD	(IX+%FFFFFFFF),A
                           A  5899    ; 2291			if (b == 0) {
001CAE B7                  A  5900    	OR	A,A
001CAF 20 0B               A  5901    	JR	NZ,L_377
                           A  5902    ; 2292				res = FR_NO_FILE; break; /*
001CB1 01040000            A  5903    	LD	BC,4
001CB5 DD0FFB              A  5904    	LD	(IX+%FFFFFFFB),BC
001CB8 C3 DD 1D 00         A  5905    	JR	L_383
                           A  5906    ; 2293			}
001CBC                     A  5907    L_377:
                           A  5908    ; 2294	#if FF_FS_EXFAT
                           A  5909    ; 2295			if (fs->fs_type == FS_EXFAT) {	
                           A  5910    ; 2296				if (FF_USE_LABEL && vol) {
                           A  5911    ; 2297					if (b == ET_VLABEL) bre
                           A  5912    ; 2298				} else {
                           A  5913    ; 2299					if (b == ET_FILEDIR) {	
                           A  5914    ; 2300						dp->blk_ofs = dp->d
                           A  5915    ; 2301						res = load_xdir(dp)
                           A  5916    ; 2302						if (res == FR_OK) {
                           A  5917    ; 2303							dp->obj.attr = 
                           A  5918    ; 2304						}
                           A  5919    ; 2305						break;
                           A  5920    ; 2306					}
                           A  5921    ; 2307				}
                           A  5922    ; 2308			} else
                           A  5923    ; 2309	#endif
                           A  5924    ; 2310			{	/* On the FAT/FAT32 volume 
                           A  5925    ; 2311				dp->obj.attr = attr = dp->d
001CBC DD31F0              A  5926    	LD	IY,(IX+%FFFFFFF0)
001CBF FD7E0B              A  5927    	LD	A,(IY+%B)
001CC2 E63F                A  5928    	AND	A,%3F
001CC4 DD77FA              A  5929    	LD	(IX+%FFFFFFFA),A
001CC7 DD3106              A  5930    	LD	IY,(IX+%6)
001CCA FD7705              A  5931    	LD	(IY+%5),A
                           A  5932    ; 2312	#if FF_USE_LFN		/* LFN configuratio
                           A  5933    ; 2313				if (b == DDEM || b == '.' |
001CCD DD7EFF              A  5934    	LD	A,(IX+%FFFFFFFF)
001CD0 FEE5                A  5935    	CP	A,%E5
001CD2 28 23               A  5936    	JR	Z,L_375
001CD4 DD7EFF              A  5937    	LD	A,(IX+%FFFFFFFF)
001CD7 FE2E                A  5938    	CP	A,%2E
001CD9 28 1C               A  5939    	JR	Z,L_375
001CDB DD7EFA              A  5940    	LD	A,(IX+%FFFFFFFA)
001CDE CBAF                A  5941    	RES	%5,A
001CE0 FE08                A  5942    	CP	A,%8
001CE2 20 04               A  5943    	JR	NZ,L__184
001CE4 0601                A  5944    	LD	B,%1
001CE6 18 02               A  5945    	JR	L__185
001CE8                     A  5946    L__184:
001CE8 0600                A  5947    	LD	B,%0
001CEA                     A  5948    L__185:
001CEA 78                  A  5949    	LD	A,B
001CEB 17ED62              A  5950    	SEXT	HL
001CEE 68                  A  5951    	LD	L,B
001CEF DD0709              A  5952    	LD	BC,(IX+%9)
001CF2 B7                  A  5953    	OR	A,A
001CF3 ED42                A  5954    	SBC	HL,BC
001CF5 28 08               A  5955    	JR	Z,L_376
001CF7                     A  5956    L_375:
                           A  5957    ; 2314					ord = 0xFF;
001CF7 DD36FEFF            A  5958    	LD	(IX+%FFFFFFFE),%FF
                           A  5959    ; 2315				} else {
001CFB C3 A9 1D 00         A  5960    	JR	L_378
001CFF                     A  5961    L_376:
                           A  5962    ; 2316					if (attr == AM_LFN) {	
001CFF DD7EFA              A  5963    	LD	A,(IX+%FFFFFFFA)
001D02 FE0F                A  5964    	CP	A,%F
001D04 20 7C               A  5965    	JR	NZ,L_374
                           A  5966    ; 2317						if (b & LLEF) {		
001D06 DD7EFF              A  5967    	LD	A,(IX+%FFFFFFFF)
001D09 E640                A  5968    	AND	A,%40
001D0B 28 26               A  5969    	JR	Z,L_369
                           A  5970    ; 2318							sum = dp->dir[L
001D0D DD3106              A  5971    	LD	IY,(IX+%6)
001D10 FD371B              A  5972    	LD	IY,(IY+%1B)
001D13 FD7E0D              A  5973    	LD	A,(IY+%D)
001D16 DD77F9              A  5974    	LD	(IX+%FFFFFFF9),A
                           A  5975    ; 2319							b &= (BYTE)~LLE
001D19 DD7EFF              A  5976    	LD	A,(IX+%FFFFFFFF)
001D1C CBB7                A  5977    	RES	%6,A
001D1E DD77FF              A  5978    	LD	(IX+%FFFFFFFF),A
001D21 DD77FE              A  5979    	LD	(IX+%FFFFFFFE),A
                           A  5980    ; 2320							dp->blk_ofs = d
001D24 DD3106              A  5981    	LD	IY,(IX+%6)
001D27 FD070F              A  5982    	LD	BC,(IY+%F)
001D2A FD7E12              A  5983    	LD	A,(IY+%12)
001D2D FD0F2A              A  5984    	LD	(IY+%2A),BC
001D30 FD772D              A  5985    	LD	(IY+%2D),A
                           A  5986    ; 2321						}
001D33                     A  5987    L_369:
                           A  5988    ; 2322						/* Check LFN validi
                           A  5989    ; 2323						ord = (b == ord && 
001D33 DD7EFF              A  5990    	LD	A,(IX+%FFFFFFFF)
001D36 DDBEFE              A  5991    	CP	A,(IX+%FFFFFFFE)
001D39 20 38               A  5992    	JR	NZ,L_367
001D3B DD3106              A  5993    	LD	IY,(IX+%6)
001D3E FD071B              A  5994    	LD	BC,(IY+%1B)
001D41 DD0FED              A  5995    	LD	(IX+%FFFFFFED),BC
001D44 DD31ED              A  5996    	LD	IY,(IX+%FFFFFFED)
001D47 FD7E0D              A  5997    	LD	A,(IY+%D)
001D4A DDBEF9              A  5998    	CP	A,(IX+%FFFFFFF9)
001D4D 20 24               A  5999    	JR	NZ,L_367
001D4F DD07ED              A  6000    	LD	BC,(IX+%FFFFFFED)
001D52 C5                  A  6001    	PUSH	BC
001D53 DD31F6              A  6002    	LD	IY,(IX+%FFFFFFF6)
001D56 FD070B              A  6003    	LD	BC,(IY+%B)
001D59 C5                  A  6004    	PUSH	BC
001D5A CD 2F 18 00         A  6005    	CALL	_pick_lfn
001D5E C1                  A  6006    	POP	BC
001D5F C1                  A  6007    	POP	BC
001D60 CD 00 00 00         A  6008    	CALL	__icmpzero
001D64 28 0D               A  6009    	JR	Z,L_367
001D66 DD7EFE              A  6010    	LD	A,(IX+%FFFFFFFE)
001D69 B7ED62              A  6011    	UEXT	HL
001D6C 6F                  A  6012    	LD	L,A
001D6D 2B                  A  6013    	DEC	HL
001D6E DD2FF3              A  6014    	LD	(IX+%FFFFFFF3),HL
001D71 18 07               A  6015    	JR	L_368
001D73                     A  6016    L_367:
001D73 01FF0000            A  6017    	LD	BC,255
001D77 DD0FF3              A  6018    	LD	(IX+%FFFFFFF3),BC
001D7A                     A  6019    L_368:
001D7A DD7EF3              A  6020    	LD	A,(IX+%FFFFFFF3)
001D7D DD77FE              A  6021    	LD	(IX+%FFFFFFFE),A
                           A  6022    ; 2324					} else {				
001D80 18 27               A  6023    	JR	L_378
001D82                     A  6024    L_374:
                           A  6025    ; 2325						if (ord != 0 || sum
001D82 DD7EFE              A  6026    	LD	A,(IX+%FFFFFFFE)
001D85 B7                  A  6027    	OR	A,A
001D86 20 11               A  6028    	JR	NZ,L_371
001D88 DD3106              A  6029    	LD	IY,(IX+%6)
001D8B FD071B              A  6030    	LD	BC,(IY+%1B)
001D8E C5                  A  6031    	PUSH	BC
001D8F CD 07 1C 00         A  6032    	CALL	_sum_sfn
001D93 C1                  A  6033    	POP	BC
001D94 DDBEF9              A  6034    	CP	A,(IX+%FFFFFFF9)
001D97 28 44               A  6035    	JR	Z,L_383
001D99                     A  6036    L_371:
                           A  6037    ; 2326							dp->blk_ofs = 0
001D99 01FFFFFF            A  6038    	LD	BC,16777215
001D9D DD3106              A  6039    	LD	IY,(IX+%6)
001DA0 FD0F2A              A  6040    	LD	(IY+%2A),BC
001DA3 FD362DFF            A  6041    	LD	(IY+%2D),%FF
                           A  6042    ; 2327						}
                           A  6043    ; 2328						break;
001DA7 18 34               A  6044    	JR	L_383
                           A  6045    ; 2329					}
                           A  6046    ; 2330				}
                           A  6047    ; 2331	#else		/* Non LFN configuration */
                           A  6048    ; 2332				if (b != DDEM && b != '.' &
                           A  6049    ; 2333					break;
                           A  6050    ; 2334				}
                           A  6051    ; 2335	#endif
                           A  6052    ; 2336			}
001DA9                     A  6053    L_378:
                           A  6054    ; 2337			res = dir_next(dp, 0);		/* 
001DA9 01000000            A  6055    	LD	BC,0
001DAD C5                  A  6056    	PUSH	BC
001DAE DD0706              A  6057    	LD	BC,(IX+%6)
001DB1 C5                  A  6058    	PUSH	BC
001DB2 CD 19 13 00         A  6059    	CALL	_dir_next
001DB6 C1                  A  6060    	POP	BC
001DB7 C1                  A  6061    	POP	BC
001DB8 DD2FFB              A  6062    	LD	(IX+%FFFFFFFB),HL
                           A  6063    ; 2338			if (res != FR_OK) break;
001DBB CD 00 00 00         A  6064    	CALL	__icmpzero
001DBF 20 1C               A  6065    	JR	NZ,L_383
                           A  6066    ; 2339		}
001DC1                     A  6067    L_380:
001DC1 DD3106              A  6068    	LD	IY,(IX+%6)
001DC4 FD0717              A  6069    	LD	BC,(IY+%17)
001DC7 FD7E1A              A  6070    	LD	A,(IY+%1A)
001DCA DD0FE9              A  6071    	LD	(IX+%FFFFFFE9),BC
001DCD DD77EC              A  6072    	LD	(IX+%FFFFFFEC),A
001DD0 C5E1                A  6073    	LD	HL,BC
001DD2 DD5EEC              A  6074    	LD	E,(IX+%FFFFFFEC)
001DD5 CD 00 00 00         A  6075    	CALL	__lcmpzero
001DD9 C2 7F 1C 00         A  6076    	JR	NZ,L_381
001DDD                     A  6077    L_383:
                           A  6078    ; 2340	
                           A  6079    ; 2341		if (res != FR_OK) dp->sect = 0;		
001DDD DD27FB              A  6080    	LD	HL,(IX+%FFFFFFFB)
001DE0 CD 00 00 00         A  6081    	CALL	__icmpzero
001DE4 28 0E               A  6082    	JR	Z,L_384
001DE6 01000000            A  6083    	LD	BC,0
001DEA DD3106              A  6084    	LD	IY,(IX+%6)
001DED FD0F17              A  6085    	LD	(IY+%17),BC
001DF0 FD361A00            A  6086    	LD	(IY+%1A),%0
001DF4                     A  6087    L_384:
                           A  6088    ; 2342		return res;
001DF4 DD27FB              A  6089    	LD	HL,(IX+%FFFFFFFB)
                           A  6090    ; 2343	}
001DF7 DDF9                A  6091    	LD	SP,IX
001DF9 DDE1                A  6092    	POP	IX
001DFB C9                  A  6093    	RET	
                           A  6094    
                           A  6095    
                           A  6096    ;**************************** _dir_read *******
                           A  6097    ;Name                         Addr/Register   S
                           A  6098    ;G_15                                 IX-23    
                           A  6099    ;G_17                                 IX-19    
                           A  6100    ;G_16                                 IX-16    
                           A  6101    ;temp365                              IX-13    
                           A  6102    ;fs                                   IX-10    
                           A  6103    ;sum                                   IX-7    
                           A  6104    ;attr                                  IX-6    
                           A  6105    ;res                                   IX-5    
                           A  6106    ;ord                                   IX-2    
                           A  6107    ;b                                     IX-1    
                           A  6108    ;vol                                   IX+9    
                           A  6109    ;dp                                    IX+6    
                           A  6110    
                           A  6111    
                           A  6112    ; Stack Frame Size: 35 (bytes)
                           A  6113    ;       Spill Code: 0 (instruction)
                           A  6114    
                           A  6115    
                           A  6116    ; 2344	
                           A  6117    ; 2345	#endif	/* FF_FS_MINIMIZE <= 1 || FF_US
                           A  6118    ; 2346	
                           A  6119    ; 2347	
                           A  6120    ; 2348	
                           A  6121    ; 2349	/*-------------------------------------
                           A  6122    ; 2350	/* Directory handling - Find an object 
                           A  6123    ; 2351	/*-------------------------------------
                           A  6124    ; 2352	
                           A  6125    ; 2353	static FRESULT dir_find (	/* FR_OK(0)
                           A  6126    ; 2354		DIR* dp					/* Pointer 
                           A  6127    ; 2355	)
                           A  6128    ; 2356	{
001DFC                     A  6129    _dir_find:
001DFC 21EAFFFF            A  6130    	LD	HL,-22
001E00 CD 00 00 00         A  6131    	CALL	__frameset
                           A  6132    ; 2357		FRESULT res;
                           A  6133    ; 2358		FATFS *fs = dp->obj.fs;
001E04 DD3106              A  6134    	LD	IY,(IX+%6)
001E07 FD0700              A  6135    	LD	BC,(IY+%0)
001E0A DD0FF6              A  6136    	LD	(IX+%FFFFFFF6),BC
                           A  6137    ; 2359		BYTE c;
                           A  6138    ; 2360	#if FF_USE_LFN
                           A  6139    ; 2361		BYTE a, ord, sum;
                           A  6140    ; 2362	#endif
                           A  6141    ; 2363	
                           A  6142    ; 2364		res = dir_sdi(dp, 0);			/* 
001E0D 01000000            A  6143    	LD	BC,0
001E11 C5                  A  6144    	PUSH	BC
001E12 C5                  A  6145    	PUSH	BC
001E13 DD0706              A  6146    	LD	BC,(IX+%6)
001E16 C5                  A  6147    	PUSH	BC
001E17 CD 18 11 00         A  6148    	CALL	_dir_sdi
001E1B C1                  A  6149    	POP	BC
001E1C C1                  A  6150    	POP	BC
001E1D C1                  A  6151    	POP	BC
001E1E DD2FFB              A  6152    	LD	(IX+%FFFFFFFB),HL
                           A  6153    ; 2365		if (res != FR_OK) return res;
001E21 CD 00 00 00         A  6154    	CALL	__icmpzero
001E25 28 07               A  6155    	JR	Z,L_387
001E27 DD27FB              A  6156    	LD	HL,(IX+%FFFFFFFB)
001E2A C3 C8 1F 00         A  6157    	JR	L_417
001E2E                     A  6158    L_387:
                           A  6159    ; 2366	#if FF_FS_EXFAT
                           A  6160    ; 2367		if (fs->fs_type == FS_EXFAT) {	/* 
                           A  6161    ; 2368			BYTE nc;
                           A  6162    ; 2369			UINT di, ni;
                           A  6163    ; 2370			WORD hash = xname_sum(fs->lfnbu
                           A  6164    ; 2371	
                           A  6165    ; 2372			while ((res = DIR_READ_FILE(dp)
                           A  6166    ; 2373	#if FF_MAX_LFN < 255
                           A  6167    ; 2374				if (fs->dirbuf[XDIR_NumName
                           A  6168    ; 2375	#endif
                           A  6169    ; 2376				if (ld_word(fs->dirbuf + XD
                           A  6170    ; 2377				for (nc = fs->dirbuf[XDIR_N
                           A  6171    ; 2378					if ((di % SZDIRE) == 0)
                           A  6172    ; 2379					if (ff_wtoupper(ld_word
                           A  6173    ; 2380				}
                           A  6174    ; 2381				if (nc == 0 && !fs->lfnbuf[
                           A  6175    ; 2382			}
                           A  6176    ; 2383			return res;
                           A  6177    ; 2384		}
                           A  6178    ; 2385	#endif
                           A  6179    ; 2386		/* On the FAT/FAT32 volume */
                           A  6180    ; 2387	#if FF_USE_LFN
                           A  6181    ; 2388		ord = sum = 0xFF; dp->blk_ofs = 0xF
001E2E DD36F9FF            A  6182    	LD	(IX+%FFFFFFF9),%FF
001E32 DD36FEFF            A  6183    	LD	(IX+%FFFFFFFE),%FF
001E36 01FFFFFF            A  6184    	LD	BC,16777215
001E3A DD3106              A  6185    	LD	IY,(IX+%6)
001E3D FD0F2A              A  6186    	LD	(IY+%2A),BC
001E40 FD362DFF            A  6187    	LD	(IY+%2D),%FF
                           A  6188    ; 2389	#endif
                           A  6189    ; 2390		do {
001E44                     A  6190    L_414:
                           A  6191    ; 2391			res = move_window(fs, dp->sect)
001E44 DD3106              A  6192    	LD	IY,(IX+%6)
001E47 FD0717              A  6193    	LD	BC,(IY+%17)
001E4A FD7E1A              A  6194    	LD	A,(IY+%1A)
001E4D 2600                A  6195    	LD	H,%0
001E4F 6F                  A  6196    	LD	L,A
001E50 E5                  A  6197    	PUSH	HL
001E51 C5                  A  6198    	PUSH	BC
001E52 DD07F6              A  6199    	LD	BC,(IX+%FFFFFFF6)
001E55 C5                  A  6200    	PUSH	BC
001E56 CD A6 03 00         A  6201    	CALL	_move_window
001E5A C1                  A  6202    	POP	BC
001E5B C1                  A  6203    	POP	BC
001E5C C1                  A  6204    	POP	BC
001E5D DD2FFB              A  6205    	LD	(IX+%FFFFFFFB),HL
                           A  6206    ; 2392			if (res != FR_OK) break;
001E60 CD 00 00 00         A  6207    	CALL	__icmpzero
001E64 C2 C5 1F 00         A  6208    	JR	NZ,L_416
                           A  6209    ; 2393			c = dp->dir[DIR_Name];
001E68 DD3106              A  6210    	LD	IY,(IX+%6)
001E6B FD071B              A  6211    	LD	BC,(IY+%1B)
001E6E DD0FF0              A  6212    	LD	(IX+%FFFFFFF0),BC
001E71 C5E1                A  6213    	LD	HL,BC
001E73 7E                  A  6214    	LD	A,(HL)
001E74 DD77FF              A  6215    	LD	(IX+%FFFFFFFF),A
                           A  6216    ; 2394			if (c == 0) { res = FR_NO_FILE;
001E77 B7                  A  6217    	OR	A,A
001E78 20 0B               A  6218    	JR	NZ,L_391
001E7A 01040000            A  6219    	LD	BC,4
001E7E DD0FFB              A  6220    	LD	(IX+%FFFFFFFB),BC
001E81 C3 C5 1F 00         A  6221    	JR	L_416
001E85                     A  6222    L_391:
                           A  6223    ; 2395	#if FF_USE_LFN		/* LFN configuratio
                           A  6224    ; 2396			dp->obj.attr = a = dp->dir[DIR_
001E85 DD31F0              A  6225    	LD	IY,(IX+%FFFFFFF0)
001E88 FD7E0B              A  6226    	LD	A,(IY+%B)
001E8B E63F                A  6227    	AND	A,%3F
001E8D DD77FA              A  6228    	LD	(IX+%FFFFFFFA),A
001E90 DD3106              A  6229    	LD	IY,(IX+%6)
001E93 FD7705              A  6230    	LD	(IY+%5),A
                           A  6231    ; 2397			if (c == DDEM || ((a & AM_VOL) 
001E96 DD7EFF              A  6232    	LD	A,(IX+%FFFFFFFF)
001E99 FEE5                A  6233    	CP	A,%E5
001E9B 28 0E               A  6234    	JR	Z,L_411
001E9D DD7EFA              A  6235    	LD	A,(IX+%FFFFFFFA)
001EA0 E608                A  6236    	AND	A,%8
001EA2 28 1D               A  6237    	JR	Z,L_412
001EA4 DD7EFA              A  6238    	LD	A,(IX+%FFFFFFFA)
001EA7 FE0F                A  6239    	CP	A,%F
001EA9 28 16               A  6240    	JR	Z,L_412
001EAB                     A  6241    L_411:
                           A  6242    ; 2398				ord = 0xFF; dp->blk_ofs = 0
001EAB DD36FEFF            A  6243    	LD	(IX+%FFFFFFFE),%FF
001EAF 01FFFFFF            A  6244    	LD	BC,16777215
001EB3 DD3106              A  6245    	LD	IY,(IX+%6)
001EB6 FD0F2A              A  6246    	LD	(IY+%2A),BC
001EB9 FD362DFF            A  6247    	LD	(IY+%2D),%FF
                           A  6248    ; 2399			} else {
001EBD C3 AB 1F 00         A  6249    	JR	L_413
001EC1                     A  6250    L_412:
                           A  6251    ; 2400				if (a == AM_LFN) {			
001EC1 DD7EFA              A  6252    	LD	A,(IX+%FFFFFFFA)
001EC4 FE0F                A  6253    	CP	A,%F
001EC6 C2 52 1F 00         A  6254    	JR	NZ,L_410
                           A  6255    ; 2401					if (!(dp->fn[NSFLAG] & 
001ECA DD3106              A  6256    	LD	IY,(IX+%6)
001ECD FD7E29              A  6257    	LD	A,(IY+%29)
001ED0 E640                A  6258    	AND	A,%40
001ED2 C2 AB 1F 00         A  6259    	JR	NZ,L_413
                           A  6260    ; 2402						if (c & LLEF) {		
001ED6 DD7EFF              A  6261    	LD	A,(IX+%FFFFFFFF)
001ED9 E640                A  6262    	AND	A,%40
001EDB 28 26               A  6263    	JR	Z,L_401
                           A  6264    ; 2403							sum = dp->dir[L
001EDD DD3106              A  6265    	LD	IY,(IX+%6)
001EE0 FD371B              A  6266    	LD	IY,(IY+%1B)
001EE3 FD7E0D              A  6267    	LD	A,(IY+%D)
001EE6 DD77F9              A  6268    	LD	(IX+%FFFFFFF9),A
                           A  6269    ; 2404							c &= (BYTE)~LLE
001EE9 DD7EFF              A  6270    	LD	A,(IX+%FFFFFFFF)
001EEC CBB7                A  6271    	RES	%6,A
001EEE DD77FF              A  6272    	LD	(IX+%FFFFFFFF),A
001EF1 DD77FE              A  6273    	LD	(IX+%FFFFFFFE),A
                           A  6274    ; 2405							dp->blk_ofs = d
001EF4 DD3106              A  6275    	LD	IY,(IX+%6)
001EF7 FD070F              A  6276    	LD	BC,(IY+%F)
001EFA FD7E12              A  6277    	LD	A,(IY+%12)
001EFD FD0F2A              A  6278    	LD	(IY+%2A),BC
001F00 FD772D              A  6279    	LD	(IY+%2D),A
                           A  6280    ; 2406						}
001F03                     A  6281    L_401:
                           A  6282    ; 2407						/* Check validity o
                           A  6283    ; 2408						ord = (c == ord && 
001F03 DD7EFF              A  6284    	LD	A,(IX+%FFFFFFFF)
001F06 DDBEFE              A  6285    	CP	A,(IX+%FFFFFFFE)
001F09 20 38               A  6286    	JR	NZ,L_399
001F0B DD3106              A  6287    	LD	IY,(IX+%6)
001F0E FD071B              A  6288    	LD	BC,(IY+%1B)
001F11 DD0FED              A  6289    	LD	(IX+%FFFFFFED),BC
001F14 DD31ED              A  6290    	LD	IY,(IX+%FFFFFFED)
001F17 FD7E0D              A  6291    	LD	A,(IY+%D)
001F1A DDBEF9              A  6292    	CP	A,(IX+%FFFFFFF9)
001F1D 20 24               A  6293    	JR	NZ,L_399
001F1F DD07ED              A  6294    	LD	BC,(IX+%FFFFFFED)
001F22 C5                  A  6295    	PUSH	BC
001F23 DD31F6              A  6296    	LD	IY,(IX+%FFFFFFF6)
001F26 FD070B              A  6297    	LD	BC,(IY+%B)
001F29 C5                  A  6298    	PUSH	BC
001F2A CD 06 17 00         A  6299    	CALL	_cmp_lfn
001F2E C1                  A  6300    	POP	BC
001F2F C1                  A  6301    	POP	BC
001F30 CD 00 00 00         A  6302    	CALL	__icmpzero
001F34 28 0D               A  6303    	JR	Z,L_399
001F36 DD7EFE              A  6304    	LD	A,(IX+%FFFFFFFE)
001F39 B7ED62              A  6305    	UEXT	HL
001F3C 6F                  A  6306    	LD	L,A
001F3D 2B                  A  6307    	DEC	HL
001F3E DD2FF3              A  6308    	LD	(IX+%FFFFFFF3),HL
001F41 18 07               A  6309    	JR	L_400
001F43                     A  6310    L_399:
001F43 01FF0000            A  6311    	LD	BC,255
001F47 DD0FF3              A  6312    	LD	(IX+%FFFFFFF3),BC
001F4A                     A  6313    L_400:
001F4A DD7EF3              A  6314    	LD	A,(IX+%FFFFFFF3)
001F4D DD77FE              A  6315    	LD	(IX+%FFFFFFFE),A
                           A  6316    ; 2409					}
                           A  6317    ; 2410				} else {					
001F50 18 59               A  6318    	JR	L_413
001F52                     A  6319    L_410:
                           A  6320    ; 2411					if (ord == 0 && sum == 
001F52 DD7EFE              A  6321    	LD	A,(IX+%FFFFFFFE)
001F55 B7                  A  6322    	OR	A,A
001F56 20 11               A  6323    	JR	NZ,L_407
001F58 DD3106              A  6324    	LD	IY,(IX+%6)
001F5B FD071B              A  6325    	LD	BC,(IY+%1B)
001F5E C5                  A  6326    	PUSH	BC
001F5F CD 07 1C 00         A  6327    	CALL	_sum_sfn
001F63 C1                  A  6328    	POP	BC
001F64 DDBEF9              A  6329    	CP	A,(IX+%FFFFFFF9)
001F67 28 5C               A  6330    	JR	Z,L_416
001F69                     A  6331    L_407:
                           A  6332    ; 2412					if (!(dp->fn[NSFLAG] & 
001F69 DD3106              A  6333    	LD	IY,(IX+%6)
001F6C ED031E              A  6334    	LEA	BC,IY+%1E
001F6F DD0FEA              A  6335    	LD	(IX+%FFFFFFEA),BC
001F72 DD31EA              A  6336    	LD	IY,(IX+%FFFFFFEA)
001F75 FD7E0B              A  6337    	LD	A,(IY+%B)
001F78 E601                A  6338    	AND	A,%1
001F7A 20 1D               A  6339    	JR	NZ,L_408
001F7C 010B0000            A  6340    	LD	BC,11
001F80 C5                  A  6341    	PUSH	BC
001F81 DD07EA              A  6342    	LD	BC,(IX+%FFFFFFEA)
001F84 C5                  A  6343    	PUSH	BC
001F85 DD3106              A  6344    	LD	IY,(IX+%6)
001F88 FD071B              A  6345    	LD	BC,(IY+%1B)
001F8B C5                  A  6346    	PUSH	BC
001F8C CD 00 00 00         A  6347    	CALL	_memcmp
001F90 C1                  A  6348    	POP	BC
001F91 C1                  A  6349    	POP	BC
001F92 C1                  A  6350    	POP	BC
001F93 CD 00 00 00         A  6351    	CALL	__icmpzero
001F97 28 2C               A  6352    	JR	Z,L_416
001F99                     A  6353    L_408:
                           A  6354    ; 2413					ord = 0xFF; dp->blk_ofs
001F99 DD36FEFF            A  6355    	LD	(IX+%FFFFFFFE),%FF
001F9D 01FFFFFF            A  6356    	LD	BC,16777215
001FA1 DD3106              A  6357    	LD	IY,(IX+%6)
001FA4 FD0F2A              A  6358    	LD	(IY+%2A),BC
001FA7 FD362DFF            A  6359    	LD	(IY+%2D),%FF
                           A  6360    ; 2414				}
                           A  6361    ; 2415			}
001FAB                     A  6362    L_413:
                           A  6363    ; 2416	#else		/* Non LFN configuration */
                           A  6364    ; 2417			dp->obj.attr = dp->dir[DIR_Attr
                           A  6365    ; 2418			if (!(dp->dir[DIR_Attr] & AM_VO
                           A  6366    ; 2419	#endif
                           A  6367    ; 2420			res = dir_next(dp, 0);	/* Next
001FAB 01000000            A  6368    	LD	BC,0
001FAF C5                  A  6369    	PUSH	BC
001FB0 DD0706              A  6370    	LD	BC,(IX+%6)
001FB3 C5                  A  6371    	PUSH	BC
001FB4 CD 19 13 00         A  6372    	CALL	_dir_next
001FB8 C1                  A  6373    	POP	BC
001FB9 C1                  A  6374    	POP	BC
001FBA DD2FFB              A  6375    	LD	(IX+%FFFFFFFB),HL
                           A  6376    ; 2421		} while (res == FR_OK);
001FBD CD 00 00 00         A  6377    	CALL	__icmpzero
001FC1 CA 44 1E 00         A  6378    	JR	Z,L_414
001FC5                     A  6379    L_416:
                           A  6380    ; 2422	
                           A  6381    ; 2423		return res;
001FC5 DD27FB              A  6382    	LD	HL,(IX+%FFFFFFFB)
                           A  6383    ; 2424	}
001FC8                     A  6384    L_417:
001FC8 DDF9                A  6385    	LD	SP,IX
001FCA DDE1                A  6386    	POP	IX
001FCC C9                  A  6387    	RET	
                           A  6388    
                           A  6389    
                           A  6390    ;**************************** _dir_find *******
                           A  6391    ;Name                         Addr/Register   S
                           A  6392    ;_memcmp                             IMPORT  --
                           A  6393    ;G_20                                 IX-22    
                           A  6394    ;G_19                                 IX-19    
                           A  6395    ;G_18                                 IX-16    
                           A  6396    ;temp397                              IX-13    
                           A  6397    ;fs                                   IX-10    
                           A  6398    ;sum                                   IX-7    
                           A  6399    ;a                                     IX-6    
                           A  6400    ;res                                   IX-5    
                           A  6401    ;ord                                   IX-2    
                           A  6402    ;c                                     IX-1    
                           A  6403    ;dp                                    IX+6    
                           A  6404    
                           A  6405    
                           A  6406    ; Stack Frame Size: 31 (bytes)
                           A  6407    ;       Spill Code: 0 (instruction)
                           A  6408    
                           A  6409    
                           A  6410    ; 2425	
                           A  6411    ; 2426	
                           A  6412    ; 2427	
                           A  6413    ; 2428	
                           A  6414    ; 2429	#if !FF_FS_READONLY
                           A  6415    ; 2430	/*-------------------------------------
                           A  6416    ; 2431	/* Register an object to the directory 
                           A  6417    ; 2432	/*-------------------------------------
                           A  6418    ; 2433	
                           A  6419    ; 2434	static FRESULT dir_register (	/* FR_O
                           A  6420    ; 2435		DIR* dp						/* Targ
                           A  6421    ; 2436	)
                           A  6422    ; 2437	{
001FCD                     A  6423    _dir_register:
001FCD 21DEFFFF            A  6424    	LD	HL,-34
001FD1 CD 00 00 00         A  6425    	CALL	__frameset
                           A  6426    ; 2438		FRESULT res;
                           A  6427    ; 2439		FATFS *fs = dp->obj.fs;
001FD5 DD3106              A  6428    	LD	IY,(IX+%6)
001FD8 FD0700              A  6429    	LD	BC,(IY+%0)
001FDB DD0FF7              A  6430    	LD	(IX+%FFFFFFF7),BC
                           A  6431    ; 2440	#if FF_USE_LFN		/* LFN configuratio
                           A  6432    ; 2441		UINT n, len, n_ent;
                           A  6433    ; 2442		BYTE sn[12], sum;
                           A  6434    ; 2443	
                           A  6435    ; 2444	
                           A  6436    ; 2445		if (dp->fn[NSFLAG] & (NS_DOT | NS_N
001FDE FD7E29              A  6437    	LD	A,(IY+%29)
001FE1 E6A0                A  6438    	AND	A,%A0
001FE3 28 08               A  6439    	JR	Z,L_423
001FE5 21060000            A  6440    	LD	HL,6
001FE9 C3 3A 22 00         A  6441    	JR	L_453
001FED                     A  6442    L_423:
                           A  6443    ; 2446		for (len = 0; fs->lfnbuf[len]; len+
001FED 01000000            A  6444    	LD	BC,0
001FF1 DD0FF1              A  6445    	LD	(IX+%FFFFFFF1),BC
001FF4 18 07               A  6446    	JR	L_422
001FF6                     A  6447    L_420:
001FF6 DD07F1              A  6448    	LD	BC,(IX+%FFFFFFF1)
001FF9 03                  A  6449    	INC	BC
001FFA DD0FF1              A  6450    	LD	(IX+%FFFFFFF1),BC
001FFD                     A  6451    L_422:
001FFD DD27F1              A  6452    	LD	HL,(IX+%FFFFFFF1)
002000 29                  A  6453    	ADD	HL,HL
002001 DD31F7              A  6454    	LD	IY,(IX+%FFFFFFF7)
002004 FD070B              A  6455    	LD	BC,(IY+%B)
002007 09                  A  6456    	ADD	HL,BC
002008 ED27                A  6457    	LD	HL,(HL)
00200A CD 00 00 00         A  6458    	CALL	__scmpzero
00200E 20 E6               A  6459    	JR	NZ,L_420
                           A  6460    ; 2447	
                           A  6461    ; 2448	#if FF_FS_EXFAT
                           A  6462    ; 2449		if (fs->fs_type == FS_EXFAT) {	/* 
                           A  6463    ; 2450			n_ent = (len + 14) / 15 + 2;	
                           A  6464    ; 2451			res = dir_alloc(dp, n_ent);		
                           A  6465    ; 2452			if (res != FR_OK) return res;
                           A  6466    ; 2453			dp->blk_ofs = dp->dptr - SZDIRE
                           A  6467    ; 2454	
                           A  6468    ; 2455			if (dp->obj.stat & 4) {			
                           A  6469    ; 2456				dp->obj.stat &= ~4;
                           A  6470    ; 2457				res = fill_first_frag(&dp->
                           A  6471    ; 2458				if (res != FR_OK) return re
                           A  6472    ; 2459				res = fill_last_frag(&dp->o
                           A  6473    ; 2460				if (res != FR_OK) return re
                           A  6474    ; 2461				if (dp->obj.sclust != 0) {	
                           A  6475    ; 2462					DIR dj;
                           A  6476    ; 2463	
                           A  6477    ; 2464					res = load_obj_xdir(&dj
                           A  6478    ; 2465					if (res != FR_OK) retur
                           A  6479    ; 2466					dp->obj.objsize += (DWO
                           A  6480    ; 2467					st_qword(fs->dirbuf + X
                           A  6481    ; 2468					st_qword(fs->dirbuf + X
                           A  6482    ; 2469					fs->dirbuf[XDIR_GenFlag
                           A  6483    ; 2470					res = store_xdir(&dj);	
                           A  6484    ; 2471					if (res != FR_OK) retur
                           A  6485    ; 2472				}
                           A  6486    ; 2473			}
                           A  6487    ; 2474	
                           A  6488    ; 2475			create_xdir(fs->dirbuf, fs->lfn
                           A  6489    ; 2476			return FR_OK;
                           A  6490    ; 2477		}
                           A  6491    ; 2478	#endif
                           A  6492    ; 2479		/* On the FAT/FAT32 volume */
                           A  6493    ; 2480		memcpy(sn, dp->fn, 12);
002010 010C0000            A  6494    	LD	BC,12
002014 C5                  A  6495    	PUSH	BC
002015 DD3106              A  6496    	LD	IY,(IX+%6)
002018 ED661E              A  6497    	PEA	IY+%1E
00201B ED65DE              A  6498    	PEA	IX+%FFFFFFDE
00201E CD 00 00 00         A  6499    	CALL	_memcpy
002022 C1                  A  6500    	POP	BC
002023 C1                  A  6501    	POP	BC
002024 C1                  A  6502    	POP	BC
                           A  6503    ; 2481		if (sn[NSFLAG] & NS_LOSS) {			
002025 ED55DE              A  6504    	LEA	IY,IX+%FFFFFFDE
002028 ED030B              A  6505    	LEA	BC,IY+%B
00202B DD0FEA              A  6506    	LD	(IX+%FFFFFFEA),BC
00202E FD7E0B              A  6507    	LD	A,(IY+%B)
002031 E601                A  6508    	AND	A,%1
002033 CA C0 20 00         A  6509    	JR	Z,L_440
                           A  6510    ; 2482			dp->fn[NSFLAG] = NS_NOLFN;		
002037 DD3106              A  6511    	LD	IY,(IX+%6)
00203A ED2329              A  6512    	LEA	HL,IY+%29
00203D 3640                A  6513    	LD	(HL),%40
                           A  6514    ; 2483			for (n = 1; n < 100; n++) {
00203F 01010000            A  6515    	LD	BC,1
002043 DD0FF4              A  6516    	LD	(IX+%FFFFFFF4),BC
002046 18 35               A  6517    	JR	L_429
002048                     A  6518    L_427:
                           A  6519    ; 2484				gen_numname(dp->fn, sn, fs-
002048 DD07F4              A  6520    	LD	BC,(IX+%FFFFFFF4)
00204B C5                  A  6521    	PUSH	BC
00204C DD31F7              A  6522    	LD	IY,(IX+%FFFFFFF7)
00204F FD070B              A  6523    	LD	BC,(IY+%B)
002052 C5                  A  6524    	PUSH	BC
002053 ED65DE              A  6525    	PEA	IX+%FFFFFFDE
002056 DD3106              A  6526    	LD	IY,(IX+%6)
002059 ED661E              A  6527    	PEA	IY+%1E
00205C CD 0C 1A 00         A  6528    	CALL	_gen_numname
002060 C1                  A  6529    	POP	BC
002061 C1                  A  6530    	POP	BC
002062 C1                  A  6531    	POP	BC
002063 C1                  A  6532    	POP	BC
                           A  6533    ; 2485				res = dir_find(dp);			
002064 DD0706              A  6534    	LD	BC,(IX+%6)
002067 C5                  A  6535    	PUSH	BC
002068 CD FC 1D 00         A  6536    	CALL	_dir_find
00206C C1                  A  6537    	POP	BC
00206D DD2FFD              A  6538    	LD	(IX+%FFFFFFFD),HL
                           A  6539    ; 2486				if (res != FR_OK) break;
002070 CD 00 00 00         A  6540    	CALL	__icmpzero
002074 20 13               A  6541    	JR	NZ,L_431
002076 DD07F4              A  6542    	LD	BC,(IX+%FFFFFFF4)
002079 03                  A  6543    	INC	BC
00207A DD0FF4              A  6544    	LD	(IX+%FFFFFFF4),BC
                           A  6545    ; 2487			}
00207D                     A  6546    L_429:
00207D 01640000            A  6547    	LD	BC,100
002081 DD27F4              A  6548    	LD	HL,(IX+%FFFFFFF4)
002084 B7                  A  6549    	OR	A,A
002085 ED42                A  6550    	SBC	HL,BC
002087 38 BF               A  6551    	JR	C,L_427
002089                     A  6552    L_431:
                           A  6553    ; 2488			if (n == 100) return FR_DENIED;
002089 01640000            A  6554    	LD	BC,100
00208D DD27F4              A  6555    	LD	HL,(IX+%FFFFFFF4)
002090 B7                  A  6556    	OR	A,A
002091 ED42                A  6557    	SBC	HL,BC
002093 20 08               A  6558    	JR	NZ,L_433
002095 21070000            A  6559    	LD	HL,7
002099 C3 3A 22 00         A  6560    	JR	L_453
00209D                     A  6561    L_433:
                           A  6562    ; 2489			if (res != FR_NO_FILE) return r
00209D 01040000            A  6563    	LD	BC,4
0020A1 DD27FD              A  6564    	LD	HL,(IX+%FFFFFFFD)
0020A4 B7                  A  6565    	OR	A,A
0020A5 ED42                A  6566    	SBC	HL,BC
0020A7 28 07               A  6567    	JR	Z,L_434
0020A9 DD27FD              A  6568    	LD	HL,(IX+%FFFFFFFD)
0020AC C3 3A 22 00         A  6569    	JR	L_453
0020B0                     A  6570    L_434:
                           A  6571    ; 2490			dp->fn[NSFLAG] = sn[NSFLAG];
0020B0 ED02E9              A  6572    	LEA	BC,IX+%FFFFFFE9
0020B3 DD0FEA              A  6573    	LD	(IX+%FFFFFFEA),BC
0020B6 ED22E9              A  6574    	LEA	HL,IX+%FFFFFFE9
0020B9 DD3106              A  6575    	LD	IY,(IX+%6)
0020BC 7E                  A  6576    	LD	A,(HL)
0020BD FD7729              A  6577    	LD	(IY+%29),A
                           A  6578    ; 2491		}
0020C0                     A  6579    L_440:
                           A  6580    ; 2492	
                           A  6581    ; 2493		/* Create an SFN with/without LFNs.
                           A  6582    ; 2494		n_ent = (sn[NSFLAG] & NS_LFN) ? (le
0020C0 DD27EA              A  6583    	LD	HL,(IX+%FFFFFFEA)
0020C3 7E                  A  6584    	LD	A,(HL)
0020C4 E602                A  6585    	AND	A,%2
0020C6 28 14               A  6586    	JR	Z,L_438
0020C8 DD31F1              A  6587    	LD	IY,(IX+%FFFFFFF1)
0020CB ED230C              A  6588    	LEA	HL,IY+%C
0020CE 010D0000            A  6589    	LD	BC,13
0020D2 CD 00 00 00         A  6590    	CALL	__idivu
0020D6 23                  A  6591    	INC	HL
0020D7 DD2FED              A  6592    	LD	(IX+%FFFFFFED),HL
0020DA 18 07               A  6593    	JR	L_439
0020DC                     A  6594    L_438:
0020DC 01010000            A  6595    	LD	BC,1
0020E0 DD0FED              A  6596    	LD	(IX+%FFFFFFED),BC
0020E3                     A  6597    L_439:
0020E3 DD07ED              A  6598    	LD	BC,(IX+%FFFFFFED)
0020E6 DD0FFA              A  6599    	LD	(IX+%FFFFFFFA),BC
                           A  6600    ; 2495		res = dir_alloc(dp, n_ent);		/* 
0020E9 C5                  A  6601    	PUSH	BC
0020EA DD0706              A  6602    	LD	BC,(IX+%6)
0020ED C5                  A  6603    	PUSH	BC
0020EE CD A2 15 00         A  6604    	CALL	_dir_alloc
0020F2 C1                  A  6605    	POP	BC
0020F3 C1                  A  6606    	POP	BC
0020F4 DD2FFD              A  6607    	LD	(IX+%FFFFFFFD),HL
                           A  6608    ; 2496		if (res == FR_OK && --n_ent) {	/* 
0020F7 CD 00 00 00         A  6609    	CALL	__icmpzero
0020FB C2 C7 21 00         A  6610    	JR	NZ,L_451
0020FF DD31FA              A  6611    	LD	IY,(IX+%FFFFFFFA)
002102 ED33FF              A  6612    	LEA	IY,IY+%FFFFFFFF
002105 DD3EFA              A  6613    	LD	(IX+%FFFFFFFA),IY
002108 DD27FA              A  6614    	LD	HL,(IX+%FFFFFFFA)
00210B CD 00 00 00         A  6615    	CALL	__icmpzero
00210F CA C7 21 00         A  6616    	JR	Z,L_451
                           A  6617    ; 2497			res = dir_sdi(dp, dp->dptr - n_
002113 DD27FA              A  6618    	LD	HL,(IX+%FFFFFFFA)
002116 29                  A  6619    	ADD	HL,HL
002117 29                  A  6620    	ADD	HL,HL
002118 29                  A  6621    	ADD	HL,HL
002119 29                  A  6622    	ADD	HL,HL
00211A 29                  A  6623    	ADD	HL,HL
00211B E5C1                A  6624    	LD	BC,HL
00211D AF                  A  6625    	XOR	A,A
00211E DD3106              A  6626    	LD	IY,(IX+%6)
002121 FD270F              A  6627    	LD	HL,(IY+%F)
002124 FD5E12              A  6628    	LD	E,(IY+%12)
002127 CD 00 00 00         A  6629    	CALL	__lsub
00212B 4B                  A  6630    	LD	C,E
00212C 0600                A  6631    	LD	B,%0
00212E C5                  A  6632    	PUSH	BC
00212F E5                  A  6633    	PUSH	HL
002130 DD0706              A  6634    	LD	BC,(IX+%6)
002133 C5                  A  6635    	PUSH	BC
002134 CD 18 11 00         A  6636    	CALL	_dir_sdi
002138 C1                  A  6637    	POP	BC
002139 C1                  A  6638    	POP	BC
00213A C1                  A  6639    	POP	BC
00213B DD2FFD              A  6640    	LD	(IX+%FFFFFFFD),HL
                           A  6641    ; 2498			if (res == FR_OK) {
00213E CD 00 00 00         A  6642    	CALL	__icmpzero
002142 C2 C7 21 00         A  6643    	JR	NZ,L_451
                           A  6644    ; 2499				sum = sum_sfn(dp->fn);	/* 
002146 DD3106              A  6645    	LD	IY,(IX+%6)
002149 ED661E              A  6646    	PEA	IY+%1E
00214C CD 07 1C 00         A  6647    	CALL	_sum_sfn
002150 C1                  A  6648    	POP	BC
002151 DD77F0              A  6649    	LD	(IX+%FFFFFFF0),A
                           A  6650    ; 2500				do {					/* 
002154                     A  6651    L_445:
                           A  6652    ; 2501					res = move_window(fs, d
002154 DD3106              A  6653    	LD	IY,(IX+%6)
002157 FD0717              A  6654    	LD	BC,(IY+%17)
00215A FD7E1A              A  6655    	LD	A,(IY+%1A)
00215D 2600                A  6656    	LD	H,%0
00215F 6F                  A  6657    	LD	L,A
002160 E5                  A  6658    	PUSH	HL
002161 C5                  A  6659    	PUSH	BC
002162 DD07F7              A  6660    	LD	BC,(IX+%FFFFFFF7)
002165 C5                  A  6661    	PUSH	BC
002166 CD A6 03 00         A  6662    	CALL	_move_window
00216A C1                  A  6663    	POP	BC
00216B C1                  A  6664    	POP	BC
00216C C1                  A  6665    	POP	BC
00216D DD2FFD              A  6666    	LD	(IX+%FFFFFFFD),HL
                           A  6667    ; 2502					if (res != FR_OK) break
002170 CD 00 00 00         A  6668    	CALL	__icmpzero
002174 20 51               A  6669    	JR	NZ,L_451
                           A  6670    ; 2503					put_lfn(fs->lfnbuf, dp-
002176 DD4EF0              A  6671    	LD	C,(IX+%FFFFFFF0)
002179 0600                A  6672    	LD	B,%0
00217B C5                  A  6673    	PUSH	BC
00217C DD4EFA              A  6674    	LD	C,(IX+%FFFFFFFA)
00217F C5                  A  6675    	PUSH	BC
002180 DD3106              A  6676    	LD	IY,(IX+%6)
002183 FD071B              A  6677    	LD	BC,(IY+%1B)
002186 C5                  A  6678    	PUSH	BC
002187 DD31F7              A  6679    	LD	IY,(IX+%FFFFFFF7)
00218A FD070B              A  6680    	LD	BC,(IY+%B)
00218D C5                  A  6681    	PUSH	BC
00218E CD 2C 19 00         A  6682    	CALL	_put_lfn
002192 C1                  A  6683    	POP	BC
002193 C1                  A  6684    	POP	BC
002194 C1                  A  6685    	POP	BC
002195 C1                  A  6686    	POP	BC
                           A  6687    ; 2504					fs->wflag = 1;
002196 DD31F7              A  6688    	LD	IY,(IX+%FFFFFFF7)
002199 FD360301            A  6689    	LD	(IY+%3),%1
                           A  6690    ; 2505					res = dir_next(dp, 0);	
00219D 01000000            A  6691    	LD	BC,0
0021A1 C5                  A  6692    	PUSH	BC
0021A2 DD0706              A  6693    	LD	BC,(IX+%6)
0021A5 C5                  A  6694    	PUSH	BC
0021A6 CD 19 13 00         A  6695    	CALL	_dir_next
0021AA C1                  A  6696    	POP	BC
0021AB C1                  A  6697    	POP	BC
0021AC DD2FFD              A  6698    	LD	(IX+%FFFFFFFD),HL
                           A  6699    ; 2506				} while (res == FR_OK && --
0021AF CD 00 00 00         A  6700    	CALL	__icmpzero
0021B3 20 12               A  6701    	JR	NZ,L_451
0021B5 DD31FA              A  6702    	LD	IY,(IX+%FFFFFFFA)
0021B8 ED33FF              A  6703    	LEA	IY,IY+%FFFFFFFF
0021BB DD3EFA              A  6704    	LD	(IX+%FFFFFFFA),IY
0021BE DD27FA              A  6705    	LD	HL,(IX+%FFFFFFFA)
0021C1 CD 00 00 00         A  6706    	CALL	__icmpzero
0021C5 20 8D               A  6707    	JR	NZ,L_445
                           A  6708    ; 2507			}
                           A  6709    ; 2508		}
0021C7                     A  6710    L_451:
                           A  6711    ; 2509	
                           A  6712    ; 2510	#else	/* Non LFN configuration */
                           A  6713    ; 2511		res = dir_alloc(dp, 1);		/* Allo
                           A  6714    ; 2512	
                           A  6715    ; 2513	#endif
                           A  6716    ; 2514	
                           A  6717    ; 2515		/* Set SFN entry */
                           A  6718    ; 2516		if (res == FR_OK) {
0021C7 DD27FD              A  6719    	LD	HL,(IX+%FFFFFFFD)
0021CA CD 00 00 00         A  6720    	CALL	__icmpzero
0021CE 20 67               A  6721    	JR	NZ,L_452
                           A  6722    ; 2517			res = move_window(fs, dp->sect)
0021D0 DD3106              A  6723    	LD	IY,(IX+%6)
0021D3 FD0717              A  6724    	LD	BC,(IY+%17)
0021D6 FD7E1A              A  6725    	LD	A,(IY+%1A)
0021D9 2600                A  6726    	LD	H,%0
0021DB 6F                  A  6727    	LD	L,A
0021DC E5                  A  6728    	PUSH	HL
0021DD C5                  A  6729    	PUSH	BC
0021DE DD07F7              A  6730    	LD	BC,(IX+%FFFFFFF7)
0021E1 C5                  A  6731    	PUSH	BC
0021E2 CD A6 03 00         A  6732    	CALL	_move_window
0021E6 C1                  A  6733    	POP	BC
0021E7 C1                  A  6734    	POP	BC
0021E8 C1                  A  6735    	POP	BC
0021E9 DD2FFD              A  6736    	LD	(IX+%FFFFFFFD),HL
                           A  6737    ; 2518			if (res == FR_OK) {
0021EC CD 00 00 00         A  6738    	CALL	__icmpzero
0021F0 20 45               A  6739    	JR	NZ,L_452
                           A  6740    ; 2519				memset(dp->dir, 0, SZDIRE);
0021F2 01200000            A  6741    	LD	BC,32
0021F6 C5                  A  6742    	PUSH	BC
0021F7 01000000            A  6743    	LD	BC,0
0021FB C5                  A  6744    	PUSH	BC
0021FC DD3106              A  6745    	LD	IY,(IX+%6)
0021FF FD071B              A  6746    	LD	BC,(IY+%1B)
002202 C5                  A  6747    	PUSH	BC
002203 CD 00 00 00         A  6748    	CALL	_memset
002207 C1                  A  6749    	POP	BC
002208 C1                  A  6750    	POP	BC
002209 C1                  A  6751    	POP	BC
                           A  6752    ; 2520				memcpy(dp->dir + DIR_Name, 
00220A 010B0000            A  6753    	LD	BC,11
00220E C5                  A  6754    	PUSH	BC
00220F DD3106              A  6755    	LD	IY,(IX+%6)
002212 ED661E              A  6756    	PEA	IY+%1E
002215 FD071B              A  6757    	LD	BC,(IY+%1B)
002218 C5                  A  6758    	PUSH	BC
002219 CD 00 00 00         A  6759    	CALL	_memcpy
00221D C1                  A  6760    	POP	BC
00221E C1                  A  6761    	POP	BC
00221F C1                  A  6762    	POP	BC
                           A  6763    ; 2521	#if FF_USE_LFN
                           A  6764    ; 2522				dp->dir[DIR_NTres] = dp->fn
002220 DD3106              A  6765    	LD	IY,(IX+%6)
002223 ED2329              A  6766    	LEA	HL,IY+%29
002226 7E                  A  6767    	LD	A,(HL)
002227 E618                A  6768    	AND	A,%18
002229 FD371B              A  6769    	LD	IY,(IY+%1B)
00222C ED230C              A  6770    	LEA	HL,IY+%C
00222F 77                  A  6771    	LD	(HL),A
                           A  6772    ; 2523	#endif
                           A  6773    ; 2524				fs->wflag = 1;
002230 DD31F7              A  6774    	LD	IY,(IX+%FFFFFFF7)
002233 FD360301            A  6775    	LD	(IY+%3),%1
                           A  6776    ; 2525			}
                           A  6777    ; 2526		}
002237                     A  6778    L_452:
                           A  6779    ; 2527	
                           A  6780    ; 2528		return res;
002237 DD27FD              A  6781    	LD	HL,(IX+%FFFFFFFD)
                           A  6782    ; 2529	}
00223A                     A  6783    L_453:
00223A DDF9                A  6784    	LD	SP,IX
00223C DDE1                A  6785    	POP	IX
00223E C9                  A  6786    	RET	
                           A  6787    
                           A  6788    
                           A  6789    ;**************************** _dir_register ***
                           A  6790    ;Name                         Addr/Register   S
                           A  6791    ;_memset                             IMPORT  --
                           A  6792    ;_memcpy                             IMPORT  --
                           A  6793    ;sn                                   IX-34    
                           A  6794    ;G_21                                 IX-22    
                           A  6795    ;temp436                              IX-19    
                           A  6796    ;sum                                  IX-16    
                           A  6797    ;len                                  IX-15    
                           A  6798    ;n                                    IX-12    
                           A  6799    ;fs                                    IX-9    
                           A  6800    ;n_ent                                 IX-6    
                           A  6801    ;res                                   IX-3    
                           A  6802    ;dp                                    IX+6    
                           A  6803    
                           A  6804    
                           A  6805    ; Stack Frame Size: 43 (bytes)
                           A  6806    ;       Spill Code: 0 (instruction)
                           A  6807    
                           A  6808    
                           A  6809    ; 2530	
                           A  6810    ; 2531	#endif /* !FF_FS_READONLY */
                           A  6811    ; 2532	
                           A  6812    ; 2533	
                           A  6813    ; 2534	
                           A  6814    ; 2535	#if !FF_FS_READONLY && FF_FS_MINIMIZE =
                           A  6815    ; 2536	/*-------------------------------------
                           A  6816    ; 2537	/* Remove an object from the directory 
                           A  6817    ; 2538	/*-------------------------------------
                           A  6818    ; 2539	
                           A  6819    ; 2540	static FRESULT dir_remove (	/* FR_OK:Su
                           A  6820    ; 2541		DIR* dp					/* Director
                           A  6821    ; 2542	)
                           A  6822    ; 2543	{
00223F                     A  6823    _dir_remove:
00223F 21EFFFFF            A  6824    	LD	HL,-17
002243 CD 00 00 00         A  6825    	CALL	__frameset
                           A  6826    ; 2544		FRESULT res;
                           A  6827    ; 2545		FATFS *fs = dp->obj.fs;
002247 DD3106              A  6828    	LD	IY,(IX+%6)
00224A FD0700              A  6829    	LD	BC,(IY+%0)
00224D DD0FFA              A  6830    	LD	(IX+%FFFFFFFA),BC
                           A  6831    ; 2546	#if FF_USE_LFN		/* LFN configuratio
                           A  6832    ; 2547		DWORD last = dp->dptr;
002250 FD070F              A  6833    	LD	BC,(IY+%F)
002253 FD7E12              A  6834    	LD	A,(IY+%12)
002256 DD0FEF              A  6835    	LD	(IX+%FFFFFFEF),BC
002259 DD77F2              A  6836    	LD	(IX+%FFFFFFF2),A
                           A  6837    ; 2548	
                           A  6838    ; 2549		res = (dp->blk_ofs == 0xFFFFFFFF) ?
00225C FD072A              A  6839    	LD	BC,(IY+%2A)
00225F FD7E2D              A  6840    	LD	A,(IY+%2D)
002262 DD0FF3              A  6841    	LD	(IX+%FFFFFFF3),BC
002265 DD77F6              A  6842    	LD	(IX+%FFFFFFF6),A
002268 C5E1                A  6843    	LD	HL,BC
00226A DD5EF6              A  6844    	LD	E,(IX+%FFFFFFF6)
00226D 01FFFFFF            A  6845    	LD	BC,16777215
002271 3EFF                A  6846    	LD	A,%FF
002273 CD 00 00 00         A  6847    	CALL	__lcmpu
002277 20 09               A  6848    	JR	NZ,L_456
002279 01000000            A  6849    	LD	BC,0
00227D DD0FF7              A  6850    	LD	(IX+%FFFFFFF7),BC
002280 18 18               A  6851    	JR	L_457
002282                     A  6852    L_456:
002282 DD4EF6              A  6853    	LD	C,(IX+%FFFFFFF6)
002285 0600                A  6854    	LD	B,%0
002287 C5                  A  6855    	PUSH	BC
002288 DD07F3              A  6856    	LD	BC,(IX+%FFFFFFF3)
00228B C5                  A  6857    	PUSH	BC
00228C DD0706              A  6858    	LD	BC,(IX+%6)
00228F C5                  A  6859    	PUSH	BC
002290 CD 18 11 00         A  6860    	CALL	_dir_sdi
002294 C1                  A  6861    	POP	BC
002295 C1                  A  6862    	POP	BC
002296 C1                  A  6863    	POP	BC
002297 DD2FF7              A  6864    	LD	(IX+%FFFFFFF7),HL
00229A                     A  6865    L_457:
00229A DD07F7              A  6866    	LD	BC,(IX+%FFFFFFF7)
00229D DD0FFD              A  6867    	LD	(IX+%FFFFFFFD),BC
                           A  6868    ; 2550		if (res == FR_OK) {
0022A0 C5E1                A  6869    	LD	HL,BC
0022A2 CD 00 00 00         A  6870    	CALL	__icmpzero
0022A6 20 71               A  6871    	JR	NZ,L_470
                           A  6872    ; 2551			do {
0022A8                     A  6873    L_465:
                           A  6874    ; 2552				res = move_window(fs, dp->s
0022A8 DD3106              A  6875    	LD	IY,(IX+%6)
0022AB FD0717              A  6876    	LD	BC,(IY+%17)
0022AE FD7E1A              A  6877    	LD	A,(IY+%1A)
0022B1 2600                A  6878    	LD	H,%0
0022B3 6F                  A  6879    	LD	L,A
0022B4 E5                  A  6880    	PUSH	HL
0022B5 C5                  A  6881    	PUSH	BC
0022B6 DD07FA              A  6882    	LD	BC,(IX+%FFFFFFFA)
0022B9 C5                  A  6883    	PUSH	BC
0022BA CD A6 03 00         A  6884    	CALL	_move_window
0022BE C1                  A  6885    	POP	BC
0022BF C1                  A  6886    	POP	BC
0022C0 C1                  A  6887    	POP	BC
0022C1 DD2FFD              A  6888    	LD	(IX+%FFFFFFFD),HL
                           A  6889    ; 2553				if (res != FR_OK) break;
0022C4 CD 00 00 00         A  6890    	CALL	__icmpzero
0022C8 20 3C               A  6891    	JR	NZ,L_468
                           A  6892    ; 2554				if (FF_FS_EXFAT && fs->fs_t
                           A  6893    ; 2555					dp->dir[XDIR_Type] &= 0
                           A  6894    ; 2556				} else {					
                           A  6895    ; 2557					dp->dir[DIR_Name] = DDE
0022CA DD3106              A  6896    	LD	IY,(IX+%6)
0022CD FD271B              A  6897    	LD	HL,(IY+%1B)
0022D0 36E5                A  6898    	LD	(HL),%E5
                           A  6899    ; 2558				}
                           A  6900    ; 2559				fs->wflag = 1;
0022D2 DD31FA              A  6901    	LD	IY,(IX+%FFFFFFFA)
0022D5 FD360301            A  6902    	LD	(IY+%3),%1
                           A  6903    ; 2560				if (dp->dptr >= last) break
0022D9 DD3106              A  6904    	LD	IY,(IX+%6)
0022DC FD270F              A  6905    	LD	HL,(IY+%F)
0022DF FD5E12              A  6906    	LD	E,(IY+%12)
0022E2 DD07EF              A  6907    	LD	BC,(IX+%FFFFFFEF)
0022E5 DD7EF2              A  6908    	LD	A,(IX+%FFFFFFF2)
0022E8 CD 00 00 00         A  6909    	CALL	__lcmpu
0022EC 30 18               A  6910    	JR	NC,L_468
                           A  6911    ; 2561				res = dir_next(dp, 0);	/* 
0022EE 01000000            A  6912    	LD	BC,0
0022F2 C5                  A  6913    	PUSH	BC
0022F3 DD0706              A  6914    	LD	BC,(IX+%6)
0022F6 C5                  A  6915    	PUSH	BC
0022F7 CD 19 13 00         A  6916    	CALL	_dir_next
0022FB C1                  A  6917    	POP	BC
0022FC C1                  A  6918    	POP	BC
0022FD DD2FFD              A  6919    	LD	(IX+%FFFFFFFD),HL
                           A  6920    ; 2562			} while (res == FR_OK);
002300 CD 00 00 00         A  6921    	CALL	__icmpzero
002304 28 A2               A  6922    	JR	Z,L_465
002306                     A  6923    L_468:
                           A  6924    ; 2563			if (res == FR_NO_FILE) res = FR
002306 01040000            A  6925    	LD	BC,4
00230A DD27FD              A  6926    	LD	HL,(IX+%FFFFFFFD)
00230D B7                  A  6927    	OR	A,A
00230E ED42                A  6928    	SBC	HL,BC
002310 20 07               A  6929    	JR	NZ,L_470
002312 01020000            A  6930    	LD	BC,2
002316 DD0FFD              A  6931    	LD	(IX+%FFFFFFFD),BC
                           A  6932    ; 2564		}
002319                     A  6933    L_470:
                           A  6934    ; 2565	#else			/* Non LFN configuratio
                           A  6935    ; 2566	
                           A  6936    ; 2567		res = move_window(fs, dp->sect);
                           A  6937    ; 2568		if (res == FR_OK) {
                           A  6938    ; 2569			dp->dir[DIR_Name] = DDEM;	/* 
                           A  6939    ; 2570			fs->wflag = 1;
                           A  6940    ; 2571		}
                           A  6941    ; 2572	#endif
                           A  6942    ; 2573	
                           A  6943    ; 2574		return res;
002319 DD27FD              A  6944    	LD	HL,(IX+%FFFFFFFD)
                           A  6945    ; 2575	}
00231C DDF9                A  6946    	LD	SP,IX
00231E DDE1                A  6947    	POP	IX
002320 C9                  A  6948    	RET	
                           A  6949    
                           A  6950    
                           A  6951    ;**************************** _dir_remove *****
                           A  6952    ;Name                         Addr/Register   S
                           A  6953    ;last                                 IX-17    
                           A  6954    ;G_22                                 IX-13    
                           A  6955    ;temp454                               IX-9    
                           A  6956    ;fs                                    IX-6    
                           A  6957    ;res                                   IX-3    
                           A  6958    ;dp                                    IX+6    
                           A  6959    
                           A  6960    
                           A  6961    ; Stack Frame Size: 26 (bytes)
                           A  6962    ;       Spill Code: 0 (instruction)
                           A  6963    
                           A  6964    
                           A  6965    ; 2576	
                           A  6966    ; 2577	#endif /* !FF_FS_READONLY && FF_FS_MINI
                           A  6967    ; 2578	
                           A  6968    ; 2579	
                           A  6969    ; 2580	
                           A  6970    ; 2581	#if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH 
                           A  6971    ; 2582	/*-------------------------------------
                           A  6972    ; 2583	/* Get file information from directory 
                           A  6973    ; 2584	/*-------------------------------------
                           A  6974    ; 2585	
                           A  6975    ; 2586	static void get_fileinfo (
                           A  6976    ; 2587		DIR* dp,			/* Pointer to t
                           A  6977    ; 2588		FILINFO* fno		/* Pointer to t
                           A  6978    ; 2589	)
                           A  6979    ; 2590	{
002321                     A  6980    _get_fileinfo:
002321 21DFFFFF            A  6981    	LD	HL,-33
002325 CD 00 00 00         A  6982    	CALL	__frameset
                           A  6983    ; 2591		UINT si, di;
                           A  6984    ; 2592	#if FF_USE_LFN
                           A  6985    ; 2593		BYTE lcf;
                           A  6986    ; 2594		WCHAR wc, hs;
                           A  6987    ; 2595		FATFS *fs = dp->obj.fs;
002329 DD3106              A  6988    	LD	IY,(IX+%6)
00232C FD0700              A  6989    	LD	BC,(IY+%0)
00232F DD0FE3              A  6990    	LD	(IX+%FFFFFFE3),BC
                           A  6991    ; 2596		UINT nw;
                           A  6992    ; 2597	#else
                           A  6993    ; 2598		TCHAR c;
                           A  6994    ; 2599	#endif
                           A  6995    ; 2600	
                           A  6996    ; 2601	
                           A  6997    ; 2602		fno->fname[0] = 0;			/* Inva
002332 DD3109              A  6998    	LD	IY,(IX+%9)
002335 FD361600            A  6999    	LD	(IY+%16),%0
                           A  7000    ; 2603		if (dp->sect == 0) return;	/* Exit
002339 DD3106              A  7001    	LD	IY,(IX+%6)
00233C FD2717              A  7002    	LD	HL,(IY+%17)
00233F FD5E1A              A  7003    	LD	E,(IY+%1A)
002342 CD 00 00 00         A  7004    	CALL	__lcmpzero
002346 CA 59 26 00         A  7005    	JR	Z,L_519
                           A  7006    ; 2604	
                           A  7007    ; 2605	#if FF_USE_LFN		/* LFN configuratio
                           A  7008    ; 2606	#if FF_FS_EXFAT
                           A  7009    ; 2607		if (fs->fs_type == FS_EXFAT) {	/* 
                           A  7010    ; 2608			UINT nc = 0;
                           A  7011    ; 2609	
                           A  7012    ; 2610			si = SZDIRE * 2; di = 0;	/* 
                           A  7013    ; 2611			hs = 0;
                           A  7014    ; 2612			while (nc < fs->dirbuf[XDIR_Num
                           A  7015    ; 2613				if (si >= MAXDIRB(FF_MAX_LF
                           A  7016    ; 2614				if ((si % SZDIRE) == 0) si 
                           A  7017    ; 2615				wc = ld_word(fs->dirbuf + s
                           A  7018    ; 2616				if (hs == 0 && IsSurrogate(
                           A  7019    ; 2617					hs = wc; continue;		
                           A  7020    ; 2618				}
                           A  7021    ; 2619				nw = put_utf((DWORD)hs << 1
                           A  7022    ; 2620				if (nw == 0) { di = 0; brea
                           A  7023    ; 2621				di += nw;
                           A  7024    ; 2622				hs = 0;
                           A  7025    ; 2623			}
                           A  7026    ; 2624			if (hs != 0) di = 0;			
                           A  7027    ; 2625			if (di == 0) fno->fname[di++] =
                           A  7028    ; 2626			fno->fname[di] = 0;				
                           A  7029    ; 2627			fno->altname[0] = 0;			
                           A  7030    ; 2628	
                           A  7031    ; 2629			fno->fattrib = fs->dirbuf[XDIR_
                           A  7032    ; 2630			fno->fsize = (fno->fattrib & AM
                           A  7033    ; 2631			fno->ftime = ld_word(fs->dirbuf
                           A  7034    ; 2632			fno->fdate = ld_word(fs->dirbuf
                           A  7035    ; 2633			return;
                           A  7036    ; 2634		} else
                           A  7037    ; 2635	#endif
                           A  7038    ; 2636		{	/* FAT/FAT32 volume */
                           A  7039    ; 2637			if (dp->blk_ofs != 0xFFFFFFFF) 
00234A DD3106              A  7040    	LD	IY,(IX+%6)
00234D FD272A              A  7041    	LD	HL,(IY+%2A)
002350 FD5E2D              A  7042    	LD	E,(IY+%2D)
002353 01FFFFFF            A  7043    	LD	BC,16777215
002357 3EFF                A  7044    	LD	A,%FF
002359 CD 00 00 00         A  7045    	CALL	__lcmpu
00235D CA 65 24 00         A  7046    	JR	Z,L_487
                           A  7047    ; 2638				si = di = 0;
002361 01000000            A  7048    	LD	BC,0
002365 DD0FFD              A  7049    	LD	(IX+%FFFFFFFD),BC
002368 DD0FF8              A  7050    	LD	(IX+%FFFFFFF8),BC
                           A  7051    ; 2639				hs = 0;
00236B DD36F600            A  7052    	LD	(IX+%FFFFFFF6),%0
00236F DD36F700            A  7053    	LD	(IX+%FFFFFFF7),%0
                           A  7054    ; 2640				while (fs->lfnbuf[si] != 0)
002373 C3 2E 24 00         A  7055    	JR	L_480
002377                     A  7056    L_481:
                           A  7057    ; 2641					wc = fs->lfnbuf[si++];	
002377 DD27F8              A  7058    	LD	HL,(IX+%FFFFFFF8)
00237A 29                  A  7059    	ADD	HL,HL
00237B DD07EF              A  7060    	LD	BC,(IX+%FFFFFFEF)
00237E 09                  A  7061    	ADD	HL,BC
00237F ED07                A  7062    	LD	BC,(HL)
002381 DD71FB              A  7063    	LD	(IX+%FFFFFFFB),C
002384 DD70FC              A  7064    	LD	(IX+%FFFFFFFC),B
002387 DD07F8              A  7065    	LD	BC,(IX+%FFFFFFF8)
00238A 03                  A  7066    	INC	BC
00238B DD0FF8              A  7067    	LD	(IX+%FFFFFFF8),BC
                           A  7068    ; 2642					if (hs == 0 && IsSurrog
00238E DD27F6              A  7069    	LD	HL,(IX+%FFFFFFF6)
002391 CD 00 00 00         A  7070    	CALL	__scmpzero
002395 20 25               A  7071    	JR	NZ,L_477
002397 490100D8            A  7072    	LD.LIS	BC,55296
00239B DD27FB              A  7073    	LD	HL,(IX+%FFFFFFFB)
00239E B7                  A  7074    	OR	A,A
00239F 40ED42              A  7075    	SBC.SIS	HL,BC
0023A2 38 18               A  7076    	JR	C,L_477
0023A4 DD07FB              A  7077    	LD	BC,(IX+%FFFFFFFB)
0023A7 4921FFDF            A  7078    	LD.LIS	HL,57343
0023AB B7                  A  7079    	OR	A,A
0023AC 40ED42              A  7080    	SBC.SIS	HL,BC
0023AF 38 0B               A  7081    	JR	C,L_477
                           A  7082    ; 2643						hs = wc; continue;	
0023B1 DD07FB              A  7083    	LD	BC,(IX+%FFFFFFFB)
0023B4 DD71F6              A  7084    	LD	(IX+%FFFFFFF6),C
0023B7 DD70F7              A  7085    	LD	(IX+%FFFFFFF7),B
0023BA 18 72               A  7086    	JR	L_480
                           A  7087    ; 2644					}
0023BC                     A  7088    L_477:
                           A  7089    ; 2645					nw = put_utf((DWORD)hs 
0023BC 21FF0000            A  7090    	LD	HL,255
0023C0 DD07FD              A  7091    	LD	BC,(IX+%FFFFFFFD)
0023C3 B7                  A  7092    	OR	A,A
0023C4 ED42                A  7093    	SBC	HL,BC
0023C6 E5                  A  7094    	PUSH	HL
0023C7 DD07FD              A  7095    	LD	BC,(IX+%FFFFFFFD)
0023CA DD3109              A  7096    	LD	IY,(IX+%9)
0023CD ED2316              A  7097    	LEA	HL,IY+%16
0023D0 09                  A  7098    	ADD	HL,BC
0023D1 E5                  A  7099    	PUSH	HL
0023D2 DD07F6              A  7100    	LD	BC,(IX+%FFFFFFF6)
0023D5 CD 00 00 00         A  7101    	CALL	__stoiu
0023D9 AF                  A  7102    	XOR	A,A
0023DA E5C1                A  7103    	LD	BC,HL
0023DC 2E10                A  7104    	LD	L,%10
0023DE CD 00 00 00         A  7105    	CALL	__lshl
0023E2 DD0FE0              A  7106    	LD	(IX+%FFFFFFE0),BC
0023E5 5F                  A  7107    	LD	E,A
0023E6 DD07FB              A  7108    	LD	BC,(IX+%FFFFFFFB)
0023E9 CD 00 00 00         A  7109    	CALL	__stoiu
0023ED E5C1                A  7110    	LD	BC,HL
0023EF AF                  A  7111    	XOR	A,A
0023F0 DD27E0              A  7112    	LD	HL,(IX+%FFFFFFE0)
0023F3 CD 00 00 00         A  7113    	CALL	__lor
0023F7 4B                  A  7114    	LD	C,E
0023F8 0600                A  7115    	LD	B,%0
0023FA C5                  A  7116    	PUSH	BC
0023FB E5                  A  7117    	PUSH	HL
0023FC DD77DF              A  7118    	LD	(IX+%FFFFFFDF),A
0023FF CD 4C 02 00         A  7119    	CALL	_put_utf
002403 DD7EDF              A  7120    	LD	A,(IX+%FFFFFFDF)
002406 C1                  A  7121    	POP	BC
002407 C1                  A  7122    	POP	BC
002408 C1                  A  7123    	POP	BC
002409 C1                  A  7124    	POP	BC
00240A DD2FE9              A  7125    	LD	(IX+%FFFFFFE9),HL
                           A  7126    ; 2646					if (nw == 0) { di = 0; 
00240D CD 00 00 00         A  7127    	CALL	__icmpzero
002411 20 09               A  7128    	JR	NZ,L_479
002413 01000000            A  7129    	LD	BC,0
002417 DD0FFD              A  7130    	LD	(IX+%FFFFFFFD),BC
00241A 18 2D               A  7131    	JR	L_483
00241C                     A  7132    L_479:
                           A  7133    ; 2647					di += nw;
00241C DD07E9              A  7134    	LD	BC,(IX+%FFFFFFE9)
00241F DD27FD              A  7135    	LD	HL,(IX+%FFFFFFFD)
002422 09                  A  7136    	ADD	HL,BC
002423 DD2FFD              A  7137    	LD	(IX+%FFFFFFFD),HL
                           A  7138    ; 2648					hs = 0;
002426 DD36F600            A  7139    	LD	(IX+%FFFFFFF6),%0
00242A DD36F700            A  7140    	LD	(IX+%FFFFFFF7),%0
                           A  7141    ; 2649				}
00242E                     A  7142    L_480:
00242E DD31E3              A  7143    	LD	IY,(IX+%FFFFFFE3)
002431 FD070B              A  7144    	LD	BC,(IY+%B)
002434 DD0FEF              A  7145    	LD	(IX+%FFFFFFEF),BC
002437 DD27F8              A  7146    	LD	HL,(IX+%FFFFFFF8)
00243A 29                  A  7147    	ADD	HL,HL
00243B DD07EF              A  7148    	LD	BC,(IX+%FFFFFFEF)
00243E 09                  A  7149    	ADD	HL,BC
00243F ED27                A  7150    	LD	HL,(HL)
002441 CD 00 00 00         A  7151    	CALL	__scmpzero
002445 C2 77 23 00         A  7152    	JR	NZ,L_481
002449                     A  7153    L_483:
                           A  7154    ; 2650				if (hs != 0) di = 0;	/* 
002449 DD27F6              A  7155    	LD	HL,(IX+%FFFFFFF6)
00244C CD 00 00 00         A  7156    	CALL	__scmpzero
002450 28 07               A  7157    	JR	Z,L_484
002452 01000000            A  7158    	LD	BC,0
002456 DD0FFD              A  7159    	LD	(IX+%FFFFFFFD),BC
002459                     A  7160    L_484:
                           A  7161    ; 2651				fno->fname[di] = 0;		/* 
002459 DD07FD              A  7162    	LD	BC,(IX+%FFFFFFFD)
00245C DD3109              A  7163    	LD	IY,(IX+%9)
00245F ED2316              A  7164    	LEA	HL,IY+%16
002462 09                  A  7165    	ADD	HL,BC
002463 3600                A  7166    	LD	(HL),%0
                           A  7167    ; 2652			}
                           A  7168    ; 2653		}
002465                     A  7169    L_487:
                           A  7170    ; 2654	
                           A  7171    ; 2655		si = di = 0;
002465 01000000            A  7172    	LD	BC,0
002469 DD0FFD              A  7173    	LD	(IX+%FFFFFFFD),BC
00246C DD0FF8              A  7174    	LD	(IX+%FFFFFFF8),BC
                           A  7175    ; 2656		while (si < 11) {		/* Get SFN 
00246F 18 7E               A  7176    	JR	L_498
002471                     A  7177    L_499:
                           A  7178    ; 2657			wc = dp->dir[si++];			/* 
002471 DD07F8              A  7179    	LD	BC,(IX+%FFFFFFF8)
002474 DD3106              A  7180    	LD	IY,(IX+%6)
002477 FD271B              A  7181    	LD	HL,(IY+%1B)
00247A 09                  A  7182    	ADD	HL,BC
00247B 4E                  A  7183    	LD	C,(HL)
00247C 0600                A  7184    	LD	B,%0
00247E C5E1                A  7185    	LD	HL,BC
002480 DD75FB              A  7186    	LD	(IX+%FFFFFFFB),L
002483 DD74FC              A  7187    	LD	(IX+%FFFFFFFC),H
002486 DD07F8              A  7188    	LD	BC,(IX+%FFFFFFF8)
002489 03                  A  7189    	INC	BC
00248A DD0FF8              A  7190    	LD	(IX+%FFFFFFF8),BC
                           A  7191    ; 2658			if (wc == ' ') continue;	/* 
00248D 49012000            A  7192    	LD.LIS	BC,32
002491 DD27FB              A  7193    	LD	HL,(IX+%FFFFFFFB)
002494 B7                  A  7194    	OR	A,A
002495 40ED42              A  7195    	SBC.SIS	HL,BC
002498 28 55               A  7196    	JR	Z,L_498
                           A  7197    ; 2659			if (wc == RDDEM) wc = DDEM;	/* 
00249A 49010500            A  7198    	LD.LIS	BC,5
00249E DD27FB              A  7199    	LD	HL,(IX+%FFFFFFFB)
0024A1 B7                  A  7200    	OR	A,A
0024A2 40ED42              A  7201    	SBC.SIS	HL,BC
0024A5 20 08               A  7202    	JR	NZ,L_495
0024A7 DD36FBE5            A  7203    	LD	(IX+%FFFFFFFB),%E5
0024AB DD36FC00            A  7204    	LD	(IX+%FFFFFFFC),%0
0024AF                     A  7205    L_495:
                           A  7206    ; 2660			if (si == 9 && di < FF_SFN_BUF)
0024AF 01090000            A  7207    	LD	BC,9
0024B3 DD27F8              A  7208    	LD	HL,(IX+%FFFFFFF8)
0024B6 B7                  A  7209    	OR	A,A
0024B7 ED42                A  7210    	SBC	HL,BC
0024B9 20 1F               A  7211    	JR	NZ,L_497
0024BB 010C0000            A  7212    	LD	BC,12
0024BF DD27FD              A  7213    	LD	HL,(IX+%FFFFFFFD)
0024C2 B7                  A  7214    	OR	A,A
0024C3 ED42                A  7215    	SBC	HL,BC
0024C5 30 13               A  7216    	JR	NC,L_497
0024C7 DD07FD              A  7217    	LD	BC,(IX+%FFFFFFFD)
0024CA DD3109              A  7218    	LD	IY,(IX+%9)
0024CD ED2309              A  7219    	LEA	HL,IY+%9
0024D0 09                  A  7220    	ADD	HL,BC
0024D1 362E                A  7221    	LD	(HL),%2E
0024D3 DD07FD              A  7222    	LD	BC,(IX+%FFFFFFFD)
0024D6 03                  A  7223    	INC	BC
0024D7 DD0FFD              A  7224    	LD	(IX+%FFFFFFFD),BC
0024DA                     A  7225    L_497:
                           A  7226    ; 2661	#if FF_LFN_UNICODE >= 1	/* Unicode outp
                           A  7227    ; 2662			if (dbc_1st((BYTE)wc) && si != 
                           A  7228    ; 2663				wc = wc << 8 | dp->dir[si++
                           A  7229    ; 2664			}
                           A  7230    ; 2665			wc = ff_oem2uni(wc, CODEPAGE);	
                           A  7231    ; 2666			if (wc == 0) { di = 0; break; }
                           A  7232    ; 2667			nw = put_utf(wc, &fno->altname[
                           A  7233    ; 2668			if (nw == 0) { di = 0; break; }
                           A  7234    ; 2669			di += nw;
                           A  7235    ; 2670	#else					/* ANSI/OEM out
                           A  7236    ; 2671			fno->altname[di++] = (TCHAR)wc;
0024DA DD7EFB              A  7237    	LD	A,(IX+%FFFFFFFB)
0024DD DD07FD              A  7238    	LD	BC,(IX+%FFFFFFFD)
0024E0 DD3109              A  7239    	LD	IY,(IX+%9)
0024E3 ED2309              A  7240    	LEA	HL,IY+%9
0024E6 09                  A  7241    	ADD	HL,BC
0024E7 77                  A  7242    	LD	(HL),A
0024E8 DD07FD              A  7243    	LD	BC,(IX+%FFFFFFFD)
0024EB 03                  A  7244    	INC	BC
0024EC DD0FFD              A  7245    	LD	(IX+%FFFFFFFD),BC
                           A  7246    ; 2672	#endif
                           A  7247    ; 2673		}
0024EF                     A  7248    L_498:
0024EF 010B0000            A  7249    	LD	BC,11
0024F3 DD27F8              A  7250    	LD	HL,(IX+%FFFFFFF8)
0024F6 B7                  A  7251    	OR	A,A
0024F7 ED42                A  7252    	SBC	HL,BC
0024F9 DA 71 24 00         A  7253    	JR	C,L_499
                           A  7254    ; 2674		fno->altname[di] = 0;	/* Terminat
0024FD DD3109              A  7255    	LD	IY,(IX+%9)
002500 ED0309              A  7256    	LEA	BC,IY+%9
002503 DD0FEC              A  7257    	LD	(IX+%FFFFFFEC),BC
002506 DD07FD              A  7258    	LD	BC,(IX+%FFFFFFFD)
002509 ED2309              A  7259    	LEA	HL,IY+%9
00250C 09                  A  7260    	ADD	HL,BC
00250D 3600                A  7261    	LD	(HL),%0
                           A  7262    ; 2675	
                           A  7263    ; 2676		if (fno->fname[0] == 0) {	/* If L
00250F ED0316              A  7264    	LEA	BC,IY+%16
002512 DD0FF2              A  7265    	LD	(IX+%FFFFFFF2),BC
002515 FD7E16              A  7266    	LD	A,(IY+%16)
002518 B7                  A  7267    	OR	A,A
002519 C2 FB 25 00         A  7268    	JR	NZ,L_518
                           A  7269    ; 2677			if (di == 0) {	/* If LFN and S
00251D DD27FD              A  7270    	LD	HL,(IX+%FFFFFFFD)
002520 CD 00 00 00         A  7271    	CALL	__icmpzero
002524 20 1D               A  7272    	JR	NZ,L_514
                           A  7273    ; 2678				fno->fname[di++] = '?';
002526 DD3109              A  7274    	LD	IY,(IX+%9)
002529 ED0316              A  7275    	LEA	BC,IY+%16
00252C DD0FF2              A  7276    	LD	(IX+%FFFFFFF2),BC
00252F DD07FD              A  7277    	LD	BC,(IX+%FFFFFFFD)
002532 ED2316              A  7278    	LEA	HL,IY+%16
002535 09                  A  7279    	ADD	HL,BC
002536 363F                A  7280    	LD	(HL),%3F
002538 DD07FD              A  7281    	LD	BC,(IX+%FFFFFFFD)
00253B 03                  A  7282    	INC	BC
00253C DD0FFD              A  7283    	LD	(IX+%FFFFFFFD),BC
                           A  7284    ; 2679			} else {
00253F C3 E1 25 00         A  7285    	JR	L_515
002543                     A  7286    L_514:
                           A  7287    ; 2680				for (si = di = 0, lcf = NS_
002543 01000000            A  7288    	LD	BC,0
002547 DD0FFD              A  7289    	LD	(IX+%FFFFFFFD),BC
00254A DD0FF8              A  7290    	LD	(IX+%FFFFFFF8),BC
00254D DD36F508            A  7291    	LD	(IX+%FFFFFFF5),%8
002551 18 75               A  7292    	JR	L_512
002553                     A  7293    L_510:
                           A  7294    ; 2681					wc = (WCHAR)fno->altnam
002553 DD27E6              A  7295    	LD	HL,(IX+%FFFFFFE6)
002556 7E                  A  7296    	LD	A,(HL)
002557 47                  A  7297    	LD	B,A
002558 17ED62              A  7298    	SEXT	HL
00255B DD70FB              A  7299    	LD	(IX+%FFFFFFFB),B
00255E DD74FC              A  7300    	LD	(IX+%FFFFFFFC),H
                           A  7301    ; 2682					if (wc == '.') lcf = NS
002561 49012E00            A  7302    	LD.LIS	BC,46
002565 DD27FB              A  7303    	LD	HL,(IX+%FFFFFFFB)
002568 B7                  A  7304    	OR	A,A
002569 40ED42              A  7305    	SBC.SIS	HL,BC
00256C 20 04               A  7306    	JR	NZ,L_508
00256E DD36F510            A  7307    	LD	(IX+%FFFFFFF5),%10
002572                     A  7308    L_508:
                           A  7309    ; 2683					if (IsUpper(wc) && (dp-
002572 49014100            A  7310    	LD.LIS	BC,65
002576 DD27FB              A  7311    	LD	HL,(IX+%FFFFFFFB)
002579 B7                  A  7312    	OR	A,A
00257A 40ED42              A  7313    	SBC.SIS	HL,BC
00257D 38 27               A  7314    	JR	C,L_509
00257F DD07FB              A  7315    	LD	BC,(IX+%FFFFFFFB)
002582 49215A00            A  7316    	LD.LIS	HL,90
002586 B7                  A  7317    	OR	A,A
002587 40ED42              A  7318    	SBC.SIS	HL,BC
00258A 38 1A               A  7319    	JR	C,L_509
00258C DD3106              A  7320    	LD	IY,(IX+%6)
00258F FD371B              A  7321    	LD	IY,(IY+%1B)
002592 FD7E0C              A  7322    	LD	A,(IY+%C)
002595 DDA6F5              A  7323    	AND	A,(IX+%FFFFFFF5)
002598 28 0C               A  7324    	JR	Z,L_509
00259A DD31FB              A  7325    	LD	IY,(IX+%FFFFFFFB)
00259D ED2320              A  7326    	LEA	HL,IY+%20
0025A0 DD75FB              A  7327    	LD	(IX+%FFFFFFFB),L
0025A3 DD74FC              A  7328    	LD	(IX+%FFFFFFFC),H
0025A6                     A  7329    L_509:
                           A  7330    ; 2684					fno->fname[di] = (TCHAR
0025A6 DD3109              A  7331    	LD	IY,(IX+%9)
0025A9 ED0316              A  7332    	LEA	BC,IY+%16
0025AC DD0FF2              A  7333    	LD	(IX+%FFFFFFF2),BC
0025AF DD7EFB              A  7334    	LD	A,(IX+%FFFFFFFB)
0025B2 DD07FD              A  7335    	LD	BC,(IX+%FFFFFFFD)
0025B5 ED2316              A  7336    	LEA	HL,IY+%16
0025B8 09                  A  7337    	ADD	HL,BC
0025B9 77                  A  7338    	LD	(HL),A
0025BA DD07F8              A  7339    	LD	BC,(IX+%FFFFFFF8)
0025BD 03                  A  7340    	INC	BC
0025BE DD0FF8              A  7341    	LD	(IX+%FFFFFFF8),BC
0025C1 DD07FD              A  7342    	LD	BC,(IX+%FFFFFFFD)
0025C4 03                  A  7343    	INC	BC
0025C5 DD0FFD              A  7344    	LD	(IX+%FFFFFFFD),BC
                           A  7345    ; 2685				}
0025C8                     A  7346    L_512:
0025C8 DD3109              A  7347    	LD	IY,(IX+%9)
0025CB ED0309              A  7348    	LEA	BC,IY+%9
0025CE DD0FEC              A  7349    	LD	(IX+%FFFFFFEC),BC
0025D1 DD07F8              A  7350    	LD	BC,(IX+%FFFFFFF8)
0025D4 ED2309              A  7351    	LEA	HL,IY+%9
0025D7 09                  A  7352    	ADD	HL,BC
0025D8 DD2FE6              A  7353    	LD	(IX+%FFFFFFE6),HL
0025DB 7E                  A  7354    	LD	A,(HL)
0025DC B7                  A  7355    	OR	A,A
0025DD C2 53 25 00         A  7356    	JR	NZ,L_510
                           A  7357    ; 2686			}
0025E1                     A  7358    L_515:
                           A  7359    ; 2687			fno->fname[di] = 0;	/* Terminat
0025E1 DD07FD              A  7360    	LD	BC,(IX+%FFFFFFFD)
0025E4 DD27F2              A  7361    	LD	HL,(IX+%FFFFFFF2)
0025E7 09                  A  7362    	ADD	HL,BC
0025E8 3600                A  7363    	LD	(HL),%0
                           A  7364    ; 2688			if (!dp->dir[DIR_NTres]) fno->a
0025EA DD3106              A  7365    	LD	IY,(IX+%6)
0025ED FD371B              A  7366    	LD	IY,(IY+%1B)
0025F0 FD7E0C              A  7367    	LD	A,(IY+%C)
0025F3 B7                  A  7368    	OR	A,A
0025F4 20 05               A  7369    	JR	NZ,L_518
0025F6 DD27EC              A  7370    	LD	HL,(IX+%FFFFFFEC)
0025F9 3600                A  7371    	LD	(HL),%0
                           A  7372    ; 2689		}
0025FB                     A  7373    L_518:
                           A  7374    ; 2690	
                           A  7375    ; 2691	#else	/* Non-LFN configuration */
                           A  7376    ; 2692		si = di = 0;
                           A  7377    ; 2693		while (si < 11) {		/* Copy nam
                           A  7378    ; 2694			c = (TCHAR)dp->dir[si++];
                           A  7379    ; 2695			if (c == ' ') continue;		/* 
                           A  7380    ; 2696			if (c == RDDEM) c = DDEM;	/* 
                           A  7381    ; 2697			if (si == 9) fno->fname[di++] =
                           A  7382    ; 2698			fno->fname[di++] = c;
                           A  7383    ; 2699		}
                           A  7384    ; 2700		fno->fname[di] = 0;		/* Terminat
                           A  7385    ; 2701	#endif
                           A  7386    ; 2702	
                           A  7387    ; 2703		fno->fattrib = dp->dir[DIR_Attr] & 
0025FB DD3106              A  7388    	LD	IY,(IX+%6)
0025FE FD371B              A  7389    	LD	IY,(IY+%1B)
002601 ED230B              A  7390    	LEA	HL,IY+%B
002604 7E                  A  7391    	LD	A,(HL)
002605 E63F                A  7392    	AND	A,%3F
002607 DD3109              A  7393    	LD	IY,(IX+%9)
00260A FD7708              A  7394    	LD	(IY+%8),A
                           A  7395    ; 2704		fno->fsize = ld_dword(dp->dir + DIR
00260D DD3106              A  7396    	LD	IY,(IX+%6)
002610 FD371B              A  7397    	LD	IY,(IY+%1B)
002613 ED031C              A  7398    	LEA	BC,IY+%1C
002616 C5                  A  7399    	PUSH	BC
002617 CD 39 00 00         A  7400    	CALL	_ld_dword
00261B C1                  A  7401    	POP	BC
00261C DD3109              A  7402    	LD	IY,(IX+%9)
00261F FD2F00              A  7403    	LD	(IY+%0),HL
002622 FD7303              A  7404    	LD	(IY+%3),E
                           A  7405    ; 2705		fno->ftime = ld_word(dp->dir + DIR_
002625 DD3106              A  7406    	LD	IY,(IX+%6)
002628 FD371B              A  7407    	LD	IY,(IY+%1B)
00262B ED0316              A  7408    	LEA	BC,IY+%16
00262E C5                  A  7409    	PUSH	BC
00262F CD 00 00 00         A  7410    	CALL	_ld_word
002633 C1                  A  7411    	POP	BC
002634 DD3109              A  7412    	LD	IY,(IX+%9)
002637 E5C1                A  7413    	LD	BC,HL
002639 FD7106              A  7414    	LD	(IY+%6),C
00263C FD7007              A  7415    	LD	(IY+%7),B
                           A  7416    ; 2706		fno->fdate = ld_word(dp->dir + DIR_
00263F DD3106              A  7417    	LD	IY,(IX+%6)
002642 FD371B              A  7418    	LD	IY,(IY+%1B)
002645 ED0318              A  7419    	LEA	BC,IY+%18
002648 C5                  A  7420    	PUSH	BC
002649 CD 00 00 00         A  7421    	CALL	_ld_word
00264D C1                  A  7422    	POP	BC
00264E DD3109              A  7423    	LD	IY,(IX+%9)
002651 E5C1                A  7424    	LD	BC,HL
002653 FD7104              A  7425    	LD	(IY+%4),C
002656 FD7005              A  7426    	LD	(IY+%5),B
                           A  7427    ; 2707	}
002659                     A  7428    L_519:
002659 DDF9                A  7429    	LD	SP,IX
00265B DDE1                A  7430    	POP	IX
00265D C9                  A  7431    	RET	
                           A  7432    
                           A  7433    
                           A  7434    ;**************************** _get_fileinfo ***
                           A  7435    ;Name                         Addr/Register   S
                           A  7436    ;fs                                   IX-29    
                           A  7437    ;G_25                                 IX-26    
                           A  7438    ;nw                                   IX-23    
                           A  7439    ;G_29                                 IX-20    
                           A  7440    ;G_23                                 IX-17    
                           A  7441    ;G_28                                 IX-14    
                           A  7442    ;lcf                                  IX-11    
                           A  7443    ;hs                                   IX-10    
                           A  7444    ;si                                    IX-8    
                           A  7445    ;wc                                    IX-5    
                           A  7446    ;di                                    IX-3    
                           A  7447    ;fno                                   IX+9    
                           A  7448    ;dp                                    IX+6    
                           A  7449    
                           A  7450    
                           A  7451    ; Stack Frame Size: 45 (bytes)
                           A  7452    ;       Spill Code: 0 (instruction)
                           A  7453    
                           A  7454    
                           A  7455    ; 2708	
                           A  7456    ; 2709	#endif /* FF_FS_MINIMIZE <= 1 || FF_FS_
                           A  7457    ; 2710	
                           A  7458    ; 2711	
                           A  7459    ; 2712	
                           A  7460    ; 2713	#if FF_USE_FIND && FF_FS_MINIMIZE <= 1
                           A  7461    ; 2714	/*-------------------------------------
                           A  7462    ; 2715	/* Pattern matching                    
                           A  7463    ; 2716	/*-------------------------------------
                           A  7464    ; 2717	
                           A  7465    ; 2718	#define FIND_RECURS	4	/* Maximum numb
                           A  7466    ; 2719	
                           A  7467    ; 2720	
                           A  7468    ; 2721	static DWORD get_achar (	/* Get a ch
                           A  7469    ; 2722		const TCHAR** ptr		/* Pointer 
                           A  7470    ; 2723	)
                           A  7471    ; 2724	{
                           A  7472    ; 2725		DWORD chr;
                           A  7473    ; 2726	
                           A  7474    ; 2727	
                           A  7475    ; 2728	#if FF_USE_LFN && FF_LFN_UNICODE >= 1	
                           A  7476    ; 2729		chr = tchar2uni(ptr);
                           A  7477    ; 2730		if (chr == 0xFFFFFFFF) chr = 0;		
                           A  7478    ; 2731		chr = ff_wtoupper(chr);
                           A  7479    ; 2732	
                           A  7480    ; 2733	#else									
                           A  7481    ; 2734		chr = (BYTE)*(*ptr)++;				
                           A  7482    ; 2735		if (IsLower(chr)) chr -= 0x20;		
                           A  7483    ; 2736	#if FF_CODE_PAGE == 0
                           A  7484    ; 2737		if (ExCvt && chr >= 0x80) chr = ExC
                           A  7485    ; 2738	#elif FF_CODE_PAGE < 900
                           A  7486    ; 2739		if (chr >= 0x80) chr = ExCvt[chr - 
                           A  7487    ; 2740	#endif
                           A  7488    ; 2741	#if FF_CODE_PAGE == 0 || FF_CODE_PAGE >
                           A  7489    ; 2742		if (dbc_1st((BYTE)chr)) {	/* Get 
                           A  7490    ; 2743			chr = dbc_2nd((BYTE)**ptr) ? ch
                           A  7491    ; 2744		}
                           A  7492    ; 2745	#endif
                           A  7493    ; 2746	
                           A  7494    ; 2747	#endif
                           A  7495    ; 2748		return chr;
                           A  7496    ; 2749	}
                           A  7497    ; 2750	
                           A  7498    ; 2751	
                           A  7499    ; 2752	static int pattern_match (	/* 0:mismat
                           A  7500    ; 2753		const TCHAR* pat,	/* Matching pat
                           A  7501    ; 2754		const TCHAR* nam,	/* String to be
                           A  7502    ; 2755		UINT skip,			/* Number of pr
                           A  7503    ; 2756		UINT recur			/* Recursion co
                           A  7504    ; 2757	)
                           A  7505    ; 2758	{
                           A  7506    ; 2759		const TCHAR *pptr, *nptr;
                           A  7507    ; 2760		DWORD pchr, nchr;
                           A  7508    ; 2761		UINT sk;
                           A  7509    ; 2762	
                           A  7510    ; 2763	
                           A  7511    ; 2764		while ((skip & 0xFF) != 0) {		
                           A  7512    ; 2765			if (!get_achar(&nam)) return 0;
                           A  7513    ; 2766			skip--;
                           A  7514    ; 2767		}
                           A  7515    ; 2768		if (*pat == 0 && skip) return 1;	
                           A  7516    ; 2769	
                           A  7517    ; 2770		do {
                           A  7518    ; 2771			pptr = pat; nptr = nam;			
                           A  7519    ; 2772			for (;;) {
                           A  7520    ; 2773				if (*pptr == '?' || *pptr =
                           A  7521    ; 2774					if (recur == 0) return 
                           A  7522    ; 2775					sk = 0;
                           A  7523    ; 2776					do {	/* Analyze the 
                           A  7524    ; 2777						if (*pptr++ == '?')
                           A  7525    ; 2778					} while (*pptr == '?' |
                           A  7526    ; 2779					if (pattern_match(pptr,
                           A  7527    ; 2780					nchr = *nptr; break;	
                           A  7528    ; 2781				}
                           A  7529    ; 2782				pchr = get_achar(&pptr);	
                           A  7530    ; 2783				nchr = get_achar(&nptr);	
                           A  7531    ; 2784				if (pchr != nchr) break;	
                           A  7532    ; 2785				if (pchr == 0) return 1;	
                           A  7533    ; 2786			}
                           A  7534    ; 2787			get_achar(&nam);			/* 
                           A  7535    ; 2788		} while (skip && nchr);		/* Retr
                           A  7536    ; 2789	
                           A  7537    ; 2790		return 0;
                           A  7538    ; 2791	}
                           A  7539    ; 2792	
                           A  7540    ; 2793	#endif /* FF_USE_FIND && FF_FS_MINIMIZE
                           A  7541    ; 2794	
                           A  7542    ; 2795	
                           A  7543    ; 2796	
                           A  7544    ; 2797	/*-------------------------------------
                           A  7545    ; 2798	/* Pick a top segment and create the ob
                           A  7546    ; 2799	/*-------------------------------------
                           A  7547    ; 2800	
                           A  7548    ; 2801	static FRESULT create_name (	/* FR_O
                           A  7549    ; 2802		DIR* dp,					/* Poin
                           A  7550    ; 2803		const TCHAR** path			/* Poin
                           A  7551    ; 2804	)
                           A  7552    ; 2805	{
00265E                     A  7553    _create_name:
00265E 21D7FFFF            A  7554    	LD	HL,-41
002662 CD 00 00 00         A  7555    	CALL	__frameset
                           A  7556    ; 2806	#if FF_USE_LFN		/* LFN configuratio
                           A  7557    ; 2807		BYTE b, cf;
                           A  7558    ; 2808		WCHAR wc, *lfn;
                           A  7559    ; 2809		DWORD uc;
                           A  7560    ; 2810		UINT i, ni, si, di;
                           A  7561    ; 2811		const TCHAR *p;
                           A  7562    ; 2812	
                           A  7563    ; 2813	
                           A  7564    ; 2814		/* Create LFN into LFN working buff
                           A  7565    ; 2815		p = *path; lfn = dp->obj.fs->lfnbuf
002666 DD2709              A  7566    	LD	HL,(IX+%9)
002669 ED07                A  7567    	LD	BC,(HL)
00266B DD0FEC              A  7568    	LD	(IX+%FFFFFFEC),BC
00266E DD3106              A  7569    	LD	IY,(IX+%6)
002671 FD3700              A  7570    	LD	IY,(IY+%0)
002674 FD070B              A  7571    	LD	BC,(IY+%B)
002677 DD0FE9              A  7572    	LD	(IX+%FFFFFFE9),BC
00267A 01000000            A  7573    	LD	BC,0
00267E DD0FFA              A  7574    	LD	(IX+%FFFFFFFA),BC
                           A  7575    ; 2816		for (;;) {
002681                     A  7576    L_535:
                           A  7577    ; 2817			uc = tchar2uni(&p);			/* 
002681 ED65EC              A  7578    	PEA	IX+%FFFFFFEC
002684 CD 8D 01 00         A  7579    	CALL	_tchar2uni
002688 C1                  A  7580    	POP	BC
002689 DD2FF2              A  7581    	LD	(IX+%FFFFFFF2),HL
00268C DD73F5              A  7582    	LD	(IX+%FFFFFFF5),E
                           A  7583    ; 2818			if (uc == 0xFFFFFFFF) return FR
00268F DD27F2              A  7584    	LD	HL,(IX+%FFFFFFF2)
002692 DD5EF5              A  7585    	LD	E,(IX+%FFFFFFF5)
002695 01FFFFFF            A  7586    	LD	BC,16777215
002699 3EFF                A  7587    	LD	A,%FF
00269B CD 00 00 00         A  7588    	CALL	__lcmpu
00269F 20 08               A  7589    	JR	NZ,L_523
0026A1 21060000            A  7590    	LD	HL,6
0026A5 C3 5E 2B 00         A  7591    	JR	L_618
0026A9                     A  7592    L_523:
                           A  7593    ; 2819			if (uc >= 0x10000) lfn[di++] = 
0026A9 DD27F2              A  7594    	LD	HL,(IX+%FFFFFFF2)
0026AC DD5EF5              A  7595    	LD	E,(IX+%FFFFFFF5)
0026AF 01000001            A  7596    	LD	BC,65536
0026B3 AF                  A  7597    	XOR	A,A
0026B4 CD 00 00 00         A  7598    	CALL	__lcmpu
0026B8 38 1E               A  7599    	JR	C,L_524
0026BA DD07F2              A  7600    	LD	BC,(IX+%FFFFFFF2)
0026BD DD7EF5              A  7601    	LD	A,(IX+%FFFFFFF5)
0026C0 2E10                A  7602    	LD	L,%10
0026C2 CD 00 00 00         A  7603    	CALL	__lshru
0026C6 DD27FA              A  7604    	LD	HL,(IX+%FFFFFFFA)
0026C9 29                  A  7605    	ADD	HL,HL
0026CA DD17E9              A  7606    	LD	DE,(IX+%FFFFFFE9)
0026CD 19                  A  7607    	ADD	HL,DE
0026CE 71                  A  7608    	LD	(HL),C
0026CF 23                  A  7609    	INC	HL
0026D0 70                  A  7610    	LD	(HL),B
0026D1 DD07FA              A  7611    	LD	BC,(IX+%FFFFFFFA)
0026D4 03                  A  7612    	INC	BC
0026D5 DD0FFA              A  7613    	LD	(IX+%FFFFFFFA),BC
0026D8                     A  7614    L_524:
                           A  7615    ; 2820			wc = (WCHAR)uc;
                           A  7616    ; 2821			if (wc < ' ' || IsSeparator(wc)
0026D8 49012000            A  7617    	LD.LIS	BC,32
0026DC DD27F2              A  7618    	LD	HL,(IX+%FFFFFFF2)
0026DF B7                  A  7619    	OR	A,A
0026E0 40ED42              A  7620    	SBC.SIS	HL,BC
0026E3 38 75               A  7621    	JR	C,L_545
0026E5 49012F00            A  7622    	LD.LIS	BC,47
0026E9 DD27F2              A  7623    	LD	HL,(IX+%FFFFFFF2)
0026EC B7                  A  7624    	OR	A,A
0026ED 40ED42              A  7625    	SBC.SIS	HL,BC
0026F0 28 68               A  7626    	JR	Z,L_545
0026F2 49015C00            A  7627    	LD.LIS	BC,92
0026F6 DD27F2              A  7628    	LD	HL,(IX+%FFFFFFF2)
0026F9 B7                  A  7629    	OR	A,A
0026FA 40ED42              A  7630    	SBC.SIS	HL,BC
0026FD 28 5B               A  7631    	JR	Z,L_545
                           A  7632    ; 2822			if (wc < 0x80 && strchr("*:<>|\
0026FF 49018000            A  7633    	LD.LIS	BC,128
002703 DD27F2              A  7634    	LD	HL,(IX+%FFFFFFF2)
002706 B7                  A  7635    	OR	A,A
002707 40ED42              A  7636    	SBC.SIS	HL,BC
00270A 30 21               A  7637    	JR	NC,L_532
00270C DD07F2              A  7638    	LD	BC,(IX+%FFFFFFF2)
00270F CD 00 00 00         A  7639    	CALL	__stoiu
002713 E5                  A  7640    	PUSH	HL
002714 01 00 00 00         A  7641    	LD	BC,L__268
002718 C5                  A  7642    	PUSH	BC
002719 CD 00 00 00         A  7643    	CALL	_strchr
00271D C1                  A  7644    	POP	BC
00271E C1                  A  7645    	POP	BC
00271F CD 00 00 00         A  7646    	CALL	__icmpzero
002723 28 08               A  7647    	JR	Z,L_532
002725 21060000            A  7648    	LD	HL,6
002729 C3 5E 2B 00         A  7649    	JR	L_618
00272D                     A  7650    L_532:
                           A  7651    ; 2823			if (di >= FF_MAX_LFN) return FR
00272D 01FF0000            A  7652    	LD	BC,255
002731 DD27FA              A  7653    	LD	HL,(IX+%FFFFFFFA)
002734 B7                  A  7654    	OR	A,A
002735 ED42                A  7655    	SBC	HL,BC
002737 38 08               A  7656    	JR	C,L_534
002739 21060000            A  7657    	LD	HL,6
00273D C3 5E 2B 00         A  7658    	JR	L_618
002741                     A  7659    L_534:
                           A  7660    ; 2824			lfn[di++] = wc;				/* 
002741 DD27FA              A  7661    	LD	HL,(IX+%FFFFFFFA)
002744 29                  A  7662    	ADD	HL,HL
002745 DD07E9              A  7663    	LD	BC,(IX+%FFFFFFE9)
002748 09                  A  7664    	ADD	HL,BC
002749 DD07F2              A  7665    	LD	BC,(IX+%FFFFFFF2)
00274C 71                  A  7666    	LD	(HL),C
00274D 23                  A  7667    	INC	HL
00274E 70                  A  7668    	LD	(HL),B
00274F DD07FA              A  7669    	LD	BC,(IX+%FFFFFFFA)
002752 03                  A  7670    	INC	BC
002753 DD0FFA              A  7671    	LD	(IX+%FFFFFFFA),BC
                           A  7672    ; 2825		}
002756 C3 81 26 00         A  7673    	JR	L_535
00275A                     A  7674    L_545:
                           A  7675    ; 2826		if (wc < ' ') {				/* Stop
00275A 49012000            A  7676    	LD.LIS	BC,32
00275E DD27F2              A  7677    	LD	HL,(IX+%FFFFFFF2)
002761 B7                  A  7678    	OR	A,A
002762 40ED42              A  7679    	SBC.SIS	HL,BC
002765 30 13               A  7680    	JR	NC,L_539
                           A  7681    ; 2827			cf = NS_LAST;			/* Last
002767 DD36FF04            A  7682    	LD	(IX+%FFFFFFFF),%4
                           A  7683    ; 2828		} else {					/* Stop
00276B 18 4B               A  7684    	JR	L_546
                           A  7685    ; 2829			while (IsSeparator(*p)) p++;	
00276D                     A  7686    L_540:
00276D DD07EC              A  7687    	LD	BC,(IX+%FFFFFFEC)
002770 DD0FD7              A  7688    	LD	(IX+%FFFFFFD7),BC
002773 DD07EC              A  7689    	LD	BC,(IX+%FFFFFFEC)
002776 03                  A  7690    	INC	BC
002777 DD0FEC              A  7691    	LD	(IX+%FFFFFFEC),BC
00277A                     A  7692    L_539:
00277A DD27EC              A  7693    	LD	HL,(IX+%FFFFFFEC)
00277D 7E                  A  7694    	LD	A,(HL)
00277E 47                  A  7695    	LD	B,A
00277F 17ED62              A  7696    	SEXT	HL
002782 68                  A  7697    	LD	L,B
002783 012F0000            A  7698    	LD	BC,47
002787 B7                  A  7699    	OR	A,A
002788 ED42                A  7700    	SBC	HL,BC
00278A 28 E1               A  7701    	JR	Z,L_540
00278C DD27EC              A  7702    	LD	HL,(IX+%FFFFFFEC)
00278F 7E                  A  7703    	LD	A,(HL)
002790 47                  A  7704    	LD	B,A
002791 17ED62              A  7705    	SEXT	HL
002794 68                  A  7706    	LD	L,B
002795 015C0000            A  7707    	LD	BC,92
002799 B7                  A  7708    	OR	A,A
00279A ED42                A  7709    	SBC	HL,BC
00279C 28 CF               A  7710    	JR	Z,L_540
                           A  7711    ; 2830			cf = 0;					/* Next
00279E DD36FF00            A  7712    	LD	(IX+%FFFFFFFF),%0
                           A  7713    ; 2831			if (IsTerminator(*p)) cf = NS_L
0027A2 DD27EC              A  7714    	LD	HL,(IX+%FFFFFFEC)
0027A5 7E                  A  7715    	LD	A,(HL)
0027A6 47                  A  7716    	LD	B,A
0027A7 17ED62              A  7717    	SEXT	HL
0027AA 68                  A  7718    	LD	L,B
0027AB 01200000            A  7719    	LD	BC,32
0027AF B7                  A  7720    	OR	A,A
0027B0 ED42                A  7721    	SBC	HL,BC
0027B2 30 04               A  7722    	JR	NC,L_546
0027B4 DD36FF04            A  7723    	LD	(IX+%FFFFFFFF),%4
                           A  7724    ; 2832		}
0027B8                     A  7725    L_546:
                           A  7726    ; 2833		*path = p;					/* Retu
0027B8 DD2709              A  7727    	LD	HL,(IX+%9)
0027BB DD07EC              A  7728    	LD	BC,(IX+%FFFFFFEC)
0027BE ED0F                A  7729    	LD	(HL),BC
                           A  7730    ; 2834	
                           A  7731    ; 2835	#if FF_FS_RPATH != 0
                           A  7732    ; 2836		if ((di == 1 && lfn[di - 1] == '.')
                           A  7733    ; 2837			(di == 2 && lfn[di - 1] == '.' 
                           A  7734    ; 2838			lfn[di] = 0;
                           A  7735    ; 2839			for (i = 0; i < 11; i++) {	/* 
                           A  7736    ; 2840				dp->fn[i] = (i < di) ? '.' 
                           A  7737    ; 2841			}
                           A  7738    ; 2842			dp->fn[i] = cf | NS_DOT;	/* 
                           A  7739    ; 2843			return FR_OK;
                           A  7740    ; 2844		}
                           A  7741    ; 2845	#endif
                           A  7742    ; 2846		while (di) {					/* 
0027C0 18 39               A  7743    	JR	L_551
0027C2                     A  7744    L_552:
                           A  7745    ; 2847			wc = lfn[di - 1];
0027C2 DD31FA              A  7746    	LD	IY,(IX+%FFFFFFFA)
0027C5 ED33FF              A  7747    	LEA	IY,IY+%FFFFFFFF
0027C8 DD3EE3              A  7748    	LD	(IX+%FFFFFFE3),IY
0027CB DD27E3              A  7749    	LD	HL,(IX+%FFFFFFE3)
0027CE 29                  A  7750    	ADD	HL,HL
0027CF DD07E9              A  7751    	LD	BC,(IX+%FFFFFFE9)
0027D2 09                  A  7752    	ADD	HL,BC
0027D3 ED07                A  7753    	LD	BC,(HL)
0027D5 DD71FD              A  7754    	LD	(IX+%FFFFFFFD),C
0027D8 DD70FE              A  7755    	LD	(IX+%FFFFFFFE),B
                           A  7756    ; 2848			if (wc != ' ' && wc != '.') bre
0027DB 49012000            A  7757    	LD.LIS	BC,32
0027DF DD27FD              A  7758    	LD	HL,(IX+%FFFFFFFD)
0027E2 B7                  A  7759    	OR	A,A
0027E3 40ED42              A  7760    	SBC.SIS	HL,BC
0027E6 28 0D               A  7761    	JR	Z,L_550
0027E8 49012E00            A  7762    	LD.LIS	BC,46
0027EC DD27FD              A  7763    	LD	HL,(IX+%FFFFFFFD)
0027EF B7                  A  7764    	OR	A,A
0027F0 40ED42              A  7765    	SBC.SIS	HL,BC
0027F3 20 0F               A  7766    	JR	NZ,L_553
0027F5                     A  7767    L_550:
                           A  7768    ; 2849			di--;
0027F5 DD07E3              A  7769    	LD	BC,(IX+%FFFFFFE3)
0027F8 DD0FFA              A  7770    	LD	(IX+%FFFFFFFA),BC
                           A  7771    ; 2850		}
0027FB                     A  7772    L_551:
0027FB DD27FA              A  7773    	LD	HL,(IX+%FFFFFFFA)
0027FE CD 00 00 00         A  7774    	CALL	__icmpzero
002802 20 BE               A  7775    	JR	NZ,L_552
002804                     A  7776    L_553:
                           A  7777    ; 2851		lfn[di] = 0;						
002804 DD27FA              A  7778    	LD	HL,(IX+%FFFFFFFA)
002807 29                  A  7779    	ADD	HL,HL
002808 DD07E9              A  7780    	LD	BC,(IX+%FFFFFFE9)
00280B 09                  A  7781    	ADD	HL,BC
00280C 3600                A  7782    	LD	(HL),%0
00280E 23                  A  7783    	INC	HL
00280F 3600                A  7784    	LD	(HL),%0
                           A  7785    ; 2852		if (di == 0) return FR_INVALID_NAME
002811 DD27FA              A  7786    	LD	HL,(IX+%FFFFFFFA)
002814 CD 00 00 00         A  7787    	CALL	__icmpzero
002818 20 08               A  7788    	JR	NZ,L_559
00281A 21060000            A  7789    	LD	HL,6
00281E C3 5E 2B 00         A  7790    	JR	L_618
002822                     A  7791    L_559:
                           A  7792    ; 2853	
                           A  7793    ; 2854		/* Create SFN in directory form */
                           A  7794    ; 2855		for (si = 0; lfn[si] == ' '; si++) 
002822 01000000            A  7795    	LD	BC,0
002826 DD0FF6              A  7796    	LD	(IX+%FFFFFFF6),BC
002829 18 07               A  7797    	JR	L_558
00282B                     A  7798    L_556:
00282B DD07F6              A  7799    	LD	BC,(IX+%FFFFFFF6)
00282E 03                  A  7800    	INC	BC
00282F DD0FF6              A  7801    	LD	(IX+%FFFFFFF6),BC
002832                     A  7802    L_558:
002832 DD27F6              A  7803    	LD	HL,(IX+%FFFFFFF6)
002835 29                  A  7804    	ADD	HL,HL
002836 DD07E9              A  7805    	LD	BC,(IX+%FFFFFFE9)
002839 09                  A  7806    	ADD	HL,BC
00283A DD2FE0              A  7807    	LD	(IX+%FFFFFFE0),HL
00283D ED07                A  7808    	LD	BC,(HL)
00283F CD 00 00 00         A  7809    	CALL	__stoiu
002843 01200000            A  7810    	LD	BC,32
002847 B7                  A  7811    	OR	A,A
002848 ED42                A  7812    	SBC	HL,BC
00284A 28 DF               A  7813    	JR	Z,L_556
                           A  7814    ; 2856		if (si > 0 || lfn[si] == '.') cf |=
00284C DD07F6              A  7815    	LD	BC,(IX+%FFFFFFF6)
00284F B7                  A  7816    	OR	A,A
002850 ED62                A  7817    	SBC	HL,HL
002852 B7                  A  7818    	OR	A,A
002853 ED42                A  7819    	SBC	HL,BC
002855 38 12               A  7820    	JR	C,L_561
002857 DD27E0              A  7821    	LD	HL,(IX+%FFFFFFE0)
00285A ED07                A  7822    	LD	BC,(HL)
00285C CD 00 00 00         A  7823    	CALL	__stoiu
002860 012E0000            A  7824    	LD	BC,46
002864 B7                  A  7825    	OR	A,A
002865 ED42                A  7826    	SBC	HL,BC
002867 20 10               A  7827    	JR	NZ,L_565
002869                     A  7828    L_561:
002869 DD7EFF              A  7829    	LD	A,(IX+%FFFFFFFF)
00286C F603                A  7830    	OR	A,%3
00286E DD77FF              A  7831    	LD	(IX+%FFFFFFFF),A
                           A  7832    ; 2857		while (di > 0 && lfn[di - 1] != '.'
002871 18 06               A  7833    	JR	L_565
002873                     A  7834    L_566:
002873 DD07DD              A  7835    	LD	BC,(IX+%FFFFFFDD)
002876 DD0FFA              A  7836    	LD	(IX+%FFFFFFFA),BC
002879                     A  7837    L_565:
002879 DD07FA              A  7838    	LD	BC,(IX+%FFFFFFFA)
00287C B7                  A  7839    	OR	A,A
00287D ED62                A  7840    	SBC	HL,HL
00287F B7                  A  7841    	OR	A,A
002880 ED42                A  7842    	SBC	HL,BC
002882 30 20               A  7843    	JR	NC,L_568
002884 DD31FA              A  7844    	LD	IY,(IX+%FFFFFFFA)
002887 ED33FF              A  7845    	LEA	IY,IY+%FFFFFFFF
00288A DD3EDD              A  7846    	LD	(IX+%FFFFFFDD),IY
00288D DD27DD              A  7847    	LD	HL,(IX+%FFFFFFDD)
002890 29                  A  7848    	ADD	HL,HL
002891 DD07E9              A  7849    	LD	BC,(IX+%FFFFFFE9)
002894 09                  A  7850    	ADD	HL,BC
002895 ED07                A  7851    	LD	BC,(HL)
002897 CD 00 00 00         A  7852    	CALL	__stoiu
00289B 012E0000            A  7853    	LD	BC,46
00289F B7                  A  7854    	OR	A,A
0028A0 ED42                A  7855    	SBC	HL,BC
0028A2 20 CF               A  7856    	JR	NZ,L_566
0028A4                     A  7857    L_568:
                           A  7858    ; 2858	
                           A  7859    ; 2859		memset(dp->fn, ' ', 11);
0028A4 010B0000            A  7860    	LD	BC,11
0028A8 C5                  A  7861    	PUSH	BC
0028A9 01200000            A  7862    	LD	BC,32
0028AD C5                  A  7863    	PUSH	BC
0028AE DD3106              A  7864    	LD	IY,(IX+%6)
0028B1 ED661E              A  7865    	PEA	IY+%1E
0028B4 CD 00 00 00         A  7866    	CALL	_memset
0028B8 C1                  A  7867    	POP	BC
0028B9 C1                  A  7868    	POP	BC
0028BA C1                  A  7869    	POP	BC
                           A  7870    ; 2860		i = b = 0; ni = 8;
0028BB DD36F900            A  7871    	LD	(IX+%FFFFFFF9),%0
0028BF 01000000            A  7872    	LD	BC,0
0028C3 DD0FEF              A  7873    	LD	(IX+%FFFFFFEF),BC
0028C6 01080000            A  7874    	LD	BC,8
0028CA DD0FE6              A  7875    	LD	(IX+%FFFFFFE6),BC
                           A  7876    ; 2861		for (;;) {
0028CD                     A  7877    L_603:
                           A  7878    ; 2862			wc = lfn[si++];					
0028CD DD27F6              A  7879    	LD	HL,(IX+%FFFFFFF6)
0028D0 29                  A  7880    	ADD	HL,HL
0028D1 DD07E9              A  7881    	LD	BC,(IX+%FFFFFFE9)
0028D4 09                  A  7882    	ADD	HL,BC
0028D5 ED07                A  7883    	LD	BC,(HL)
0028D7 DD71FD              A  7884    	LD	(IX+%FFFFFFFD),C
0028DA DD70FE              A  7885    	LD	(IX+%FFFFFFFE),B
0028DD DD07F6              A  7886    	LD	BC,(IX+%FFFFFFF6)
0028E0 03                  A  7887    	INC	BC
0028E1 DD0FF6              A  7888    	LD	(IX+%FFFFFFF6),BC
                           A  7889    ; 2863			if (wc == 0) break;				
0028E4 DD27FD              A  7890    	LD	HL,(IX+%FFFFFFFD)
0028E7 CD 00 00 00         A  7891    	CALL	__scmpzero
0028EB CA D8 2A 00         A  7892    	JR	Z,L_606
                           A  7893    ; 2864			if (wc == ' ' || (wc == '.' && 
0028EF 49012000            A  7894    	LD.LIS	BC,32
0028F3 DD27FD              A  7895    	LD	HL,(IX+%FFFFFFFD)
0028F6 B7                  A  7896    	OR	A,A
0028F7 40ED42              A  7897    	SBC.SIS	HL,BC
0028FA 28 18               A  7898    	JR	Z,L_573
0028FC 49012E00            A  7899    	LD.LIS	BC,46
002900 DD27FD              A  7900    	LD	HL,(IX+%FFFFFFFD)
002903 B7                  A  7901    	OR	A,A
002904 40ED42              A  7902    	SBC.SIS	HL,BC
002907 20 15               A  7903    	JR	NZ,L_583
002909 DD07FA              A  7904    	LD	BC,(IX+%FFFFFFFA)
00290C DD27F6              A  7905    	LD	HL,(IX+%FFFFFFF6)
00290F B7                  A  7906    	OR	A,A
002910 ED42                A  7907    	SBC	HL,BC
002912 28 0A               A  7908    	JR	Z,L_583
002914                     A  7909    L_573:
                           A  7910    ; 2865				cf |= NS_LOSS | NS_LFN;
002914 DD7EFF              A  7911    	LD	A,(IX+%FFFFFFFF)
002917 F603                A  7912    	OR	A,%3
002919 DD77FF              A  7913    	LD	(IX+%FFFFFFFF),A
                           A  7914    ; 2866				continue;
00291C 18 AF               A  7915    	JR	L_603
                           A  7916    ; 2867			}
00291E                     A  7917    L_583:
                           A  7918    ; 2868	
                           A  7919    ; 2869			if (i >= ni || si == di) {		
00291E DD07E6              A  7920    	LD	BC,(IX+%FFFFFFE6)
002921 DD27EF              A  7921    	LD	HL,(IX+%FFFFFFEF)
002924 B7                  A  7922    	OR	A,A
002925 ED42                A  7923    	SBC	HL,BC
002927 30 0B               A  7924    	JR	NC,L_582
002929 DD07FA              A  7925    	LD	BC,(IX+%FFFFFFFA)
00292C DD27F6              A  7926    	LD	HL,(IX+%FFFFFFF6)
00292F B7                  A  7927    	OR	A,A
002930 ED42                A  7928    	SBC	HL,BC
002932 20 58               A  7929    	JR	NZ,L_586
002934                     A  7930    L_582:
                           A  7931    ; 2870				if (ni == 11) {				
002934 010B0000            A  7932    	LD	BC,11
002938 DD27E6              A  7933    	LD	HL,(IX+%FFFFFFE6)
00293B B7                  A  7934    	OR	A,A
00293C ED42                A  7935    	SBC	HL,BC
00293E 20 0C               A  7936    	JR	NZ,L_578
                           A  7937    ; 2871					cf |= NS_LOSS | NS_LFN;
002940 DD7EFF              A  7938    	LD	A,(IX+%FFFFFFFF)
002943 F603                A  7939    	OR	A,%3
002945 DD77FF              A  7940    	LD	(IX+%FFFFFFFF),A
                           A  7941    ; 2872					break;
002948 C3 D8 2A 00         A  7942    	JR	L_606
                           A  7943    ; 2873				}
00294C                     A  7944    L_578:
                           A  7945    ; 2874				if (si != di) cf |= NS_LOSS
00294C DD07FA              A  7946    	LD	BC,(IX+%FFFFFFFA)
00294F DD27F6              A  7947    	LD	HL,(IX+%FFFFFFF6)
002952 B7                  A  7948    	OR	A,A
002953 ED42                A  7949    	SBC	HL,BC
002955 28 08               A  7950    	JR	Z,L_580
002957 DD7EFF              A  7951    	LD	A,(IX+%FFFFFFFF)
00295A F603                A  7952    	OR	A,%3
00295C DD77FF              A  7953    	LD	(IX+%FFFFFFFF),A
00295F                     A  7954    L_580:
                           A  7955    ; 2875				if (si > di) break;			
00295F DD07F6              A  7956    	LD	BC,(IX+%FFFFFFF6)
002962 DD27FA              A  7957    	LD	HL,(IX+%FFFFFFFA)
002965 B7                  A  7958    	OR	A,A
002966 ED42                A  7959    	SBC	HL,BC
002968 DA D8 2A 00         A  7960    	JR	C,L_606
                           A  7961    ; 2876				si = di; i = 8; ni = 11; b 
00296C DD07FA              A  7962    	LD	BC,(IX+%FFFFFFFA)
00296F DD0FF6              A  7963    	LD	(IX+%FFFFFFF6),BC
002972 01080000            A  7964    	LD	BC,8
002976 DD0FEF              A  7965    	LD	(IX+%FFFFFFEF),BC
002979 010B0000            A  7966    	LD	BC,11
00297D DD0FE6              A  7967    	LD	(IX+%FFFFFFE6),BC
002980 DD7EF9              A  7968    	LD	A,(IX+%FFFFFFF9)
002983 87                  A  7969    	ADD	A,A
002984 87                  A  7970    	ADD	A,A
002985 DD77F9              A  7971    	LD	(IX+%FFFFFFF9),A
                           A  7972    ; 2877				continue;
002988 C3 CD 28 00         A  7973    	JR	L_603
                           A  7974    ; 2878			}
00298C                     A  7975    L_586:
                           A  7976    ; 2879	
                           A  7977    ; 2880			if (wc >= 0x80) {	/* Is this 
00298C 49018000            A  7978    	LD.LIS	BC,128
002990 DD27FD              A  7979    	LD	HL,(IX+%FFFFFFFD)
002993 B7                  A  7980    	OR	A,A
002994 40ED42              A  7981    	SBC.SIS	HL,BC
002997 38 51               A  7982    	JR	C,L_600
                           A  7983    ; 2881				cf |= NS_LFN;	/* LFN entr
002999 DD7EFF              A  7984    	LD	A,(IX+%FFFFFFFF)
00299C CBCF                A  7985    	SET	%1,A
00299E DD77FF              A  7986    	LD	(IX+%FFFFFFFF),A
                           A  7987    ; 2882	#if FF_CODE_PAGE == 0
                           A  7988    ; 2883				if (ExCvt) {	/* In SBCS 
                           A  7989    ; 2884					wc = ff_uni2oem(wc, COD
                           A  7990    ; 2885					if (wc & 0x80) wc = ExC
                           A  7991    ; 2886				} else {		/* In DBCS 
                           A  7992    ; 2887					wc = ff_uni2oem(ff_wtou
                           A  7993    ; 2888				}
                           A  7994    ; 2889	#elif FF_CODE_PAGE < 900	/* In SBCS 
                           A  7995    ; 2890				wc = ff_uni2oem(wc, CODEPAG
0029A1 01B50100            A  7996    	LD	BC,437
0029A5 C5                  A  7997    	PUSH	BC
0029A6 DD07FD              A  7998    	LD	BC,(IX+%FFFFFFFD)
0029A9 CD 00 00 00         A  7999    	CALL	__stoiu
0029AD 0E00                A  8000    	LD	C,%0
0029AF 0600                A  8001    	LD	B,%0
0029B1 C5                  A  8002    	PUSH	BC
0029B2 E5                  A  8003    	PUSH	HL
0029B3 CD 00 00 00         A  8004    	CALL	_ff_uni2oem
0029B7 C1                  A  8005    	POP	BC
0029B8 C1                  A  8006    	POP	BC
0029B9 C1                  A  8007    	POP	BC
0029BA DD75FD              A  8008    	LD	(IX+%FFFFFFFD),L
0029BD DD74FE              A  8009    	LD	(IX+%FFFFFFFE),H
                           A  8010    ; 2891				if (wc & 0x80) wc = ExCvt[w
0029C0 DD7EFD              A  8011    	LD	A,(IX+%FFFFFFFD)
0029C3 E680                A  8012    	AND	A,%80
0029C5 4F                  A  8013    	LD	C,A
0029C6 0600                A  8014    	LD	B,%0
0029C8 C5E1                A  8015    	LD	HL,BC
0029CA CD 00 00 00         A  8016    	CALL	__scmpzero
0029CE 28 1A               A  8017    	JR	Z,L_600
0029D0 DD7EFD              A  8018    	LD	A,(IX+%FFFFFFFD)
0029D3 CBBF                A  8019    	RES	%7,A
0029D5 4F                  A  8020    	LD	C,A
0029D6 CD 00 00 00         A  8021    	CALL	__stoiu
0029DA 01 0D 00 00         A  8022    	LD	BC,_ExCvt
0029DE 09                  A  8023    	ADD	HL,BC
0029DF 4E                  A  8024    	LD	C,(HL)
0029E0 0600                A  8025    	LD	B,%0
0029E2 C5E1                A  8026    	LD	HL,BC
0029E4 DD75FD              A  8027    	LD	(IX+%FFFFFFFD),L
0029E7 DD74FE              A  8028    	LD	(IX+%FFFFFFFE),H
                           A  8029    ; 2892	#else						/* In DBCS 
                           A  8030    ; 2893				wc = ff_uni2oem(ff_wtoupper
                           A  8031    ; 2894	#endif
                           A  8032    ; 2895			}
0029EA                     A  8033    L_600:
                           A  8034    ; 2896	
                           A  8035    ; 2897			if (wc >= 0x100) {				
0029EA 49010001            A  8036    	LD.LIS	BC,256
0029EE DD27FD              A  8037    	LD	HL,(IX+%FFFFFFFD)
0029F1 B7                  A  8038    	OR	A,A
0029F2 40ED42              A  8039    	SBC.SIS	HL,BC
0029F5 38 44               A  8040    	JR	C,L_599
                           A  8041    ; 2898				if (i >= ni - 1) {			
0029F7 DD31E6              A  8042    	LD	IY,(IX+%FFFFFFE6)
0029FA ED03FF              A  8043    	LEA	BC,IY+%FFFFFFFF
0029FD DD27EF              A  8044    	LD	HL,(IX+%FFFFFFEF)
002A00 B7                  A  8045    	OR	A,A
002A01 ED42                A  8046    	SBC	HL,BC
002A03 38 12               A  8047    	JR	C,L_589
                           A  8048    ; 2899					cf |= NS_LOSS | NS_LFN;
002A05 DD7EFF              A  8049    	LD	A,(IX+%FFFFFFFF)
002A08 F603                A  8050    	OR	A,%3
002A0A DD77FF              A  8051    	LD	(IX+%FFFFFFFF),A
                           A  8052    ; 2900					i = ni; continue;		
002A0D DD07E6              A  8053    	LD	BC,(IX+%FFFFFFE6)
002A10 DD0FEF              A  8054    	LD	(IX+%FFFFFFEF),BC
002A13 C3 CD 28 00         A  8055    	JR	L_603
                           A  8056    ; 2901				}
002A17                     A  8057    L_589:
                           A  8058    ; 2902				dp->fn[i++] = (BYTE)(wc >> 
002A17 DD17EF              A  8059    	LD	DE,(IX+%FFFFFFEF)
002A1A DD07FD              A  8060    	LD	BC,(IX+%FFFFFFFD)
002A1D CD 00 00 00         A  8061    	CALL	__stoiu
002A21 3E08                A  8062    	LD	A,%8
002A23 CD 00 00 00         A  8063    	CALL	__ishrs_b
002A27 7D                  A  8064    	LD	A,L
002A28 DD3106              A  8065    	LD	IY,(IX+%6)
002A2B ED231E              A  8066    	LEA	HL,IY+%1E
002A2E 19                  A  8067    	ADD	HL,DE
002A2F 77                  A  8068    	LD	(HL),A
002A30 DD07EF              A  8069    	LD	BC,(IX+%FFFFFFEF)
002A33 03                  A  8070    	INC	BC
002A34 DD0FEF              A  8071    	LD	(IX+%FFFFFFEF),BC
                           A  8072    ; 2903			} else {						
002A37 C3 BF 2A 00         A  8073    	JR	L_602
002A3B                     A  8074    L_599:
                           A  8075    ; 2904				if (wc == 0 || strchr("+,;=
002A3B DD27FD              A  8076    	LD	HL,(IX+%FFFFFFFD)
002A3E CD 00 00 00         A  8077    	CALL	__scmpzero
002A42 28 19               A  8078    	JR	Z,L_596
002A44 DD07FD              A  8079    	LD	BC,(IX+%FFFFFFFD)
002A47 CD 00 00 00         A  8080    	CALL	__stoiu
002A4B E5                  A  8081    	PUSH	HL
002A4C 01 09 00 00         A  8082    	LD	BC,L__298
002A50 C5                  A  8083    	PUSH	BC
002A51 CD 00 00 00         A  8084    	CALL	_strchr
002A55 C1                  A  8085    	POP	BC
002A56 C1                  A  8086    	POP	BC
002A57 CD 00 00 00         A  8087    	CALL	__icmpzero
002A5B 28 12               A  8088    	JR	Z,L_597
002A5D                     A  8089    L_596:
                           A  8090    ; 2905					wc = '_'; cf |= NS_LOSS
002A5D DD36FD5F            A  8091    	LD	(IX+%FFFFFFFD),%5F
002A61 DD36FE00            A  8092    	LD	(IX+%FFFFFFFE),%0
002A65 DD7EFF              A  8093    	LD	A,(IX+%FFFFFFFF)
002A68 F603                A  8094    	OR	A,%3
002A6A DD77FF              A  8095    	LD	(IX+%FFFFFFFF),A
                           A  8096    ; 2906				} else {
002A6D 18 50               A  8097    	JR	L_602
002A6F                     A  8098    L_597:
                           A  8099    ; 2907					if (IsUpper(wc)) {		
002A6F 49014100            A  8100    	LD.LIS	BC,65
002A73 DD27FD              A  8101    	LD	HL,(IX+%FFFFFFFD)
002A76 B7                  A  8102    	OR	A,A
002A77 40ED42              A  8103    	SBC.SIS	HL,BC
002A7A 38 15               A  8104    	JR	C,L_595
002A7C DD07FD              A  8105    	LD	BC,(IX+%FFFFFFFD)
002A7F 49215A00            A  8106    	LD.LIS	HL,90
002A83 B7                  A  8107    	OR	A,A
002A84 40ED42              A  8108    	SBC.SIS	HL,BC
002A87 38 08               A  8109    	JR	C,L_595
                           A  8110    ; 2908						b |= 2;
002A89 DD7EF9              A  8111    	LD	A,(IX+%FFFFFFF9)
002A8C CBCF                A  8112    	SET	%1,A
002A8E DD77F9              A  8113    	LD	(IX+%FFFFFFF9),A
                           A  8114    ; 2909					}
002A91                     A  8115    L_595:
                           A  8116    ; 2910					if (IsLower(wc)) {		
002A91 49016100            A  8117    	LD.LIS	BC,97
002A95 DD27FD              A  8118    	LD	HL,(IX+%FFFFFFFD)
002A98 B7                  A  8119    	OR	A,A
002A99 40ED42              A  8120    	SBC.SIS	HL,BC
002A9C 38 21               A  8121    	JR	C,L_602
002A9E DD07FD              A  8122    	LD	BC,(IX+%FFFFFFFD)
002AA1 49217A00            A  8123    	LD.LIS	HL,122
002AA5 B7                  A  8124    	OR	A,A
002AA6 40ED42              A  8125    	SBC.SIS	HL,BC
002AA9 38 14               A  8126    	JR	C,L_602
                           A  8127    ; 2911						b |= 1; wc -= 0x20;
002AAB DD7EF9              A  8128    	LD	A,(IX+%FFFFFFF9)
002AAE CBC7                A  8129    	SET	%0,A
002AB0 DD77F9              A  8130    	LD	(IX+%FFFFFFF9),A
002AB3 DD31FD              A  8131    	LD	IY,(IX+%FFFFFFFD)
002AB6 ED23E0              A  8132    	LEA	HL,IY+%FFFFFFE0
002AB9 DD75FD              A  8133    	LD	(IX+%FFFFFFFD),L
002ABC DD74FE              A  8134    	LD	(IX+%FFFFFFFE),H
                           A  8135    ; 2912					}
                           A  8136    ; 2913				}
                           A  8137    ; 2914			}
002ABF                     A  8138    L_602:
                           A  8139    ; 2915			dp->fn[i++] = (BYTE)wc;
002ABF DD07EF              A  8140    	LD	BC,(IX+%FFFFFFEF)
002AC2 DD7EFD              A  8141    	LD	A,(IX+%FFFFFFFD)
002AC5 DD3106              A  8142    	LD	IY,(IX+%6)
002AC8 ED231E              A  8143    	LEA	HL,IY+%1E
002ACB 09                  A  8144    	ADD	HL,BC
002ACC 77                  A  8145    	LD	(HL),A
002ACD DD07EF              A  8146    	LD	BC,(IX+%FFFFFFEF)
002AD0 03                  A  8147    	INC	BC
002AD1 DD0FEF              A  8148    	LD	(IX+%FFFFFFEF),BC
                           A  8149    ; 2916		}
002AD4 C3 CD 28 00         A  8150    	JR	L_603
002AD8                     A  8151    L_606:
                           A  8152    ; 2917	
                           A  8153    ; 2918		if (dp->fn[0] == DDEM) dp->fn[0] = 
002AD8 DD3106              A  8154    	LD	IY,(IX+%6)
002ADB ED031E              A  8155    	LEA	BC,IY+%1E
002ADE DD0FDA              A  8156    	LD	(IX+%FFFFFFDA),BC
002AE1 FD7E1E              A  8157    	LD	A,(IY+%1E)
002AE4 B7ED62              A  8158    	UEXT	HL
002AE7 6F                  A  8159    	LD	L,A
002AE8 01E50000            A  8160    	LD	BC,229
002AEC B7                  A  8161    	OR	A,A
002AED ED42                A  8162    	SBC	HL,BC
002AEF 20 0D               A  8163    	JR	NZ,L_608
002AF1 DD3106              A  8164    	LD	IY,(IX+%6)
002AF4 ED031E              A  8165    	LEA	BC,IY+%1E
002AF7 DD0FDA              A  8166    	LD	(IX+%FFFFFFDA),BC
002AFA FD361E05            A  8167    	LD	(IY+%1E),%5
002AFE                     A  8168    L_608:
                           A  8169    ; 2919	
                           A  8170    ; 2920		if (ni == 8) b <<= 2;				
002AFE 01080000            A  8171    	LD	BC,8
002B02 DD27E6              A  8172    	LD	HL,(IX+%FFFFFFE6)
002B05 B7                  A  8173    	OR	A,A
002B06 ED42                A  8174    	SBC	HL,BC
002B08 20 08               A  8175    	JR	NZ,L_611
002B0A DD7EF9              A  8176    	LD	A,(IX+%FFFFFFF9)
002B0D 87                  A  8177    	ADD	A,A
002B0E 87                  A  8178    	ADD	A,A
002B0F DD77F9              A  8179    	LD	(IX+%FFFFFFF9),A
002B12                     A  8180    L_611:
                           A  8181    ; 2921		if ((b & 0x0C) == 0x0C || (b & 0x03
002B12 DD7EF9              A  8182    	LD	A,(IX+%FFFFFFF9)
002B15 E60C                A  8183    	AND	A,%C
002B17 FE0C                A  8184    	CP	A,%C
002B19 28 09               A  8185    	JR	Z,L_610
002B1B DD7EF9              A  8186    	LD	A,(IX+%FFFFFFF9)
002B1E E603                A  8187    	AND	A,%3
002B20 FE03                A  8188    	CP	A,%3
002B22 20 08               A  8189    	JR	NZ,L_616
002B24                     A  8190    L_610:
002B24 DD7EFF              A  8191    	LD	A,(IX+%FFFFFFFF)
002B27 CBCF                A  8192    	SET	%1,A
002B29 DD77FF              A  8193    	LD	(IX+%FFFFFFFF),A
002B2C                     A  8194    L_616:
                           A  8195    ; 2922		if (!(cf & NS_LFN)) {				
002B2C DD7EFF              A  8196    	LD	A,(IX+%FFFFFFFF)
002B2F E602                A  8197    	AND	A,%2
002B31 20 1E               A  8198    	JR	NZ,L_617
                           A  8199    ; 2923			if (b & 0x01) cf |= NS_EXT;		
002B33 DD7EF9              A  8200    	LD	A,(IX+%FFFFFFF9)
002B36 E601                A  8201    	AND	A,%1
002B38 28 08               A  8202    	JR	Z,L_614
002B3A DD7EFF              A  8203    	LD	A,(IX+%FFFFFFFF)
002B3D CBE7                A  8204    	SET	%4,A
002B3F DD77FF              A  8205    	LD	(IX+%FFFFFFFF),A
002B42                     A  8206    L_614:
                           A  8207    ; 2924			if (b & 0x04) cf |= NS_BODY;	
002B42 DD7EF9              A  8208    	LD	A,(IX+%FFFFFFF9)
002B45 E604                A  8209    	AND	A,%4
002B47 28 08               A  8210    	JR	Z,L_617
002B49 DD7EFF              A  8211    	LD	A,(IX+%FFFFFFFF)
002B4C CBDF                A  8212    	SET	%3,A
002B4E DD77FF              A  8213    	LD	(IX+%FFFFFFFF),A
                           A  8214    ; 2925		}
002B51                     A  8215    L_617:
                           A  8216    ; 2926	
                           A  8217    ; 2927		dp->fn[NSFLAG] = cf;	/* SFN is c
002B51 DD31DA              A  8218    	LD	IY,(IX+%FFFFFFDA)
002B54 ED230B              A  8219    	LEA	HL,IY+%B
002B57 DD7EFF              A  8220    	LD	A,(IX+%FFFFFFFF)
002B5A 77                  A  8221    	LD	(HL),A
002B5B B7                  A  8222    	OR	A,A
                           A  8223    ; 2928	
                           A  8224    ; 2929		return FR_OK;
002B5C ED62                A  8225    	SBC	HL,HL
                           A  8226    ; 2930	
                           A  8227    ; 2931	
                           A  8228    ; 2932	#else	/* FF_USE_LFN : Non-LFN configu
                           A  8229    ; 2933		BYTE c, d, *sfn;
                           A  8230    ; 2934		UINT ni, si, i;
                           A  8231    ; 2935		const char *p;
                           A  8232    ; 2936	
                           A  8233    ; 2937		/* Create file name in directory fo
                           A  8234    ; 2938		p = *path; sfn = dp->fn;
                           A  8235    ; 2939		memset(sfn, ' ', 11);
                           A  8236    ; 2940		si = i = 0; ni = 8;
                           A  8237    ; 2941	#if FF_FS_RPATH != 0
                           A  8238    ; 2942		if (p[si] == '.') { /* Is this a do
                           A  8239    ; 2943			for (;;) {
                           A  8240    ; 2944				c = (BYTE)p[si++];
                           A  8241    ; 2945				if (c != '.' || si >= 3) br
                           A  8242    ; 2946				sfn[i++] = c;
                           A  8243    ; 2947			}
                           A  8244    ; 2948			if (!IsSeparator(c) && c > ' ')
                           A  8245    ; 2949			*path = p + si;					
                           A  8246    ; 2950			sfn[NSFLAG] = (c <= ' ') ? NS_L
                           A  8247    ; 2951			return FR_OK;
                           A  8248    ; 2952		}
                           A  8249    ; 2953	#endif
                           A  8250    ; 2954		for (;;) {
                           A  8251    ; 2955			c = (BYTE)p[si++];				
                           A  8252    ; 2956			if (c <= ' ') break; 			
                           A  8253    ; 2957			if (IsSeparator(c)) {			
                           A  8254    ; 2958				while (IsSeparator(p[si])) 
                           A  8255    ; 2959				break;
                           A  8256    ; 2960			}
                           A  8257    ; 2961			if (c == '.' || i >= ni) {		
                           A  8258    ; 2962				if (ni == 11 || c != '.') r
                           A  8259    ; 2963				i = 8; ni = 11;				
                           A  8260    ; 2964				continue;
                           A  8261    ; 2965			}
                           A  8262    ; 2966	#if FF_CODE_PAGE == 0
                           A  8263    ; 2967			if (ExCvt && c >= 0x80) {		
                           A  8264    ; 2968				c = ExCvt[c & 0x7F];		
                           A  8265    ; 2969			}
                           A  8266    ; 2970	#elif FF_CODE_PAGE < 900
                           A  8267    ; 2971			if (c >= 0x80) {				
                           A  8268    ; 2972				c = ExCvt[c & 0x7F];		
                           A  8269    ; 2973			}
                           A  8270    ; 2974	#endif
                           A  8271    ; 2975			if (dbc_1st(c)) {				
                           A  8272    ; 2976				d = (BYTE)p[si++];			
                           A  8273    ; 2977				if (!dbc_2nd(d) || i >= ni 
                           A  8274    ; 2978				sfn[i++] = c;
                           A  8275    ; 2979				sfn[i++] = d;
                           A  8276    ; 2980			} else {						
                           A  8277    ; 2981				if (strchr("*+,:;<=>[]|\"\?
                           A  8278    ; 2982				if (IsLower(c)) c -= 0x20;	
                           A  8279    ; 2983				sfn[i++] = c;
                           A  8280    ; 2984			}
                           A  8281    ; 2985		}
                           A  8282    ; 2986		*path = &p[si];						
                           A  8283    ; 2987		if (i == 0) return FR_INVALID_NAME;
                           A  8284    ; 2988	
                           A  8285    ; 2989		if (sfn[0] == DDEM) sfn[0] = RDDEM;
                           A  8286    ; 2990		sfn[NSFLAG] = (c <= ' ' || p[si] <=
                           A  8287    ; 2991	
                           A  8288    ; 2992		return FR_OK;
                           A  8289    ; 2993	#endif /* FF_USE_LFN */
                           A  8290    ; 2994	}
002B5E                     A  8291    L_618:
002B5E DDF9                A  8292    	LD	SP,IX
002B60 DDE1                A  8293    	POP	IX
002B62 C9                  A  8294    	RET	
                           A  8295    
                           A  8296    
                           A  8297    ;**************************** _create_name ****
                           A  8298    ;Name                         Addr/Register   S
                           A  8299    ;_ExCvt                              STATIC    
                           A  8300    ;_ff_uni2oem                         IMPORT  --
                           A  8301    ;_memset                             IMPORT  --
                           A  8302    ;_strchr                             IMPORT  --
                           A  8303    ;G_34                                 IX-38    
                           A  8304    ;G_32                                 IX-35    
                           A  8305    ;G_31                                 IX-32    
                           A  8306    ;G_30                                 IX-29    
                           A  8307    ;ni                                   IX-26    
                           A  8308    ;lfn                                  IX-23    
                           A  8309    ;p                                    IX-20    
                           A  8310    ;i                                    IX-17    
                           A  8311    ;uc                                   IX-14    
                           A  8312    ;si                                   IX-10    
                           A  8313    ;b                                     IX-7    
                           A  8314    ;di                                    IX-6    
                           A  8315    ;wc                                    IX-3    
                           A  8316    ;cf                                    IX-1    
                           A  8317    ;path                                  IX+9    
                           A  8318    ;dp                                    IX+6    
                           A  8319    
                           A  8320    
                           A  8321    ; Stack Frame Size: 53 (bytes)
                           A  8322    ;       Spill Code: 0 (instruction)
                           A  8323    
                           A  8324    
                           A  8325    	SEGMENT STRSECT
000000                     A  8326    L__268:
000000 2A3A3C3E 7C223F     A  8327    	DB	"*:<>|\"?"
000007 7F00                A  8328    	DB	127,0
000009                     A  8329    L__298:
000009 2B2C3B3D 5B5D       A  8330    	DB	"+,;=[]"
00000F 00                  A  8331    	DB	0
                           A  8332    	SEGMENT CODE
                           A  8333    ; 2995	
                           A  8334    ; 2996	
                           A  8335    ; 2997	
                           A  8336    ; 2998	
                           A  8337    ; 2999	/*-------------------------------------
                           A  8338    ; 3000	/* Follow a file path                  
                           A  8339    ; 3001	/*-------------------------------------
                           A  8340    ; 3002	
                           A  8341    ; 3003	static FRESULT follow_path (	/* FR_O
                           A  8342    ; 3004		DIR* dp,					/* Dire
                           A  8343    ; 3005		const TCHAR* path			/* Full
                           A  8344    ; 3006	)
                           A  8345    ; 3007	{
002B63                     A  8346    _follow_path:
002B63 21F6FFFF            A  8347    	LD	HL,-10
002B67 CD 00 00 00         A  8348    	CALL	__frameset
                           A  8349    ; 3008		FRESULT res;
                           A  8350    ; 3009		BYTE ns;
                           A  8351    ; 3010		FATFS *fs = dp->obj.fs;
002B6B DD3106              A  8352    	LD	IY,(IX+%6)
002B6E FD0700              A  8353    	LD	BC,(IY+%0)
002B71 DD0FF9              A  8354    	LD	(IX+%FFFFFFF9),BC
                           A  8355    ; 3011	
                           A  8356    ; 3012	
                           A  8357    ; 3013	#if FF_FS_RPATH != 0
                           A  8358    ; 3014		if (!IsSeparator(*path) && (FF_STR_
                           A  8359    ; 3015			dp->obj.sclust = fs->cdir;		
                           A  8360    ; 3016		} else
                           A  8361    ; 3017	#endif
                           A  8362    ; 3018		{									
                           A  8363    ; 3019			while (IsSeparator(*path)) path
002B74 18 0D               A  8364    	JR	L_621
002B76                     A  8365    L_622:
002B76 DD0709              A  8366    	LD	BC,(IX+%9)
002B79 DD0FF6              A  8367    	LD	(IX+%FFFFFFF6),BC
002B7C DD0709              A  8368    	LD	BC,(IX+%9)
002B7F 03                  A  8369    	INC	BC
002B80 DD0F09              A  8370    	LD	(IX+%9),BC
002B83                     A  8371    L_621:
002B83 DD2709              A  8372    	LD	HL,(IX+%9)
002B86 7E                  A  8373    	LD	A,(HL)
002B87 47                  A  8374    	LD	B,A
002B88 17ED62              A  8375    	SEXT	HL
002B8B 68                  A  8376    	LD	L,B
002B8C 012F0000            A  8377    	LD	BC,47
002B90 B7                  A  8378    	OR	A,A
002B91 ED42                A  8379    	SBC	HL,BC
002B93 28 E1               A  8380    	JR	Z,L_622
002B95 DD2709              A  8381    	LD	HL,(IX+%9)
002B98 7E                  A  8382    	LD	A,(HL)
002B99 47                  A  8383    	LD	B,A
002B9A 17ED62              A  8384    	SEXT	HL
002B9D 68                  A  8385    	LD	L,B
002B9E 015C0000            A  8386    	LD	BC,92
002BA2 B7                  A  8387    	OR	A,A
002BA3 ED42                A  8388    	SBC	HL,BC
002BA5 28 CF               A  8389    	JR	Z,L_622
                           A  8390    ; 3020			dp->obj.sclust = 0;				
002BA7 01000000            A  8391    	LD	BC,0
002BAB DD3106              A  8392    	LD	IY,(IX+%6)
002BAE FD0F07              A  8393    	LD	(IY+%7),BC
002BB1 FD360A00            A  8394    	LD	(IY+%A),%0
                           A  8395    ; 3021		}
                           A  8396    ; 3022	#if FF_FS_EXFAT
                           A  8397    ; 3023		dp->obj.n_frag = 0;	/* Invalidate l
                           A  8398    ; 3024	#if FF_FS_RPATH != 0
                           A  8399    ; 3025		if (fs->fs_type == FS_EXFAT && dp->
                           A  8400    ; 3026			DIR dj;
                           A  8401    ; 3027	
                           A  8402    ; 3028			dp->obj.c_scl = fs->cdc_scl;
                           A  8403    ; 3029			dp->obj.c_size = fs->cdc_size;
                           A  8404    ; 3030			dp->obj.c_ofs = fs->cdc_ofs;
                           A  8405    ; 3031			res = load_obj_xdir(&dj, &dp->o
                           A  8406    ; 3032			if (res != FR_OK) return res;
                           A  8407    ; 3033			dp->obj.objsize = ld_dword(fs->
                           A  8408    ; 3034			dp->obj.stat = fs->dirbuf[XDIR_
                           A  8409    ; 3035		}
                           A  8410    ; 3036	#endif
                           A  8411    ; 3037	#endif
                           A  8412    ; 3038	
                           A  8413    ; 3039		if ((UINT)*path < ' ') {			
002BB5 DD2709              A  8414    	LD	HL,(IX+%9)
002BB8 7E                  A  8415    	LD	A,(HL)
002BB9 47                  A  8416    	LD	B,A
002BBA 17ED62              A  8417    	SEXT	HL
002BBD 68                  A  8418    	LD	L,B
002BBE 01200000            A  8419    	LD	BC,32
002BC2 B7                  A  8420    	OR	A,A
002BC3 ED42                A  8421    	SBC	HL,BC
002BC5 30 20               A  8422    	JR	NC,L_639
                           A  8423    ; 3040			dp->fn[NSFLAG] = NS_NONAME;
002BC7 DD3106              A  8424    	LD	IY,(IX+%6)
002BCA ED2329              A  8425    	LEA	HL,IY+%29
002BCD 3680                A  8426    	LD	(HL),%80
                           A  8427    ; 3041			res = dir_sdi(dp, 0);
002BCF 01000000            A  8428    	LD	BC,0
002BD3 C5                  A  8429    	PUSH	BC
002BD4 C5                  A  8430    	PUSH	BC
002BD5 DD0706              A  8431    	LD	BC,(IX+%6)
002BD8 C5                  A  8432    	PUSH	BC
002BD9 CD 18 11 00         A  8433    	CALL	_dir_sdi
002BDD C1                  A  8434    	POP	BC
002BDE C1                  A  8435    	POP	BC
002BDF C1                  A  8436    	POP	BC
002BE0 DD2FFD              A  8437    	LD	(IX+%FFFFFFFD),HL
                           A  8438    ; 3042	
                           A  8439    ; 3043		} else {							
002BE3 C3 87 2C 00         A  8440    	JR	L_643
                           A  8441    ; 3044			for (;;) {
002BE7                     A  8442    L_639:
                           A  8443    ; 3045				res = create_name(dp, &path
002BE7 ED6509              A  8444    	PEA	IX+%9
002BEA DD0706              A  8445    	LD	BC,(IX+%6)
002BED C5                  A  8446    	PUSH	BC
002BEE CD 5E 26 00         A  8447    	CALL	_create_name
002BF2 C1                  A  8448    	POP	BC
002BF3 C1                  A  8449    	POP	BC
002BF4 DD2FFD              A  8450    	LD	(IX+%FFFFFFFD),HL
                           A  8451    ; 3046				if (res != FR_OK) break;
002BF7 CD 00 00 00         A  8452    	CALL	__icmpzero
002BFB C2 87 2C 00         A  8453    	JR	NZ,L_643
                           A  8454    ; 3047				res = dir_find(dp);			
002BFF DD0706              A  8455    	LD	BC,(IX+%6)
002C02 C5                  A  8456    	PUSH	BC
002C03 CD FC 1D 00         A  8457    	CALL	_dir_find
002C07 C1                  A  8458    	POP	BC
002C08 DD2FFD              A  8459    	LD	(IX+%FFFFFFFD),HL
                           A  8460    ; 3048				ns = dp->fn[NSFLAG];
002C0B DD3106              A  8461    	LD	IY,(IX+%6)
002C0E ED2329              A  8462    	LEA	HL,IY+%29
002C11 7E                  A  8463    	LD	A,(HL)
002C12 DD77FC              A  8464    	LD	(IX+%FFFFFFFC),A
                           A  8465    ; 3049				if (res != FR_OK) {			
002C15 DD27FD              A  8466    	LD	HL,(IX+%FFFFFFFD)
002C18 CD 00 00 00         A  8467    	CALL	__icmpzero
002C1C 28 1C               A  8468    	JR	Z,L_635
                           A  8469    ; 3050					if (res == FR_NO_FILE) 
002C1E 01040000            A  8470    	LD	BC,4
002C22 DD27FD              A  8471    	LD	HL,(IX+%FFFFFFFD)
002C25 B7                  A  8472    	OR	A,A
002C26 ED42                A  8473    	SBC	HL,BC
002C28 20 5D               A  8474    	JR	NZ,L_643
                           A  8475    ; 3051						if (FF_FS_RPATH && 
                           A  8476    ; 3052							if (!(ns & NS_L
                           A  8477    ; 3053							dp->fn[NSFLAG] 
                           A  8478    ; 3054							res = FR_OK;
                           A  8479    ; 3055						} else {			
                           A  8480    ; 3056							if (!(ns & NS_L
002C2A DD7EFC              A  8481    	LD	A,(IX+%FFFFFFFC)
002C2D E604                A  8482    	AND	A,%4
002C2F 20 56               A  8483    	JR	NZ,L_643
002C31 01050000            A  8484    	LD	BC,5
002C35 DD0FFD              A  8485    	LD	(IX+%FFFFFFFD),BC
                           A  8486    ; 3057						}
                           A  8487    ; 3058					}
                           A  8488    ; 3059					break;
002C38 18 4D               A  8489    	JR	L_643
                           A  8490    ; 3060				}
002C3A                     A  8491    L_635:
                           A  8492    ; 3061				if (ns & NS_LAST) break;	
002C3A DD7EFC              A  8493    	LD	A,(IX+%FFFFFFFC)
002C3D E604                A  8494    	AND	A,%4
002C3F 20 46               A  8495    	JR	NZ,L_643
                           A  8496    ; 3062				/* Get into the sub-directo
                           A  8497    ; 3063				if (!(dp->obj.attr & AM_DIR
002C41 DD3106              A  8498    	LD	IY,(IX+%6)
002C44 FD7E05              A  8499    	LD	A,(IY+%5)
002C47 E610                A  8500    	AND	A,%10
002C49 20 09               A  8501    	JR	NZ,L_638
                           A  8502    ; 3064					res = FR_NO_PATH; break
002C4B 01050000            A  8503    	LD	BC,5
002C4F DD0FFD              A  8504    	LD	(IX+%FFFFFFFD),BC
002C52 18 33               A  8505    	JR	L_643
                           A  8506    ; 3065				}
002C54                     A  8507    L_638:
                           A  8508    ; 3066	#if FF_FS_EXFAT
                           A  8509    ; 3067				if (fs->fs_type == FS_EXFAT
                           A  8510    ; 3068					dp->obj.c_scl = dp->obj
                           A  8511    ; 3069					dp->obj.c_size = ((DWOR
                           A  8512    ; 3070					dp->obj.c_ofs = dp->blk
                           A  8513    ; 3071					init_alloc_info(fs, &dp
                           A  8514    ; 3072				} else
                           A  8515    ; 3073	#endif
                           A  8516    ; 3074				{
                           A  8517    ; 3075					dp->obj.sclust = ld_clu
002C54 DD3106              A  8518    	LD	IY,(IX+%6)
002C57 FD270F              A  8519    	LD	HL,(IY+%F)
002C5A FD5E12              A  8520    	LD	E,(IY+%12)
002C5D 01FF0100            A  8521    	LD	BC,511
002C61 AF                  A  8522    	XOR	A,A
002C62 CD 00 00 00         A  8523    	CALL	__land
002C66 E5C1                A  8524    	LD	BC,HL
002C68 DD31F9              A  8525    	LD	IY,(IX+%FFFFFFF9)
002C6B ED2332              A  8526    	LEA	HL,IY+%32
002C6E 09                  A  8527    	ADD	HL,BC
002C6F E5                  A  8528    	PUSH	HL
002C70 DD07F9              A  8529    	LD	BC,(IX+%FFFFFFF9)
002C73 C5                  A  8530    	PUSH	BC
002C74 CD 64 16 00         A  8531    	CALL	_ld_clust
002C78 C1                  A  8532    	POP	BC
002C79 C1                  A  8533    	POP	BC
002C7A DD3106              A  8534    	LD	IY,(IX+%6)
002C7D FD2F07              A  8535    	LD	(IY+%7),HL
002C80 FD730A              A  8536    	LD	(IY+%A),E
                           A  8537    ; 3076				}
                           A  8538    ; 3077			}
002C83 C3 E7 2B 00         A  8539    	JR	L_639
                           A  8540    ; 3078		}
002C87                     A  8541    L_643:
                           A  8542    ; 3079	
                           A  8543    ; 3080		return res;
002C87 DD27FD              A  8544    	LD	HL,(IX+%FFFFFFFD)
                           A  8545    ; 3081	}
002C8A DDF9                A  8546    	LD	SP,IX
002C8C DDE1                A  8547    	POP	IX
002C8E C9                  A  8548    	RET	
                           A  8549    
                           A  8550    
                           A  8551    ;**************************** _follow_path ****
                           A  8552    ;Name                         Addr/Register   S
                           A  8553    ;fs                                    IX-7    
                           A  8554    ;ns                                    IX-4    
                           A  8555    ;res                                   IX-3    
                           A  8556    ;path                                  IX+9    
                           A  8557    ;dp                                    IX+6    
                           A  8558    
                           A  8559    
                           A  8560    ; Stack Frame Size: 22 (bytes)
                           A  8561    ;       Spill Code: 0 (instruction)
                           A  8562    
                           A  8563    
                           A  8564    ; 3082	
                           A  8565    ; 3083	
                           A  8566    ; 3084	
                           A  8567    ; 3085	
                           A  8568    ; 3086	/*-------------------------------------
                           A  8569    ; 3087	/* Get logical drive number from path n
                           A  8570    ; 3088	/*-------------------------------------
                           A  8571    ; 3089	
                           A  8572    ; 3090	static int get_ldnumber (	/* Returns 
                           A  8573    ; 3091		const TCHAR** path		/* Pointer 
                           A  8574    ; 3092	)
                           A  8575    ; 3093	{
002C8F                     A  8576    _get_ldnumber:
002C8F 21F0FFFF            A  8577    	LD	HL,-16
002C93 CD 00 00 00         A  8578    	CALL	__frameset
                           A  8579    ; 3094		const TCHAR *tp, *tt;
                           A  8580    ; 3095		TCHAR tc;
                           A  8581    ; 3096		int i;
                           A  8582    ; 3097		int vol = -1;
002C97 01FFFFFF            A  8583    	LD	BC,16777215
002C9B DD0FF3              A  8584    	LD	(IX+%FFFFFFF3),BC
                           A  8585    ; 3098	#if FF_STR_VOLUME_ID		/* Find str
                           A  8586    ; 3099		const char *sp;
                           A  8587    ; 3100		char c;
                           A  8588    ; 3101	#endif
                           A  8589    ; 3102	
                           A  8590    ; 3103		tt = tp = *path;
002C9E DD2706              A  8591    	LD	HL,(IX+%6)
002CA1 ED07                A  8592    	LD	BC,(HL)
002CA3 DD0FFD              A  8593    	LD	(IX+%FFFFFFFD),BC
002CA6 DD0FFA              A  8594    	LD	(IX+%FFFFFFFA),BC
                           A  8595    ; 3104		if (!tp) return vol;	/* Invalid 
002CA9 C5E1                A  8596    	LD	HL,BC
002CAB CD 00 00 00         A  8597    	CALL	__icmpzero
002CAF 20 08               A  8598    	JR	NZ,L_648
002CB1 21FFFFFF            A  8599    	LD	HL,16777215
002CB5 C3 65 2D 00         A  8600    	JR	L_660
                           A  8601    ; 3105		do tc = *tt++; while (!IsTerminator
002CB9                     A  8602    L_648:
002CB9 DD07FA              A  8603    	LD	BC,(IX+%FFFFFFFA)
002CBC DD0FF0              A  8604    	LD	(IX+%FFFFFFF0),BC
002CBF C5E1                A  8605    	LD	HL,BC
002CC1 7E                  A  8606    	LD	A,(HL)
002CC2 DD77F9              A  8607    	LD	(IX+%FFFFFFF9),A
002CC5 DD07FA              A  8608    	LD	BC,(IX+%FFFFFFFA)
002CC8 03                  A  8609    	INC	BC
002CC9 DD0FFA              A  8610    	LD	(IX+%FFFFFFFA),BC
002CCC DD7EF9              A  8611    	LD	A,(IX+%FFFFFFF9)
002CCF FE20                A  8612    	CP	A,%20
002CD1 38 07               A  8613    	JR	C,L_658
002CD3 DD7EF9              A  8614    	LD	A,(IX+%FFFFFFF9)
002CD6 FE3A                A  8615    	CP	A,%3A
002CD8 20 DF               A  8616    	JR	NZ,L_648
002CDA                     A  8617    L_658:
                           A  8618    ; 3106	
                           A  8619    ; 3107		if (tc == ':') {	/* DOS/Windows 
002CDA DD7EF9              A  8620    	LD	A,(IX+%FFFFFFF9)
002CDD FE3A                A  8621    	CP	A,%3A
002CDF 20 7A               A  8622    	JR	NZ,L_659
                           A  8623    ; 3108			i = FF_VOLUMES;
002CE1 01010000            A  8624    	LD	BC,1
002CE5 DD0FF6              A  8625    	LD	(IX+%FFFFFFF6),BC
                           A  8626    ; 3109			if (IsDigit(*tp) && tp + 2 == t
002CE8 DD27FD              A  8627    	LD	HL,(IX+%FFFFFFFD)
002CEB 7E                  A  8628    	LD	A,(HL)
002CEC 47                  A  8629    	LD	B,A
002CED 17ED62              A  8630    	SEXT	HL
002CF0 68                  A  8631    	LD	L,B
002CF1 01300000            A  8632    	LD	BC,48
002CF5 B7                  A  8633    	OR	A,A
002CF6 ED42                A  8634    	SBC	HL,BC
002CF8 FA 36 2D 00         A  8635    	JP	M,L_655
002CFC DD27FD              A  8636    	LD	HL,(IX+%FFFFFFFD)
002CFF 7E                  A  8637    	LD	A,(HL)
002D00 47                  A  8638    	LD	B,A
002D01 17ED62              A  8639    	SEXT	HL
002D04 68                  A  8640    	LD	L,B
002D05 E5C1                A  8641    	LD	BC,HL
002D07 21390000            A  8642    	LD	HL,57
002D0B B7                  A  8643    	OR	A,A
002D0C ED42                A  8644    	SBC	HL,BC
002D0E CD 00 00 00         A  8645    	CALL	__setflag
002D12 FA 36 2D 00         A  8646    	JP	M,L_655
002D16 DD31FD              A  8647    	LD	IY,(IX+%FFFFFFFD)
002D19 ED2302              A  8648    	LEA	HL,IY+%2
002D1C DD07FA              A  8649    	LD	BC,(IX+%FFFFFFFA)
002D1F B7                  A  8650    	OR	A,A
002D20 ED42                A  8651    	SBC	HL,BC
002D22 20 12               A  8652    	JR	NZ,L_655
                           A  8653    ; 3110				i = (int)*tp - '0';	/* Get 
002D24 DD27FD              A  8654    	LD	HL,(IX+%FFFFFFFD)
002D27 7E                  A  8655    	LD	A,(HL)
002D28 47                  A  8656    	LD	B,A
002D29 17ED62              A  8657    	SEXT	HL
002D2C 68                  A  8658    	LD	L,B
002D2D E5FDE1              A  8659    	LD	IY,HL
002D30 ED33D0              A  8660    	LEA	IY,IY+%FFFFFFD0
002D33 DD3EF6              A  8661    	LD	(IX+%FFFFFFF6),IY
                           A  8662    ; 3111			}
002D36                     A  8663    L_655:
                           A  8664    ; 3112	#if FF_STR_VOLUME_ID == 1	/* Arbitrar
                           A  8665    ; 3113			else {
                           A  8666    ; 3114				i = 0;
                           A  8667    ; 3115				do {
                           A  8668    ; 3116					sp = VolumeStr[i]; tp =
                           A  8669    ; 3117					do {	/* Compare the 
                           A  8670    ; 3118						c = *sp++; tc = *tp
                           A  8671    ; 3119						if (IsLower(c)) c -
                           A  8672    ; 3120						if (IsLower(tc)) tc
                           A  8673    ; 3121					} while (c && (TCHAR)c 
                           A  8674    ; 3122				} while ((c || tp != tt) &&
                           A  8675    ; 3123			}
                           A  8676    ; 3124	#endif
                           A  8677    ; 3125			if (i < FF_VOLUMES) {	/* If a
002D36 01010000            A  8678    	LD	BC,1
002D3A DD27F6              A  8679    	LD	HL,(IX+%FFFFFFF6)
002D3D B7                  A  8680    	OR	A,A
002D3E ED42                A  8681    	SBC	HL,BC
002D40 CD 00 00 00         A  8682    	CALL	__setflag
002D44 F2 56 2D 00         A  8683    	JP	P,L_656
                           A  8684    ; 3126				vol = i;		/* Drive nu
002D48 DD07F6              A  8685    	LD	BC,(IX+%FFFFFFF6)
002D4B DD0FF3              A  8686    	LD	(IX+%FFFFFFF3),BC
                           A  8687    ; 3127				*path = tt;		/* Snip the
002D4E DD2706              A  8688    	LD	HL,(IX+%6)
002D51 DD07FA              A  8689    	LD	BC,(IX+%FFFFFFFA)
002D54 ED0F                A  8690    	LD	(HL),BC
                           A  8691    ; 3128			}
002D56                     A  8692    L_656:
                           A  8693    ; 3129			return vol;
002D56 DD27F3              A  8694    	LD	HL,(IX+%FFFFFFF3)
002D59 18 0A               A  8695    	JR	L_660
                           A  8696    ; 3130		}
002D5B                     A  8697    L_659:
                           A  8698    ; 3131	#if FF_STR_VOLUME_ID == 2		/* Unix
                           A  8699    ; 3132		if (*tp == '/') {			/* Is t
                           A  8700    ; 3133			while (*(tp + 1) == '/') tp++;	
                           A  8701    ; 3134			i = 0;
                           A  8702    ; 3135			do {
                           A  8703    ; 3136				tt = tp; sp = VolumeStr[i];
                           A  8704    ; 3137				do {	/* Compare the volu
                           A  8705    ; 3138					c = *sp++; tc = *(++tt)
                           A  8706    ; 3139					if (IsLower(c)) c -= 0x
                           A  8707    ; 3140					if (IsLower(tc)) tc -= 
                           A  8708    ; 3141				} while (c && (TCHAR)c == t
                           A  8709    ; 3142			} while ((c || (tc != '/' && !I
                           A  8710    ; 3143			if (i < FF_VOLUMES) {	/* If a
                           A  8711    ; 3144				vol = i;		/* Drive nu
                           A  8712    ; 3145				*path = tt;		/* Snip the
                           A  8713    ; 3146			}
                           A  8714    ; 3147			return vol;
                           A  8715    ; 3148		}
                           A  8716    ; 3149	#endif
                           A  8717    ; 3150		/* No drive prefix is found */
                           A  8718    ; 3151	#if FF_FS_RPATH != 0
                           A  8719    ; 3152		vol = CurrVol;	/* Default drive is
                           A  8720    ; 3153	#else
                           A  8721    ; 3154		vol = 0;		/* Default drive is
002D5B 01000000            A  8722    	LD	BC,0
002D5F DD0FF3              A  8723    	LD	(IX+%FFFFFFF3),BC
002D62 B7                  A  8724    	OR	A,A
                           A  8725    ; 3155	#endif
                           A  8726    ; 3156		return vol;		/* Return the defau
002D63 ED62                A  8727    	SBC	HL,HL
                           A  8728    ; 3157	}
002D65                     A  8729    L_660:
002D65 DDF9                A  8730    	LD	SP,IX
002D67 DDE1                A  8731    	POP	IX
002D69 C9                  A  8732    	RET	
                           A  8733    
                           A  8734    
                           A  8735    ;**************************** _get_ldnumber ***
                           A  8736    ;Name                         Addr/Register   S
                           A  8737    ;vol                                  IX-13    
                           A  8738    ;i                                    IX-10    
                           A  8739    ;tc                                    IX-7    
                           A  8740    ;tt                                    IX-6    
                           A  8741    ;tp                                    IX-3    
                           A  8742    ;path                                  IX+6    
                           A  8743    
                           A  8744    
                           A  8745    ; Stack Frame Size: 25 (bytes)
                           A  8746    ;       Spill Code: 0 (instruction)
                           A  8747    
                           A  8748    
                           A  8749    ; 3158	
                           A  8750    ; 3159	
                           A  8751    ; 3160	
                           A  8752    ; 3161	
                           A  8753    ; 3162	/*-------------------------------------
                           A  8754    ; 3163	/* GPT support functions               
                           A  8755    ; 3164	/*-------------------------------------
                           A  8756    ; 3165	
                           A  8757    ; 3166	#if FF_LBA64
                           A  8758    ; 3167	
                           A  8759    ; 3168	/* Calculate CRC32 in byte-by-byte */
                           A  8760    ; 3169	
                           A  8761    ; 3170	static DWORD crc32 (	/* Returns next
                           A  8762    ; 3171		DWORD crc,			/* Current CRC 
                           A  8763    ; 3172		BYTE d				/* A byte to be
                           A  8764    ; 3173	)
                           A  8765    ; 3174	{
                           A  8766    ; 3175		BYTE b;
                           A  8767    ; 3176	
                           A  8768    ; 3177	
                           A  8769    ; 3178		for (b = 1; b; b <<= 1) {
                           A  8770    ; 3179			crc ^= (d & b) ? 1 : 0;
                           A  8771    ; 3180			crc = (crc & 1) ? crc >> 1 ^ 0x
                           A  8772    ; 3181		}
                           A  8773    ; 3182		return crc;
                           A  8774    ; 3183	}
                           A  8775    ; 3184	
                           A  8776    ; 3185	
                           A  8777    ; 3186	/* Check validity of GPT header */
                           A  8778    ; 3187	
                           A  8779    ; 3188	static int test_gpt_header (	/* 0:In
                           A  8780    ; 3189		const BYTE* gpth			/* Poin
                           A  8781    ; 3190	)
                           A  8782    ; 3191	{
                           A  8783    ; 3192		UINT i;
                           A  8784    ; 3193		DWORD bcc;
                           A  8785    ; 3194	
                           A  8786    ; 3195	
                           A  8787    ; 3196		if (memcmp(gpth + GPTH_Sign, "EFI P
                           A  8788    ; 3197		for (i = 0, bcc = 0xFFFFFFFF; i < 9
                           A  8789    ; 3198			bcc = crc32(bcc, i - GPTH_Bcc <
                           A  8790    ; 3199		}
                           A  8791    ; 3200		if (~bcc != ld_dword(gpth + GPTH_Bc
                           A  8792    ; 3201		if (ld_dword(gpth + GPTH_PteSize) !
                           A  8793    ; 3202		if (ld_dword(gpth + GPTH_PtNum) > 1
                           A  8794    ; 3203	
                           A  8795    ; 3204		return 1;
                           A  8796    ; 3205	}
                           A  8797    ; 3206	
                           A  8798    ; 3207	#if !FF_FS_READONLY && FF_USE_MKFS
                           A  8799    ; 3208	
                           A  8800    ; 3209	/* Generate random value */
                           A  8801    ; 3210	static DWORD make_rand (
                           A  8802    ; 3211		DWORD seed,		/* Seed value */
                           A  8803    ; 3212		BYTE* buff,		/* Output buffer */
                           A  8804    ; 3213		UINT n			/* Data length */
                           A  8805    ; 3214	)
                           A  8806    ; 3215	{
                           A  8807    ; 3216		UINT r;
                           A  8808    ; 3217	
                           A  8809    ; 3218	
                           A  8810    ; 3219		if (seed == 0) seed = 1;
                           A  8811    ; 3220		do {
                           A  8812    ; 3221			for (r = 0; r < 8; r++) seed = 
                           A  8813    ; 3222			*buff++ = (BYTE)seed;
                           A  8814    ; 3223		} while (--n);
                           A  8815    ; 3224		return seed;
                           A  8816    ; 3225	}
                           A  8817    ; 3226	
                           A  8818    ; 3227	#endif
                           A  8819    ; 3228	#endif
                           A  8820    ; 3229	
                           A  8821    ; 3230	
                           A  8822    ; 3231	
                           A  8823    ; 3232	/*-------------------------------------
                           A  8824    ; 3233	/* Load a sector and check if it is an 
                           A  8825    ; 3234	/*-------------------------------------
                           A  8826    ; 3235	
                           A  8827    ; 3236	/* Check what the sector is */
                           A  8828    ; 3237	
                           A  8829    ; 3238	static UINT check_fs (	/* 0:FAT/FAT32 
                           A  8830    ; 3239		FATFS* fs,			/* Filesystem o
                           A  8831    ; 3240		LBA_t sect			/* Sector to lo
                           A  8832    ; 3241	)
                           A  8833    ; 3242	{
002D6A                     A  8834    _check_fs:
002D6A 21ECFFFF            A  8835    	LD	HL,-20
002D6E CD 00 00 00         A  8836    	CALL	__frameset
                           A  8837    ; 3243		WORD w, sign;
                           A  8838    ; 3244		BYTE b;
                           A  8839    ; 3245	
                           A  8840    ; 3246	
                           A  8841    ; 3247		fs->wflag = 0; fs->winsect = (LBA_t
002D72 DD3106              A  8842    	LD	IY,(IX+%6)
002D75 FD360300            A  8843    	LD	(IY+%3),%0
002D79 01FFFFFF            A  8844    	LD	BC,16777215
002D7D FD0F2E              A  8845    	LD	(IY+%2E),BC
002D80 FD3631FF            A  8846    	LD	(IY+%31),%FF
                           A  8847    ; 3248		if (move_window(fs, sect) != FR_OK)
002D84 DD4E0C              A  8848    	LD	C,(IX+%C)
002D87 0600                A  8849    	LD	B,%0
002D89 C5                  A  8850    	PUSH	BC
002D8A DD0709              A  8851    	LD	BC,(IX+%9)
002D8D C5                  A  8852    	PUSH	BC
002D8E DD0706              A  8853    	LD	BC,(IX+%6)
002D91 C5                  A  8854    	PUSH	BC
002D92 CD A6 03 00         A  8855    	CALL	_move_window
002D96 C1                  A  8856    	POP	BC
002D97 C1                  A  8857    	POP	BC
002D98 C1                  A  8858    	POP	BC
002D99 CD 00 00 00         A  8859    	CALL	__icmpzero
002D9D 28 08               A  8860    	JR	Z,L_662
002D9F 21040000            A  8861    	LD	HL,4
002DA3 C3 3D 2F 00         A  8862    	JR	L_685
002DA7                     A  8863    L_662:
                           A  8864    ; 3249		sign = ld_word(fs->win + BS_55AA);
002DA7 DD3106              A  8865    	LD	IY,(IX+%6)
002DAA ED0332              A  8866    	LEA	BC,IY+%32
002DAD DD0FF9              A  8867    	LD	(IX+%FFFFFFF9),BC
002DB0 DD0FEF              A  8868    	LD	(IX+%FFFFFFEF),BC
002DB3 01FE0100            A  8869    	LD	BC,510
002DB7 DD27F9              A  8870    	LD	HL,(IX+%FFFFFFF9)
002DBA 09                  A  8871    	ADD	HL,BC
002DBB E5                  A  8872    	PUSH	HL
002DBC CD 00 00 00         A  8873    	CALL	_ld_word
002DC0 C1                  A  8874    	POP	BC
002DC1 DD75F5              A  8875    	LD	(IX+%FFFFFFF5),L
002DC4 DD74F6              A  8876    	LD	(IX+%FFFFFFF6),H
                           A  8877    ; 3250	#if FF_FS_EXFAT
                           A  8878    ; 3251		if (sign == 0xAA55 && !memcmp(fs->w
                           A  8879    ; 3252	#endif
                           A  8880    ; 3253		b = fs->win[BS_JmpBoot];
002DC7 DD27F9              A  8881    	LD	HL,(IX+%FFFFFFF9)
002DCA 7E                  A  8882    	LD	A,(HL)
002DCB DD77FC              A  8883    	LD	(IX+%FFFFFFFC),A
                           A  8884    ; 3254		if (b == 0xEB || b == 0xE9 || b == 
002DCE FEEB                A  8885    	CP	A,%EB
002DD0 28 10               A  8886    	JR	Z,L_679
002DD2 DD7EFC              A  8887    	LD	A,(IX+%FFFFFFFC)
002DD5 FEE9                A  8888    	CP	A,%E9
002DD7 28 09               A  8889    	JR	Z,L_679
002DD9 DD7EFC              A  8890    	LD	A,(IX+%FFFFFFFC)
002DDC FEE8                A  8891    	CP	A,%E8
002DDE C2 1D 2F 00         A  8892    	JR	NZ,L_684
002DE2                     A  8893    L_679:
                           A  8894    ; 3255			if (sign == 0xAA55 && !memcmp(f
002DE2 490155AA            A  8895    	LD.LIS	BC,43605
002DE6 DD27F5              A  8896    	LD	HL,(IX+%FFFFFFF5)
002DE9 B7                  A  8897    	OR	A,A
002DEA 40ED42              A  8898    	SBC.SIS	HL,BC
002DED 20 2B               A  8899    	JR	NZ,L_667
002DEF DD07F9              A  8900    	LD	BC,(IX+%FFFFFFF9)
002DF2 DD0FEF              A  8901    	LD	(IX+%FFFFFFEF),BC
002DF5 01080000            A  8902    	LD	BC,8
002DF9 C5                  A  8903    	PUSH	BC
002DFA 01 10 00 00         A  8904    	LD	BC,L__336
002DFE C5                  A  8905    	PUSH	BC
002DFF DD31F9              A  8906    	LD	IY,(IX+%FFFFFFF9)
002E02 ED0352              A  8907    	LEA	BC,IY+%52
002E05 C5                  A  8908    	PUSH	BC
002E06 CD 00 00 00         A  8909    	CALL	_memcmp
002E0A C1                  A  8910    	POP	BC
002E0B C1                  A  8911    	POP	BC
002E0C C1                  A  8912    	POP	BC
002E0D CD 00 00 00         A  8913    	CALL	__icmpzero
002E11 20 07               A  8914    	JR	NZ,L_667
002E13 B7                  A  8915    	OR	A,A
                           A  8916    ; 3256				return 0;	/* It is an FAT
002E14 ED62                A  8917    	SBC	HL,HL
002E16 C3 3D 2F 00         A  8918    	JR	L_685
                           A  8919    ; 3257			}
002E1A                     A  8920    L_667:
                           A  8921    ; 3258			/* FAT volumes formatted with e
                           A  8922    ; 3259			w = ld_word(fs->win + BPB_BytsP
002E1A DD07EF              A  8923    	LD	BC,(IX+%FFFFFFEF)
002E1D DD0FFD              A  8924    	LD	(IX+%FFFFFFFD),BC
002E20 DD31FD              A  8925    	LD	IY,(IX+%FFFFFFFD)
002E23 ED030B              A  8926    	LEA	BC,IY+%B
002E26 C5                  A  8927    	PUSH	BC
002E27 CD 00 00 00         A  8928    	CALL	_ld_word
002E2B C1                  A  8929    	POP	BC
002E2C DD75F7              A  8930    	LD	(IX+%FFFFFFF7),L
002E2F DD74F8              A  8931    	LD	(IX+%FFFFFFF8),H
                           A  8932    ; 3260			b = fs->win[BPB_SecPerClus];
002E32 DD31FD              A  8933    	LD	IY,(IX+%FFFFFFFD)
002E35 ED230D              A  8934    	LEA	HL,IY+%D
002E38 7E                  A  8935    	LD	A,(HL)
002E39 DD77FC              A  8936    	LD	(IX+%FFFFFFFC),A
                           A  8937    ; 3261			if ((w & (w - 1)) == 0 && w >= 
002E3C DD07F7              A  8938    	LD	BC,(IX+%FFFFFFF7)
002E3F CD 00 00 00         A  8939    	CALL	__stoiu
002E43 2B                  A  8940    	DEC	HL
002E44 DD07F7              A  8941    	LD	BC,(IX+%FFFFFFF7)
002E47 CD 00 00 00         A  8942    	CALL	__sand
002E4B CD 00 00 00         A  8943    	CALL	__scmpzero
002E4F C2 1D 2F 00         A  8944    	JR	NZ,L_684
002E53 49010002            A  8945    	LD.LIS	BC,512
002E57 DD27F7              A  8946    	LD	HL,(IX+%FFFFFFF7)
002E5A B7                  A  8947    	OR	A,A
002E5B 40ED42              A  8948    	SBC.SIS	HL,BC
002E5E DA 1D 2F 00         A  8949    	JR	C,L_684
                           A  8950    ; 3262				&& b != 0 && (b & (b - 1)) 
002E62 DD07F7              A  8951    	LD	BC,(IX+%FFFFFFF7)
002E65 49210002            A  8952    	LD.LIS	HL,512
002E69 B7                  A  8953    	OR	A,A
002E6A 40ED42              A  8954    	SBC.SIS	HL,BC
002E6D DA 1D 2F 00         A  8955    	JR	C,L_684
002E71 DD7EFC              A  8956    	LD	A,(IX+%FFFFFFFC)
002E74 B7                  A  8957    	OR	A,A
002E75 CA 1D 2F 00         A  8958    	JR	Z,L_684
                           A  8959    ; 3263				&& ld_word(fs->win + BPB_Rs
002E79 DD7EFC              A  8960    	LD	A,(IX+%FFFFFFFC)
002E7C B7ED62              A  8961    	UEXT	HL
002E7F 6F                  A  8962    	LD	L,A
002E80 2B                  A  8963    	DEC	HL
002E81 7D                  A  8964    	LD	A,L
002E82 DDA6FC              A  8965    	AND	A,(IX+%FFFFFFFC)
002E85 C2 1D 2F 00         A  8966    	JR	NZ,L_684
                           A  8967    ; 3264				&& (UINT)fs->win[BPB_NumFAT
002E89 DD31FD              A  8968    	LD	IY,(IX+%FFFFFFFD)
002E8C ED030E              A  8969    	LEA	BC,IY+%E
002E8F C5                  A  8970    	PUSH	BC
002E90 CD 00 00 00         A  8971    	CALL	_ld_word
002E94 C1                  A  8972    	POP	BC
002E95 CD 00 00 00         A  8973    	CALL	__scmpzero
002E99 CA 1D 2F 00         A  8974    	JR	Z,L_684
                           A  8975    ; 3265				&& ld_word(fs->win + BPB_Ro
002E9D DD31FD              A  8976    	LD	IY,(IX+%FFFFFFFD)
002EA0 ED2310              A  8977    	LEA	HL,IY+%10
002EA3 7E                  A  8978    	LD	A,(HL)
002EA4 B7ED62              A  8979    	UEXT	HL
002EA7 6F                  A  8980    	LD	L,A
002EA8 E5C1                A  8981    	LD	BC,HL
002EAA 0B                  A  8982    	DEC	BC
002EAB 21010000            A  8983    	LD	HL,1
002EAF B7                  A  8984    	OR	A,A
002EB0 ED42                A  8985    	SBC	HL,BC
002EB2 38 69               A  8986    	JR	C,L_684
                           A  8987    ; 3266				&& (ld_word(fs->win + BPB_T
002EB4 DD31FD              A  8988    	LD	IY,(IX+%FFFFFFFD)
002EB7 ED0311              A  8989    	LEA	BC,IY+%11
002EBA C5                  A  8990    	PUSH	BC
002EBB CD 00 00 00         A  8991    	CALL	_ld_word
002EBF C1                  A  8992    	POP	BC
002EC0 CD 00 00 00         A  8993    	CALL	__scmpzero
002EC4 28 57               A  8994    	JR	Z,L_684
002EC6 DD07FD              A  8995    	LD	BC,(IX+%FFFFFFFD)
002EC9 DD0FEC              A  8996    	LD	(IX+%FFFFFFEC),BC
002ECC DD31FD              A  8997    	LD	IY,(IX+%FFFFFFFD)
002ECF ED0313              A  8998    	LEA	BC,IY+%13
002ED2 C5                  A  8999    	PUSH	BC
002ED3 CD 00 00 00         A  9000    	CALL	_ld_word
002ED7 C1                  A  9001    	POP	BC
002ED8 E5C1                A  9002    	LD	BC,HL
002EDA CD 00 00 00         A  9003    	CALL	__stoiu
002EDE 01800000            A  9004    	LD	BC,128
002EE2 B7                  A  9005    	OR	A,A
002EE3 ED42                A  9006    	SBC	HL,BC
002EE5 F2 06 2F 00         A  9007    	JP	P,L_677
002EE9 DD07FD              A  9008    	LD	BC,(IX+%FFFFFFFD)
002EEC DD0FEC              A  9009    	LD	(IX+%FFFFFFEC),BC
002EEF DD31FD              A  9010    	LD	IY,(IX+%FFFFFFFD)
002EF2 ED0320              A  9011    	LEA	BC,IY+%20
002EF5 C5                  A  9012    	PUSH	BC
002EF6 CD 39 00 00         A  9013    	CALL	_ld_dword
002EFA C1                  A  9014    	POP	BC
002EFB 01000001            A  9015    	LD	BC,65536
002EFF AF                  A  9016    	XOR	A,A
002F00 CD 00 00 00         A  9017    	CALL	__lcmpu
002F04 38 17               A  9018    	JR	C,L_684
                           A  9019    ; 3267				&& ld_word(fs->win + BPB_FA
002F06                     A  9020    L_677:
002F06 DD31EC              A  9021    	LD	IY,(IX+%FFFFFFEC)
002F09 ED0316              A  9022    	LEA	BC,IY+%16
002F0C C5                  A  9023    	PUSH	BC
002F0D CD 00 00 00         A  9024    	CALL	_ld_word
002F11 C1                  A  9025    	POP	BC
002F12 CD 00 00 00         A  9026    	CALL	__scmpzero
002F16 28 05               A  9027    	JR	Z,L_684
002F18 B7                  A  9028    	OR	A,A
                           A  9029    ; 3268					return 0;	/* It can b
002F19 ED62                A  9030    	SBC	HL,HL
002F1B 18 20               A  9031    	JR	L_685
                           A  9032    ; 3269			}
                           A  9033    ; 3270		}
002F1D                     A  9034    L_684:
                           A  9035    ; 3271		return sign == 0xAA55 ? 2 : 3;	/* 
002F1D 490155AA            A  9036    	LD.LIS	BC,43605
002F21 DD27F5              A  9037    	LD	HL,(IX+%FFFFFFF5)
002F24 B7                  A  9038    	OR	A,A
002F25 40ED42              A  9039    	SBC.SIS	HL,BC
002F28 20 09               A  9040    	JR	NZ,L_682
002F2A 01020000            A  9041    	LD	BC,2
002F2E DD0FF2              A  9042    	LD	(IX+%FFFFFFF2),BC
002F31 18 07               A  9043    	JR	L_683
002F33                     A  9044    L_682:
002F33 01030000            A  9045    	LD	BC,3
002F37 DD0FF2              A  9046    	LD	(IX+%FFFFFFF2),BC
002F3A                     A  9047    L_683:
002F3A DD27F2              A  9048    	LD	HL,(IX+%FFFFFFF2)
                           A  9049    ; 3272	}
002F3D                     A  9050    L_685:
002F3D DDF9                A  9051    	LD	SP,IX
002F3F DDE1                A  9052    	POP	IX
002F41 C9                  A  9053    	RET	
                           A  9054    
                           A  9055    
                           A  9056    ;**************************** _check_fs *******
                           A  9057    ;Name                         Addr/Register   S
                           A  9058    ;_memcmp                             IMPORT  --
                           A  9059    ;G_43                                 IX-20    
                           A  9060    ;G_37                                 IX-17    
                           A  9061    ;temp680                              IX-14    
                           A  9062    ;sign                                 IX-11    
                           A  9063    ;w                                     IX-9    
                           A  9064    ;G_36                                  IX-7    
                           A  9065    ;b                                     IX-4    
                           A  9066    ;G_38                                  IX-3    
                           A  9067    ;sect                                  IX+9    
                           A  9068    ;fs                                    IX+6    
                           A  9069    
                           A  9070    
                           A  9071    ; Stack Frame Size: 35 (bytes)
                           A  9072    ;       Spill Code: 0 (instruction)
                           A  9073    
                           A  9074    
                           A  9075    	SEGMENT STRSECT
000010                     A  9076    L__336:
000010 46415433 32202020   A  9077    	DB	"FAT32   "
000018 00                  A  9078    	DB	0
                           A  9079    	SEGMENT CODE
                           A  9080    ; 3273	
                           A  9081    ; 3274	
                           A  9082    ; 3275	/* Find an FAT volume */
                           A  9083    ; 3276	/* (It supports only generic partitioni
                           A  9084    ; 3277	
                           A  9085    ; 3278	static UINT find_volume (	/* Returns 
                           A  9086    ; 3279		FATFS* fs,		/* Filesystem objec
                           A  9087    ; 3280		UINT part		/* Partition to fin
                           A  9088    ; 3281	)
                           A  9089    ; 3282	{
002F42                     A  9090    _find_volume:
002F42 21DBFFFF            A  9091    	LD	HL,-37
002F46 CD 00 00 00         A  9092    	CALL	__frameset
                           A  9093    ; 3283		UINT fmt, i;
                           A  9094    ; 3284		DWORD mbr_pt[4];
                           A  9095    ; 3285	
                           A  9096    ; 3286	
                           A  9097    ; 3287		fmt = check_fs(fs, 0);				
002F4A 01000000            A  9098    	LD	BC,0
002F4E C5                  A  9099    	PUSH	BC
002F4F C5                  A  9100    	PUSH	BC
002F50 DD0706              A  9101    	LD	BC,(IX+%6)
002F53 C5                  A  9102    	PUSH	BC
002F54 CD 6A 2D 00         A  9103    	CALL	_check_fs
002F58 C1                  A  9104    	POP	BC
002F59 C1                  A  9105    	POP	BC
002F5A C1                  A  9106    	POP	BC
002F5B DD2FFA              A  9107    	LD	(IX+%FFFFFFFA),HL
                           A  9108    ; 3288		if (fmt != 2 && (fmt >= 3 || part =
002F5E 01020000            A  9109    	LD	BC,2
002F62 DD27FA              A  9110    	LD	HL,(IX+%FFFFFFFA)
002F65 B7                  A  9111    	OR	A,A
002F66 ED42                A  9112    	SBC	HL,BC
002F68 28 1C               A  9113    	JR	Z,L_695
002F6A 01030000            A  9114    	LD	BC,3
002F6E DD27FA              A  9115    	LD	HL,(IX+%FFFFFFFA)
002F71 B7                  A  9116    	OR	A,A
002F72 ED42                A  9117    	SBC	HL,BC
002F74 30 09               A  9118    	JR	NC,L_688
002F76 DD2709              A  9119    	LD	HL,(IX+%9)
002F79 CD 00 00 00         A  9120    	CALL	__icmpzero
002F7D 20 07               A  9121    	JR	NZ,L_695
002F7F                     A  9122    L_688:
002F7F DD27FA              A  9123    	LD	HL,(IX+%FFFFFFFA)
002F82 C3 7D 30 00         A  9124    	JR	L_710
                           A  9125    ; 3289	
                           A  9126    ; 3290		/* Sector 0 is not an FAT VBR or fo
                           A  9127    ; 3291	
                           A  9128    ; 3292	#if FF_LBA64
                           A  9129    ; 3293		if (fs->win[MBR_Table + PTE_System]
                           A  9130    ; 3294			DWORD n_ent, v_ent, ofs;
                           A  9131    ; 3295			QWORD pt_lba;
                           A  9132    ; 3296	
                           A  9133    ; 3297			if (move_window(fs, 1) != FR_OK
                           A  9134    ; 3298			if (!test_gpt_header(fs->win)) 
                           A  9135    ; 3299			n_ent = ld_dword(fs->win + GPTH
                           A  9136    ; 3300			pt_lba = ld_qword(fs->win + GPT
                           A  9137    ; 3301			for (v_ent = i = 0; i < n_ent; 
                           A  9138    ; 3302				if (move_window(fs, pt_lba 
                           A  9139    ; 3303				ofs = i * SZ_GPTE % SS(fs);
                           A  9140    ; 3304				if (!memcmp(fs->win + ofs +
                           A  9141    ; 3305					v_ent++;
                           A  9142    ; 3306					fmt = check_fs(fs, ld_q
                           A  9143    ; 3307					if (part == 0 && fmt <=
                           A  9144    ; 3308					if (part != 0 && v_ent 
                           A  9145    ; 3309				}
                           A  9146    ; 3310			}
                           A  9147    ; 3311			return 3;	/* Not found */
                           A  9148    ; 3312		}
                           A  9149    ; 3313	#endif
                           A  9150    ; 3314		if (FF_MULTI_PARTITION && part > 4)
002F86                     A  9151    L_695:
                           A  9152    ; 3315		for (i = 0; i < 4; i++) {		/* 
002F86 01000000            A  9153    	LD	BC,0
002F8A DD0FFD              A  9154    	LD	(IX+%FFFFFFFD),BC
002F8D 18 4E               A  9155    	JR	L_694
002F8F                     A  9156    L_692:
                           A  9157    ; 3316			mbr_pt[i] = ld_dword(fs->win + 
002F8F 01BE0100            A  9158    	LD	BC,446
002F93 DD3106              A  9159    	LD	IY,(IX+%6)
002F96 ED2332              A  9160    	LEA	HL,IY+%32
002F99 09                  A  9161    	ADD	HL,BC
002F9A E5C1                A  9162    	LD	BC,HL
002F9C DD27FD              A  9163    	LD	HL,(IX+%FFFFFFFD)
002F9F 29                  A  9164    	ADD	HL,HL
002FA0 29                  A  9165    	ADD	HL,HL
002FA1 29                  A  9166    	ADD	HL,HL
002FA2 29                  A  9167    	ADD	HL,HL
002FA3 09                  A  9168    	ADD	HL,BC
002FA4 E5FDE1              A  9169    	LD	IY,HL
002FA7 ED0308              A  9170    	LEA	BC,IY+%8
002FAA C5                  A  9171    	PUSH	BC
002FAB CD 39 00 00         A  9172    	CALL	_ld_dword
002FAF C1                  A  9173    	POP	BC
002FB0 E5C1                A  9174    	LD	BC,HL
002FB2 DD27FD              A  9175    	LD	HL,(IX+%FFFFFFFD)
002FB5 29                  A  9176    	ADD	HL,HL
002FB6 29                  A  9177    	ADD	HL,HL
002FB7 DD0FDE              A  9178    	LD	(IX+%FFFFFFDE),BC	; spill
002FBA ED02E1              A  9179    	LEA	BC,IX+%FFFFFFE1
002FBD DD0FDB              A  9180    	LD	(IX+%FFFFFFDB),BC	; spill
002FC0 DD07DE              A  9181    	LD	BC,(IX+%FFFFFFDE)	; unspill
002FC3 DD0FDE              A  9182    	LD	(IX+%FFFFFFDE),BC	; spill
002FC6 DD07DB              A  9183    	LD	BC,(IX+%FFFFFFDB)	; unspill
002FC9 09                  A  9184    	ADD	HL,BC
002FCA DD07DE              A  9185    	LD	BC,(IX+%FFFFFFDE)	; unspill
002FCD E5FDE1              A  9186    	LD	IY,HL
002FD0 FD0F00              A  9187    	LD	(IY),BC
002FD3 FD7303              A  9188    	LD	(IY+%3),E
002FD6 DD07FD              A  9189    	LD	BC,(IX+%FFFFFFFD)
002FD9 03                  A  9190    	INC	BC
002FDA DD0FFD              A  9191    	LD	(IX+%FFFFFFFD),BC
                           A  9192    ; 3317		}
002FDD                     A  9193    L_694:
002FDD 01040000            A  9194    	LD	BC,4
002FE1 DD27FD              A  9195    	LD	HL,(IX+%FFFFFFFD)
002FE4 B7                  A  9196    	OR	A,A
002FE5 ED42                A  9197    	SBC	HL,BC
002FE7 38 A6               A  9198    	JR	C,L_692
                           A  9199    ; 3318		i = part ? part - 1 : 0;		/* 
002FE9 DD2709              A  9200    	LD	HL,(IX+%9)
002FEC CD 00 00 00         A  9201    	CALL	__icmpzero
002FF0 28 0B               A  9202    	JR	Z,L_698
002FF2 DD3109              A  9203    	LD	IY,(IX+%9)
002FF5 ED33FF              A  9204    	LEA	IY,IY+%FFFFFFFF
002FF8 DD3EF7              A  9205    	LD	(IX+%FFFFFFF7),IY
002FFB 18 07               A  9206    	JR	L_699
002FFD                     A  9207    L_698:
002FFD 01000000            A  9208    	LD	BC,0
003001 DD0FF7              A  9209    	LD	(IX+%FFFFFFF7),BC
003004                     A  9210    L_699:
003004 DD07F7              A  9211    	LD	BC,(IX+%FFFFFFF7)
003007 DD0FFD              A  9212    	LD	(IX+%FFFFFFFD),BC
                           A  9213    ; 3319		do {							/* 
00300A                     A  9214    L_707:
                           A  9215    ; 3320			fmt = mbr_pt[i] ? check_fs(fs, 
00300A DD27FD              A  9216    	LD	HL,(IX+%FFFFFFFD)
00300D 29                  A  9217    	ADD	HL,HL
00300E 29                  A  9218    	ADD	HL,HL
00300F E5C1                A  9219    	LD	BC,HL
003011 ED22E1              A  9220    	LEA	HL,IX+%FFFFFFE1
003014 09                  A  9221    	ADD	HL,BC
003015 DD2FF1              A  9222    	LD	(IX+%FFFFFFF1),HL
003018 DD31F1              A  9223    	LD	IY,(IX+%FFFFFFF1)
00301B FD2700              A  9224    	LD	HL,(IY)
00301E FD5E03              A  9225    	LD	E,(IY+%3)
003021 CD 00 00 00         A  9226    	CALL	__lcmpzero
003025 28 1E               A  9227    	JR	Z,L_703
003027 DD31F1              A  9228    	LD	IY,(IX+%FFFFFFF1)
00302A FD0700              A  9229    	LD	BC,(IY)
00302D FD7E03              A  9230    	LD	A,(IY+%3)
003030 2600                A  9231    	LD	H,%0
003032 6F                  A  9232    	LD	L,A
003033 E5                  A  9233    	PUSH	HL
003034 C5                  A  9234    	PUSH	BC
003035 DD0706              A  9235    	LD	BC,(IX+%6)
003038 C5                  A  9236    	PUSH	BC
003039 CD 6A 2D 00         A  9237    	CALL	_check_fs
00303D C1                  A  9238    	POP	BC
00303E C1                  A  9239    	POP	BC
00303F C1                  A  9240    	POP	BC
003040 DD2FF4              A  9241    	LD	(IX+%FFFFFFF4),HL
003043 18 07               A  9242    	JR	L_704
003045                     A  9243    L_703:
003045 01030000            A  9244    	LD	BC,3
003049 DD0FF4              A  9245    	LD	(IX+%FFFFFFF4),BC
00304C                     A  9246    L_704:
00304C DD07F4              A  9247    	LD	BC,(IX+%FFFFFFF4)
00304F DD0FFA              A  9248    	LD	(IX+%FFFFFFFA),BC
                           A  9249    ; 3321		} while (part == 0 && fmt >= 2 && +
003052 DD2709              A  9250    	LD	HL,(IX+%9)
003055 CD 00 00 00         A  9251    	CALL	__icmpzero
003059 20 1F               A  9252    	JR	NZ,L_709
00305B 01020000            A  9253    	LD	BC,2
00305F DD27FA              A  9254    	LD	HL,(IX+%FFFFFFFA)
003062 B7                  A  9255    	OR	A,A
003063 ED42                A  9256    	SBC	HL,BC
003065 38 13               A  9257    	JR	C,L_709
003067 DD07FD              A  9258    	LD	BC,(IX+%FFFFFFFD)
00306A 03                  A  9259    	INC	BC
00306B DD0FFD              A  9260    	LD	(IX+%FFFFFFFD),BC
00306E 01040000            A  9261    	LD	BC,4
003072 DD27FD              A  9262    	LD	HL,(IX+%FFFFFFFD)
003075 B7                  A  9263    	OR	A,A
003076 ED42                A  9264    	SBC	HL,BC
003078 38 90               A  9265    	JR	C,L_707
00307A                     A  9266    L_709:
                           A  9267    ; 3322		return fmt;
00307A DD27FA              A  9268    	LD	HL,(IX+%FFFFFFFA)
                           A  9269    ; 3323	}
00307D                     A  9270    L_710:
00307D DDF9                A  9271    	LD	SP,IX
00307F DDE1                A  9272    	POP	IX
003081 C9                  A  9273    	RET	
                           A  9274    
                           A  9275    
                           A  9276    ;**************************** _find_volume ****
                           A  9277    ;Name                         Addr/Register   S
                           A  9278    ;mbr_pt                               IX-31    
                           A  9279    ;G_44                                 IX-15    
                           A  9280    ;temp701                              IX-12    
                           A  9281    ;temp696                               IX-9    
                           A  9282    ;fmt                                   IX-6    
                           A  9283    ;i                                     IX-3    
                           A  9284    ;part                                  IX+9    
                           A  9285    ;fs                                    IX+6    
                           A  9286    
                           A  9287    
                           A  9288    ; Stack Frame Size: 49 (bytes)
                           A  9289    ;       Spill Code: 0 (instruction)
                           A  9290    
                           A  9291    
                           A  9292    ; 3324	
                           A  9293    ; 3325	
                           A  9294    ; 3326	
                           A  9295    ; 3327	
                           A  9296    ; 3328	/*-------------------------------------
                           A  9297    ; 3329	/* Determine logical drive number and m
                           A  9298    ; 3330	/*-------------------------------------
                           A  9299    ; 3331	
                           A  9300    ; 3332	static FRESULT mount_volume (	/* FR_O
                           A  9301    ; 3333		const TCHAR** path,			/* Poin
                           A  9302    ; 3334		FATFS** rfs,				/* Poin
                           A  9303    ; 3335		BYTE mode					/* !=0:
                           A  9304    ; 3336	)
                           A  9305    ; 3337	{
003082                     A  9306    _mount_volume:
003082 21B1FFFF            A  9307    	LD	HL,-79
003086 CD 00 00 00         A  9308    	CALL	__frameset
                           A  9309    ; 3338		int vol;
                           A  9310    ; 3339		DSTATUS stat;
                           A  9311    ; 3340		LBA_t bsect;
                           A  9312    ; 3341		DWORD tsect, sysect, fasize, nclst,
                           A  9313    ; 3342		WORD nrsv;
                           A  9314    ; 3343		FATFS *fs;
                           A  9315    ; 3344		UINT fmt;
                           A  9316    ; 3345	
                           A  9317    ; 3346	
                           A  9318    ; 3347		/* Get logical drive number */
                           A  9319    ; 3348		*rfs = 0;
00308A DD2709              A  9320    	LD	HL,(IX+%9)
00308D 01000000            A  9321    	LD	BC,0
003091 ED0F                A  9322    	LD	(HL),BC
                           A  9323    ; 3349		vol = get_ldnumber(path);
003093 DD0706              A  9324    	LD	BC,(IX+%6)
003096 C5                  A  9325    	PUSH	BC
003097 CD 8F 2C 00         A  9326    	CALL	_get_ldnumber
00309B C1                  A  9327    	POP	BC
00309C DD2FDE              A  9328    	LD	(IX+%FFFFFFDE),HL
                           A  9329    ; 3350		if (vol < 0) return FR_INVALID_DRIV
00309F CD 00 00 00         A  9330    	CALL	__icmpzero
0030A3 CD 00 00 00         A  9331    	CALL	__setflag
0030A7 F2 B3 30 00         A  9332    	JP	P,L_712
0030AB 210B0000            A  9333    	LD	HL,11
0030AF C3 EB 36 00         A  9334    	JR	L_780
0030B3                     A  9335    L_712:
                           A  9336    ; 3351	
                           A  9337    ; 3352		/* Check if the filesystem object i
                           A  9338    ; 3353		fs = FatFs[vol];					
0030B3 DD27DE              A  9339    	LD	HL,(IX+%FFFFFFDE)
0030B6 E5C1                A  9340    	LD	BC,HL
0030B8 29                  A  9341    	ADD	HL,HL
0030B9 09                  A  9342    	ADD	HL,BC
0030BA 01 00 00 00         A  9343    	LD	BC,_FatFs
0030BE 09                  A  9344    	ADD	HL,BC
0030BF ED07                A  9345    	LD	BC,(HL)
0030C1 DD0FFD              A  9346    	LD	(IX+%FFFFFFFD),BC
                           A  9347    ; 3354		if (!fs) return FR_NOT_ENABLED;		
0030C4 C5E1                A  9348    	LD	HL,BC
0030C6 CD 00 00 00         A  9349    	CALL	__icmpzero
0030CA 20 08               A  9350    	JR	NZ,L_714
0030CC 210C0000            A  9351    	LD	HL,12
0030D0 C3 EB 36 00         A  9352    	JR	L_780
0030D4                     A  9353    L_714:
                           A  9354    ; 3355	#if FF_FS_REENTRANT
                           A  9355    ; 3356		if (!lock_fs(fs)) return FR_TIMEOUT
                           A  9356    ; 3357	#endif
                           A  9357    ; 3358		*rfs = fs;							
0030D4 DD2709              A  9358    	LD	HL,(IX+%9)
0030D7 DD07FD              A  9359    	LD	BC,(IX+%FFFFFFFD)
0030DA ED0F                A  9360    	LD	(HL),BC
                           A  9361    ; 3359	
                           A  9362    ; 3360		mode &= (BYTE)~FA_READ;				
0030DC DD7E0C              A  9363    	LD	A,(IX+%C)
0030DF CB87                A  9364    	RES	%0,A
0030E1 DD770C              A  9365    	LD	(IX+%C),A
                           A  9366    ; 3361		if (fs->fs_type != 0) {				
0030E4 DD31FD              A  9367    	LD	IY,(IX+%FFFFFFFD)
0030E7 FD7E00              A  9368    	LD	A,(IY+%0)
0030EA B7                  A  9369    	OR	A,A
0030EB 28 31               A  9370    	JR	Z,L_720
                           A  9371    ; 3362			stat = disk_status(fs->pdrv);
0030ED DD31FD              A  9372    	LD	IY,(IX+%FFFFFFFD)
0030F0 FD4E01              A  9373    	LD	C,(IY+%1)
0030F3 0600                A  9374    	LD	B,%0
0030F5 C5                  A  9375    	PUSH	BC
0030F6 CD 00 00 00         A  9376    	CALL	_disk_status
0030FA C1                  A  9377    	POP	BC
0030FB DD77F9              A  9378    	LD	(IX+%FFFFFFF9),A
                           A  9379    ; 3363			if (!(stat & STA_NOINIT)) {		
0030FE E601                A  9380    	AND	A,%1
003100 20 1C               A  9381    	JR	NZ,L_720
                           A  9382    ; 3364				if (!FF_FS_READONLY && mode
003102 DD7E0C              A  9383    	LD	A,(IX+%C)
003105 B7                  A  9384    	OR	A,A
003106 28 0F               A  9385    	JR	Z,L_717
003108 DD7EF9              A  9386    	LD	A,(IX+%FFFFFFF9)
00310B E604                A  9387    	AND	A,%4
00310D 28 08               A  9388    	JR	Z,L_717
                           A  9389    ; 3365					return FR_WRITE_PROTECT
00310F 210A0000            A  9390    	LD	HL,10
003113 C3 EB 36 00         A  9391    	JR	L_780
                           A  9392    ; 3366				}
003117                     A  9393    L_717:
003117 B7                  A  9394    	OR	A,A
                           A  9395    ; 3367				return FR_OK;				
003118 ED62                A  9396    	SBC	HL,HL
00311A C3 EB 36 00         A  9397    	JR	L_780
                           A  9398    ; 3368			}
                           A  9399    ; 3369		}
00311E                     A  9400    L_720:
                           A  9401    ; 3370	
                           A  9402    ; 3371		/* The filesystem object is not val
                           A  9403    ; 3372		/* Following code attempts to mount
                           A  9404    ; 3373	
                           A  9405    ; 3374		fs->fs_type = 0;					
00311E DD31FD              A  9406    	LD	IY,(IX+%FFFFFFFD)
003121 FD360000            A  9407    	LD	(IY+%0),%0
                           A  9408    ; 3375		fs->pdrv = LD2PD(vol);				
003125 DD7EDE              A  9409    	LD	A,(IX+%FFFFFFDE)
003128 FD7701              A  9410    	LD	(IY+%1),A
                           A  9411    ; 3376		stat = disk_initialize(fs->pdrv);	
00312B FD4E01              A  9412    	LD	C,(IY+%1)
00312E 0600                A  9413    	LD	B,%0
003130 C5                  A  9414    	PUSH	BC
003131 CD 00 00 00         A  9415    	CALL	_disk_initialize
003135 C1                  A  9416    	POP	BC
003136 DD77F9              A  9417    	LD	(IX+%FFFFFFF9),A
                           A  9418    ; 3377		if (stat & STA_NOINIT) { 			
003139 E601                A  9419    	AND	A,%1
00313B 28 08               A  9420    	JR	Z,L_724
                           A  9421    ; 3378			return FR_NOT_READY;			
00313D 21030000            A  9422    	LD	HL,3
003141 C3 EB 36 00         A  9423    	JR	L_780
                           A  9424    ; 3379		}
003145                     A  9425    L_724:
                           A  9426    ; 3380		if (!FF_FS_READONLY && mode && (sta
003145 DD7E0C              A  9427    	LD	A,(IX+%C)
003148 B7                  A  9428    	OR	A,A
003149 28 0F               A  9429    	JR	Z,L_725
00314B DD7EF9              A  9430    	LD	A,(IX+%FFFFFFF9)
00314E E604                A  9431    	AND	A,%4
003150 28 08               A  9432    	JR	Z,L_725
                           A  9433    ; 3381			return FR_WRITE_PROTECTED;
003152 210A0000            A  9434    	LD	HL,10
003156 C3 EB 36 00         A  9435    	JR	L_780
                           A  9436    ; 3382		}
00315A                     A  9437    L_725:
                           A  9438    ; 3383	#if FF_MAX_SS != FF_MIN_SS				
                           A  9439    ; 3384		if (disk_ioctl(fs->pdrv, GET_SECTOR
                           A  9440    ; 3385		if (SS(fs) > FF_MAX_SS || SS(fs) < 
                           A  9441    ; 3386	#endif
                           A  9442    ; 3387	
                           A  9443    ; 3388		/* Find an FAT volume on the drive 
                           A  9444    ; 3389		fmt = find_volume(fs, LD2PT(vol));
00315A 01000000            A  9445    	LD	BC,0
00315E C5                  A  9446    	PUSH	BC
00315F DD07FD              A  9447    	LD	BC,(IX+%FFFFFFFD)
003162 C5                  A  9448    	PUSH	BC
003163 CD 42 2F 00         A  9449    	CALL	_find_volume
003167 C1                  A  9450    	POP	BC
003168 C1                  A  9451    	POP	BC
003169 DD2FFA              A  9452    	LD	(IX+%FFFFFFFA),HL
                           A  9453    ; 3390		if (fmt == 4) return FR_DISK_ERR;	
00316C 01040000            A  9454    	LD	BC,4
003170 DD27FA              A  9455    	LD	HL,(IX+%FFFFFFFA)
003173 B7                  A  9456    	OR	A,A
003174 ED42                A  9457    	SBC	HL,BC
003176 20 08               A  9458    	JR	NZ,L_728
003178 21010000            A  9459    	LD	HL,1
00317C C3 EB 36 00         A  9460    	JR	L_780
003180                     A  9461    L_728:
                           A  9462    ; 3391		if (fmt >= 2) return FR_NO_FILESYST
003180 01020000            A  9463    	LD	BC,2
003184 DD27FA              A  9464    	LD	HL,(IX+%FFFFFFFA)
003187 B7                  A  9465    	OR	A,A
003188 ED42                A  9466    	SBC	HL,BC
00318A 38 08               A  9467    	JR	C,L_729
00318C 210D0000            A  9468    	LD	HL,13
003190 C3 EB 36 00         A  9469    	JR	L_780
003194                     A  9470    L_729:
                           A  9471    ; 3392		bsect = fs->winsect;				
003194 DD31FD              A  9472    	LD	IY,(IX+%FFFFFFFD)
003197 FD072E              A  9473    	LD	BC,(IY+%2E)
00319A FD7E31              A  9474    	LD	A,(IY+%31)
00319D DD0FDA              A  9475    	LD	(IX+%FFFFFFDA),BC
0031A0 DD77DD              A  9476    	LD	(IX+%FFFFFFDD),A
                           A  9477    ; 3393	
                           A  9478    ; 3394		/* An FAT volume is found (bsect). 
                           A  9479    ; 3395	
                           A  9480    ; 3396	#if FF_FS_EXFAT
                           A  9481    ; 3397		if (fmt == 1) {
                           A  9482    ; 3398			QWORD maxlba;
                           A  9483    ; 3399			DWORD so, cv, bcl, i;
                           A  9484    ; 3400	
                           A  9485    ; 3401			for (i = BPB_ZeroedEx; i < BPB_
                           A  9486    ; 3402			if (i < BPB_ZeroedEx + 53) retu
                           A  9487    ; 3403	
                           A  9488    ; 3404			if (ld_word(fs->win + BPB_FSVer
                           A  9489    ; 3405	
                           A  9490    ; 3406			if (1 << fs->win[BPB_BytsPerSec
                           A  9491    ; 3407				return FR_NO_FILESYSTEM;
                           A  9492    ; 3408			}
                           A  9493    ; 3409	
                           A  9494    ; 3410			maxlba = ld_qword(fs->win + BPB
                           A  9495    ; 3411			if (!FF_LBA64 && maxlba >= 0x10
                           A  9496    ; 3412	
                           A  9497    ; 3413			fs->fsize = ld_dword(fs->win + 
                           A  9498    ; 3414	
                           A  9499    ; 3415			fs->n_fats = fs->win[BPB_NumFAT
                           A  9500    ; 3416			if (fs->n_fats != 1) return FR_
                           A  9501    ; 3417	
                           A  9502    ; 3418			fs->csize = 1 << fs->win[BPB_Se
                           A  9503    ; 3419			if (fs->csize == 0)	return FR_N
                           A  9504    ; 3420	
                           A  9505    ; 3421			nclst = ld_dword(fs->win + BPB_
                           A  9506    ; 3422			if (nclst > MAX_EXFAT) return F
                           A  9507    ; 3423			fs->n_fatent = nclst + 2;
                           A  9508    ; 3424	
                           A  9509    ; 3425			/* Boundaries and Limits */
                           A  9510    ; 3426			fs->volbase = bsect;
                           A  9511    ; 3427			fs->database = bsect + ld_dword
                           A  9512    ; 3428			fs->fatbase = bsect + ld_dword(
                           A  9513    ; 3429			if (maxlba < (QWORD)fs->databas
                           A  9514    ; 3430			fs->dirbase = ld_dword(fs->win 
                           A  9515    ; 3431	
                           A  9516    ; 3432			/* Get bitmap location and chec
                           A  9517    ; 3433			so = i = 0;
                           A  9518    ; 3434			for (;;) {	/* Find the bitmap 
                           A  9519    ; 3435				if (i == 0) {
                           A  9520    ; 3436					if (so >= fs->csize) re
                           A  9521    ; 3437					if (move_window(fs, cls
                           A  9522    ; 3438					so++;
                           A  9523    ; 3439				}
                           A  9524    ; 3440				if (fs->win[i] == ET_BITMAP
                           A  9525    ; 3441				i = (i + SZDIRE) % SS(fs);	
                           A  9526    ; 3442			}
                           A  9527    ; 3443			bcl = ld_dword(fs->win + i + 20
                           A  9528    ; 3444			if (bcl < 2 || bcl >= fs->n_fat
                           A  9529    ; 3445			fs->bitbase = fs->database + fs
                           A  9530    ; 3446			for (;;) {	/* Check if bitmap 
                           A  9531    ; 3447				if (move_window(fs, fs->fat
                           A  9532    ; 3448				cv = ld_dword(fs->win + bcl
                           A  9533    ; 3449				if (cv == 0xFFFFFFFF) break
                           A  9534    ; 3450				if (cv != ++bcl) return FR_
                           A  9535    ; 3451			}
                           A  9536    ; 3452	
                           A  9537    ; 3453	#if !FF_FS_READONLY
                           A  9538    ; 3454			fs->last_clst = fs->free_clst =
                           A  9539    ; 3455	#endif
                           A  9540    ; 3456			fmt = FS_EXFAT;			/* FAT 
                           A  9541    ; 3457		} else
                           A  9542    ; 3458	#endif	/* FF_FS_EXFAT */
                           A  9543    ; 3459		{
                           A  9544    ; 3460			if (ld_word(fs->win + BPB_BytsP
0031A3 ED0332              A  9545    	LEA	BC,IY+%32
0031A6 DD0FEF              A  9546    	LD	(IX+%FFFFFFEF),BC
0031A9 DD31EF              A  9547    	LD	IY,(IX+%FFFFFFEF)
0031AC ED030B              A  9548    	LEA	BC,IY+%B
0031AF C5                  A  9549    	PUSH	BC
0031B0 CD 00 00 00         A  9550    	CALL	_ld_word
0031B4 C1                  A  9551    	POP	BC
0031B5 E5C1                A  9552    	LD	BC,HL
0031B7 CD 00 00 00         A  9553    	CALL	__stoiu
0031BB 01000200            A  9554    	LD	BC,512
0031BF B7                  A  9555    	OR	A,A
0031C0 ED42                A  9556    	SBC	HL,BC
0031C2 28 08               A  9557    	JR	Z,L_731
0031C4 210D0000            A  9558    	LD	HL,13
0031C8 C3 EB 36 00         A  9559    	JR	L_780
0031CC                     A  9560    L_731:
                           A  9561    ; 3461	
                           A  9562    ; 3462			fasize = ld_word(fs->win + BPB_
0031CC DD31EF              A  9563    	LD	IY,(IX+%FFFFFFEF)
0031CF ED0316              A  9564    	LEA	BC,IY+%16
0031D2 C5                  A  9565    	PUSH	BC
0031D3 CD 00 00 00         A  9566    	CALL	_ld_word
0031D7 C1                  A  9567    	POP	BC
0031D8 E5C1                A  9568    	LD	BC,HL
0031DA CD 00 00 00         A  9569    	CALL	__stoiu
0031DE AF                  A  9570    	XOR	A,A
0031DF DD2FF5              A  9571    	LD	(IX+%FFFFFFF5),HL
0031E2 DD77F8              A  9572    	LD	(IX+%FFFFFFF8),A
                           A  9573    ; 3463			if (fasize == 0) fasize = ld_dw
0031E5 DD27F5              A  9574    	LD	HL,(IX+%FFFFFFF5)
0031E8 DD5EF8              A  9575    	LD	E,(IX+%FFFFFFF8)
0031EB CD 00 00 00         A  9576    	CALL	__lcmpzero
0031EF 20 12               A  9577    	JR	NZ,L_733
0031F1 DD31EF              A  9578    	LD	IY,(IX+%FFFFFFEF)
0031F4 ED0324              A  9579    	LEA	BC,IY+%24
0031F7 C5                  A  9580    	PUSH	BC
0031F8 CD 39 00 00         A  9581    	CALL	_ld_dword
0031FC C1                  A  9582    	POP	BC
0031FD DD2FF5              A  9583    	LD	(IX+%FFFFFFF5),HL
003200 DD73F8              A  9584    	LD	(IX+%FFFFFFF8),E
003203                     A  9585    L_733:
                           A  9586    ; 3464			fs->fsize = fasize;
003203 DD07F5              A  9587    	LD	BC,(IX+%FFFFFFF5)
003206 DD7EF8              A  9588    	LD	A,(IX+%FFFFFFF8)
003209 DD31FD              A  9589    	LD	IY,(IX+%FFFFFFFD)
00320C FD0F1A              A  9590    	LD	(IY+%1A),BC
00320F FD771D              A  9591    	LD	(IY+%1D),A
                           A  9592    ; 3465	
                           A  9593    ; 3466			fs->n_fats = fs->win[BPB_NumFAT
003212 FD7E42              A  9594    	LD	A,(IY+%42)
003215 FD7702              A  9595    	LD	(IY+%2),A
                           A  9596    ; 3467			if (fs->n_fats != 1 && fs->n_fa
003218 FD7E02              A  9597    	LD	A,(IY+%2)
00321B DD77F4              A  9598    	LD	(IX+%FFFFFFF4),A
00321E DD77EE              A  9599    	LD	(IX+%FFFFFFEE),A
003221 DD7EF4              A  9600    	LD	A,(IX+%FFFFFFF4)
003224 FE01                A  9601    	CP	A,%1
003226 28 15               A  9602    	JR	Z,L_736
003228 DD7EF4              A  9603    	LD	A,(IX+%FFFFFFF4)
00322B DD77EE              A  9604    	LD	(IX+%FFFFFFEE),A
00322E DD7EF4              A  9605    	LD	A,(IX+%FFFFFFF4)
003231 FE02                A  9606    	CP	A,%2
003233 28 08               A  9607    	JR	Z,L_736
003235 210D0000            A  9608    	LD	HL,13
003239 C3 EB 36 00         A  9609    	JR	L_780
00323D                     A  9610    L_736:
                           A  9611    ; 3468			fasize *= fs->n_fats;			
00323D B7ED62              A  9612    	UEXT	HL
003240 DD6EEE              A  9613    	LD	L,(IX+%FFFFFFEE)
003243 E5C1                A  9614    	LD	BC,HL
003245 7C                  A  9615    	LD	A,H
003246 DD27F5              A  9616    	LD	HL,(IX+%FFFFFFF5)
003249 DD5EF8              A  9617    	LD	E,(IX+%FFFFFFF8)
00324C CD 00 00 00         A  9618    	CALL	__lmulu
003250 DD2FF5              A  9619    	LD	(IX+%FFFFFFF5),HL
003253 DD73F8              A  9620    	LD	(IX+%FFFFFFF8),E
                           A  9621    ; 3469	
                           A  9622    ; 3470			fs->csize = fs->win[BPB_SecPerC
003256 DD31FD              A  9623    	LD	IY,(IX+%FFFFFFFD)
003259 ED233F              A  9624    	LEA	HL,IY+%3F
00325C 4E                  A  9625    	LD	C,(HL)
00325D FD7109              A  9626    	LD	(IY+%9),C
003260 FD360A00            A  9627    	LD	(IY+%A),%0
                           A  9628    ; 3471			if (fs->csize == 0 || (fs->csiz
003264 FD0709              A  9629    	LD	BC,(IY+%9)
003267 DD71F2              A  9630    	LD	(IX+%FFFFFFF2),C
00326A DD70F3              A  9631    	LD	(IX+%FFFFFFF3),B
00326D DD27F2              A  9632    	LD	HL,(IX+%FFFFFFF2)
003270 CD 00 00 00         A  9633    	CALL	__scmpzero
003274 28 15               A  9634    	JR	Z,L_738
003276 DD07F2              A  9635    	LD	BC,(IX+%FFFFFFF2)
003279 CD 00 00 00         A  9636    	CALL	__stoiu
00327D 2B                  A  9637    	DEC	HL
00327E DD07F2              A  9638    	LD	BC,(IX+%FFFFFFF2)
003281 CD 00 00 00         A  9639    	CALL	__sand
003285 CD 00 00 00         A  9640    	CALL	__scmpzero
003289 28 08               A  9641    	JR	Z,L_739
00328B                     A  9642    L_738:
00328B 210D0000            A  9643    	LD	HL,13
00328F C3 EB 36 00         A  9644    	JR	L_780
003293                     A  9645    L_739:
                           A  9646    ; 3472	
                           A  9647    ; 3473			fs->n_rootdir = ld_word(fs->win
003293 DD31FD              A  9648    	LD	IY,(IX+%FFFFFFFD)
003296 ED0343              A  9649    	LEA	BC,IY+%43
003299 C5                  A  9650    	PUSH	BC
00329A CD 00 00 00         A  9651    	CALL	_ld_word
00329E C1                  A  9652    	POP	BC
00329F DD31FD              A  9653    	LD	IY,(IX+%FFFFFFFD)
0032A2 E5C1                A  9654    	LD	BC,HL
0032A4 FD7107              A  9655    	LD	(IY+%7),C
0032A7 FD7008              A  9656    	LD	(IY+%8),B
                           A  9657    ; 3474			if (fs->n_rootdir % (SS(fs) / S
0032AA FD0707              A  9658    	LD	BC,(IY+%7)
0032AD CD 00 00 00         A  9659    	CALL	__stoiu
0032B1 7D                  A  9660    	LD	A,L
0032B2 E60F                A  9661    	AND	A,%F
0032B4 B7ED62              A  9662    	UEXT	HL
0032B7 6F                  A  9663    	LD	L,A
0032B8 CD 00 00 00         A  9664    	CALL	__icmpzero
0032BC 28 08               A  9665    	JR	Z,L_741
0032BE 210D0000            A  9666    	LD	HL,13
0032C2 C3 EB 36 00         A  9667    	JR	L_780
0032C6                     A  9668    L_741:
                           A  9669    ; 3475	
                           A  9670    ; 3476			tsect = ld_word(fs->win + BPB_T
0032C6 DD31FD              A  9671    	LD	IY,(IX+%FFFFFFFD)
0032C9 ED0332              A  9672    	LEA	BC,IY+%32
0032CC DD0FE5              A  9673    	LD	(IX+%FFFFFFE5),BC
0032CF DD0FD3              A  9674    	LD	(IX+%FFFFFFD3),BC
0032D2 DD31E5              A  9675    	LD	IY,(IX+%FFFFFFE5)
0032D5 ED0313              A  9676    	LEA	BC,IY+%13
0032D8 C5                  A  9677    	PUSH	BC
0032D9 CD 00 00 00         A  9678    	CALL	_ld_word
0032DD C1                  A  9679    	POP	BC
0032DE E5C1                A  9680    	LD	BC,HL
0032E0 CD 00 00 00         A  9681    	CALL	__stoiu
0032E4 AF                  A  9682    	XOR	A,A
0032E5 DD2FD6              A  9683    	LD	(IX+%FFFFFFD6),HL
0032E8 DD77D9              A  9684    	LD	(IX+%FFFFFFD9),A
                           A  9685    ; 3477			if (tsect == 0) tsect = ld_dwor
0032EB DD27D6              A  9686    	LD	HL,(IX+%FFFFFFD6)
0032EE DD5ED9              A  9687    	LD	E,(IX+%FFFFFFD9)
0032F1 CD 00 00 00         A  9688    	CALL	__lcmpzero
0032F5 20 18               A  9689    	JR	NZ,L_743
0032F7 DD07E5              A  9690    	LD	BC,(IX+%FFFFFFE5)
0032FA DD0FD3              A  9691    	LD	(IX+%FFFFFFD3),BC
0032FD DD31E5              A  9692    	LD	IY,(IX+%FFFFFFE5)
003300 ED0320              A  9693    	LEA	BC,IY+%20
003303 C5                  A  9694    	PUSH	BC
003304 CD 39 00 00         A  9695    	CALL	_ld_dword
003308 C1                  A  9696    	POP	BC
003309 DD2FD6              A  9697    	LD	(IX+%FFFFFFD6),HL
00330C DD73D9              A  9698    	LD	(IX+%FFFFFFD9),E
00330F                     A  9699    L_743:
                           A  9700    ; 3478	
                           A  9701    ; 3479			nrsv = ld_word(fs->win + BPB_Rs
00330F DD31D3              A  9702    	LD	IY,(IX+%FFFFFFD3)
003312 ED030E              A  9703    	LEA	BC,IY+%E
003315 C5                  A  9704    	PUSH	BC
003316 CD 00 00 00         A  9705    	CALL	_ld_word
00331A C1                  A  9706    	POP	BC
00331B DD75E8              A  9707    	LD	(IX+%FFFFFFE8),L
00331E DD74E9              A  9708    	LD	(IX+%FFFFFFE9),H
                           A  9709    ; 3480			if (nrsv == 0) return FR_NO_FIL
003321 DD27E8              A  9710    	LD	HL,(IX+%FFFFFFE8)
003324 CD 00 00 00         A  9711    	CALL	__scmpzero
003328 20 08               A  9712    	JR	NZ,L_745
00332A 210D0000            A  9713    	LD	HL,13
00332E C3 EB 36 00         A  9714    	JR	L_780
003332                     A  9715    L_745:
                           A  9716    ; 3481	
                           A  9717    ; 3482			/* Determine the FAT sub type *
                           A  9718    ; 3483			sysect = nrsv + fasize + fs->n_
003332 DD31FD              A  9719    	LD	IY,(IX+%FFFFFFFD)
003335 FD0707              A  9720    	LD	BC,(IY+%7)
003338 CD 00 00 00         A  9721    	CALL	__stoiu
00333C 3E04                A  9722    	LD	A,%4
00333E CD 00 00 00         A  9723    	CALL	__ishru_b
003342 AF                  A  9724    	XOR	A,A
003343 DD77B4              A  9725    	LD	(IX+%FFFFFFB4),A
003346 DD2FB1              A  9726    	LD	(IX+%FFFFFFB1),HL
003349 DD07E8              A  9727    	LD	BC,(IX+%FFFFFFE8)
00334C CD 00 00 00         A  9728    	CALL	__stoiu
003350 E5C1                A  9729    	LD	BC,HL
003352 AF                  A  9730    	XOR	A,A
003353 DD27F5              A  9731    	LD	HL,(IX+%FFFFFFF5)
003356 DD5EF8              A  9732    	LD	E,(IX+%FFFFFFF8)
003359 CD 00 00 00         A  9733    	CALL	__ladd
00335D 7B                  A  9734    	LD	A,E
00335E E5C1                A  9735    	LD	BC,HL
003360 DD5EB4              A  9736    	LD	E,(IX+%FFFFFFB4)
003363 DD27B1              A  9737    	LD	HL,(IX+%FFFFFFB1)
003366 CD 00 00 00         A  9738    	CALL	__ladd
00336A DD2FC9              A  9739    	LD	(IX+%FFFFFFC9),HL
00336D DD73CC              A  9740    	LD	(IX+%FFFFFFCC),E
                           A  9741    ; 3484			if (tsect < sysect) return FR_N
003370 DD27D6              A  9742    	LD	HL,(IX+%FFFFFFD6)
003373 DD5ED9              A  9743    	LD	E,(IX+%FFFFFFD9)
003376 DD07C9              A  9744    	LD	BC,(IX+%FFFFFFC9)
003379 DD7ECC              A  9745    	LD	A,(IX+%FFFFFFCC)
00337C CD 00 00 00         A  9746    	CALL	__lcmpu
003380 30 08               A  9747    	JR	NC,L_747
003382 210D0000            A  9748    	LD	HL,13
003386 C3 EB 36 00         A  9749    	JR	L_780
00338A                     A  9750    L_747:
                           A  9751    ; 3485			nclst = (tsect - sysect) / fs->
00338A DD27D6              A  9752    	LD	HL,(IX+%FFFFFFD6)
00338D DD5ED9              A  9753    	LD	E,(IX+%FFFFFFD9)
003390 DD07C9              A  9754    	LD	BC,(IX+%FFFFFFC9)
003393 DD7ECC              A  9755    	LD	A,(IX+%FFFFFFCC)
003396 CD 00 00 00         A  9756    	CALL	__lsub
00339A DD2FB5              A  9757    	LD	(IX+%FFFFFFB5),HL
00339D DD31FD              A  9758    	LD	IY,(IX+%FFFFFFFD)
0033A0 FD0709              A  9759    	LD	BC,(IY+%9)
0033A3 CD 00 00 00         A  9760    	CALL	__stoiu
0033A7 E5C1                A  9761    	LD	BC,HL
0033A9 AF                  A  9762    	XOR	A,A
0033AA DD27B5              A  9763    	LD	HL,(IX+%FFFFFFB5)
0033AD CD 00 00 00         A  9764    	CALL	__ldivu
0033B1 DD2FEA              A  9765    	LD	(IX+%FFFFFFEA),HL
0033B4 DD73ED              A  9766    	LD	(IX+%FFFFFFED),E
                           A  9767    ; 3486			if (nclst == 0) return FR_NO_FI
0033B7 DD27EA              A  9768    	LD	HL,(IX+%FFFFFFEA)
0033BA DD5EED              A  9769    	LD	E,(IX+%FFFFFFED)
0033BD CD 00 00 00         A  9770    	CALL	__lcmpzero
0033C1 20 08               A  9771    	JR	NZ,L_749
0033C3 210D0000            A  9772    	LD	HL,13
0033C7 C3 EB 36 00         A  9773    	JR	L_780
0033CB                     A  9774    L_749:
                           A  9775    ; 3487			fmt = 0;
0033CB 01000000            A  9776    	LD	BC,0
0033CF DD0FFA              A  9777    	LD	(IX+%FFFFFFFA),BC
                           A  9778    ; 3488			if (nclst <= MAX_FAT32) fmt = F
0033D2 21F5FFFF            A  9779    	LD	HL,16777205
0033D6 1E0F                A  9780    	LD	E,%F
0033D8 DD07EA              A  9781    	LD	BC,(IX+%FFFFFFEA)
0033DB DD7EED              A  9782    	LD	A,(IX+%FFFFFFED)
0033DE CD 00 00 00         A  9783    	CALL	__lcmpu
0033E2 38 07               A  9784    	JR	C,L_752
0033E4 01030000            A  9785    	LD	BC,3
0033E8 DD0FFA              A  9786    	LD	(IX+%FFFFFFFA),BC
0033EB                     A  9787    L_752:
                           A  9788    ; 3489			if (nclst <= MAX_FAT16) fmt = F
0033EB 21F5FF00            A  9789    	LD	HL,65525
0033EF 1E00                A  9790    	LD	E,%0
0033F1 DD07EA              A  9791    	LD	BC,(IX+%FFFFFFEA)
0033F4 DD7EED              A  9792    	LD	A,(IX+%FFFFFFED)
0033F7 CD 00 00 00         A  9793    	CALL	__lcmpu
0033FB 38 07               A  9794    	JR	C,L_754
0033FD 01020000            A  9795    	LD	BC,2
003401 DD0FFA              A  9796    	LD	(IX+%FFFFFFFA),BC
003404                     A  9797    L_754:
                           A  9798    ; 3490			if (nclst <= MAX_FAT12) fmt = F
003404 21F50F00            A  9799    	LD	HL,4085
003408 DD07EA              A  9800    	LD	BC,(IX+%FFFFFFEA)
00340B DD7EED              A  9801    	LD	A,(IX+%FFFFFFED)
00340E CD 00 00 00         A  9802    	CALL	__lcmpu
003412 38 07               A  9803    	JR	C,L_756
003414 01010000            A  9804    	LD	BC,1
003418 DD0FFA              A  9805    	LD	(IX+%FFFFFFFA),BC
00341B                     A  9806    L_756:
                           A  9807    ; 3491			if (fmt == 0) return FR_NO_FILE
00341B DD27FA              A  9808    	LD	HL,(IX+%FFFFFFFA)
00341E CD 00 00 00         A  9809    	CALL	__icmpzero
003422 20 08               A  9810    	JR	NZ,L_757
003424 210D0000            A  9811    	LD	HL,13
003428 C3 EB 36 00         A  9812    	JR	L_780
00342C                     A  9813    L_757:
                           A  9814    ; 3492	
                           A  9815    ; 3493			/* Boundaries and Limits */
                           A  9816    ; 3494			fs->n_fatent = nclst + 2;		
00342C DD27EA              A  9817    	LD	HL,(IX+%FFFFFFEA)
00342F DD5EED              A  9818    	LD	E,(IX+%FFFFFFED)
003432 3E02                A  9819    	LD	A,%2
003434 CD 00 00 00         A  9820    	CALL	__ladd_b
003438 DD31FD              A  9821    	LD	IY,(IX+%FFFFFFFD)
00343B FD2F16              A  9822    	LD	(IY+%16),HL
00343E FD7319              A  9823    	LD	(IY+%19),E
                           A  9824    ; 3495			fs->volbase = bsect;			
003441 DD07DA              A  9825    	LD	BC,(IX+%FFFFFFDA)
003444 DD7EDD              A  9826    	LD	A,(IX+%FFFFFFDD)
003447 FD0F1E              A  9827    	LD	(IY+%1E),BC
00344A FD7721              A  9828    	LD	(IY+%21),A
                           A  9829    ; 3496			fs->fatbase = bsect + nrsv; 	
00344D DD07E8              A  9830    	LD	BC,(IX+%FFFFFFE8)
003450 CD 00 00 00         A  9831    	CALL	__stoiu
003454 E5C1                A  9832    	LD	BC,HL
003456 AF                  A  9833    	XOR	A,A
003457 DD27DA              A  9834    	LD	HL,(IX+%FFFFFFDA)
00345A DD5EDD              A  9835    	LD	E,(IX+%FFFFFFDD)
00345D CD 00 00 00         A  9836    	CALL	__ladd
003461 FD2F22              A  9837    	LD	(IY+%22),HL
003464 FD7325              A  9838    	LD	(IY+%25),E
                           A  9839    ; 3497			fs->database = bsect + sysect;	
003467 DD27C9              A  9840    	LD	HL,(IX+%FFFFFFC9)
00346A DD5ECC              A  9841    	LD	E,(IX+%FFFFFFCC)
00346D DD07DA              A  9842    	LD	BC,(IX+%FFFFFFDA)
003470 DD7EDD              A  9843    	LD	A,(IX+%FFFFFFDD)
003473 CD 00 00 00         A  9844    	CALL	__ladd
003477 FD2F2A              A  9845    	LD	(IY+%2A),HL
00347A FD732D              A  9846    	LD	(IY+%2D),E
                           A  9847    ; 3498			if (fmt == FS_FAT32) {
00347D 01030000            A  9848    	LD	BC,3
003481 DD27FA              A  9849    	LD	HL,(IX+%FFFFFFFA)
003484 B7                  A  9850    	OR	A,A
003485 ED42                A  9851    	SBC	HL,BC
003487 28 04               A  9852    	JR	Z,L__388
003489 3E01                A  9853    	LD	A,%1
00348B 18 01               A  9854    	JR	L__389
00348D                     A  9855    L__388:
00348D AF                  A  9856    	XOR	A,A
00348E                     A  9857    L__389:
00348E DD77E4              A  9858    	LD	(IX+%FFFFFFE4),A
003491 B7                  A  9859    	OR	A,A
003492 20 65               A  9860    	JR	NZ,L_769
                           A  9861    ; 3499				if (ld_word(fs->win + BPB_F
003494 DD31FD              A  9862    	LD	IY,(IX+%FFFFFFFD)
003497 ED0332              A  9863    	LEA	BC,IY+%32
00349A DD0FD0              A  9864    	LD	(IX+%FFFFFFD0),BC
00349D DD31D0              A  9865    	LD	IY,(IX+%FFFFFFD0)
0034A0 ED032A              A  9866    	LEA	BC,IY+%2A
0034A3 C5                  A  9867    	PUSH	BC
0034A4 CD 00 00 00         A  9868    	CALL	_ld_word
0034A8 C1                  A  9869    	POP	BC
0034A9 CD 00 00 00         A  9870    	CALL	__scmpzero
0034AD 28 08               A  9871    	JR	Z,L_760
0034AF 210D0000            A  9872    	LD	HL,13
0034B3 C3 EB 36 00         A  9873    	JR	L_780
0034B7                     A  9874    L_760:
                           A  9875    ; 3500				if (fs->n_rootdir != 0) ret
0034B7 DD31FD              A  9876    	LD	IY,(IX+%FFFFFFFD)
0034BA FD2707              A  9877    	LD	HL,(IY+%7)
0034BD CD 00 00 00         A  9878    	CALL	__scmpzero
0034C1 28 08               A  9879    	JR	Z,L_761
0034C3 210D0000            A  9880    	LD	HL,13
0034C7 C3 EB 36 00         A  9881    	JR	L_780
0034CB                     A  9882    L_761:
                           A  9883    ; 3501				fs->dirbase = ld_dword(fs->
0034CB DD31D0              A  9884    	LD	IY,(IX+%FFFFFFD0)
0034CE ED032C              A  9885    	LEA	BC,IY+%2C
0034D1 C5                  A  9886    	PUSH	BC
0034D2 CD 39 00 00         A  9887    	CALL	_ld_dword
0034D6 C1                  A  9888    	POP	BC
0034D7 DD31FD              A  9889    	LD	IY,(IX+%FFFFFFFD)
0034DA FD2F26              A  9890    	LD	(IY+%26),HL
0034DD FD7329              A  9891    	LD	(IY+%29),E
                           A  9892    ; 3502				szbfat = fs->n_fatent * 4;	
0034E0 FD2716              A  9893    	LD	HL,(IY+%16)
0034E3 FD5E19              A  9894    	LD	E,(IY+%19)
0034E6 01040000            A  9895    	LD	BC,4
0034EA AF                  A  9896    	XOR	A,A
0034EB CD 00 00 00         A  9897    	CALL	__lmulu
0034EF DD2FC1              A  9898    	LD	(IX+%FFFFFFC1),HL
0034F2 DD73C4              A  9899    	LD	(IX+%FFFFFFC4),E
                           A  9900    ; 3503			} else {
0034F5 C3 A1 35 00         A  9901    	JR	L_771
0034F9                     A  9902    L_769:
                           A  9903    ; 3504				if (fs->n_rootdir == 0)	ret
0034F9 DD31FD              A  9904    	LD	IY,(IX+%FFFFFFFD)
0034FC FD2707              A  9905    	LD	HL,(IY+%7)
0034FF CD 00 00 00         A  9906    	CALL	__scmpzero
003503 20 08               A  9907    	JR	NZ,L_763
003505 210D0000            A  9908    	LD	HL,13
003509 C3 EB 36 00         A  9909    	JR	L_780
00350D                     A  9910    L_763:
                           A  9911    ; 3505				fs->dirbase = fs->fatbase +
00350D DD31FD              A  9912    	LD	IY,(IX+%FFFFFFFD)
003510 FD2722              A  9913    	LD	HL,(IY+%22)
003513 FD5E25              A  9914    	LD	E,(IY+%25)
003516 DD07F5              A  9915    	LD	BC,(IX+%FFFFFFF5)
003519 DD7EF8              A  9916    	LD	A,(IX+%FFFFFFF8)
00351C CD 00 00 00         A  9917    	CALL	__ladd
003520 FD2F26              A  9918    	LD	(IY+%26),HL
003523 FD7329              A  9919    	LD	(IY+%29),E
                           A  9920    ; 3506				szbfat = (fmt == FS_FAT16) 
003526 01020000            A  9921    	LD	BC,2
00352A DD27FA              A  9922    	LD	HL,(IX+%FFFFFFFA)
00352D B7                  A  9923    	OR	A,A
00352E ED42                A  9924    	SBC	HL,BC
003530 20 16               A  9925    	JR	NZ,L_766
                           A  9926    ; 3507					fs->n_fatent * 2 : fs->
003532 DD31FD              A  9927    	LD	IY,(IX+%FFFFFFFD)
003535 FD2716              A  9928    	LD	HL,(IY+%16)
003538 FD5E19              A  9929    	LD	E,(IY+%19)
00353B AF                  A  9930    	XOR	A,A
00353C CD 00 00 00         A  9931    	CALL	__lmulu
003540 DD2FC5              A  9932    	LD	(IX+%FFFFFFC5),HL
003543 DD73C8              A  9933    	LD	(IX+%FFFFFFC8),E
003546 18 4D               A  9934    	JR	L_767
003548                     A  9935    L_766:
003548 DD31FD              A  9936    	LD	IY,(IX+%FFFFFFFD)
00354B FD1716              A  9937    	LD	DE,(IY+%16)
00354E DD1FBB              A  9938    	LD	(IX+%FFFFFFBB),DE	; spill
003551 FD5E19              A  9939    	LD	E,(IY+%19)
003554 DD1FBE              A  9940    	LD	(IX+%FFFFFFBE),DE	; spill
003557 DD27BB              A  9941    	LD	HL,(IX+%FFFFFFBB)
00355A DD17BE              A  9942    	LD	DE,(IX+%FFFFFFBE)	; unspill
00355D 01030000            A  9943    	LD	BC,3
003561 AF                  A  9944    	XOR	A,A
003562 CD 00 00 00         A  9945    	CALL	__lmulu
003566 7B                  A  9946    	LD	A,E
003567 E5C1                A  9947    	LD	BC,HL
003569 2E01                A  9948    	LD	L,%1
00356B CD 00 00 00         A  9949    	CALL	__lshru
00356F DD0FB8              A  9950    	LD	(IX+%FFFFFFB8),BC
003572 5F                  A  9951    	LD	E,A
003573 DD1FBE              A  9952    	LD	(IX+%FFFFFFBE),DE	; spill
003576 DD17BB              A  9953    	LD	DE,(IX+%FFFFFFBB)	; unspill
003579 D5C1                A  9954    	LD	BC,DE
00357B DD17BE              A  9955    	LD	DE,(IX+%FFFFFFBE)	; unspill
00357E 79                  A  9956    	LD	A,C
00357F E601                A  9957    	AND	A,%1
003581 B7ED62              A  9958    	UEXT	HL
003584 6F                  A  9959    	LD	L,A
003585 E5C1                A  9960    	LD	BC,HL
003587 7C                  A  9961    	LD	A,H
003588 DD27B8              A  9962    	LD	HL,(IX+%FFFFFFB8)
00358B CD 00 00 00         A  9963    	CALL	__ladd
00358F DD2FC5              A  9964    	LD	(IX+%FFFFFFC5),HL
003592 DD73C8              A  9965    	LD	(IX+%FFFFFFC8),E
003595                     A  9966    L_767:
003595 DD07C5              A  9967    	LD	BC,(IX+%FFFFFFC5)
003598 DD7EC8              A  9968    	LD	A,(IX+%FFFFFFC8)
00359B DD0FC1              A  9969    	LD	(IX+%FFFFFFC1),BC
00359E DD77C4              A  9970    	LD	(IX+%FFFFFFC4),A
                           A  9971    ; 3508			}
0035A1                     A  9972    L_771:
                           A  9973    ; 3509			if (fs->fsize < (szbfat + (SS(f
0035A1 DD27C1              A  9974    	LD	HL,(IX+%FFFFFFC1)
0035A4 DD5EC4              A  9975    	LD	E,(IX+%FFFFFFC4)
0035A7 01FF0100            A  9976    	LD	BC,511
0035AB AF                  A  9977    	XOR	A,A
0035AC CD 00 00 00         A  9978    	CALL	__ladd
0035B0 7B                  A  9979    	LD	A,E
0035B1 E5C1                A  9980    	LD	BC,HL
0035B3 2E09                A  9981    	LD	L,%9
0035B5 CD 00 00 00         A  9982    	CALL	__lshru
0035B9 DD31FD              A  9983    	LD	IY,(IX+%FFFFFFFD)
0035BC FD271A              A  9984    	LD	HL,(IY+%1A)
0035BF FD5E1D              A  9985    	LD	E,(IY+%1D)
0035C2 CD 00 00 00         A  9986    	CALL	__lcmpu
0035C6 30 08               A  9987    	JR	NC,L_772
0035C8 210D0000            A  9988    	LD	HL,13
0035CC C3 EB 36 00         A  9989    	JR	L_780
0035D0                     A  9990    L_772:
                           A  9991    ; 3510	
                           A  9992    ; 3511	#if !FF_FS_READONLY
                           A  9993    ; 3512			/* Get FSInfo if available */
                           A  9994    ; 3513			fs->last_clst = fs->free_clst =
0035D0 01FFFFFF            A  9995    	LD	BC,16777215
0035D4 DD31FD              A  9996    	LD	IY,(IX+%FFFFFFFD)
0035D7 FD0F12              A  9997    	LD	(IY+%12),BC
0035DA FD3615FF            A  9998    	LD	(IY+%15),%FF
0035DE FD0712              A  9999    	LD	BC,(IY+%12)
0035E1 FD7E15              A 10000    	LD	A,(IY+%15)
0035E4 FD0F0E              A 10001    	LD	(IY+%E),BC
0035E7 FD7711              A 10002    	LD	(IY+%11),A
                           A 10003    ; 3514			fs->fsi_flag = 0x80;
0035EA FD360480            A 10004    	LD	(IY+%4),%80
                           A 10005    ; 3515	#if (FF_FS_NOFSINFO & 3) != 3
                           A 10006    ; 3516			if (fmt == FS_FAT32				
                           A 10007    ; 3517				&& ld_word(fs->win + BPB_FS
0035EE DD7EE4              A 10008    	LD	A,(IX+%FFFFFFE4)
0035F1 B7                  A 10009    	OR	A,A
0035F2 C2 C7 36 00         A 10010    	JR	NZ,L_779
                           A 10011    ; 3518				&& move_window(fs, bsect + 
0035F6 DD31FD              A 10012    	LD	IY,(IX+%FFFFFFFD)
0035F9 ED0362              A 10013    	LEA	BC,IY+%62
0035FC C5                  A 10014    	PUSH	BC
0035FD CD 00 00 00         A 10015    	CALL	_ld_word
003601 C1                  A 10016    	POP	BC
003602 E5C1                A 10017    	LD	BC,HL
003604 CD 00 00 00         A 10018    	CALL	__stoiu
003608 01010000            A 10019    	LD	BC,1
00360C B7                  A 10020    	OR	A,A
00360D ED42                A 10021    	SBC	HL,BC
00360F C2 C7 36 00         A 10022    	JR	NZ,L_779
003613 DD27DA              A 10023    	LD	HL,(IX+%FFFFFFDA)
003616 DD5EDD              A 10024    	LD	E,(IX+%FFFFFFDD)
003619 3E01                A 10025    	LD	A,%1
00361B CD 00 00 00         A 10026    	CALL	__ladd_b
00361F 4B                  A 10027    	LD	C,E
003620 0600                A 10028    	LD	B,%0
003622 C5                  A 10029    	PUSH	BC
003623 E5                  A 10030    	PUSH	HL
003624 DD07FD              A 10031    	LD	BC,(IX+%FFFFFFFD)
003627 C5                  A 10032    	PUSH	BC
003628 CD A6 03 00         A 10033    	CALL	_move_window
00362C C1                  A 10034    	POP	BC
00362D C1                  A 10035    	POP	BC
00362E C1                  A 10036    	POP	BC
00362F CD 00 00 00         A 10037    	CALL	__icmpzero
003633 C2 C7 36 00         A 10038    	JR	NZ,L_779
                           A 10039    ; 3519			{
                           A 10040    ; 3520				fs->fsi_flag = 0;
003637 DD31FD              A 10041    	LD	IY,(IX+%FFFFFFFD)
00363A FD360400            A 10042    	LD	(IY+%4),%0
                           A 10043    ; 3521				if (ld_word(fs->win + BS_55
                           A 10044    ; 3522					&& ld_dword(fs->win + F
00363E ED0332              A 10045    	LEA	BC,IY+%32
003641 DD0FCD              A 10046    	LD	(IX+%FFFFFFCD),BC
003644 01FE0100            A 10047    	LD	BC,510
003648 DD27CD              A 10048    	LD	HL,(IX+%FFFFFFCD)
00364B 09                  A 10049    	ADD	HL,BC
00364C E5                  A 10050    	PUSH	HL
00364D CD 00 00 00         A 10051    	CALL	_ld_word
003651 C1                  A 10052    	POP	BC
003652 E5C1                A 10053    	LD	BC,HL
003654 CD 00 00 00         A 10054    	CALL	__stoiu
003658 0155AA00            A 10055    	LD	BC,43605
00365C B7                  A 10056    	OR	A,A
00365D ED42                A 10057    	SBC	HL,BC
00365F 20 66               A 10058    	JR	NZ,L_779
                           A 10059    ; 3523					&& ld_dword(fs->win + F
003661 DD07CD              A 10060    	LD	BC,(IX+%FFFFFFCD)
003664 C5                  A 10061    	PUSH	BC
003665 CD 39 00 00         A 10062    	CALL	_ld_dword
003669 C1                  A 10063    	POP	BC
00366A 01525261            A 10064    	LD	BC,6378066
00366E 3E41                A 10065    	LD	A,%41
003670 CD 00 00 00         A 10066    	CALL	__lcmpu
003674 20 51               A 10067    	JR	NZ,L_779
003676 DD31FD              A 10068    	LD	IY,(IX+%FFFFFFFD)
003679 ED0332              A 10069    	LEA	BC,IY+%32
00367C DD0FE1              A 10070    	LD	(IX+%FFFFFFE1),BC
00367F 01E40100            A 10071    	LD	BC,484
003683 DD27E1              A 10072    	LD	HL,(IX+%FFFFFFE1)
003686 09                  A 10073    	ADD	HL,BC
003687 E5                  A 10074    	PUSH	HL
003688 CD 39 00 00         A 10075    	CALL	_ld_dword
00368C C1                  A 10076    	POP	BC
00368D 01727241            A 10077    	LD	BC,4289138
003691 3E61                A 10078    	LD	A,%61
003693 CD 00 00 00         A 10079    	CALL	__lcmpu
003697 20 2E               A 10080    	JR	NZ,L_779
                           A 10081    ; 3524				{
                           A 10082    ; 3525	#if (FF_FS_NOFSINFO & 1) == 0
                           A 10083    ; 3526					fs->free_clst = ld_dwor
003699 01E80100            A 10084    	LD	BC,488
00369D DD27E1              A 10085    	LD	HL,(IX+%FFFFFFE1)
0036A0 09                  A 10086    	ADD	HL,BC
0036A1 E5                  A 10087    	PUSH	HL
0036A2 CD 39 00 00         A 10088    	CALL	_ld_dword
0036A6 C1                  A 10089    	POP	BC
0036A7 DD31FD              A 10090    	LD	IY,(IX+%FFFFFFFD)
0036AA FD2F12              A 10091    	LD	(IY+%12),HL
0036AD FD7315              A 10092    	LD	(IY+%15),E
                           A 10093    ; 3527	#endif
                           A 10094    ; 3528	#if (FF_FS_NOFSINFO & 2) == 0
                           A 10095    ; 3529					fs->last_clst = ld_dwor
0036B0 01EC0100            A 10096    	LD	BC,492
0036B4 DD27E1              A 10097    	LD	HL,(IX+%FFFFFFE1)
0036B7 09                  A 10098    	ADD	HL,BC
0036B8 E5                  A 10099    	PUSH	HL
0036B9 CD 39 00 00         A 10100    	CALL	_ld_dword
0036BD C1                  A 10101    	POP	BC
0036BE DD31FD              A 10102    	LD	IY,(IX+%FFFFFFFD)
0036C1 FD2F0E              A 10103    	LD	(IY+%E),HL
0036C4 FD7311              A 10104    	LD	(IY+%11),E
                           A 10105    ; 3530	#endif
                           A 10106    ; 3531				}
                           A 10107    ; 3532			}
                           A 10108    ; 3533	#endif	/* (FF_FS_NOFSINFO & 3) != 3 */
                           A 10109    ; 3534	#endif	/* !FF_FS_READONLY */
                           A 10110    ; 3535		}
0036C7                     A 10111    L_779:
                           A 10112    ; 3536	
                           A 10113    ; 3537		fs->fs_type = (BYTE)fmt;/* FAT sub-
0036C7 DD7EFA              A 10114    	LD	A,(IX+%FFFFFFFA)
0036CA DD31FD              A 10115    	LD	IY,(IX+%FFFFFFFD)
0036CD FD7700              A 10116    	LD	(IY+%0),A
                           A 10117    ; 3538		fs->id = ++Fsid;		/* Volume m
0036D0 ED4B 03 00 00       A 10118    	LD	BC,(_Fsid)
0036D5 03                  A 10119    	INC	BC
0036D6 21 03 00 00         A 10120    	LD	HL,_Fsid
0036DA 71                  A 10121    	LD	(HL),C
0036DB 23                  A 10122    	INC	HL
0036DC 70                  A 10123    	LD	(HL),B
0036DD ED4B 03 00 00       A 10124    	LD	BC,(_Fsid)
0036E2 FD7105              A 10125    	LD	(IY+%5),C
0036E5 FD7006              A 10126    	LD	(IY+%6),B
0036E8 B7                  A 10127    	OR	A,A
                           A 10128    ; 3539	#if FF_USE_LFN == 1
                           A 10129    ; 3540		fs->lfnbuf = LfnBuf;	/* Static L
                           A 10130    ; 3541	#if FF_FS_EXFAT
                           A 10131    ; 3542		fs->dirbuf = DirBuf;	/* Static d
                           A 10132    ; 3543	#endif
                           A 10133    ; 3544	#endif
                           A 10134    ; 3545	#if FF_FS_RPATH != 0
                           A 10135    ; 3546		fs->cdir = 0;			/* Initiali
                           A 10136    ; 3547	#endif
                           A 10137    ; 3548	#if FF_FS_LOCK != 0			/* Clear fi
                           A 10138    ; 3549		clear_lock(fs);
                           A 10139    ; 3550	#endif
                           A 10140    ; 3551		return FR_OK;
0036E9 ED62                A 10141    	SBC	HL,HL
                           A 10142    ; 3552	}
0036EB                     A 10143    L_780:
0036EB DDF9                A 10144    	LD	SP,IX
0036ED DDE1                A 10145    	POP	IX
0036EF C9                  A 10146    	RET	
                           A 10147    
                           A 10148    
                           A 10149    ;**************************** _mount_volume ***
                           A 10150    ;Name                         Addr/Register   S
                           A 10151    ;_Fsid                               STATIC    
                           A 10152    ;_disk_initialize                    IMPORT  --
                           A 10153    ;_disk_status                        IMPORT  --
                           A 10154    ;_FatFs                              STATIC    
                           A 10155    ;szbfat                               IX-63    
                           A 10156    ;temp764                              IX-59    
                           A 10157    ;sysect                               IX-55    
                           A 10158    ;G_54                                 IX-51    
                           A 10159    ;G_52                                 IX-48    
                           A 10160    ;G_51                                 IX-45    
                           A 10161    ;tsect                                IX-42    
                           A 10162    ;bsect                                IX-38    
                           A 10163    ;vol                                  IX-34    
                           A 10164    ;G_55                                 IX-31    
                           A 10165    ;G_53                                 IX-28    
                           A 10166    ;G_50                                 IX-27    
                           A 10167    ;nrsv                                 IX-24    
                           A 10168    ;nclst                                IX-22    
                           A 10169    ;G_48                                 IX-18    
                           A 10170    ;G_45                                 IX-17    
                           A 10171    ;G_49                                 IX-14    
                           A 10172    ;G_47                                 IX-12    
                           A 10173    ;fasize                               IX-11    
                           A 10174    ;stat                                  IX-7    
                           A 10175    ;fmt                                   IX-6    
                           A 10176    ;fs                                    IX-3    
                           A 10177    ;mode                                 IX+12    
                           A 10178    ;rfs                                   IX+9    
                           A 10179    ;path                                  IX+6    
                           A 10180    
                           A 10181    
                           A 10182    ; Stack Frame Size: 94 (bytes)
                           A 10183    ;       Spill Code: -1 (instruction)
                           A 10184    
                           A 10185    
                           A 10186    ; 3553	
                           A 10187    ; 3554	
                           A 10188    ; 3555	
                           A 10189    ; 3556	
                           A 10190    ; 3557	/*-------------------------------------
                           A 10191    ; 3558	/* Check if the file/directory object i
                           A 10192    ; 3559	/*-------------------------------------
                           A 10193    ; 3560	
                           A 10194    ; 3561	static FRESULT validate (	/* Returns 
                           A 10195    ; 3562		FFOBJID* obj,			/* Pointer 
                           A 10196    ; 3563		FATFS** rfs				/* Pointer 
                           A 10197    ; 3564	)
                           A 10198    ; 3565	{
0036F0                     A 10199    _validate:
0036F0 21F7FFFF            A 10200    	LD	HL,-9
0036F4 CD 00 00 00         A 10201    	CALL	__frameset
                           A 10202    ; 3566		FRESULT res = FR_INVALID_OBJECT;
0036F8 01090000            A 10203    	LD	BC,9
0036FC DD0FFA              A 10204    	LD	(IX+%FFFFFFFA),BC
                           A 10205    ; 3567	
                           A 10206    ; 3568	
                           A 10207    ; 3569		if (obj && obj->fs && obj->fs->fs_t
0036FF DD2706              A 10208    	LD	HL,(IX+%6)
003702 CD 00 00 00         A 10209    	CALL	__icmpzero
003706 28 45               A 10210    	JR	Z,L_790
003708 DD3106              A 10211    	LD	IY,(IX+%6)
00370B FD0700              A 10212    	LD	BC,(IY+%0)
00370E DD0FFD              A 10213    	LD	(IX+%FFFFFFFD),BC
003711 C5E1                A 10214    	LD	HL,BC
003713 CD 00 00 00         A 10215    	CALL	__icmpzero
003717 28 34               A 10216    	JR	Z,L_790
003719 DD31FD              A 10217    	LD	IY,(IX+%FFFFFFFD)
00371C FD7E00              A 10218    	LD	A,(IY+%0)
00371F B7                  A 10219    	OR	A,A
003720 28 2B               A 10220    	JR	Z,L_790
003722 DD31FD              A 10221    	LD	IY,(IX+%FFFFFFFD)
003725 FD0705              A 10222    	LD	BC,(IY+%5)
003728 DD3106              A 10223    	LD	IY,(IX+%6)
00372B FD2703              A 10224    	LD	HL,(IY+%3)
00372E B7                  A 10225    	OR	A,A
00372F 40ED42              A 10226    	SBC.SIS	HL,BC
003732 20 19               A 10227    	JR	NZ,L_790
                           A 10228    ; 3570	#if FF_FS_REENTRANT
                           A 10229    ; 3571			if (lock_fs(obj->fs)) {	/* Obta
                           A 10230    ; 3572				if (!(disk_status(obj->fs->
                           A 10231    ; 3573					res = FR_OK;
                           A 10232    ; 3574				} else {
                           A 10233    ; 3575					unlock_fs(obj->fs, FR_O
                           A 10234    ; 3576				}
                           A 10235    ; 3577			} else {
                           A 10236    ; 3578				res = FR_TIMEOUT;
                           A 10237    ; 3579			}
                           A 10238    ; 3580	#else
                           A 10239    ; 3581			if (!(disk_status(obj->fs->pdrv
003734 DD31FD              A 10240    	LD	IY,(IX+%FFFFFFFD)
003737 FD4E01              A 10241    	LD	C,(IY+%1)
00373A 0600                A 10242    	LD	B,%0
00373C C5                  A 10243    	PUSH	BC
00373D CD 00 00 00         A 10244    	CALL	_disk_status
003741 C1                  A 10245    	POP	BC
003742 E601                A 10246    	AND	A,%1
003744 20 07               A 10247    	JR	NZ,L_790
                           A 10248    ; 3582				res = FR_OK;
003746 01000000            A 10249    	LD	BC,0
00374A DD0FFA              A 10250    	LD	(IX+%FFFFFFFA),BC
                           A 10251    ; 3583			}
                           A 10252    ; 3584	#endif
                           A 10253    ; 3585		}
00374D                     A 10254    L_790:
                           A 10255    ; 3586		*rfs = (res == FR_OK) ? obj->fs : 0
00374D DD27FA              A 10256    	LD	HL,(IX+%FFFFFFFA)
003750 CD 00 00 00         A 10257    	CALL	__icmpzero
003754 20 0B               A 10258    	JR	NZ,L_788
003756 DD3106              A 10259    	LD	IY,(IX+%6)
003759 FD0700              A 10260    	LD	BC,(IY+%0)
00375C DD0FF7              A 10261    	LD	(IX+%FFFFFFF7),BC
00375F 18 07               A 10262    	JR	L_789
003761                     A 10263    L_788:
003761 01000000            A 10264    	LD	BC,0
003765 DD0FF7              A 10265    	LD	(IX+%FFFFFFF7),BC
003768                     A 10266    L_789:
003768 DD2709              A 10267    	LD	HL,(IX+%9)
00376B DD07F7              A 10268    	LD	BC,(IX+%FFFFFFF7)
00376E ED0F                A 10269    	LD	(HL),BC
                           A 10270    ; 3587		return res;
003770 DD27FA              A 10271    	LD	HL,(IX+%FFFFFFFA)
                           A 10272    ; 3588	}
003773 DDF9                A 10273    	LD	SP,IX
003775 DDE1                A 10274    	POP	IX
003777 C9                  A 10275    	RET	
                           A 10276    
                           A 10277    
                           A 10278    ;**************************** _validate *******
                           A 10279    ;Name                         Addr/Register   S
                           A 10280    ;_disk_status                        IMPORT  --
                           A 10281    ;temp786                               IX-9    
                           A 10282    ;res                                   IX-6    
                           A 10283    ;G_56                                  IX-3    
                           A 10284    ;rfs                                   IX+9    
                           A 10285    ;obj                                   IX+6    
                           A 10286    
                           A 10287    
                           A 10288    ; Stack Frame Size: 21 (bytes)
                           A 10289    ;       Spill Code: -1 (instruction)
                           A 10290    
                           A 10291    
                           A 10292    ; 3589	
                           A 10293    ; 3590	
                           A 10294    ; 3591	
                           A 10295    ; 3592	
                           A 10296    ; 3593	/*-------------------------------------
                           A 10297    ; 3594	
                           A 10298    ; 3595	   Public Functions (FatFs API)
                           A 10299    ; 3596	
                           A 10300    ; 3597	---------------------------------------
                           A 10301    ; 3598	
                           A 10302    ; 3599	
                           A 10303    ; 3600	
                           A 10304    ; 3601	/*-------------------------------------
                           A 10305    ; 3602	/* Mount/Unmount a Logical Drive       
                           A 10306    ; 3603	/*-------------------------------------
                           A 10307    ; 3604	
                           A 10308    ; 3605	FRESULT f_mount (
                           A 10309    ; 3606		FATFS* fs,			/* Pointer to t
                           A 10310    ; 3607		const TCHAR* path,	/* Logical driv
                           A 10311    ; 3608		BYTE opt			/* Mount option
                           A 10312    ; 3609	)
                           A 10313    ; 3610	{
003778                     A 10314    _f_mount:
003778 21F1FFFF            A 10315    	LD	HL,-15
00377C CD 00 00 00         A 10316    	CALL	__frameset
                           A 10317    ; 3611		FATFS *cfs;
                           A 10318    ; 3612		int vol;
                           A 10319    ; 3613		FRESULT res;
                           A 10320    ; 3614		const TCHAR *rp = path;
003780 DD0709              A 10321    	LD	BC,(IX+%9)
003783 DD0FF1              A 10322    	LD	(IX+%FFFFFFF1),BC
                           A 10323    ; 3615	
                           A 10324    ; 3616	
                           A 10325    ; 3617		/* Get logical drive number */
                           A 10326    ; 3618		vol = get_ldnumber(&rp);
003786 ED65F1              A 10327    	PEA	IX+%FFFFFFF1
003789 CD 8F 2C 00         A 10328    	CALL	_get_ldnumber
00378D C1                  A 10329    	POP	BC
00378E DD2FFA              A 10330    	LD	(IX+%FFFFFFFA),HL
                           A 10331    ; 3619		if (vol < 0) return FR_INVALID_DRIV
003791 CD 00 00 00         A 10332    	CALL	__icmpzero
003795 F2 9F 37 00         A 10333    	JP	P,L_793
003799 210B0000            A 10334    	LD	HL,11
00379D 18 5B               A 10335    	JR	L_800
00379F                     A 10336    L_793:
                           A 10337    ; 3620		cfs = FatFs[vol];					
00379F DD27FA              A 10338    	LD	HL,(IX+%FFFFFFFA)
0037A2 E5C1                A 10339    	LD	BC,HL
0037A4 29                  A 10340    	ADD	HL,HL
0037A5 09                  A 10341    	ADD	HL,BC
0037A6 01 00 00 00         A 10342    	LD	BC,_FatFs
0037AA 09                  A 10343    	ADD	HL,BC
0037AB DD2FF7              A 10344    	LD	(IX+%FFFFFFF7),HL
0037AE ED07                A 10345    	LD	BC,(HL)
0037B0 DD0FFD              A 10346    	LD	(IX+%FFFFFFFD),BC
                           A 10347    ; 3621	
                           A 10348    ; 3622		if (cfs) {
0037B3 C5E1                A 10349    	LD	HL,BC
0037B5 CD 00 00 00         A 10350    	CALL	__icmpzero
0037B9 28 07               A 10351    	JR	Z,L_796
                           A 10352    ; 3623	#if FF_FS_LOCK != 0
                           A 10353    ; 3624			clear_lock(cfs);
                           A 10354    ; 3625	#endif
                           A 10355    ; 3626	#if FF_FS_REENTRANT						
                           A 10356    ; 3627			if (!ff_del_syncobj(cfs->sobj))
                           A 10357    ; 3628	#endif
                           A 10358    ; 3629			cfs->fs_type = 0;				
0037BB DD31FD              A 10359    	LD	IY,(IX+%FFFFFFFD)
0037BE FD360000            A 10360    	LD	(IY+%0),%0
                           A 10361    ; 3630		}
0037C2                     A 10362    L_796:
                           A 10363    ; 3631	
                           A 10364    ; 3632		if (fs) {
0037C2 DD2706              A 10365    	LD	HL,(IX+%6)
0037C5 CD 00 00 00         A 10366    	CALL	__icmpzero
0037C9 28 07               A 10367    	JR	Z,L_797
                           A 10368    ; 3633			fs->fs_type = 0;				
0037CB DD3106              A 10369    	LD	IY,(IX+%6)
0037CE FD360000            A 10370    	LD	(IY+%0),%0
                           A 10371    ; 3634	#if FF_FS_REENTRANT						
                           A 10372    ; 3635			if (!ff_cre_syncobj((BYTE)vol, 
                           A 10373    ; 3636	#endif
                           A 10374    ; 3637		}
0037D2                     A 10375    L_797:
                           A 10376    ; 3638		FatFs[vol] = fs;					
0037D2 DD27F7              A 10377    	LD	HL,(IX+%FFFFFFF7)
0037D5 DD0706              A 10378    	LD	BC,(IX+%6)
0037D8 ED0F                A 10379    	LD	(HL),BC
                           A 10380    ; 3639	
                           A 10381    ; 3640		if (opt == 0) return FR_OK;			
0037DA DD7E0C              A 10382    	LD	A,(IX+%C)
0037DD B7                  A 10383    	OR	A,A
0037DE 20 05               A 10384    	JR	NZ,L_799
0037E0 B7                  A 10385    	OR	A,A
0037E1 ED62                A 10386    	SBC	HL,HL
0037E3 18 15               A 10387    	JR	L_800
0037E5                     A 10388    L_799:
                           A 10389    ; 3641	
                           A 10390    ; 3642		res = mount_volume(&path, &fs, 0);	
0037E5 01000000            A 10391    	LD	BC,0
0037E9 C5                  A 10392    	PUSH	BC
0037EA ED6506              A 10393    	PEA	IX+%6
0037ED ED6509              A 10394    	PEA	IX+%9
0037F0 CD 82 30 00         A 10395    	CALL	_mount_volume
0037F4 C1                  A 10396    	POP	BC
0037F5 C1                  A 10397    	POP	BC
0037F6 C1                  A 10398    	POP	BC
0037F7 DD2FF4              A 10399    	LD	(IX+%FFFFFFF4),HL
                           A 10400    ; 3643		LEAVE_FF(fs, res);
                           A 10401    ; 3644	}
0037FA                     A 10402    L_800:
0037FA DDF9                A 10403    	LD	SP,IX
0037FC DDE1                A 10404    	POP	IX
0037FE C9                  A 10405    	RET	
                           A 10406    
                           A 10407    
                           A 10408    ;**************************** _f_mount ********
                           A 10409    ;Name                         Addr/Register   S
                           A 10410    ;_FatFs                              STATIC    
                           A 10411    ;rp                                   IX-15    
                           A 10412    ;res                                  IX-12    
                           A 10413    ;G_59                                  IX-9    
                           A 10414    ;vol                                   IX-6    
                           A 10415    ;cfs                                   IX-3    
                           A 10416    ;opt                                  IX+12    
                           A 10417    ;path                                  IX+9    
                           A 10418    ;fs                                    IX+6    
                           A 10419    
                           A 10420    
                           A 10421    ; Stack Frame Size: 30 (bytes)
                           A 10422    ;       Spill Code: -1 (instruction)
                           A 10423    
                           A 10424    
                           A 10425    ; 3645	
                           A 10426    ; 3646	
                           A 10427    ; 3647	
                           A 10428    ; 3648	
                           A 10429    ; 3649	/*-------------------------------------
                           A 10430    ; 3650	/* Open or Create a File               
                           A 10431    ; 3651	/*-------------------------------------
                           A 10432    ; 3652	
                           A 10433    ; 3653	FRESULT f_open (
                           A 10434    ; 3654		FIL* fp,			/* Pointer to t
                           A 10435    ; 3655		const TCHAR* path,	/* Pointer to t
                           A 10436    ; 3656		BYTE mode			/* Access mode 
                           A 10437    ; 3657	)
                           A 10438    ; 3658	{
0037FF                     A 10439    _f_open:
0037FF 21A3FDFF            A 10440    	LD	HL,-605
003803 CD 00 00 00         A 10441    	CALL	__frameset
                           A 10442    ; 3659		FRESULT res;
                           A 10443    ; 3660		DIR dj;
                           A 10444    ; 3661		FATFS *fs;
                           A 10445    ; 3662	#if !FF_FS_READONLY
                           A 10446    ; 3663		DWORD cl, bcs, clst, tm;
                           A 10447    ; 3664		LBA_t sc;
                           A 10448    ; 3665		FSIZE_t ofs;
                           A 10449    ; 3666	#endif
                           A 10450    ; 3667		DEF_NAMBUF
                           A 10451    ; 3668	
                           A 10452    ; 3669	
                           A 10453    ; 3670		if (!fp) return FR_INVALID_OBJECT;
003807 DD2706              A 10454    	LD	HL,(IX+%6)
00380A CD 00 00 00         A 10455    	CALL	__icmpzero
00380E 20 08               A 10456    	JR	NZ,L_802
003810 21090000            A 10457    	LD	HL,9
003814 C3 E4 3C 00         A 10458    	JR	L_851
003818                     A 10459    L_802:
                           A 10460    ; 3671	
                           A 10461    ; 3672		/* Get logical drive number */
                           A 10462    ; 3673		mode &= FF_FS_READONLY ? FA_READ : 
003818 DD7E0C              A 10463    	LD	A,(IX+%C)
00381B E63F                A 10464    	AND	A,%3F
00381D DD770C              A 10465    	LD	(IX+%C),A
                           A 10466    ; 3674		res = mount_volume(&path, &fs, mode
003820 DD4E0C              A 10467    	LD	C,(IX+%C)
003823 0600                A 10468    	LD	B,%0
003825 C5                  A 10469    	PUSH	BC
003826 ED65FA              A 10470    	PEA	IX+%FFFFFFFA
003829 ED6509              A 10471    	PEA	IX+%9
00382C CD 82 30 00         A 10472    	CALL	_mount_volume
003830 C1                  A 10473    	POP	BC
003831 C1                  A 10474    	POP	BC
003832 C1                  A 10475    	POP	BC
003833 DD2FFD              A 10476    	LD	(IX+%FFFFFFFD),HL
                           A 10477    ; 3675		if (res == FR_OK) {
003836 CD 00 00 00         A 10478    	CALL	__icmpzero
00383A C2 CE 3C 00         A 10479    	JR	NZ,L_849
                           A 10480    ; 3676			dj.obj.fs = fs;
00383E DD07FA              A 10481    	LD	BC,(IX+%FFFFFFFA)
003841 DD0FB2              A 10482    	LD	(IX+%FFFFFFB2),BC
                           A 10483    ; 3677			INIT_NAMBUF(fs);
003844 DDE5E1              A 10484    	LD	HL,IX
003847 01B2FDFF            A 10485    	LD	BC,-590
00384B 09                  A 10486    	ADD	HL,BC
00384C DD31FA              A 10487    	LD	IY,(IX+%FFFFFFFA)
00384F FD2F0B              A 10488    	LD	(IY+%B),HL
                           A 10489    ; 3678			res = follow_path(&dj, path);	
003852 DD0709              A 10490    	LD	BC,(IX+%9)
003855 C5                  A 10491    	PUSH	BC
003856 ED65B2              A 10492    	PEA	IX+%FFFFFFB2
003859 CD 63 2B 00         A 10493    	CALL	_follow_path
00385D C1                  A 10494    	POP	BC
00385E C1                  A 10495    	POP	BC
00385F DD2FFD              A 10496    	LD	(IX+%FFFFFFFD),HL
                           A 10497    ; 3679	#if !FF_FS_READONLY	/* Read/Write confi
                           A 10498    ; 3680			if (res == FR_OK) {
003862 CD 00 00 00         A 10499    	CALL	__icmpzero
003866 20 11               A 10500    	JR	NZ,L_824
                           A 10501    ; 3681				if (dj.fn[NSFLAG] & NS_NONA
003868 ED55D0              A 10502    	LEA	IY,IX+%FFFFFFD0
00386B FD7E0B              A 10503    	LD	A,(IY+%B)
00386E E680                A 10504    	AND	A,%80
003870 28 07               A 10505    	JR	Z,L_824
                           A 10506    ; 3682					res = FR_INVALID_NAME;
003872 01060000            A 10507    	LD	BC,6
003876 DD0FFD              A 10508    	LD	(IX+%FFFFFFFD),BC
                           A 10509    ; 3683				}
                           A 10510    ; 3684	#if FF_FS_LOCK != 0
                           A 10511    ; 3685				else {
                           A 10512    ; 3686					res = chk_lock(&dj, (mo
                           A 10513    ; 3687				}
                           A 10514    ; 3688	#endif
                           A 10515    ; 3689			}
003879                     A 10516    L_824:
                           A 10517    ; 3690			/* Create or Open a file */
                           A 10518    ; 3691			if (mode & (FA_CREATE_ALWAYS | 
003879 DD7E0C              A 10519    	LD	A,(IX+%C)
00387C E61C                A 10520    	AND	A,%1C
00387E CA CF 39 00         A 10521    	JR	Z,L_823
                           A 10522    ; 3692				if (res != FR_OK) {			
003882 DD27FD              A 10523    	LD	HL,(IX+%FFFFFFFD)
003885 CD 00 00 00         A 10524    	CALL	__icmpzero
003889 28 21               A 10525    	JR	Z,L_811
                           A 10526    ; 3693					if (res == FR_NO_FILE) 
00388B 01040000            A 10527    	LD	BC,4
00388F DD27FD              A 10528    	LD	HL,(IX+%FFFFFFFD)
003892 B7                  A 10529    	OR	A,A
003893 ED42                A 10530    	SBC	HL,BC
003895 20 0B               A 10531    	JR	NZ,L_806
                           A 10532    ; 3694	#if FF_FS_LOCK != 0
                           A 10533    ; 3695						res = enq_lock() ? 
                           A 10534    ; 3696	#else
                           A 10535    ; 3697						res = dir_register(
003897 ED65B2              A 10536    	PEA	IX+%FFFFFFB2
00389A CD CD 1F 00         A 10537    	CALL	_dir_register
00389E C1                  A 10538    	POP	BC
00389F DD2FFD              A 10539    	LD	(IX+%FFFFFFFD),HL
                           A 10540    ; 3698	#endif
                           A 10541    ; 3699					}
0038A2                     A 10542    L_806:
                           A 10543    ; 3700					mode |= FA_CREATE_ALWAY
0038A2 DD7E0C              A 10544    	LD	A,(IX+%C)
0038A5 CBDF                A 10545    	SET	%3,A
0038A7 DD770C              A 10546    	LD	(IX+%C),A
                           A 10547    ; 3701				}
                           A 10548    ; 3702				else {						
0038AA 18 1E               A 10549    	JR	L_816
0038AC                     A 10550    L_811:
                           A 10551    ; 3703					if (dj.obj.attr & (AM_R
0038AC DD7EB7              A 10552    	LD	A,(IX+%FFFFFFB7)
0038AF E611                A 10553    	AND	A,%11
0038B1 28 09               A 10554    	JR	Z,L_809
                           A 10555    ; 3704						res = FR_DENIED;
0038B3 01070000            A 10556    	LD	BC,7
0038B7 DD0FFD              A 10557    	LD	(IX+%FFFFFFFD),BC
                           A 10558    ; 3705					} else {
0038BA 18 0E               A 10559    	JR	L_816
0038BC                     A 10560    L_809:
                           A 10561    ; 3706						if (mode & FA_CREAT
0038BC DD7E0C              A 10562    	LD	A,(IX+%C)
0038BF E604                A 10563    	AND	A,%4
0038C1 28 07               A 10564    	JR	Z,L_816
0038C3 01080000            A 10565    	LD	BC,8
0038C7 DD0FFD              A 10566    	LD	(IX+%FFFFFFFD),BC
                           A 10567    ; 3707					}
                           A 10568    ; 3708				}
0038CA                     A 10569    L_816:
                           A 10570    ; 3709				if (res == FR_OK && (mode &
0038CA DD27FD              A 10571    	LD	HL,(IX+%FFFFFFFD)
0038CD CD 00 00 00         A 10572    	CALL	__icmpzero
0038D1 C2 09 3A 00         A 10573    	JR	NZ,L_828
0038D5 DD7E0C              A 10574    	LD	A,(IX+%C)
0038D8 E608                A 10575    	AND	A,%8
0038DA CA 09 3A 00         A 10576    	JR	Z,L_828
                           A 10577    ; 3710	#if FF_FS_EXFAT
                           A 10578    ; 3711					if (fs->fs_type == FS_E
                           A 10579    ; 3712						/* Get current allo
                           A 10580    ; 3713						fp->obj.fs = fs;
                           A 10581    ; 3714						init_alloc_info(fs,
                           A 10582    ; 3715						/* Set directory en
                           A 10583    ; 3716						memset(fs->dirbuf +
                           A 10584    ; 3717						memset(fs->dirbuf +
                           A 10585    ; 3718						fs->dirbuf[XDIR_Att
                           A 10586    ; 3719						st_dword(fs->dirbuf
                           A 10587    ; 3720						fs->dirbuf[XDIR_Gen
                           A 10588    ; 3721						res = store_xdir(&d
                           A 10589    ; 3722						if (res == FR_OK &&
                           A 10590    ; 3723							res = remove_ch
                           A 10591    ; 3724							fs->last_clst =
                           A 10592    ; 3725						}
                           A 10593    ; 3726					} else
                           A 10594    ; 3727	#endif
                           A 10595    ; 3728					{
                           A 10596    ; 3729						/* Set directory en
                           A 10597    ; 3730						tm = GET_FATTIME();
                           A 10598    ; 3731						st_dword(dj.dir + D
0038DE 01500000            A 10599    	LD	BC,80
0038E2 C5                  A 10600    	PUSH	BC
0038E3 01000021            A 10601    	LD	BC,2162688
0038E7 C5                  A 10602    	PUSH	BC
0038E8 DD31CD              A 10603    	LD	IY,(IX+%FFFFFFCD)
0038EB ED030E              A 10604    	LEA	BC,IY+%E
0038EE C5                  A 10605    	PUSH	BC
0038EF CD F5 00 00         A 10606    	CALL	_st_dword
0038F3 C1                  A 10607    	POP	BC
0038F4 C1                  A 10608    	POP	BC
0038F5 C1                  A 10609    	POP	BC
                           A 10610    ; 3732						st_dword(dj.dir + D
0038F6 01500000            A 10611    	LD	BC,80
0038FA C5                  A 10612    	PUSH	BC
0038FB 01000021            A 10613    	LD	BC,2162688
0038FF C5                  A 10614    	PUSH	BC
003900 DD31CD              A 10615    	LD	IY,(IX+%FFFFFFCD)
003903 ED0316              A 10616    	LEA	BC,IY+%16
003906 C5                  A 10617    	PUSH	BC
003907 CD F5 00 00         A 10618    	CALL	_st_dword
00390B C1                  A 10619    	POP	BC
00390C C1                  A 10620    	POP	BC
00390D C1                  A 10621    	POP	BC
                           A 10622    ; 3733						cl = ld_clust(fs, d
00390E DD07CD              A 10623    	LD	BC,(IX+%FFFFFFCD)
003911 C5                  A 10624    	PUSH	BC
003912 DD07FA              A 10625    	LD	BC,(IX+%FFFFFFFA)
003915 C5                  A 10626    	PUSH	BC
003916 CD 64 16 00         A 10627    	CALL	_ld_clust
00391A C1                  A 10628    	POP	BC
00391B C1                  A 10629    	POP	BC
00391C DD2FE4              A 10630    	LD	(IX+%FFFFFFE4),HL
00391F DD73E7              A 10631    	LD	(IX+%FFFFFFE7),E
                           A 10632    ; 3734						dj.dir[DIR_Attr] = 
003922 DD31CD              A 10633    	LD	IY,(IX+%FFFFFFCD)
003925 ED230B              A 10634    	LEA	HL,IY+%B
003928 3620                A 10635    	LD	(HL),%20
                           A 10636    ; 3735						st_clust(fs, dj.dir
00392A 01000000            A 10637    	LD	BC,0
00392E C5                  A 10638    	PUSH	BC
00392F C5                  A 10639    	PUSH	BC
003930 DD07CD              A 10640    	LD	BC,(IX+%FFFFFFCD)
003933 C5                  A 10641    	PUSH	BC
003934 DD07FA              A 10642    	LD	BC,(IX+%FFFFFFFA)
003937 C5                  A 10643    	PUSH	BC
003938 CD C8 16 00         A 10644    	CALL	_st_clust
00393C C1                  A 10645    	POP	BC
00393D C1                  A 10646    	POP	BC
00393E C1                  A 10647    	POP	BC
00393F C1                  A 10648    	POP	BC
                           A 10649    ; 3736						st_dword(dj.dir + D
003940 01000000            A 10650    	LD	BC,0
003944 C5                  A 10651    	PUSH	BC
003945 C5                  A 10652    	PUSH	BC
003946 DD31CD              A 10653    	LD	IY,(IX+%FFFFFFCD)
003949 ED031C              A 10654    	LEA	BC,IY+%1C
00394C C5                  A 10655    	PUSH	BC
00394D CD F5 00 00         A 10656    	CALL	_st_dword
003951 C1                  A 10657    	POP	BC
003952 C1                  A 10658    	POP	BC
003953 C1                  A 10659    	POP	BC
                           A 10660    ; 3737						fs->wflag = 1;
003954 DD31FA              A 10661    	LD	IY,(IX+%FFFFFFFA)
003957 FD360301            A 10662    	LD	(IY+%3),%1
                           A 10663    ; 3738						if (cl != 0) {		
00395B DD27E4              A 10664    	LD	HL,(IX+%FFFFFFE4)
00395E DD5EE7              A 10665    	LD	E,(IX+%FFFFFFE7)
003961 CD 00 00 00         A 10666    	CALL	__lcmpzero
003965 CA 09 3A 00         A 10667    	JR	Z,L_828
                           A 10668    ; 3739							sc = fs->winsec
003969 DD31FA              A 10669    	LD	IY,(IX+%FFFFFFFA)
00396C FD072E              A 10670    	LD	BC,(IY+%2E)
00396F FD7E31              A 10671    	LD	A,(IY+%31)
003972 DD0FEE              A 10672    	LD	(IX+%FFFFFFEE),BC
003975 DD77F1              A 10673    	LD	(IX+%FFFFFFF1),A
                           A 10674    ; 3740							res = remove_ch
003978 01000000            A 10675    	LD	BC,0
00397C C5                  A 10676    	PUSH	BC
00397D C5                  A 10677    	PUSH	BC
00397E DD4EE7              A 10678    	LD	C,(IX+%FFFFFFE7)
003981 0600                A 10679    	LD	B,%0
003983 C5                  A 10680    	PUSH	BC
003984 DD07E4              A 10681    	LD	BC,(IX+%FFFFFFE4)
003987 C5                  A 10682    	PUSH	BC
003988 ED65B2              A 10683    	PEA	IX+%FFFFFFB2
00398B CD 0B 0B 00         A 10684    	CALL	_remove_chain
00398F C1                  A 10685    	POP	BC
003990 C1                  A 10686    	POP	BC
003991 C1                  A 10687    	POP	BC
003992 C1                  A 10688    	POP	BC
003993 C1                  A 10689    	POP	BC
003994 DD2FFD              A 10690    	LD	(IX+%FFFFFFFD),HL
                           A 10691    ; 3741							if (res == FR_O
003997 CD 00 00 00         A 10692    	CALL	__icmpzero
00399B 20 6C               A 10693    	JR	NZ,L_828
                           A 10694    ; 3742								res = move_
00399D DD4EF1              A 10695    	LD	C,(IX+%FFFFFFF1)
0039A0 0600                A 10696    	LD	B,%0
0039A2 C5                  A 10697    	PUSH	BC
0039A3 DD07EE              A 10698    	LD	BC,(IX+%FFFFFFEE)
0039A6 C5                  A 10699    	PUSH	BC
0039A7 DD07FA              A 10700    	LD	BC,(IX+%FFFFFFFA)
0039AA C5                  A 10701    	PUSH	BC
0039AB CD A6 03 00         A 10702    	CALL	_move_window
0039AF C1                  A 10703    	POP	BC
0039B0 C1                  A 10704    	POP	BC
0039B1 C1                  A 10705    	POP	BC
0039B2 DD2FFD              A 10706    	LD	(IX+%FFFFFFFD),HL
                           A 10707    ; 3743								fs->last_cl
0039B5 DD27E4              A 10708    	LD	HL,(IX+%FFFFFFE4)
0039B8 DD5EE7              A 10709    	LD	E,(IX+%FFFFFFE7)
0039BB 01010000            A 10710    	LD	BC,1
0039BF AF                  A 10711    	XOR	A,A
0039C0 CD 00 00 00         A 10712    	CALL	__lsub
0039C4 DD31FA              A 10713    	LD	IY,(IX+%FFFFFFFA)
0039C7 FD2F0E              A 10714    	LD	(IY+%E),HL
0039CA FD7311              A 10715    	LD	(IY+%11),E
                           A 10716    ; 3744							}
                           A 10717    ; 3745						}
                           A 10718    ; 3746					}
                           A 10719    ; 3747				}
                           A 10720    ; 3748			}
                           A 10721    ; 3749			else {	/* Open an existing fil
0039CD 18 3A               A 10722    	JR	L_828
0039CF                     A 10723    L_823:
                           A 10724    ; 3750				if (res == FR_OK) {			
0039CF DD27FD              A 10725    	LD	HL,(IX+%FFFFFFFD)
0039D2 CD 00 00 00         A 10726    	CALL	__icmpzero
0039D6 20 31               A 10727    	JR	NZ,L_828
                           A 10728    ; 3751					if (dj.obj.attr & AM_DI
0039D8 ED02B2              A 10729    	LEA	BC,IX+%FFFFFFB2
0039DB DD0FEB              A 10730    	LD	(IX+%FFFFFFEB),BC
0039DE DD31EB              A 10731    	LD	IY,(IX+%FFFFFFEB)
0039E1 FD7E05              A 10732    	LD	A,(IY+%5)
0039E4 E610                A 10733    	AND	A,%10
0039E6 28 09               A 10734    	JR	Z,L_820
                           A 10735    ; 3752						res = FR_NO_FILE;
0039E8 01040000            A 10736    	LD	BC,4
0039EC DD0FFD              A 10737    	LD	(IX+%FFFFFFFD),BC
                           A 10738    ; 3753					} else {
0039EF 18 18               A 10739    	JR	L_828
0039F1                     A 10740    L_820:
                           A 10741    ; 3754						if ((mode & FA_WRIT
0039F1 DD7E0C              A 10742    	LD	A,(IX+%C)
0039F4 E602                A 10743    	AND	A,%2
0039F6 28 11               A 10744    	JR	Z,L_828
0039F8 DD31EB              A 10745    	LD	IY,(IX+%FFFFFFEB)
0039FB FD7E05              A 10746    	LD	A,(IY+%5)
0039FE E601                A 10747    	AND	A,%1
003A00 28 07               A 10748    	JR	Z,L_828
                           A 10749    ; 3755							res = FR_DENIED
003A02 01070000            A 10750    	LD	BC,7
003A06 DD0FFD              A 10751    	LD	(IX+%FFFFFFFD),BC
                           A 10752    ; 3756						}
                           A 10753    ; 3757					}
                           A 10754    ; 3758				}
                           A 10755    ; 3759			}
003A09                     A 10756    L_828:
                           A 10757    ; 3760			if (res == FR_OK) {
003A09 DD27FD              A 10758    	LD	HL,(IX+%FFFFFFFD)
003A0C CD 00 00 00         A 10759    	CALL	__icmpzero
003A10 20 27               A 10760    	JR	NZ,L_845
                           A 10761    ; 3761				if (mode & FA_CREATE_ALWAYS
003A12 DD7E0C              A 10762    	LD	A,(IX+%C)
003A15 E608                A 10763    	AND	A,%8
003A17 28 08               A 10764    	JR	Z,L_826
003A19 DD7E0C              A 10765    	LD	A,(IX+%C)
003A1C CBF7                A 10766    	SET	%6,A
003A1E DD770C              A 10767    	LD	(IX+%C),A
003A21                     A 10768    L_826:
                           A 10769    ; 3762				fp->dir_sect = fs->winsect;
003A21 DD31FA              A 10770    	LD	IY,(IX+%FFFFFFFA)
003A24 FD072E              A 10771    	LD	BC,(IY+%2E)
003A27 FD7E31              A 10772    	LD	A,(IY+%31)
003A2A DD3106              A 10773    	LD	IY,(IX+%6)
003A2D FD0F1D              A 10774    	LD	(IY+%1D),BC
003A30 FD7720              A 10775    	LD	(IY+%20),A
                           A 10776    ; 3763				fp->dir_ptr = dj.dir;
003A33 DD07CD              A 10777    	LD	BC,(IX+%FFFFFFCD)
003A36 FD0F21              A 10778    	LD	(IY+%21),BC
                           A 10779    ; 3764	#if FF_FS_LOCK != 0
                           A 10780    ; 3765				fp->obj.lockid = inc_lock(&
                           A 10781    ; 3766				if (fp->obj.lockid == 0) re
                           A 10782    ; 3767	#endif
                           A 10783    ; 3768			}
003A39                     A 10784    L_845:
                           A 10785    ; 3769	#else		/* R/O configuration */
                           A 10786    ; 3770			if (res == FR_OK) {
                           A 10787    ; 3771				if (dj.fn[NSFLAG] & NS_NONA
                           A 10788    ; 3772					res = FR_INVALID_NAME;
                           A 10789    ; 3773				} else {
                           A 10790    ; 3774					if (dj.obj.attr & AM_DI
                           A 10791    ; 3775						res = FR_NO_FILE;
                           A 10792    ; 3776					}
                           A 10793    ; 3777				}
                           A 10794    ; 3778			}
                           A 10795    ; 3779	#endif
                           A 10796    ; 3780	
                           A 10797    ; 3781			if (res == FR_OK) {
003A39 DD27FD              A 10798    	LD	HL,(IX+%FFFFFFFD)
003A3C CD 00 00 00         A 10799    	CALL	__icmpzero
003A40 C2 CE 3C 00         A 10800    	JR	NZ,L_849
                           A 10801    ; 3782	#if FF_FS_EXFAT
                           A 10802    ; 3783				if (fs->fs_type == FS_EXFAT
                           A 10803    ; 3784					fp->obj.c_scl = dj.obj.
                           A 10804    ; 3785					fp->obj.c_size = ((DWOR
                           A 10805    ; 3786					fp->obj.c_ofs = dj.blk_
                           A 10806    ; 3787					init_alloc_info(fs, &fp
                           A 10807    ; 3788				} else
                           A 10808    ; 3789	#endif
                           A 10809    ; 3790				{
                           A 10810    ; 3791					fp->obj.sclust = ld_clu
003A44 DD3106              A 10811    	LD	IY,(IX+%6)
003A47 ED2300              A 10812    	LEA	HL,IY+%0
003A4A 01AFFDFF            A 10813    	LD	BC,-593
003A4E CD 00 00 00         A 10814    	CALL	__istix
003A52 DD07CD              A 10815    	LD	BC,(IX+%FFFFFFCD)
003A55 C5                  A 10816    	PUSH	BC
003A56 DD07FA              A 10817    	LD	BC,(IX+%FFFFFFFA)
003A59 C5                  A 10818    	PUSH	BC
003A5A CD 64 16 00         A 10819    	CALL	_ld_clust
003A5E C1                  A 10820    	POP	BC
003A5F C1                  A 10821    	POP	BC
003A60 01A3FDFF            A 10822    	LD	BC,-605	; spill
003A64 CD 00 00 00         A 10823    	CALL	__istix
003A68 01AFFDFF            A 10824    	LD	BC,-593
003A6C CD 00 00 00         A 10825    	CALL	__ildix
003A70 E5FDE1              A 10826    	LD	IY,HL
003A73 01A3FDFF            A 10827    	LD	BC,-605	; unspill
003A77 CD 00 00 00         A 10828    	CALL	__ildix
003A7B FD2F07              A 10829    	LD	(IY+%7),HL
003A7E FD730A              A 10830    	LD	(IY+%A),E
                           A 10831    ; 3792					fp->obj.objsize = ld_dw
003A81 DD31CD              A 10832    	LD	IY,(IX+%FFFFFFCD)
003A84 ED031C              A 10833    	LEA	BC,IY+%1C
003A87 C5                  A 10834    	PUSH	BC
003A88 CD 39 00 00         A 10835    	CALL	_ld_dword
003A8C C1                  A 10836    	POP	BC
003A8D 01A6FDFF            A 10837    	LD	BC,-602	; spill
003A91 CD 00 00 00         A 10838    	CALL	__istix
003A95 01AFFDFF            A 10839    	LD	BC,-593
003A99 CD 00 00 00         A 10840    	CALL	__ildix
003A9D E5FDE1              A 10841    	LD	IY,HL
003AA0 01A6FDFF            A 10842    	LD	BC,-602	; unspill
003AA4 CD 00 00 00         A 10843    	CALL	__ildix
003AA8 FD2F0B              A 10844    	LD	(IY+%B),HL
003AAB FD730E              A 10845    	LD	(IY+%E),E
                           A 10846    ; 3793				}
                           A 10847    ; 3794	#if FF_USE_FASTSEEK
                           A 10848    ; 3795				fp->cltbl = 0;		/* Disa
                           A 10849    ; 3796	#endif
                           A 10850    ; 3797				fp->obj.fs = fs;	/* Vali
003AAE 01AFFDFF            A 10851    	LD	BC,-593
003AB2 CD 00 00 00         A 10852    	CALL	__ildix
003AB6 DD07FA              A 10853    	LD	BC,(IX+%FFFFFFFA)
003AB9 E5FDE1              A 10854    	LD	IY,HL
003ABC FD0F00              A 10855    	LD	(IY+%0),BC
                           A 10856    ; 3798				fp->obj.id = fs->id;
003ABF 01AFFDFF            A 10857    	LD	BC,-593
003AC3 CD 00 00 00         A 10858    	CALL	__ildix
003AC7 DD31FA              A 10859    	LD	IY,(IX+%FFFFFFFA)
003ACA FD0705              A 10860    	LD	BC,(IY+%5)
003ACD E5FDE1              A 10861    	LD	IY,HL
003AD0 FD7103              A 10862    	LD	(IY+%3),C
003AD3 FD7004              A 10863    	LD	(IY+%4),B
                           A 10864    ; 3799				fp->flag = mode;	/* Set 
003AD6 DD7E0C              A 10865    	LD	A,(IX+%C)
003AD9 DD3106              A 10866    	LD	IY,(IX+%6)
003ADC FD770F              A 10867    	LD	(IY+%F),A
                           A 10868    ; 3800				fp->err = 0;		/* Clea
003ADF FD361000            A 10869    	LD	(IY+%10),%0
                           A 10870    ; 3801				fp->sect = 0;		/* Inva
003AE3 01000000            A 10871    	LD	BC,0
003AE7 FD0F19              A 10872    	LD	(IY+%19),BC
003AEA FD361C00            A 10873    	LD	(IY+%1C),%0
                           A 10874    ; 3802				fp->fptr = 0;		/* Set 
003AEE FD0F11              A 10875    	LD	(IY+%11),BC
003AF1 FD361400            A 10876    	LD	(IY+%14),%0
                           A 10877    ; 3803	#if !FF_FS_READONLY
                           A 10878    ; 3804	#if !FF_FS_TINY
                           A 10879    ; 3805				memset(fp->buf, 0, sizeof f
003AF5 01000200            A 10880    	LD	BC,512
003AF9 C5                  A 10881    	PUSH	BC
003AFA 01000000            A 10882    	LD	BC,0
003AFE C5                  A 10883    	PUSH	BC
003AFF ED6624              A 10884    	PEA	IY+%24
003B02 CD 00 00 00         A 10885    	CALL	_memset
003B06 C1                  A 10886    	POP	BC
003B07 C1                  A 10887    	POP	BC
003B08 C1                  A 10888    	POP	BC
                           A 10889    ; 3806	#endif
                           A 10890    ; 3807				if ((mode & FA_SEEKEND) && 
003B09 DD7E0C              A 10891    	LD	A,(IX+%C)
003B0C E620                A 10892    	AND	A,%20
003B0E CA CE 3C 00         A 10893    	JR	Z,L_849
003B12 DD3106              A 10894    	LD	IY,(IX+%6)
003B15 ED0300              A 10895    	LEA	BC,IY+%0
003B18 DD0FE8              A 10896    	LD	(IX+%FFFFFFE8),BC
003B1B B7                  A 10897    	OR	A,A
003B1C ED62                A 10898    	SBC	HL,HL
003B1E 1E00                A 10899    	LD	E,%0
003B20 DD31E8              A 10900    	LD	IY,(IX+%FFFFFFE8)
003B23 FD070B              A 10901    	LD	BC,(IY+%B)
003B26 FD7E0E              A 10902    	LD	A,(IY+%E)
003B29 CD 00 00 00         A 10903    	CALL	__lcmpu
003B2D D2 CE 3C 00         A 10904    	JR	NC,L_849
                           A 10905    ; 3808					fp->fptr = fp->obj.objs
003B31 DD31E8              A 10906    	LD	IY,(IX+%FFFFFFE8)
003B34 FD070B              A 10907    	LD	BC,(IY+%B)
003B37 FD7E0E              A 10908    	LD	A,(IY+%E)
003B3A DD3106              A 10909    	LD	IY,(IX+%6)
003B3D FD0F11              A 10910    	LD	(IY+%11),BC
003B40 FD7714              A 10911    	LD	(IY+%14),A
                           A 10912    ; 3809					bcs = (DWORD)fs->csize 
003B43 DD31FA              A 10913    	LD	IY,(IX+%FFFFFFFA)
003B46 FD0709              A 10914    	LD	BC,(IY+%9)
003B49 CD 00 00 00         A 10915    	CALL	__stoiu
003B4D 01000200            A 10916    	LD	BC,512
003B51 AF                  A 10917    	XOR	A,A
003B52 CD 00 00 00         A 10918    	CALL	__lmulu
003B56 DD2FE0              A 10919    	LD	(IX+%FFFFFFE0),HL
003B59 DD73E3              A 10920    	LD	(IX+%FFFFFFE3),E
                           A 10921    ; 3810					clst = fp->obj.sclust;	
003B5C DD3106              A 10922    	LD	IY,(IX+%6)
003B5F ED2300              A 10923    	LEA	HL,IY+%0
003B62 01ACFDFF            A 10924    	LD	BC,-596
003B66 CD 00 00 00         A 10925    	CALL	__istix
003B6A 01ACFDFF            A 10926    	LD	BC,-596
003B6E CD 00 00 00         A 10927    	CALL	__ildix
003B72 E5FDE1              A 10928    	LD	IY,HL
003B75 FD0707              A 10929    	LD	BC,(IY+%7)
003B78 FD7E0A              A 10930    	LD	A,(IY+%A)
003B7B DD0FF6              A 10931    	LD	(IX+%FFFFFFF6),BC
003B7E DD77F9              A 10932    	LD	(IX+%FFFFFFF9),A
                           A 10933    ; 3811					for (ofs = fp->obj.objs
003B81 01ACFDFF            A 10934    	LD	BC,-596
003B85 CD 00 00 00         A 10935    	CALL	__ildix
003B89 E5FDE1              A 10936    	LD	IY,HL
003B8C FD070B              A 10937    	LD	BC,(IY+%B)
003B8F FD7E0E              A 10938    	LD	A,(IY+%E)
003B92 DD0FF2              A 10939    	LD	(IX+%FFFFFFF2),BC
003B95 DD77F5              A 10940    	LD	(IX+%FFFFFFF5),A
003B98 18 64               A 10941    	JR	L_836
003B9A                     A 10942    L_834:
                           A 10943    ; 3812						clst = get_fat(&fp-
003B9A DD4EF9              A 10944    	LD	C,(IX+%FFFFFFF9)
003B9D 0600                A 10945    	LD	B,%0
003B9F C5                  A 10946    	PUSH	BC
003BA0 DD07F6              A 10947    	LD	BC,(IX+%FFFFFFF6)
003BA3 C5                  A 10948    	PUSH	BC
003BA4 DD3106              A 10949    	LD	IY,(IX+%6)
003BA7 ED6600              A 10950    	PEA	IY+%0
003BAA CD D1 05 00         A 10951    	CALL	_get_fat
003BAE C1                  A 10952    	POP	BC
003BAF C1                  A 10953    	POP	BC
003BB0 C1                  A 10954    	POP	BC
003BB1 E5C1                A 10955    	LD	BC,HL
003BB3 DD0FF6              A 10956    	LD	(IX+%FFFFFFF6),BC
003BB6 DD73F9              A 10957    	LD	(IX+%FFFFFFF9),E
                           A 10958    ; 3813						if (clst <= 1) res 
003BB9 21010000            A 10959    	LD	HL,1
003BBD 1E00                A 10960    	LD	E,%0
003BBF DD7EF9              A 10961    	LD	A,(IX+%FFFFFFF9)
003BC2 CD 00 00 00         A 10962    	CALL	__lcmpu
003BC6 38 07               A 10963    	JR	C,L_833
003BC8 01020000            A 10964    	LD	BC,2
003BCC DD0FFD              A 10965    	LD	(IX+%FFFFFFFD),BC
003BCF                     A 10966    L_833:
                           A 10967    ; 3814						if (clst == 0xFFFFF
003BCF DD27F6              A 10968    	LD	HL,(IX+%FFFFFFF6)
003BD2 DD5EF9              A 10969    	LD	E,(IX+%FFFFFFF9)
003BD5 01FFFFFF            A 10970    	LD	BC,16777215
003BD9 3EFF                A 10971    	LD	A,%FF
003BDB CD 00 00 00         A 10972    	CALL	__lcmpu
003BDF 20 07               A 10973    	JR	NZ,L_835
003BE1 01010000            A 10974    	LD	BC,1
003BE5 DD0FFD              A 10975    	LD	(IX+%FFFFFFFD),BC
                           A 10976    ; 3815					}
003BE8                     A 10977    L_835:
003BE8 DD27F2              A 10978    	LD	HL,(IX+%FFFFFFF2)
003BEB DD5EF5              A 10979    	LD	E,(IX+%FFFFFFF5)
003BEE DD07E0              A 10980    	LD	BC,(IX+%FFFFFFE0)
003BF1 DD7EE3              A 10981    	LD	A,(IX+%FFFFFFE3)
003BF4 CD 00 00 00         A 10982    	CALL	__lsub
003BF8 DD2FF2              A 10983    	LD	(IX+%FFFFFFF2),HL
003BFB DD73F5              A 10984    	LD	(IX+%FFFFFFF5),E
003BFE                     A 10985    L_836:
003BFE DD27FD              A 10986    	LD	HL,(IX+%FFFFFFFD)
003C01 CD 00 00 00         A 10987    	CALL	__icmpzero
003C05 20 12               A 10988    	JR	NZ,L_837
003C07 DD27E0              A 10989    	LD	HL,(IX+%FFFFFFE0)
003C0A DD5EE3              A 10990    	LD	E,(IX+%FFFFFFE3)
003C0D DD07F2              A 10991    	LD	BC,(IX+%FFFFFFF2)
003C10 DD7EF5              A 10992    	LD	A,(IX+%FFFFFFF5)
003C13 CD 00 00 00         A 10993    	CALL	__lcmpu
003C17 38 81               A 10994    	JR	C,L_834
003C19                     A 10995    L_837:
                           A 10996    ; 3816					fp->clust = clst;
003C19 DD07F6              A 10997    	LD	BC,(IX+%FFFFFFF6)
003C1C DD7EF9              A 10998    	LD	A,(IX+%FFFFFFF9)
003C1F DD3106              A 10999    	LD	IY,(IX+%6)
003C22 FD0F15              A 11000    	LD	(IY+%15),BC
003C25 FD7718              A 11001    	LD	(IY+%18),A
                           A 11002    ; 3817					if (res == FR_OK && ofs
003C28 DD27FD              A 11003    	LD	HL,(IX+%FFFFFFFD)
003C2B CD 00 00 00         A 11004    	CALL	__icmpzero
003C2F C2 CE 3C 00         A 11005    	JR	NZ,L_849
003C33 DD27F2              A 11006    	LD	HL,(IX+%FFFFFFF2)
003C36 DD5EF5              A 11007    	LD	E,(IX+%FFFFFFF5)
003C39 01FF0100            A 11008    	LD	BC,511
003C3D AF                  A 11009    	XOR	A,A
003C3E CD 00 00 00         A 11010    	CALL	__land
003C42 CD 00 00 00         A 11011    	CALL	__lcmpzero
003C46 CA CE 3C 00         A 11012    	JR	Z,L_849
                           A 11013    ; 3818						sc = clst2sect(fs, 
003C4A DD4EF9              A 11014    	LD	C,(IX+%FFFFFFF9)
003C4D 0600                A 11015    	LD	B,%0
003C4F C5                  A 11016    	PUSH	BC
003C50 DD07F6              A 11017    	LD	BC,(IX+%FFFFFFF6)
003C53 C5                  A 11018    	PUSH	BC
003C54 DD07FA              A 11019    	LD	BC,(IX+%FFFFFFFA)
003C57 C5                  A 11020    	PUSH	BC
003C58 CD 6B 05 00         A 11021    	CALL	_clst2sect
003C5C C1                  A 11022    	POP	BC
003C5D C1                  A 11023    	POP	BC
003C5E C1                  A 11024    	POP	BC
003C5F DD2FEE              A 11025    	LD	(IX+%FFFFFFEE),HL
003C62 DD73F1              A 11026    	LD	(IX+%FFFFFFF1),E
                           A 11027    ; 3819						if (sc == 0) {
003C65 DD27EE              A 11028    	LD	HL,(IX+%FFFFFFEE)
003C68 DD5EF1              A 11029    	LD	E,(IX+%FFFFFFF1)
003C6B CD 00 00 00         A 11030    	CALL	__lcmpzero
003C6F 20 09               A 11031    	JR	NZ,L_841
                           A 11032    ; 3820							res = FR_INT_ER
003C71 01020000            A 11033    	LD	BC,2
003C75 DD0FFD              A 11034    	LD	(IX+%FFFFFFFD),BC
                           A 11035    ; 3821						} else {
003C78 18 54               A 11036    	JR	L_849
003C7A                     A 11037    L_841:
                           A 11038    ; 3822							fp->sect = sc +
003C7A DD07F2              A 11039    	LD	BC,(IX+%FFFFFFF2)
003C7D DD7EF5              A 11040    	LD	A,(IX+%FFFFFFF5)
003C80 2E09                A 11041    	LD	L,%9
003C82 CD 00 00 00         A 11042    	CALL	__lshru
003C86 5F                  A 11043    	LD	E,A
003C87 C5E1                A 11044    	LD	HL,BC
003C89 DD07EE              A 11045    	LD	BC,(IX+%FFFFFFEE)
003C8C DD7EF1              A 11046    	LD	A,(IX+%FFFFFFF1)
003C8F CD 00 00 00         A 11047    	CALL	__ladd
003C93 DD3106              A 11048    	LD	IY,(IX+%6)
003C96 FD2F19              A 11049    	LD	(IY+%19),HL
003C99 FD731C              A 11050    	LD	(IY+%1C),E
                           A 11051    ; 3823	#if !FF_FS_TINY
                           A 11052    ; 3824							if (disk_read(f
003C9C 01010000            A 11053    	LD	BC,1
003CA0 C5                  A 11054    	PUSH	BC
003CA1 FD0719              A 11055    	LD	BC,(IY+%19)
003CA4 FD7E1C              A 11056    	LD	A,(IY+%1C)
003CA7 2600                A 11057    	LD	H,%0
003CA9 6F                  A 11058    	LD	L,A
003CAA E5                  A 11059    	PUSH	HL
003CAB C5                  A 11060    	PUSH	BC
003CAC ED6624              A 11061    	PEA	IY+%24
003CAF DD31FA              A 11062    	LD	IY,(IX+%FFFFFFFA)
003CB2 FD4E01              A 11063    	LD	C,(IY+%1)
003CB5 0600                A 11064    	LD	B,%0
003CB7 C5                  A 11065    	PUSH	BC
003CB8 CD 00 00 00         A 11066    	CALL	_disk_read
003CBC C1                  A 11067    	POP	BC
003CBD C1                  A 11068    	POP	BC
003CBE C1                  A 11069    	POP	BC
003CBF C1                  A 11070    	POP	BC
003CC0 C1                  A 11071    	POP	BC
003CC1 CD 00 00 00         A 11072    	CALL	__icmpzero
003CC5 28 07               A 11073    	JR	Z,L_849
003CC7 01010000            A 11074    	LD	BC,1
003CCB DD0FFD              A 11075    	LD	(IX+%FFFFFFFD),BC
                           A 11076    ; 3825	#endif
                           A 11077    ; 3826						}
                           A 11078    ; 3827					}
                           A 11079    ; 3828	#if FF_FS_LOCK != 0
                           A 11080    ; 3829					if (res != FR_OK) dec_l
                           A 11081    ; 3830	#endif
                           A 11082    ; 3831				}
                           A 11083    ; 3832	#endif
                           A 11084    ; 3833			}
                           A 11085    ; 3834	
                           A 11086    ; 3835			FREE_NAMBUF();
                           A 11087    ; 3836		}
003CCE                     A 11088    L_849:
                           A 11089    ; 3837	
                           A 11090    ; 3838		if (res != FR_OK) fp->obj.fs = 0;	
003CCE DD27FD              A 11091    	LD	HL,(IX+%FFFFFFFD)
003CD1 CD 00 00 00         A 11092    	CALL	__icmpzero
003CD5 28 0A               A 11093    	JR	Z,L_850
003CD7 01000000            A 11094    	LD	BC,0
003CDB DD3106              A 11095    	LD	IY,(IX+%6)
003CDE FD0F00              A 11096    	LD	(IY+%0),BC
003CE1                     A 11097    L_850:
                           A 11098    ; 3839	
                           A 11099    ; 3840		LEAVE_FF(fs, res);
003CE1 DD27FD              A 11100    	LD	HL,(IX+%FFFFFFFD)
                           A 11101    ; 3841	}
003CE4                     A 11102    L_851:
003CE4 DDF9                A 11103    	LD	SP,IX
003CE6 DDE1                A 11104    	POP	IX
003CE8 C9                  A 11105    	RET	
                           A 11106    
                           A 11107    
                           A 11108    ;**************************** _f_open *********
                           A 11109    ;Name                         Addr/Register   S
                           A 11110    ;_disk_read                          IMPORT  --
                           A 11111    ;_memset                             IMPORT  --
                           A 11112    ;lbuf                                IX-590    
                           A 11113    ;dj                                   IX-78    
                           A 11114    ;bcs                                  IX-32    
                           A 11115    ;cl                                   IX-28    
                           A 11116    ;G_61                                 IX-24    
                           A 11117    ;G_60                                 IX-21    
                           A 11118    ;sc                                   IX-18    
                           A 11119    ;ofs                                  IX-14    
                           A 11120    ;clst                                 IX-10    
                           A 11121    ;fs                                    IX-6    
                           A 11122    ;res                                   IX-3    
                           A 11123    ;mode                                 IX+12    
                           A 11124    ;path                                  IX+9    
                           A 11125    ;fp                                    IX+6    
                           A 11126    
                           A 11127    
                           A 11128    ; Stack Frame Size: 620 (bytes)
                           A 11129    ;       Spill Code: -1 (instruction)
                           A 11130    
                           A 11131    
                           A 11132    ; 3842	
                           A 11133    ; 3843	
                           A 11134    ; 3844	
                           A 11135    ; 3845	
                           A 11136    ; 3846	/*-------------------------------------
                           A 11137    ; 3847	/* Read File                           
                           A 11138    ; 3848	/*-------------------------------------
                           A 11139    ; 3849	
                           A 11140    ; 3850	FRESULT f_read (
                           A 11141    ; 3851		FIL* fp, 	/* Open file to be read
                           A 11142    ; 3852		void* buff,	/* Data buffer to store
                           A 11143    ; 3853		UINT btr,	/* Number of bytes to r
                           A 11144    ; 3854		UINT* br	/* Number of bytes read
                           A 11145    ; 3855	)
                           A 11146    ; 3856	{
003CE9                     A 11147    _f_read:
003CE9 21CEFFFF            A 11148    	LD	HL,-50
003CED CD 00 00 00         A 11149    	CALL	__frameset
                           A 11150    ; 3857		FRESULT res;
                           A 11151    ; 3858		FATFS *fs;
                           A 11152    ; 3859		DWORD clst;
                           A 11153    ; 3860		LBA_t sect;
                           A 11154    ; 3861		FSIZE_t remain;
                           A 11155    ; 3862		UINT rcnt, cc, csect;
                           A 11156    ; 3863		BYTE *rbuff = (BYTE*)buff;
003CF1 DD0709              A 11157    	LD	BC,(IX+%9)
003CF4 DD0FF0              A 11158    	LD	(IX+%FFFFFFF0),BC
                           A 11159    ; 3864	
                           A 11160    ; 3865	
                           A 11161    ; 3866		*br = 0;	/* Clear read byte coun
003CF7 DD270F              A 11162    	LD	HL,(IX+%F)
003CFA 01000000            A 11163    	LD	BC,0
003CFE ED0F                A 11164    	LD	(HL),BC
                           A 11165    ; 3867		res = validate(&fp->obj, &fs);		
003D00 ED65FA              A 11166    	PEA	IX+%FFFFFFFA
003D03 DD3106              A 11167    	LD	IY,(IX+%6)
003D06 ED6600              A 11168    	PEA	IY+%0
003D09 CD F0 36 00         A 11169    	CALL	_validate
003D0D C1                  A 11170    	POP	BC
003D0E C1                  A 11171    	POP	BC
003D0F DD2FEA              A 11172    	LD	(IX+%FFFFFFEA),HL
                           A 11173    ; 3868		if (res != FR_OK || (res = (FRESULT
003D12 CD 00 00 00         A 11174    	CALL	__icmpzero
003D16 20 13               A 11175    	JR	NZ,L_853
003D18 DD3106              A 11176    	LD	IY,(IX+%6)
003D1B FD7E10              A 11177    	LD	A,(IY+%10)
003D1E B7ED62              A 11178    	UEXT	HL
003D21 6F                  A 11179    	LD	L,A
003D22 DD2FEA              A 11180    	LD	(IX+%FFFFFFEA),HL
003D25 CD 00 00 00         A 11181    	CALL	__icmpzero
003D29 28 07               A 11182    	JR	Z,L_855
003D2B                     A 11183    L_853:
003D2B DD27EA              A 11184    	LD	HL,(IX+%FFFFFFEA)
003D2E C3 00 41 00         A 11185    	JR	L_895
003D32                     A 11186    L_855:
                           A 11187    ; 3869		if (!(fp->flag & FA_READ)) LEAVE_FF
003D32 DD3106              A 11188    	LD	IY,(IX+%6)
003D35 FD7E0F              A 11189    	LD	A,(IY+%F)
003D38 E601                A 11190    	AND	A,%1
003D3A 20 08               A 11191    	JR	NZ,L_856
003D3C 21070000            A 11192    	LD	HL,7
003D40 C3 00 41 00         A 11193    	JR	L_895
003D44                     A 11194    L_856:
                           A 11195    ; 3870		remain = fp->obj.objsize - fp->fptr
003D44 DD3106              A 11196    	LD	IY,(IX+%6)
003D47 FD270B              A 11197    	LD	HL,(IY+%B)
003D4A FD5E0E              A 11198    	LD	E,(IY+%E)
003D4D FD0711              A 11199    	LD	BC,(IY+%11)
003D50 FD7E14              A 11200    	LD	A,(IY+%14)
003D53 CD 00 00 00         A 11201    	CALL	__lsub
003D57 DD2FDE              A 11202    	LD	(IX+%FFFFFFDE),HL
003D5A DD73E1              A 11203    	LD	(IX+%FFFFFFE1),E
                           A 11204    ; 3871		if (btr > remain) btr = (UINT)remai
003D5D DD070C              A 11205    	LD	BC,(IX+%C)
003D60 AF                  A 11206    	XOR	A,A
003D61 DD27DE              A 11207    	LD	HL,(IX+%FFFFFFDE)
003D64 DD5EE1              A 11208    	LD	E,(IX+%FFFFFFE1)
003D67 CD 00 00 00         A 11209    	CALL	__lcmpu
003D6B D2 F0 40 00         A 11210    	JR	NC,L_892
003D6F DD07DE              A 11211    	LD	BC,(IX+%FFFFFFDE)
003D72 DD0F0C              A 11212    	LD	(IX+%C),BC
                           A 11213    ; 3872	
                           A 11214    ; 3873		for ( ; btr > 0; btr -= rcnt, *br +
003D75 C3 F0 40 00         A 11215    	JR	L_892
003D79                     A 11216    L_890:
                           A 11217    ; 3874			if (fp->fptr % SS(fs) == 0) {	
003D79 DD3106              A 11218    	LD	IY,(IX+%6)
003D7C FD0711              A 11219    	LD	BC,(IY+%11)
003D7F FD7E14              A 11220    	LD	A,(IY+%14)
003D82 DD0FE2              A 11221    	LD	(IX+%FFFFFFE2),BC
003D85 DD77E5              A 11222    	LD	(IX+%FFFFFFE5),A
003D88 C5E1                A 11223    	LD	HL,BC
003D8A DD5EE5              A 11224    	LD	E,(IX+%FFFFFFE5)
003D8D 01FF0100            A 11225    	LD	BC,511
003D91 AF                  A 11226    	XOR	A,A
003D92 CD 00 00 00         A 11227    	CALL	__land
003D96 CD 00 00 00         A 11228    	CALL	__lcmpzero
003D9A C2 51 40 00         A 11229    	JR	NZ,L_887
                           A 11230    ; 3875				csect = (UINT)(fp->fptr / S
003D9E DD31FA              A 11231    	LD	IY,(IX+%FFFFFFFA)
003DA1 FD0709              A 11232    	LD	BC,(IY+%9)
003DA4 CD 00 00 00         A 11233    	CALL	__stoiu
003DA8 2B                  A 11234    	DEC	HL
003DA9 E5C1                A 11235    	LD	BC,HL
003DAB CD 00 00 00         A 11236    	CALL	__itol
003DAF DD0FCF              A 11237    	LD	(IX+%FFFFFFCF),BC
003DB2 5F                  A 11238    	LD	E,A
003DB3 DD07E2              A 11239    	LD	BC,(IX+%FFFFFFE2)
003DB6 DD7EE5              A 11240    	LD	A,(IX+%FFFFFFE5)
003DB9 2E09                A 11241    	LD	L,%9
003DBB CD 00 00 00         A 11242    	CALL	__lshru
003DBF DD27CF              A 11243    	LD	HL,(IX+%FFFFFFCF)
003DC2 CD 00 00 00         A 11244    	CALL	__land
003DC6 DD2FED              A 11245    	LD	(IX+%FFFFFFED),HL
                           A 11246    ; 3876				if (csect == 0) {			
003DC9 CD 00 00 00         A 11247    	CALL	__icmpzero
003DCD C2 5C 3E 00         A 11248    	JR	NZ,L_866
                           A 11249    ; 3877					if (fp->fptr == 0) {	
003DD1 DD27E2              A 11250    	LD	HL,(IX+%FFFFFFE2)
003DD4 DD5EE5              A 11251    	LD	E,(IX+%FFFFFFE5)
003DD7 CD 00 00 00         A 11252    	CALL	__lcmpzero
003DDB 20 11               A 11253    	JR	NZ,L_859
                           A 11254    ; 3878						clst = fp->obj.sclu
003DDD DD3106              A 11255    	LD	IY,(IX+%6)
003DE0 FD0707              A 11256    	LD	BC,(IY+%7)
003DE3 FD7E0A              A 11257    	LD	A,(IY+%A)
003DE6 DD0FE6              A 11258    	LD	(IX+%FFFFFFE6),BC
003DE9 DD77E9              A 11259    	LD	(IX+%FFFFFFE9),A
                           A 11260    ; 3879					} else {				
003DEC 18 1E               A 11261    	JR	L_861
003DEE                     A 11262    L_859:
                           A 11263    ; 3880	#if FF_USE_FASTSEEK
                           A 11264    ; 3881						if (fp->cltbl) {
                           A 11265    ; 3882							clst = clmt_clu
                           A 11266    ; 3883						} else
                           A 11267    ; 3884	#endif
                           A 11268    ; 3885						{
                           A 11269    ; 3886							clst = get_fat(
003DEE DD3106              A 11270    	LD	IY,(IX+%6)
003DF1 FD0715              A 11271    	LD	BC,(IY+%15)
003DF4 FD7E18              A 11272    	LD	A,(IY+%18)
003DF7 2600                A 11273    	LD	H,%0
003DF9 6F                  A 11274    	LD	L,A
003DFA E5                  A 11275    	PUSH	HL
003DFB C5                  A 11276    	PUSH	BC
003DFC ED6600              A 11277    	PEA	IY+%0
003DFF CD D1 05 00         A 11278    	CALL	_get_fat
003E03 C1                  A 11279    	POP	BC
003E04 C1                  A 11280    	POP	BC
003E05 C1                  A 11281    	POP	BC
003E06 DD2FE6              A 11282    	LD	(IX+%FFFFFFE6),HL
003E09 DD73E9              A 11283    	LD	(IX+%FFFFFFE9),E
                           A 11284    ; 3887						}
                           A 11285    ; 3888					}
003E0C                     A 11286    L_861:
                           A 11287    ; 3889					if (clst < 2) ABORT(fs,
003E0C DD27E6              A 11288    	LD	HL,(IX+%FFFFFFE6)
003E0F DD5EE9              A 11289    	LD	E,(IX+%FFFFFFE9)
003E12 01020000            A 11290    	LD	BC,2
003E16 AF                  A 11291    	XOR	A,A
003E17 CD 00 00 00         A 11292    	CALL	__lcmpu
003E1B 30 0F               A 11293    	JR	NC,L_862
003E1D DD3106              A 11294    	LD	IY,(IX+%6)
003E20 FD361002            A 11295    	LD	(IY+%10),%2
003E24 21020000            A 11296    	LD	HL,2
003E28 C3 00 41 00         A 11297    	JR	L_895
003E2C                     A 11298    L_862:
                           A 11299    ; 3890					if (clst == 0xFFFFFFFF)
003E2C DD27E6              A 11300    	LD	HL,(IX+%FFFFFFE6)
003E2F DD5EE9              A 11301    	LD	E,(IX+%FFFFFFE9)
003E32 01FFFFFF            A 11302    	LD	BC,16777215
003E36 3EFF                A 11303    	LD	A,%FF
003E38 CD 00 00 00         A 11304    	CALL	__lcmpu
003E3C 20 0F               A 11305    	JR	NZ,L_864
003E3E DD3106              A 11306    	LD	IY,(IX+%6)
003E41 FD361001            A 11307    	LD	(IY+%10),%1
003E45 21010000            A 11308    	LD	HL,1
003E49 C3 00 41 00         A 11309    	JR	L_895
003E4D                     A 11310    L_864:
                           A 11311    ; 3891					fp->clust = clst;		
003E4D DD07E6              A 11312    	LD	BC,(IX+%FFFFFFE6)
003E50 DD7EE9              A 11313    	LD	A,(IX+%FFFFFFE9)
003E53 DD3106              A 11314    	LD	IY,(IX+%6)
003E56 FD0F15              A 11315    	LD	(IY+%15),BC
003E59 FD7718              A 11316    	LD	(IY+%18),A
                           A 11317    ; 3892				}
003E5C                     A 11318    L_866:
                           A 11319    ; 3893				sect = clst2sect(fs, fp->cl
003E5C DD3106              A 11320    	LD	IY,(IX+%6)
003E5F FD0715              A 11321    	LD	BC,(IY+%15)
003E62 FD7E18              A 11322    	LD	A,(IY+%18)
003E65 2600                A 11323    	LD	H,%0
003E67 6F                  A 11324    	LD	L,A
003E68 E5                  A 11325    	PUSH	HL
003E69 C5                  A 11326    	PUSH	BC
003E6A DD07FA              A 11327    	LD	BC,(IX+%FFFFFFFA)
003E6D C5                  A 11328    	PUSH	BC
003E6E CD 6B 05 00         A 11329    	CALL	_clst2sect
003E72 C1                  A 11330    	POP	BC
003E73 C1                  A 11331    	POP	BC
003E74 C1                  A 11332    	POP	BC
003E75 DD2FF6              A 11333    	LD	(IX+%FFFFFFF6),HL
003E78 DD73F9              A 11334    	LD	(IX+%FFFFFFF9),E
                           A 11335    ; 3894				if (sect == 0) ABORT(fs, FR
003E7B DD27F6              A 11336    	LD	HL,(IX+%FFFFFFF6)
003E7E DD5EF9              A 11337    	LD	E,(IX+%FFFFFFF9)
003E81 CD 00 00 00         A 11338    	CALL	__lcmpzero
003E85 20 0F               A 11339    	JR	NZ,L_868
003E87 DD3106              A 11340    	LD	IY,(IX+%6)
003E8A FD361002            A 11341    	LD	(IY+%10),%2
003E8E 21020000            A 11342    	LD	HL,2
003E92 C3 00 41 00         A 11343    	JR	L_895
003E96                     A 11344    L_868:
                           A 11345    ; 3895				sect += csect;
003E96 DD07ED              A 11346    	LD	BC,(IX+%FFFFFFED)
003E99 AF                  A 11347    	XOR	A,A
003E9A DD27F6              A 11348    	LD	HL,(IX+%FFFFFFF6)
003E9D DD5EF9              A 11349    	LD	E,(IX+%FFFFFFF9)
003EA0 CD 00 00 00         A 11350    	CALL	__ladd
003EA4 DD2FF6              A 11351    	LD	(IX+%FFFFFFF6),HL
003EA7 DD73F9              A 11352    	LD	(IX+%FFFFFFF9),E
                           A 11353    ; 3896				cc = btr / SS(fs);			
003EAA DD270C              A 11354    	LD	HL,(IX+%C)
003EAD 3E09                A 11355    	LD	A,%9
003EAF CD 00 00 00         A 11356    	CALL	__ishru_b
003EB3 DD2FF3              A 11357    	LD	(IX+%FFFFFFF3),HL
                           A 11358    ; 3897				if (cc > 0) {				
003EB6 E5C1                A 11359    	LD	BC,HL
003EB8 B7                  A 11360    	OR	A,A
003EB9 ED62                A 11361    	SBC	HL,HL
003EBB B7                  A 11362    	OR	A,A
003EBC ED42                A 11363    	SBC	HL,BC
003EBE D2 8F 3F 00         A 11364    	JR	NC,L_884
                           A 11365    ; 3898					if (csect + cc > fs->cs
003EC2 DD31FA              A 11366    	LD	IY,(IX+%FFFFFFFA)
003EC5 FD0709              A 11367    	LD	BC,(IY+%9)
003EC8 CD 00 00 00         A 11368    	CALL	__stoiu
003ECC E5C1                A 11369    	LD	BC,HL
003ECE DD17F3              A 11370    	LD	DE,(IX+%FFFFFFF3)
003ED1 DD27ED              A 11371    	LD	HL,(IX+%FFFFFFED)
003ED4 19                  A 11372    	ADD	HL,DE
003ED5 E5D1                A 11373    	LD	DE,HL
003ED7 C5E1                A 11374    	LD	HL,BC
003ED9 B7                  A 11375    	OR	A,A
003EDA ED52                A 11376    	SBC	HL,DE
003EDC 30 13               A 11377    	JR	NC,L_871
                           A 11378    ; 3899						cc = fs->csize - cs
003EDE DD31FA              A 11379    	LD	IY,(IX+%FFFFFFFA)
003EE1 FD0709              A 11380    	LD	BC,(IY+%9)
003EE4 CD 00 00 00         A 11381    	CALL	__stoiu
003EE8 DD07ED              A 11382    	LD	BC,(IX+%FFFFFFED)
003EEB B7                  A 11383    	OR	A,A
003EEC ED42                A 11384    	SBC	HL,BC
003EEE DD2FF3              A 11385    	LD	(IX+%FFFFFFF3),HL
                           A 11386    ; 3900					}
003EF1                     A 11387    L_871:
                           A 11388    ; 3901					if (disk_read(fs->pdrv,
003EF1 DD07F3              A 11389    	LD	BC,(IX+%FFFFFFF3)
003EF4 C5                  A 11390    	PUSH	BC
003EF5 DD4EF9              A 11391    	LD	C,(IX+%FFFFFFF9)
003EF8 0600                A 11392    	LD	B,%0
003EFA C5                  A 11393    	PUSH	BC
003EFB DD07F6              A 11394    	LD	BC,(IX+%FFFFFFF6)
003EFE C5                  A 11395    	PUSH	BC
003EFF DD07F0              A 11396    	LD	BC,(IX+%FFFFFFF0)
003F02 C5                  A 11397    	PUSH	BC
003F03 DD31FA              A 11398    	LD	IY,(IX+%FFFFFFFA)
003F06 FD4E01              A 11399    	LD	C,(IY+%1)
003F09 0600                A 11400    	LD	B,%0
003F0B C5                  A 11401    	PUSH	BC
003F0C CD 00 00 00         A 11402    	CALL	_disk_read
003F10 C1                  A 11403    	POP	BC
003F11 C1                  A 11404    	POP	BC
003F12 C1                  A 11405    	POP	BC
003F13 C1                  A 11406    	POP	BC
003F14 C1                  A 11407    	POP	BC
003F15 CD 00 00 00         A 11408    	CALL	__icmpzero
003F19 28 0F               A 11409    	JR	Z,L_872
003F1B DD3106              A 11410    	LD	IY,(IX+%6)
003F1E FD361001            A 11411    	LD	(IY+%10),%1
003F22 21010000            A 11412    	LD	HL,1
003F26 C3 00 41 00         A 11413    	JR	L_895
003F2A                     A 11414    L_872:
                           A 11415    ; 3902	#if !FF_FS_READONLY && FF_FS_MINIMIZE <
                           A 11416    ; 3903	#if FF_FS_TINY
                           A 11417    ; 3904					if (fs->wflag && fs->wi
                           A 11418    ; 3905						memcpy(rbuff + ((fs
                           A 11419    ; 3906					}
                           A 11420    ; 3907	#else
                           A 11421    ; 3908					if ((fp->flag & FA_DIRT
003F2A DD3106              A 11422    	LD	IY,(IX+%6)
003F2D FD7E0F              A 11423    	LD	A,(IY+%F)
003F30 E680                A 11424    	AND	A,%80
003F32 28 4B               A 11425    	JR	Z,L_875
003F34 DD3106              A 11426    	LD	IY,(IX+%6)
003F37 FD2719              A 11427    	LD	HL,(IY+%19)
003F3A FD5E1C              A 11428    	LD	E,(IY+%1C)
003F3D DD07F6              A 11429    	LD	BC,(IX+%FFFFFFF6)
003F40 DD7EF9              A 11430    	LD	A,(IX+%FFFFFFF9)
003F43 CD 00 00 00         A 11431    	CALL	__lsub
003F47 DD2FDA              A 11432    	LD	(IX+%FFFFFFDA),HL
003F4A DD73DD              A 11433    	LD	(IX+%FFFFFFDD),E
003F4D DD07F3              A 11434    	LD	BC,(IX+%FFFFFFF3)
003F50 AF                  A 11435    	XOR	A,A
003F51 DD27DA              A 11436    	LD	HL,(IX+%FFFFFFDA)
003F54 DD5EDD              A 11437    	LD	E,(IX+%FFFFFFDD)
003F57 CD 00 00 00         A 11438    	CALL	__lcmpu
003F5B 30 22               A 11439    	JR	NC,L_875
                           A 11440    ; 3909						memcpy(rbuff + ((fp
003F5D 01000200            A 11441    	LD	BC,512
003F61 C5                  A 11442    	PUSH	BC
003F62 DD3106              A 11443    	LD	IY,(IX+%6)
003F65 ED6624              A 11444    	PEA	IY+%24
003F68 DD27DA              A 11445    	LD	HL,(IX+%FFFFFFDA)
003F6B DD5EDD              A 11446    	LD	E,(IX+%FFFFFFDD)
003F6E AF                  A 11447    	XOR	A,A
003F6F CD 00 00 00         A 11448    	CALL	__lmulu
003F73 DD07F0              A 11449    	LD	BC,(IX+%FFFFFFF0)
003F76 09                  A 11450    	ADD	HL,BC
003F77 E5                  A 11451    	PUSH	HL
003F78 CD 00 00 00         A 11452    	CALL	_memcpy
003F7C C1                  A 11453    	POP	BC
003F7D C1                  A 11454    	POP	BC
003F7E C1                  A 11455    	POP	BC
                           A 11456    ; 3910					}
003F7F                     A 11457    L_875:
                           A 11458    ; 3911	#endif
                           A 11459    ; 3912	#endif
                           A 11460    ; 3913					rcnt = SS(fs) * cc;		
003F7F DD27F3              A 11461    	LD	HL,(IX+%FFFFFFF3)
003F82 3E09                A 11462    	LD	A,%9
003F84 CD 00 00 00         A 11463    	CALL	__ishl_b
003F88 DD2FFD              A 11464    	LD	(IX+%FFFFFFFD),HL
                           A 11465    ; 3914					continue;
003F8B C3 B4 40 00         A 11466    	JR	L_891
                           A 11467    ; 3915				}
003F8F                     A 11468    L_884:
                           A 11469    ; 3916	#if !FF_FS_TINY
                           A 11470    ; 3917				if (fp->sect != sect) {		
003F8F DD3106              A 11471    	LD	IY,(IX+%6)
003F92 FD0719              A 11472    	LD	BC,(IY+%19)
003F95 FD7E1C              A 11473    	LD	A,(IY+%1C)
003F98 DD0FD6              A 11474    	LD	(IX+%FFFFFFD6),BC
003F9B DD77D9              A 11475    	LD	(IX+%FFFFFFD9),A
003F9E DD27F6              A 11476    	LD	HL,(IX+%FFFFFFF6)
003FA1 DD5EF9              A 11477    	LD	E,(IX+%FFFFFFF9)
003FA4 DD7ED9              A 11478    	LD	A,(IX+%FFFFFFD9)
003FA7 CD 00 00 00         A 11479    	CALL	__lcmpu
003FAB CA 42 40 00         A 11480    	JR	Z,L_885
                           A 11481    ; 3918	#if !FF_FS_READONLY
                           A 11482    ; 3919					if (fp->flag & FA_DIRTY
003FAF DD3106              A 11483    	LD	IY,(IX+%6)
003FB2 FD7E0F              A 11484    	LD	A,(IY+%F)
003FB5 E680                A 11485    	AND	A,%80
003FB7 28 47               A 11486    	JR	Z,L_881
                           A 11487    ; 3920						if (disk_write(fs->
003FB9 01010000            A 11488    	LD	BC,1
003FBD C5                  A 11489    	PUSH	BC
003FBE DD4ED9              A 11490    	LD	C,(IX+%FFFFFFD9)
003FC1 0600                A 11491    	LD	B,%0
003FC3 C5                  A 11492    	PUSH	BC
003FC4 DD07D6              A 11493    	LD	BC,(IX+%FFFFFFD6)
003FC7 C5                  A 11494    	PUSH	BC
003FC8 DD3106              A 11495    	LD	IY,(IX+%6)
003FCB ED6624              A 11496    	PEA	IY+%24
003FCE DD31FA              A 11497    	LD	IY,(IX+%FFFFFFFA)
003FD1 FD4E01              A 11498    	LD	C,(IY+%1)
003FD4 0600                A 11499    	LD	B,%0
003FD6 C5                  A 11500    	PUSH	BC
003FD7 CD 00 00 00         A 11501    	CALL	_disk_write
003FDB C1                  A 11502    	POP	BC
003FDC C1                  A 11503    	POP	BC
003FDD C1                  A 11504    	POP	BC
003FDE C1                  A 11505    	POP	BC
003FDF C1                  A 11506    	POP	BC
003FE0 CD 00 00 00         A 11507    	CALL	__icmpzero
003FE4 28 0F               A 11508    	JR	Z,L_878
003FE6 DD3106              A 11509    	LD	IY,(IX+%6)
003FE9 FD361001            A 11510    	LD	(IY+%10),%1
003FED 21010000            A 11511    	LD	HL,1
003FF1 C3 00 41 00         A 11512    	JR	L_895
003FF5                     A 11513    L_878:
                           A 11514    ; 3921						fp->flag &= (BYTE)~
003FF5 DD3106              A 11515    	LD	IY,(IX+%6)
003FF8 FD7E0F              A 11516    	LD	A,(IY+%F)
003FFB CBBF                A 11517    	RES	%7,A
003FFD FD770F              A 11518    	LD	(IY+%F),A
                           A 11519    ; 3922					}
004000                     A 11520    L_881:
                           A 11521    ; 3923	#endif
                           A 11522    ; 3924					if (disk_read(fs->pdrv,
004000 01010000            A 11523    	LD	BC,1
004004 C5                  A 11524    	PUSH	BC
004005 DD4EF9              A 11525    	LD	C,(IX+%FFFFFFF9)
004008 0600                A 11526    	LD	B,%0
00400A C5                  A 11527    	PUSH	BC
00400B DD07F6              A 11528    	LD	BC,(IX+%FFFFFFF6)
00400E C5                  A 11529    	PUSH	BC
00400F DD3106              A 11530    	LD	IY,(IX+%6)
004012 ED6624              A 11531    	PEA	IY+%24
004015 DD31FA              A 11532    	LD	IY,(IX+%FFFFFFFA)
004018 FD4E01              A 11533    	LD	C,(IY+%1)
00401B 0600                A 11534    	LD	B,%0
00401D C5                  A 11535    	PUSH	BC
00401E DD77CE              A 11536    	LD	(IX+%FFFFFFCE),A
004021 CD 00 00 00         A 11537    	CALL	_disk_read
004025 DD7ECE              A 11538    	LD	A,(IX+%FFFFFFCE)
004028 C1                  A 11539    	POP	BC
004029 C1                  A 11540    	POP	BC
00402A C1                  A 11541    	POP	BC
00402B C1                  A 11542    	POP	BC
00402C C1                  A 11543    	POP	BC
00402D CD 00 00 00         A 11544    	CALL	__icmpzero
004031 28 0F               A 11545    	JR	Z,L_885
004033 DD3106              A 11546    	LD	IY,(IX+%6)
004036 FD361001            A 11547    	LD	(IY+%10),%1
00403A 21010000            A 11548    	LD	HL,1
00403E C3 00 41 00         A 11549    	JR	L_895
                           A 11550    ; 3925				}
004042                     A 11551    L_885:
                           A 11552    ; 3926	#endif
                           A 11553    ; 3927				fp->sect = sect;
004042 DD07F6              A 11554    	LD	BC,(IX+%FFFFFFF6)
004045 DD56F9              A 11555    	LD	D,(IX+%FFFFFFF9)
004048 DD3106              A 11556    	LD	IY,(IX+%6)
00404B FD0F19              A 11557    	LD	(IY+%19),BC
00404E FD721C              A 11558    	LD	(IY+%1C),D
                           A 11559    ; 3928			}
004051                     A 11560    L_887:
                           A 11561    ; 3929			rcnt = SS(fs) - (UINT)fp->fptr 
004051 DD3106              A 11562    	LD	IY,(IX+%6)
004054 FD0711              A 11563    	LD	BC,(IY+%11)
004057 FD5614              A 11564    	LD	D,(IY+%14)
00405A DD0FD2              A 11565    	LD	(IX+%FFFFFFD2),BC
00405D DD72D5              A 11566    	LD	(IX+%FFFFFFD5),D
004060 C5E1                A 11567    	LD	HL,BC
004062 01FF0100            A 11568    	LD	BC,511
004066 CD 00 00 00         A 11569    	CALL	__iand
00406A E5C1                A 11570    	LD	BC,HL
00406C 21000200            A 11571    	LD	HL,512
004070 B7                  A 11572    	OR	A,A
004071 ED42                A 11573    	SBC	HL,BC
004073 DD2FFD              A 11574    	LD	(IX+%FFFFFFFD),HL
                           A 11575    ; 3930			if (rcnt > btr) rcnt = btr;		
004076 E5C1                A 11576    	LD	BC,HL
004078 DD270C              A 11577    	LD	HL,(IX+%C)
00407B B7                  A 11578    	OR	A,A
00407C ED42                A 11579    	SBC	HL,BC
00407E 30 06               A 11580    	JR	NC,L_889
004080 DD070C              A 11581    	LD	BC,(IX+%C)
004083 DD0FFD              A 11582    	LD	(IX+%FFFFFFFD),BC
004086                     A 11583    L_889:
                           A 11584    ; 3931	#if FF_FS_TINY
                           A 11585    ; 3932			if (move_window(fs, fp->sect) !
                           A 11586    ; 3933			memcpy(rbuff, fs->win + fp->fpt
                           A 11587    ; 3934	#else
                           A 11588    ; 3935			memcpy(rbuff, fp->buf + fp->fpt
004086 DD07FD              A 11589    	LD	BC,(IX+%FFFFFFFD)
004089 C5                  A 11590    	PUSH	BC
00408A DD27D2              A 11591    	LD	HL,(IX+%FFFFFFD2)
00408D DD5ED5              A 11592    	LD	E,(IX+%FFFFFFD5)
004090 01FF0100            A 11593    	LD	BC,511
004094 AF                  A 11594    	XOR	A,A
004095 CD 00 00 00         A 11595    	CALL	__land
004099 E5C1                A 11596    	LD	BC,HL
00409B DD3106              A 11597    	LD	IY,(IX+%6)
00409E ED2324              A 11598    	LEA	HL,IY+%24
0040A1 09                  A 11599    	ADD	HL,BC
0040A2 E5                  A 11600    	PUSH	HL
0040A3 DD07F0              A 11601    	LD	BC,(IX+%FFFFFFF0)
0040A6 C5                  A 11602    	PUSH	BC
0040A7 DD77CE              A 11603    	LD	(IX+%FFFFFFCE),A
0040AA CD 00 00 00         A 11604    	CALL	_memcpy
0040AE DD7ECE              A 11605    	LD	A,(IX+%FFFFFFCE)
0040B1 C1                  A 11606    	POP	BC
0040B2 C1                  A 11607    	POP	BC
0040B3 C1                  A 11608    	POP	BC
                           A 11609    ; 3936	#endif
                           A 11610    ; 3937		}
0040B4                     A 11611    L_891:
0040B4 DD07FD              A 11612    	LD	BC,(IX+%FFFFFFFD)
0040B7 DD270C              A 11613    	LD	HL,(IX+%C)
0040BA B7                  A 11614    	OR	A,A
0040BB ED42                A 11615    	SBC	HL,BC
0040BD DD2F0C              A 11616    	LD	(IX+%C),HL
0040C0 DD270F              A 11617    	LD	HL,(IX+%F)
0040C3 DD310F              A 11618    	LD	IY,(IX+%F)
0040C6 DD07FD              A 11619    	LD	BC,(IX+%FFFFFFFD)
0040C9 ED27                A 11620    	LD	HL,(HL)
0040CB 09                  A 11621    	ADD	HL,BC
0040CC FD2F00              A 11622    	LD	(IY),HL
0040CF DD07FD              A 11623    	LD	BC,(IX+%FFFFFFFD)
0040D2 DD27F0              A 11624    	LD	HL,(IX+%FFFFFFF0)
0040D5 09                  A 11625    	ADD	HL,BC
0040D6 DD2FF0              A 11626    	LD	(IX+%FFFFFFF0),HL
0040D9 DD07FD              A 11627    	LD	BC,(IX+%FFFFFFFD)
0040DC AF                  A 11628    	XOR	A,A
0040DD DD3106              A 11629    	LD	IY,(IX+%6)
0040E0 FD2711              A 11630    	LD	HL,(IY+%11)
0040E3 FD5E14              A 11631    	LD	E,(IY+%14)
0040E6 CD 00 00 00         A 11632    	CALL	__ladd
0040EA FD2F11              A 11633    	LD	(IY+%11),HL
0040ED FD7314              A 11634    	LD	(IY+%14),E
0040F0                     A 11635    L_892:
0040F0 DD070C              A 11636    	LD	BC,(IX+%C)
0040F3 B7                  A 11637    	OR	A,A
0040F4 ED62                A 11638    	SBC	HL,HL
0040F6 B7                  A 11639    	OR	A,A
0040F7 ED42                A 11640    	SBC	HL,BC
0040F9 DA 79 3D 00         A 11641    	JR	C,L_890
0040FD B7                  A 11642    	OR	A,A
                           A 11643    ; 3938	
                           A 11644    ; 3939		LEAVE_FF(fs, FR_OK);
0040FE ED62                A 11645    	SBC	HL,HL
                           A 11646    ; 3940	}
004100                     A 11647    L_895:
004100 DDF9                A 11648    	LD	SP,IX
004102 DDE1                A 11649    	POP	IX
004104 C9                  A 11650    	RET	
                           A 11651    
                           A 11652    
                           A 11653    ;**************************** _f_read *********
                           A 11654    ;Name                         Addr/Register   S
                           A 11655    ;_disk_write                         IMPORT  --
                           A 11656    ;_memcpy                             IMPORT  --
                           A 11657    ;_disk_read                          IMPORT  --
                           A 11658    ;G_66                                 IX-46    
                           A 11659    ;G_65                                 IX-42    
                           A 11660    ;G_64                                 IX-38    
                           A 11661    ;remain                               IX-34    
                           A 11662    ;G_62                                 IX-30    
                           A 11663    ;clst                                 IX-26    
                           A 11664    ;res                                  IX-22    
                           A 11665    ;csect                                IX-19    
                           A 11666    ;rbuff                                IX-16    
                           A 11667    ;cc                                   IX-13    
                           A 11668    ;sect                                 IX-10    
                           A 11669    ;fs                                    IX-6    
                           A 11670    ;rcnt                                  IX-3    
                           A 11671    ;br                                   IX+15    
                           A 11672    ;btr                                  IX+12    
                           A 11673    ;buff                                  IX+9    
                           A 11674    ;fp                                    IX+6    
                           A 11675    
                           A 11676    
                           A 11677    ; Stack Frame Size: 68 (bytes)
                           A 11678    ;       Spill Code: -1 (instruction)
                           A 11679    
                           A 11680    
                           A 11681    ; 3941	
                           A 11682    ; 3942	
                           A 11683    ; 3943	
                           A 11684    ; 3944	
                           A 11685    ; 3945	#if !FF_FS_READONLY
                           A 11686    ; 3946	/*-------------------------------------
                           A 11687    ; 3947	/* Write File                          
                           A 11688    ; 3948	/*-------------------------------------
                           A 11689    ; 3949	
                           A 11690    ; 3950	FRESULT f_write (
                           A 11691    ; 3951		FIL* fp,			/* Open file to
                           A 11692    ; 3952		const void* buff,	/* Data to be w
                           A 11693    ; 3953		UINT btw,			/* Number of by
                           A 11694    ; 3954		UINT* bw			/* Number of by
                           A 11695    ; 3955	)
                           A 11696    ; 3956	{
004105                     A 11697    _f_write:
004105 21C1FFFF            A 11698    	LD	HL,-63
004109 CD 00 00 00         A 11699    	CALL	__frameset
                           A 11700    ; 3957		FRESULT res;
                           A 11701    ; 3958		FATFS *fs;
                           A 11702    ; 3959		DWORD clst;
                           A 11703    ; 3960		LBA_t sect;
                           A 11704    ; 3961		UINT wcnt, cc, csect;
                           A 11705    ; 3962		const BYTE *wbuff = (const BYTE*)bu
00410D DD0709              A 11706    	LD	BC,(IX+%9)
004110 DD0FEC              A 11707    	LD	(IX+%FFFFFFEC),BC
                           A 11708    ; 3963	
                           A 11709    ; 3964	
                           A 11710    ; 3965		*bw = 0;	/* Clear write byte cou
004113 DD270F              A 11711    	LD	HL,(IX+%F)
004116 01000000            A 11712    	LD	BC,0
00411A ED0F                A 11713    	LD	(HL),BC
                           A 11714    ; 3966		res = validate(&fp->obj, &fs);		
00411C ED65FA              A 11715    	PEA	IX+%FFFFFFFA
00411F DD3106              A 11716    	LD	IY,(IX+%6)
004122 ED6600              A 11717    	PEA	IY+%0
004125 CD F0 36 00         A 11718    	CALL	_validate
004129 C1                  A 11719    	POP	BC
00412A C1                  A 11720    	POP	BC
00412B DD2FE6              A 11721    	LD	(IX+%FFFFFFE6),HL
                           A 11722    ; 3967		if (res != FR_OK || (res = (FRESULT
00412E CD 00 00 00         A 11723    	CALL	__icmpzero
004132 20 13               A 11724    	JR	NZ,L_897
004134 DD3106              A 11725    	LD	IY,(IX+%6)
004137 FD7E10              A 11726    	LD	A,(IY+%10)
00413A B7ED62              A 11727    	UEXT	HL
00413D 6F                  A 11728    	LD	L,A
00413E DD2FE6              A 11729    	LD	(IX+%FFFFFFE6),HL
004141 CD 00 00 00         A 11730    	CALL	__icmpzero
004145 28 07               A 11731    	JR	Z,L_899
004147                     A 11732    L_897:
004147 DD27E6              A 11733    	LD	HL,(IX+%FFFFFFE6)
00414A C3 EA 45 00         A 11734    	JR	L_946
00414E                     A 11735    L_899:
                           A 11736    ; 3968		if (!(fp->flag & FA_WRITE)) LEAVE_F
00414E DD3106              A 11737    	LD	IY,(IX+%6)
004151 FD7E0F              A 11738    	LD	A,(IY+%F)
004154 E602                A 11739    	AND	A,%2
004156 20 08               A 11740    	JR	NZ,L_901
004158 21070000            A 11741    	LD	HL,7
00415C C3 EA 45 00         A 11742    	JR	L_946
004160                     A 11743    L_901:
                           A 11744    ; 3969	
                           A 11745    ; 3970		/* Check fptr wrap-around (file siz
                           A 11746    ; 3971		if ((!FF_FS_EXFAT || fs->fs_type !=
004160 DD3106              A 11747    	LD	IY,(IX+%6)
004163 FD0711              A 11748    	LD	BC,(IY+%11)
004166 FD7E14              A 11749    	LD	A,(IY+%14)
004169 DD0FDB              A 11750    	LD	(IX+%FFFFFFDB),BC
00416C DD77DE              A 11751    	LD	(IX+%FFFFFFDE),A
00416F AF                  A 11752    	XOR	A,A
004170 5F                  A 11753    	LD	E,A
004171 DD270C              A 11754    	LD	HL,(IX+%C)
004174 DD7EDE              A 11755    	LD	A,(IX+%FFFFFFDE)
004177 CD 00 00 00         A 11756    	CALL	__ladd
00417B DD07DB              A 11757    	LD	BC,(IX+%FFFFFFDB)
00417E DD7EDE              A 11758    	LD	A,(IX+%FFFFFFDE)
004181 CD 00 00 00         A 11759    	CALL	__lcmpu
004185 D2 CF 45 00         A 11760    	JR	NC,L_943
                           A 11761    ; 3972			btw = (UINT)(0xFFFFFFFF - (DWOR
004189 DD07DB              A 11762    	LD	BC,(IX+%FFFFFFDB)
00418C 21FFFFFF            A 11763    	LD	HL,16777215
004190 B7                  A 11764    	OR	A,A
004191 ED42                A 11765    	SBC	HL,BC
004193 DD2F0C              A 11766    	LD	(IX+%C),HL
                           A 11767    ; 3973		}
                           A 11768    ; 3974	
                           A 11769    ; 3975		for ( ; btw > 0; btw -= wcnt, *bw +
004196 C3 CF 45 00         A 11770    	JR	L_943
00419A                     A 11771    L_941:
                           A 11772    ; 3976			if (fp->fptr % SS(fs) == 0) {	
00419A DD3106              A 11773    	LD	IY,(IX+%6)
00419D FD0711              A 11774    	LD	BC,(IY+%11)
0041A0 FD7E14              A 11775    	LD	A,(IY+%14)
0041A3 DD0FDF              A 11776    	LD	(IX+%FFFFFFDF),BC
0041A6 DD77E2              A 11777    	LD	(IX+%FFFFFFE2),A
0041A9 C5E1                A 11778    	LD	HL,BC
0041AB DD5EE2              A 11779    	LD	E,(IX+%FFFFFFE2)
0041AE 01FF0100            A 11780    	LD	BC,511
0041B2 AF                  A 11781    	XOR	A,A
0041B3 CD 00 00 00         A 11782    	CALL	__land
0041B7 CD 00 00 00         A 11783    	CALL	__lcmpzero
0041BB C2 D2 44 00         A 11784    	JR	NZ,L_938
                           A 11785    ; 3977				csect = (UINT)(fp->fptr / S
0041BF DD31FA              A 11786    	LD	IY,(IX+%FFFFFFFA)
0041C2 FD0709              A 11787    	LD	BC,(IY+%9)
0041C5 CD 00 00 00         A 11788    	CALL	__stoiu
0041C9 E5D1                A 11789    	LD	DE,HL
0041CB 1B                  A 11790    	DEC	DE
0041CC DD07DF              A 11791    	LD	BC,(IX+%FFFFFFDF)
0041CF DD7EE2              A 11792    	LD	A,(IX+%FFFFFFE2)
0041D2 2E09                A 11793    	LD	L,%9
0041D4 CD 00 00 00         A 11794    	CALL	__lshru
0041D8 D5E1                A 11795    	LD	HL,DE
0041DA CD 00 00 00         A 11796    	CALL	__iand
0041DE DD2FE9              A 11797    	LD	(IX+%FFFFFFE9),HL
                           A 11798    ; 3978				if (csect == 0) {			
0041E1 CD 00 00 00         A 11799    	CALL	__icmpzero
0041E5 C2 D1 42 00         A 11800    	JR	NZ,L_921
                           A 11801    ; 3979					if (fp->fptr == 0) {	
0041E9 DD27DF              A 11802    	LD	HL,(IX+%FFFFFFDF)
0041EC DD5EE2              A 11803    	LD	E,(IX+%FFFFFFE2)
0041EF CD 00 00 00         A 11804    	CALL	__lcmpzero
0041F3 20 3C               A 11805    	JR	NZ,L_908
                           A 11806    ; 3980						clst = fp->obj.sclu
0041F5 DD3106              A 11807    	LD	IY,(IX+%6)
0041F8 ED0300              A 11808    	LEA	BC,IY+%0
0041FB DD0FD8              A 11809    	LD	(IX+%FFFFFFD8),BC
0041FE DD31D8              A 11810    	LD	IY,(IX+%FFFFFFD8)
004201 FD0707              A 11811    	LD	BC,(IY+%7)
004204 FD7E0A              A 11812    	LD	A,(IY+%A)
004207 DD0FF6              A 11813    	LD	(IX+%FFFFFFF6),BC
00420A DD77F9              A 11814    	LD	(IX+%FFFFFFF9),A
                           A 11815    ; 3981						if (clst == 0) {	
00420D C5E1                A 11816    	LD	HL,BC
00420F DD5EF9              A 11817    	LD	E,(IX+%FFFFFFF9)
004212 CD 00 00 00         A 11818    	CALL	__lcmpzero
004216 20 37               A 11819    	JR	NZ,L_910
                           A 11820    ; 3982							clst = create_c
004218 01000000            A 11821    	LD	BC,0
00421C C5                  A 11822    	PUSH	BC
00421D C5                  A 11823    	PUSH	BC
00421E DD07D8              A 11824    	LD	BC,(IX+%FFFFFFD8)
004221 C5                  A 11825    	PUSH	BC
004222 CD 8A 0C 00         A 11826    	CALL	_create_chain
004226 C1                  A 11827    	POP	BC
004227 C1                  A 11828    	POP	BC
004228 C1                  A 11829    	POP	BC
004229 DD2FF6              A 11830    	LD	(IX+%FFFFFFF6),HL
00422C DD73F9              A 11831    	LD	(IX+%FFFFFFF9),E
                           A 11832    ; 3983						}
                           A 11833    ; 3984					} else {				
00422F 18 1E               A 11834    	JR	L_910
004231                     A 11835    L_908:
                           A 11836    ; 3985	#if FF_USE_FASTSEEK
                           A 11837    ; 3986						if (fp->cltbl) {
                           A 11838    ; 3987							clst = clmt_clu
                           A 11839    ; 3988						} else
                           A 11840    ; 3989	#endif
                           A 11841    ; 3990						{
                           A 11842    ; 3991							clst = create_c
004231 DD3106              A 11843    	LD	IY,(IX+%6)
004234 FD0715              A 11844    	LD	BC,(IY+%15)
004237 FD7E18              A 11845    	LD	A,(IY+%18)
00423A 2600                A 11846    	LD	H,%0
00423C 6F                  A 11847    	LD	L,A
00423D E5                  A 11848    	PUSH	HL
00423E C5                  A 11849    	PUSH	BC
00423F ED6600              A 11850    	PEA	IY+%0
004242 CD 8A 0C 00         A 11851    	CALL	_create_chain
004246 C1                  A 11852    	POP	BC
004247 C1                  A 11853    	POP	BC
004248 C1                  A 11854    	POP	BC
004249 DD2FF6              A 11855    	LD	(IX+%FFFFFFF6),HL
00424C DD73F9              A 11856    	LD	(IX+%FFFFFFF9),E
                           A 11857    ; 3992						}
                           A 11858    ; 3993					}
00424F                     A 11859    L_910:
                           A 11860    ; 3994					if (clst == 0) break;	
00424F DD27F6              A 11861    	LD	HL,(IX+%FFFFFFF6)
004252 DD5EF9              A 11862    	LD	E,(IX+%FFFFFFF9)
004255 CD 00 00 00         A 11863    	CALL	__lcmpzero
004259 CA DC 45 00         A 11864    	JR	Z,L_945
                           A 11865    ; 3995					if (clst == 1) ABORT(fs
00425D DD27F6              A 11866    	LD	HL,(IX+%FFFFFFF6)
004260 DD5EF9              A 11867    	LD	E,(IX+%FFFFFFF9)
004263 01010000            A 11868    	LD	BC,1
004267 AF                  A 11869    	XOR	A,A
004268 CD 00 00 00         A 11870    	CALL	__lcmpu
00426C 20 0F               A 11871    	JR	NZ,L_913
00426E DD3106              A 11872    	LD	IY,(IX+%6)
004271 FD361002            A 11873    	LD	(IY+%10),%2
004275 21020000            A 11874    	LD	HL,2
004279 C3 EA 45 00         A 11875    	JR	L_946
00427D                     A 11876    L_913:
                           A 11877    ; 3996					if (clst == 0xFFFFFFFF)
00427D DD27F6              A 11878    	LD	HL,(IX+%FFFFFFF6)
004280 DD5EF9              A 11879    	LD	E,(IX+%FFFFFFF9)
004283 01FFFFFF            A 11880    	LD	BC,16777215
004287 3EFF                A 11881    	LD	A,%FF
004289 CD 00 00 00         A 11882    	CALL	__lcmpu
00428D 20 0F               A 11883    	JR	NZ,L_915
00428F DD3106              A 11884    	LD	IY,(IX+%6)
004292 FD361001            A 11885    	LD	(IY+%10),%1
004296 21010000            A 11886    	LD	HL,1
00429A C3 EA 45 00         A 11887    	JR	L_946
00429E                     A 11888    L_915:
                           A 11889    ; 3997					fp->clust = clst;		
00429E DD07F6              A 11890    	LD	BC,(IX+%FFFFFFF6)
0042A1 DD7EF9              A 11891    	LD	A,(IX+%FFFFFFF9)
0042A4 DD3106              A 11892    	LD	IY,(IX+%6)
0042A7 FD0F15              A 11893    	LD	(IY+%15),BC
0042AA FD7718              A 11894    	LD	(IY+%18),A
                           A 11895    ; 3998					if (fp->obj.sclust == 0
0042AD ED0300              A 11896    	LEA	BC,IY+%0
0042B0 DD0FD5              A 11897    	LD	(IX+%FFFFFFD5),BC
0042B3 DD31D5              A 11898    	LD	IY,(IX+%FFFFFFD5)
0042B6 FD2707              A 11899    	LD	HL,(IY+%7)
0042B9 FD5E0A              A 11900    	LD	E,(IY+%A)
0042BC CD 00 00 00         A 11901    	CALL	__lcmpzero
0042C0 20 0F               A 11902    	JR	NZ,L_921
0042C2 DD07F6              A 11903    	LD	BC,(IX+%FFFFFFF6)
0042C5 DD7EF9              A 11904    	LD	A,(IX+%FFFFFFF9)
0042C8 DD31D5              A 11905    	LD	IY,(IX+%FFFFFFD5)
0042CB FD0F07              A 11906    	LD	(IY+%7),BC
0042CE FD770A              A 11907    	LD	(IY+%A),A
                           A 11908    ; 3999				}
0042D1                     A 11909    L_921:
                           A 11910    ; 4000	#if FF_FS_TINY
                           A 11911    ; 4001				if (fs->winsect == fp->sect
                           A 11912    ; 4002	#else
                           A 11913    ; 4003				if (fp->flag & FA_DIRTY) {	
0042D1 DD3106              A 11914    	LD	IY,(IX+%6)
0042D4 FD7E0F              A 11915    	LD	A,(IY+%F)
0042D7 E680                A 11916    	AND	A,%80
0042D9 28 48               A 11917    	JR	Z,L_922
                           A 11918    ; 4004					if (disk_write(fs->pdrv
0042DB 01010000            A 11919    	LD	BC,1
0042DF C5                  A 11920    	PUSH	BC
0042E0 DD3106              A 11921    	LD	IY,(IX+%6)
0042E3 FD0719              A 11922    	LD	BC,(IY+%19)
0042E6 FD7E1C              A 11923    	LD	A,(IY+%1C)
0042E9 2600                A 11924    	LD	H,%0
0042EB 6F                  A 11925    	LD	L,A
0042EC E5                  A 11926    	PUSH	HL
0042ED C5                  A 11927    	PUSH	BC
0042EE ED6624              A 11928    	PEA	IY+%24
0042F1 DD31FA              A 11929    	LD	IY,(IX+%FFFFFFFA)
0042F4 FD4E01              A 11930    	LD	C,(IY+%1)
0042F7 0600                A 11931    	LD	B,%0
0042F9 C5                  A 11932    	PUSH	BC
0042FA CD 00 00 00         A 11933    	CALL	_disk_write
0042FE C1                  A 11934    	POP	BC
0042FF C1                  A 11935    	POP	BC
004300 C1                  A 11936    	POP	BC
004301 C1                  A 11937    	POP	BC
004302 C1                  A 11938    	POP	BC
004303 CD 00 00 00         A 11939    	CALL	__icmpzero
004307 28 0F               A 11940    	JR	Z,L_919
004309 DD3106              A 11941    	LD	IY,(IX+%6)
00430C FD361001            A 11942    	LD	(IY+%10),%1
004310 21010000            A 11943    	LD	HL,1
004314 C3 EA 45 00         A 11944    	JR	L_946
004318                     A 11945    L_919:
                           A 11946    ; 4005					fp->flag &= (BYTE)~FA_D
004318 DD3106              A 11947    	LD	IY,(IX+%6)
00431B FD7E0F              A 11948    	LD	A,(IY+%F)
00431E CBBF                A 11949    	RES	%7,A
004320 FD770F              A 11950    	LD	(IY+%F),A
                           A 11951    ; 4006				}
004323                     A 11952    L_922:
                           A 11953    ; 4007	#endif
                           A 11954    ; 4008				sect = clst2sect(fs, fp->cl
004323 DD3106              A 11955    	LD	IY,(IX+%6)
004326 FD0715              A 11956    	LD	BC,(IY+%15)
004329 FD7E18              A 11957    	LD	A,(IY+%18)
00432C 2600                A 11958    	LD	H,%0
00432E 6F                  A 11959    	LD	L,A
00432F E5                  A 11960    	PUSH	HL
004330 C5                  A 11961    	PUSH	BC
004331 DD07FA              A 11962    	LD	BC,(IX+%FFFFFFFA)
004334 C5                  A 11963    	PUSH	BC
004335 CD 6B 05 00         A 11964    	CALL	_clst2sect
004339 C1                  A 11965    	POP	BC
00433A C1                  A 11966    	POP	BC
00433B C1                  A 11967    	POP	BC
00433C DD2FF2              A 11968    	LD	(IX+%FFFFFFF2),HL
00433F DD73F5              A 11969    	LD	(IX+%FFFFFFF5),E
                           A 11970    ; 4009				if (sect == 0) ABORT(fs, FR
004342 DD27F2              A 11971    	LD	HL,(IX+%FFFFFFF2)
004345 DD5EF5              A 11972    	LD	E,(IX+%FFFFFFF5)
004348 CD 00 00 00         A 11973    	CALL	__lcmpzero
00434C 20 0F               A 11974    	JR	NZ,L_924
00434E DD3106              A 11975    	LD	IY,(IX+%6)
004351 FD361002            A 11976    	LD	(IY+%10),%2
004355 21020000            A 11977    	LD	HL,2
004359 C3 EA 45 00         A 11978    	JR	L_946
00435D                     A 11979    L_924:
                           A 11980    ; 4010				sect += csect;
00435D DD07E9              A 11981    	LD	BC,(IX+%FFFFFFE9)
004360 AF                  A 11982    	XOR	A,A
004361 DD27F2              A 11983    	LD	HL,(IX+%FFFFFFF2)
004364 DD5EF5              A 11984    	LD	E,(IX+%FFFFFFF5)
004367 CD 00 00 00         A 11985    	CALL	__ladd
00436B DD2FF2              A 11986    	LD	(IX+%FFFFFFF2),HL
00436E DD73F5              A 11987    	LD	(IX+%FFFFFFF5),E
                           A 11988    ; 4011				cc = btw / SS(fs);			
004371 DD270C              A 11989    	LD	HL,(IX+%C)
004374 3E09                A 11990    	LD	A,%9
004376 CD 00 00 00         A 11991    	CALL	__ishru_b
00437A DD2FEF              A 11992    	LD	(IX+%FFFFFFEF),HL
                           A 11993    ; 4012				if (cc > 0) {				
00437D E5C1                A 11994    	LD	BC,HL
00437F B7                  A 11995    	OR	A,A
004380 ED62                A 11996    	SBC	HL,HL
004382 B7                  A 11997    	OR	A,A
004383 ED42                A 11998    	SBC	HL,BC
004385 D2 57 44 00         A 11999    	JR	NC,L_935
                           A 12000    ; 4013					if (csect + cc > fs->cs
004389 DD31FA              A 12001    	LD	IY,(IX+%FFFFFFFA)
00438C FD0709              A 12002    	LD	BC,(IY+%9)
00438F CD 00 00 00         A 12003    	CALL	__stoiu
004393 E5C1                A 12004    	LD	BC,HL
004395 DD17EF              A 12005    	LD	DE,(IX+%FFFFFFEF)
004398 DD27E9              A 12006    	LD	HL,(IX+%FFFFFFE9)
00439B 19                  A 12007    	ADD	HL,DE
00439C E5D1                A 12008    	LD	DE,HL
00439E C5E1                A 12009    	LD	HL,BC
0043A0 B7                  A 12010    	OR	A,A
0043A1 ED52                A 12011    	SBC	HL,DE
0043A3 30 13               A 12012    	JR	NC,L_927
                           A 12013    ; 4014						cc = fs->csize - cs
0043A5 DD31FA              A 12014    	LD	IY,(IX+%FFFFFFFA)
0043A8 FD0709              A 12015    	LD	BC,(IY+%9)
0043AB CD 00 00 00         A 12016    	CALL	__stoiu
0043AF DD07E9              A 12017    	LD	BC,(IX+%FFFFFFE9)
0043B2 B7                  A 12018    	OR	A,A
0043B3 ED42                A 12019    	SBC	HL,BC
0043B5 DD2FEF              A 12020    	LD	(IX+%FFFFFFEF),HL
                           A 12021    ; 4015					}
0043B8                     A 12022    L_927:
                           A 12023    ; 4016					if (disk_write(fs->pdrv
0043B8 DD07EF              A 12024    	LD	BC,(IX+%FFFFFFEF)
0043BB C5                  A 12025    	PUSH	BC
0043BC DD4EF5              A 12026    	LD	C,(IX+%FFFFFFF5)
0043BF 0600                A 12027    	LD	B,%0
0043C1 C5                  A 12028    	PUSH	BC
0043C2 DD07F2              A 12029    	LD	BC,(IX+%FFFFFFF2)
0043C5 C5                  A 12030    	PUSH	BC
0043C6 DD07EC              A 12031    	LD	BC,(IX+%FFFFFFEC)
0043C9 C5                  A 12032    	PUSH	BC
0043CA DD31FA              A 12033    	LD	IY,(IX+%FFFFFFFA)
0043CD FD4E01              A 12034    	LD	C,(IY+%1)
0043D0 0600                A 12035    	LD	B,%0
0043D2 C5                  A 12036    	PUSH	BC
0043D3 CD 00 00 00         A 12037    	CALL	_disk_write
0043D7 C1                  A 12038    	POP	BC
0043D8 C1                  A 12039    	POP	BC
0043D9 C1                  A 12040    	POP	BC
0043DA C1                  A 12041    	POP	BC
0043DB C1                  A 12042    	POP	BC
0043DC CD 00 00 00         A 12043    	CALL	__icmpzero
0043E0 28 0F               A 12044    	JR	Z,L_928
0043E2 DD3106              A 12045    	LD	IY,(IX+%6)
0043E5 FD361001            A 12046    	LD	(IY+%10),%1
0043E9 21010000            A 12047    	LD	HL,1
0043ED C3 EA 45 00         A 12048    	JR	L_946
0043F1                     A 12049    L_928:
                           A 12050    ; 4017	#if FF_FS_MINIMIZE <= 2
                           A 12051    ; 4018	#if FF_FS_TINY
                           A 12052    ; 4019					if (fs->winsect - sect 
                           A 12053    ; 4020						memcpy(fs->win, wbu
                           A 12054    ; 4021						fs->wflag = 0;
                           A 12055    ; 4022					}
                           A 12056    ; 4023	#else
                           A 12057    ; 4024					if (fp->sect - sect < c
0043F1 DD3106              A 12058    	LD	IY,(IX+%6)
0043F4 FD2719              A 12059    	LD	HL,(IY+%19)
0043F7 FD5E1C              A 12060    	LD	E,(IY+%1C)
0043FA DD07F2              A 12061    	LD	BC,(IX+%FFFFFFF2)
0043FD DD7EF5              A 12062    	LD	A,(IX+%FFFFFFF5)
004400 CD 00 00 00         A 12063    	CALL	__lsub
004404 DD2FC6              A 12064    	LD	(IX+%FFFFFFC6),HL
004407 DD73C9              A 12065    	LD	(IX+%FFFFFFC9),E
00440A DD07EF              A 12066    	LD	BC,(IX+%FFFFFFEF)
00440D AF                  A 12067    	XOR	A,A
00440E DD27C6              A 12068    	LD	HL,(IX+%FFFFFFC6)
004411 DD5EC9              A 12069    	LD	E,(IX+%FFFFFFC9)
004414 CD 00 00 00         A 12070    	CALL	__lcmpu
004418 30 2D               A 12071    	JR	NC,L_930
                           A 12072    ; 4025						memcpy(fp->buf, wbu
00441A 01000200            A 12073    	LD	BC,512
00441E C5                  A 12074    	PUSH	BC
00441F DD27C6              A 12075    	LD	HL,(IX+%FFFFFFC6)
004422 DD5EC9              A 12076    	LD	E,(IX+%FFFFFFC9)
004425 AF                  A 12077    	XOR	A,A
004426 CD 00 00 00         A 12078    	CALL	__lmulu
00442A DD07EC              A 12079    	LD	BC,(IX+%FFFFFFEC)
00442D 09                  A 12080    	ADD	HL,BC
00442E E5                  A 12081    	PUSH	HL
00442F DD3106              A 12082    	LD	IY,(IX+%6)
004432 ED6624              A 12083    	PEA	IY+%24
004435 CD 00 00 00         A 12084    	CALL	_memcpy
004439 C1                  A 12085    	POP	BC
00443A C1                  A 12086    	POP	BC
00443B C1                  A 12087    	POP	BC
                           A 12088    ; 4026						fp->flag &= (BYTE)~
00443C DD3106              A 12089    	LD	IY,(IX+%6)
00443F FD7E0F              A 12090    	LD	A,(IY+%F)
004442 CBBF                A 12091    	RES	%7,A
004444 FD770F              A 12092    	LD	(IY+%F),A
                           A 12093    ; 4027					}
004447                     A 12094    L_930:
                           A 12095    ; 4028	#endif
                           A 12096    ; 4029	#endif
                           A 12097    ; 4030					wcnt = SS(fs) * cc;		
004447 DD27EF              A 12098    	LD	HL,(IX+%FFFFFFEF)
00444A 3E09                A 12099    	LD	A,%9
00444C CD 00 00 00         A 12100    	CALL	__ishl_b
004450 DD2FFD              A 12101    	LD	(IX+%FFFFFFFD),HL
                           A 12102    ; 4031					continue;
004453 C3 3A 45 00         A 12103    	JR	L_942
                           A 12104    ; 4032				}
004457                     A 12105    L_935:
                           A 12106    ; 4033	#if FF_FS_TINY
                           A 12107    ; 4034				if (fp->fptr >= fp->obj.obj
                           A 12108    ; 4035					if (sync_window(fs) != 
                           A 12109    ; 4036					fs->winsect = sect;
                           A 12110    ; 4037				}
                           A 12111    ; 4038	#else
                           A 12112    ; 4039				if (fp->sect != sect && 	
004457 DD3106              A 12113    	LD	IY,(IX+%6)
00445A FD2719              A 12114    	LD	HL,(IY+%19)
00445D FD5E1C              A 12115    	LD	E,(IY+%1C)
004460 DD07F2              A 12116    	LD	BC,(IX+%FFFFFFF2)
004463 DD7EF5              A 12117    	LD	A,(IX+%FFFFFFF5)
004466 CD 00 00 00         A 12118    	CALL	__lcmpu
00446A 28 57               A 12119    	JR	Z,L_936
                           A 12120    ; 4040					fp->fptr < fp->obj.objs
00446C DD3106              A 12121    	LD	IY,(IX+%6)
00446F FD2711              A 12122    	LD	HL,(IY+%11)
004472 FD5E14              A 12123    	LD	E,(IY+%14)
004475 FD070B              A 12124    	LD	BC,(IY+%B)
004478 FD7E0E              A 12125    	LD	A,(IY+%E)
00447B CD 00 00 00         A 12126    	CALL	__lcmpu
00447F 30 42               A 12127    	JR	NC,L_936
                           A 12128    ; 4041					disk_read(fs->pdrv, fp-
004481 01010000            A 12129    	LD	BC,1
004485 C5                  A 12130    	PUSH	BC
004486 DD4EF5              A 12131    	LD	C,(IX+%FFFFFFF5)
004489 0600                A 12132    	LD	B,%0
00448B C5                  A 12133    	PUSH	BC
00448C DD07F2              A 12134    	LD	BC,(IX+%FFFFFFF2)
00448F C5                  A 12135    	PUSH	BC
004490 DD3106              A 12136    	LD	IY,(IX+%6)
004493 ED6624              A 12137    	PEA	IY+%24
004496 DD31FA              A 12138    	LD	IY,(IX+%FFFFFFFA)
004499 FD4E01              A 12139    	LD	C,(IY+%1)
00449C 0600                A 12140    	LD	B,%0
00449E C5                  A 12141    	PUSH	BC
00449F DD77C1              A 12142    	LD	(IX+%FFFFFFC1),A
0044A2 CD 00 00 00         A 12143    	CALL	_disk_read
0044A6 DD7EC1              A 12144    	LD	A,(IX+%FFFFFFC1)
0044A9 C1                  A 12145    	POP	BC
0044AA C1                  A 12146    	POP	BC
0044AB C1                  A 12147    	POP	BC
0044AC C1                  A 12148    	POP	BC
0044AD C1                  A 12149    	POP	BC
0044AE CD 00 00 00         A 12150    	CALL	__icmpzero
0044B2 28 0F               A 12151    	JR	Z,L_936
                           A 12152    ; 4042						ABORT(fs, FR_DISK_E
0044B4 DD3106              A 12153    	LD	IY,(IX+%6)
0044B7 FD361001            A 12154    	LD	(IY+%10),%1
0044BB 21010000            A 12155    	LD	HL,1
0044BF C3 EA 45 00         A 12156    	JR	L_946
                           A 12157    ; 4043				}
0044C3                     A 12158    L_936:
                           A 12159    ; 4044	#endif
                           A 12160    ; 4045				fp->sect = sect;
0044C3 DD07F2              A 12161    	LD	BC,(IX+%FFFFFFF2)
0044C6 DD56F5              A 12162    	LD	D,(IX+%FFFFFFF5)
0044C9 DD3106              A 12163    	LD	IY,(IX+%6)
0044CC FD0F19              A 12164    	LD	(IY+%19),BC
0044CF FD721C              A 12165    	LD	(IY+%1C),D
                           A 12166    ; 4046			}
0044D2                     A 12167    L_938:
                           A 12168    ; 4047			wcnt = SS(fs) - (UINT)fp->fptr 
0044D2 DD3106              A 12169    	LD	IY,(IX+%6)
0044D5 FD0711              A 12170    	LD	BC,(IY+%11)
0044D8 FD5614              A 12171    	LD	D,(IY+%14)
0044DB DD0FCE              A 12172    	LD	(IX+%FFFFFFCE),BC
0044DE DD72D1              A 12173    	LD	(IX+%FFFFFFD1),D
0044E1 C5E1                A 12174    	LD	HL,BC
0044E3 01FF0100            A 12175    	LD	BC,511
0044E7 CD 00 00 00         A 12176    	CALL	__iand
0044EB E5C1                A 12177    	LD	BC,HL
0044ED 21000200            A 12178    	LD	HL,512
0044F1 B7                  A 12179    	OR	A,A
0044F2 ED42                A 12180    	SBC	HL,BC
0044F4 DD2FFD              A 12181    	LD	(IX+%FFFFFFFD),HL
                           A 12182    ; 4048			if (wcnt > btw) wcnt = btw;		
0044F7 E5C1                A 12183    	LD	BC,HL
0044F9 DD270C              A 12184    	LD	HL,(IX+%C)
0044FC B7                  A 12185    	OR	A,A
0044FD ED42                A 12186    	SBC	HL,BC
0044FF 30 06               A 12187    	JR	NC,L_940
004501 DD070C              A 12188    	LD	BC,(IX+%C)
004504 DD0FFD              A 12189    	LD	(IX+%FFFFFFFD),BC
004507                     A 12190    L_940:
                           A 12191    ; 4049	#if FF_FS_TINY
                           A 12192    ; 4050			if (move_window(fs, fp->sect) !
                           A 12193    ; 4051			memcpy(fs->win + fp->fptr % SS(
                           A 12194    ; 4052			fs->wflag = 1;
                           A 12195    ; 4053	#else
                           A 12196    ; 4054			memcpy(fp->buf + fp->fptr % SS(
004507 DD07FD              A 12197    	LD	BC,(IX+%FFFFFFFD)
00450A C5                  A 12198    	PUSH	BC
00450B DD07EC              A 12199    	LD	BC,(IX+%FFFFFFEC)
00450E C5                  A 12200    	PUSH	BC
00450F DD27CE              A 12201    	LD	HL,(IX+%FFFFFFCE)
004512 DD5ED1              A 12202    	LD	E,(IX+%FFFFFFD1)
004515 01FF0100            A 12203    	LD	BC,511
004519 AF                  A 12204    	XOR	A,A
00451A CD 00 00 00         A 12205    	CALL	__land
00451E E5C1                A 12206    	LD	BC,HL
004520 DD3106              A 12207    	LD	IY,(IX+%6)
004523 ED2324              A 12208    	LEA	HL,IY+%24
004526 09                  A 12209    	ADD	HL,BC
004527 E5                  A 12210    	PUSH	HL
004528 CD 00 00 00         A 12211    	CALL	_memcpy
00452C C1                  A 12212    	POP	BC
00452D C1                  A 12213    	POP	BC
00452E C1                  A 12214    	POP	BC
                           A 12215    ; 4055			fp->flag |= FA_DIRTY;
00452F DD3106              A 12216    	LD	IY,(IX+%6)
004532 FD7E0F              A 12217    	LD	A,(IY+%F)
004535 CBFF                A 12218    	SET	%7,A
004537 FD770F              A 12219    	LD	(IY+%F),A
                           A 12220    ; 4056	#endif
                           A 12221    ; 4057		}
00453A                     A 12222    L_942:
00453A DD07FD              A 12223    	LD	BC,(IX+%FFFFFFFD)
00453D DD270C              A 12224    	LD	HL,(IX+%C)
004540 B7                  A 12225    	OR	A,A
004541 ED42                A 12226    	SBC	HL,BC
004543 DD2F0C              A 12227    	LD	(IX+%C),HL
004546 DD270F              A 12228    	LD	HL,(IX+%F)
004549 DD310F              A 12229    	LD	IY,(IX+%F)
00454C DD07FD              A 12230    	LD	BC,(IX+%FFFFFFFD)
00454F ED27                A 12231    	LD	HL,(HL)
004551 09                  A 12232    	ADD	HL,BC
004552 FD2F00              A 12233    	LD	(IY),HL
004555 DD07FD              A 12234    	LD	BC,(IX+%FFFFFFFD)
004558 DD27EC              A 12235    	LD	HL,(IX+%FFFFFFEC)
00455B 09                  A 12236    	ADD	HL,BC
00455C DD2FEC              A 12237    	LD	(IX+%FFFFFFEC),HL
00455F DD07FD              A 12238    	LD	BC,(IX+%FFFFFFFD)
004562 AF                  A 12239    	XOR	A,A
004563 DD3106              A 12240    	LD	IY,(IX+%6)
004566 FD2711              A 12241    	LD	HL,(IY+%11)
004569 FD5E14              A 12242    	LD	E,(IY+%14)
00456C CD 00 00 00         A 12243    	CALL	__ladd
004570 FD2F11              A 12244    	LD	(IY+%11),HL
004573 FD7314              A 12245    	LD	(IY+%14),E
004576 FD0711              A 12246    	LD	BC,(IY+%11)
004579 FD7E14              A 12247    	LD	A,(IY+%14)
00457C DD0FC2              A 12248    	LD	(IX+%FFFFFFC2),BC
00457F DD77C5              A 12249    	LD	(IX+%FFFFFFC5),A
004582 ED1300              A 12250    	LEA	DE,IY+%0
004585 DD1FE3              A 12251    	LD	(IX+%FFFFFFE3),DE
004588 DD1FD2              A 12252    	LD	(IX+%FFFFFFD2),DE
00458B DD31E3              A 12253    	LD	IY,(IX+%FFFFFFE3)
00458E FD270B              A 12254    	LD	HL,(IY+%B)
004591 FD5E0E              A 12255    	LD	E,(IY+%E)
004594 DD7EC5              A 12256    	LD	A,(IX+%FFFFFFC5)
004597 CD 00 00 00         A 12257    	CALL	__lcmpu
00459B 30 0E               A 12258    	JR	NC,L_904
00459D DD07C2              A 12259    	LD	BC,(IX+%FFFFFFC2)
0045A0 DD7EC5              A 12260    	LD	A,(IX+%FFFFFFC5)
0045A3 DD0FCA              A 12261    	LD	(IX+%FFFFFFCA),BC
0045A6 DD77CD              A 12262    	LD	(IX+%FFFFFFCD),A
0045A9 18 15               A 12263    	JR	L_905
0045AB                     A 12264    L_904:
0045AB DD07E3              A 12265    	LD	BC,(IX+%FFFFFFE3)
0045AE DD0FD2              A 12266    	LD	(IX+%FFFFFFD2),BC
0045B1 DD31E3              A 12267    	LD	IY,(IX+%FFFFFFE3)
0045B4 FD070B              A 12268    	LD	BC,(IY+%B)
0045B7 FD7E0E              A 12269    	LD	A,(IY+%E)
0045BA DD0FCA              A 12270    	LD	(IX+%FFFFFFCA),BC
0045BD DD77CD              A 12271    	LD	(IX+%FFFFFFCD),A
0045C0                     A 12272    L_905:
0045C0 DD07CA              A 12273    	LD	BC,(IX+%FFFFFFCA)
0045C3 DD7ECD              A 12274    	LD	A,(IX+%FFFFFFCD)
0045C6 DD31D2              A 12275    	LD	IY,(IX+%FFFFFFD2)
0045C9 FD0F0B              A 12276    	LD	(IY+%B),BC
0045CC FD770E              A 12277    	LD	(IY+%E),A
0045CF                     A 12278    L_943:
0045CF DD070C              A 12279    	LD	BC,(IX+%C)
0045D2 B7                  A 12280    	OR	A,A
0045D3 ED62                A 12281    	SBC	HL,HL
0045D5 B7                  A 12282    	OR	A,A
0045D6 ED42                A 12283    	SBC	HL,BC
0045D8 DA 9A 41 00         A 12284    	JR	C,L_941
0045DC                     A 12285    L_945:
                           A 12286    ; 4058	
                           A 12287    ; 4059		fp->flag |= FA_MODIFIED;			
0045DC DD3106              A 12288    	LD	IY,(IX+%6)
0045DF FD7E0F              A 12289    	LD	A,(IY+%F)
0045E2 CBF7                A 12290    	SET	%6,A
0045E4 FD770F              A 12291    	LD	(IY+%F),A
0045E7 B7                  A 12292    	OR	A,A
                           A 12293    ; 4060	
                           A 12294    ; 4061		LEAVE_FF(fs, FR_OK);
0045E8 ED62                A 12295    	SBC	HL,HL
                           A 12296    ; 4062	}
0045EA                     A 12297    L_946:
0045EA DDF9                A 12298    	LD	SP,IX
0045EC DDE1                A 12299    	POP	IX
0045EE C9                  A 12300    	RET	
                           A 12301    
                           A 12302    
                           A 12303    ;**************************** _f_write ********
                           A 12304    ;Name                         Addr/Register   S
                           A 12305    ;_disk_read                          IMPORT  --
                           A 12306    ;_memcpy                             IMPORT  --
                           A 12307    ;_disk_write                         IMPORT  --
                           A 12308    ;G_74                                 IX-62    
                           A 12309    ;G_72                                 IX-58    
                           A 12310    ;temp902                              IX-54    
                           A 12311    ;G_73                                 IX-50    
                           A 12312    ;G_76                                 IX-46    
                           A 12313    ;G_71                                 IX-43    
                           A 12314    ;G_70                                 IX-40    
                           A 12315    ;G_67                                 IX-37    
                           A 12316    ;G_68                                 IX-33    
                           A 12317    ;G_75                                 IX-29    
                           A 12318    ;res                                  IX-26    
                           A 12319    ;csect                                IX-23    
                           A 12320    ;wbuff                                IX-20    
                           A 12321    ;cc                                   IX-17    
                           A 12322    ;sect                                 IX-14    
                           A 12323    ;clst                                 IX-10    
                           A 12324    ;fs                                    IX-6    
                           A 12325    ;wcnt                                  IX-3    
                           A 12326    ;bw                                   IX+15    
                           A 12327    ;btw                                  IX+12    
                           A 12328    ;buff                                  IX+9    
                           A 12329    ;fp                                    IX+6    
                           A 12330    
                           A 12331    
                           A 12332    ; Stack Frame Size: 81 (bytes)
                           A 12333    ;       Spill Code: -1 (instruction)
                           A 12334    
                           A 12335    
                           A 12336    ; 4063	
                           A 12337    ; 4064	
                           A 12338    ; 4065	
                           A 12339    ; 4066	
                           A 12340    ; 4067	/*-------------------------------------
                           A 12341    ; 4068	/* Synchronize the File                
                           A 12342    ; 4069	/*-------------------------------------
                           A 12343    ; 4070	
                           A 12344    ; 4071	FRESULT f_sync (
                           A 12345    ; 4072		FIL* fp		/* Open file to be sync
                           A 12346    ; 4073	)
                           A 12347    ; 4074	{
0045EF                     A 12348    _f_sync:
0045EF 21F3FFFF            A 12349    	LD	HL,-13
0045F3 CD 00 00 00         A 12350    	CALL	__frameset
                           A 12351    ; 4075		FRESULT res;
                           A 12352    ; 4076		FATFS *fs;
                           A 12353    ; 4077		DWORD tm;
                           A 12354    ; 4078		BYTE *dir;
                           A 12355    ; 4079	
                           A 12356    ; 4080	
                           A 12357    ; 4081		res = validate(&fp->obj, &fs);	/* 
0045F7 ED65F7              A 12358    	PEA	IX+%FFFFFFF7
0045FA DD3106              A 12359    	LD	IY,(IX+%6)
0045FD ED6600              A 12360    	PEA	IY+%0
004600 CD F0 36 00         A 12361    	CALL	_validate
004604 C1                  A 12362    	POP	BC
004605 C1                  A 12363    	POP	BC
004606 DD2FFA              A 12364    	LD	(IX+%FFFFFFFA),HL
                           A 12365    ; 4082		if (res == FR_OK) {
004609 CD 00 00 00         A 12366    	CALL	__icmpzero
00460D C2 2D 47 00         A 12367    	JR	NZ,L_954
                           A 12368    ; 4083			if (fp->flag & FA_MODIFIED) {	
004611 DD3106              A 12369    	LD	IY,(IX+%6)
004614 FD7E0F              A 12370    	LD	A,(IY+%F)
004617 DD77F6              A 12371    	LD	(IX+%FFFFFFF6),A
00461A E640                A 12372    	AND	A,%40
00461C CA 2D 47 00         A 12373    	JR	Z,L_954
                           A 12374    ; 4084	#if !FF_FS_TINY
                           A 12375    ; 4085				if (fp->flag & FA_DIRTY) {	
004620 DD7EF6              A 12376    	LD	A,(IX+%FFFFFFF6)
004623 E680                A 12377    	AND	A,%80
004625 28 41               A 12378    	JR	Z,L_950
                           A 12379    ; 4086					if (disk_write(fs->pdrv
004627 01010000            A 12380    	LD	BC,1
00462B C5                  A 12381    	PUSH	BC
00462C DD3106              A 12382    	LD	IY,(IX+%6)
00462F FD0719              A 12383    	LD	BC,(IY+%19)
004632 FD7E1C              A 12384    	LD	A,(IY+%1C)
004635 2600                A 12385    	LD	H,%0
004637 6F                  A 12386    	LD	L,A
004638 E5                  A 12387    	PUSH	HL
004639 C5                  A 12388    	PUSH	BC
00463A ED6624              A 12389    	PEA	IY+%24
00463D DD31F7              A 12390    	LD	IY,(IX+%FFFFFFF7)
004640 FD4E01              A 12391    	LD	C,(IY+%1)
004643 0600                A 12392    	LD	B,%0
004645 C5                  A 12393    	PUSH	BC
004646 CD 00 00 00         A 12394    	CALL	_disk_write
00464A C1                  A 12395    	POP	BC
00464B C1                  A 12396    	POP	BC
00464C C1                  A 12397    	POP	BC
00464D C1                  A 12398    	POP	BC
00464E C1                  A 12399    	POP	BC
00464F CD 00 00 00         A 12400    	CALL	__icmpzero
004653 28 08               A 12401    	JR	Z,L_948
004655 21010000            A 12402    	LD	HL,1
004659 C3 30 47 00         A 12403    	JR	L_955
00465D                     A 12404    L_948:
                           A 12405    ; 4087					fp->flag &= (BYTE)~FA_D
00465D DD3106              A 12406    	LD	IY,(IX+%6)
004660 FD7E0F              A 12407    	LD	A,(IY+%F)
004663 CBBF                A 12408    	RES	%7,A
004665 FD770F              A 12409    	LD	(IY+%F),A
                           A 12410    ; 4088				}
004668                     A 12411    L_950:
                           A 12412    ; 4089	#endif
                           A 12413    ; 4090				/* Update the directory ent
                           A 12414    ; 4091				tm = GET_FATTIME();			
                           A 12415    ; 4092	#if FF_FS_EXFAT
                           A 12416    ; 4093				if (fs->fs_type == FS_EXFAT
                           A 12417    ; 4094					res = fill_first_frag(&
                           A 12418    ; 4095					if (res == FR_OK) {
                           A 12419    ; 4096						res = fill_last_fra
                           A 12420    ; 4097					}
                           A 12421    ; 4098					if (res == FR_OK) {
                           A 12422    ; 4099						DIR dj;
                           A 12423    ; 4100						DEF_NAMBUF
                           A 12424    ; 4101	
                           A 12425    ; 4102						INIT_NAMBUF(fs);
                           A 12426    ; 4103						res = load_obj_xdir
                           A 12427    ; 4104						if (res == FR_OK) {
                           A 12428    ; 4105							fs->dirbuf[XDIR
                           A 12429    ; 4106							fs->dirbuf[XDIR
                           A 12430    ; 4107							st_dword(fs->di
                           A 12431    ; 4108							st_qword(fs->di
                           A 12432    ; 4109							st_qword(fs->di
                           A 12433    ; 4110							st_dword(fs->di
                           A 12434    ; 4111							fs->dirbuf[XDIR
                           A 12435    ; 4112							st_dword(fs->di
                           A 12436    ; 4113							res = store_xdi
                           A 12437    ; 4114							if (res == FR_O
                           A 12438    ; 4115								res = sync_
                           A 12439    ; 4116								fp->flag &=
                           A 12440    ; 4117							}
                           A 12441    ; 4118						}
                           A 12442    ; 4119						FREE_NAMBUF();
                           A 12443    ; 4120					}
                           A 12444    ; 4121				} else
                           A 12445    ; 4122	#endif
                           A 12446    ; 4123				{
                           A 12447    ; 4124					res = move_window(fs, f
004668 DD3106              A 12448    	LD	IY,(IX+%6)
00466B FD071D              A 12449    	LD	BC,(IY+%1D)
00466E FD7E20              A 12450    	LD	A,(IY+%20)
004671 2600                A 12451    	LD	H,%0
004673 6F                  A 12452    	LD	L,A
004674 E5                  A 12453    	PUSH	HL
004675 C5                  A 12454    	PUSH	BC
004676 DD07F7              A 12455    	LD	BC,(IX+%FFFFFFF7)
004679 C5                  A 12456    	PUSH	BC
00467A CD A6 03 00         A 12457    	CALL	_move_window
00467E C1                  A 12458    	POP	BC
00467F C1                  A 12459    	POP	BC
004680 C1                  A 12460    	POP	BC
004681 DD2FFA              A 12461    	LD	(IX+%FFFFFFFA),HL
                           A 12462    ; 4125					if (res == FR_OK) {
004684 CD 00 00 00         A 12463    	CALL	__icmpzero
004688 C2 2D 47 00         A 12464    	JR	NZ,L_954
                           A 12465    ; 4126						dir = fp->dir_ptr;
00468C DD3106              A 12466    	LD	IY,(IX+%6)
00468F FD0721              A 12467    	LD	BC,(IY+%21)
004692 DD0FFD              A 12468    	LD	(IX+%FFFFFFFD),BC
                           A 12469    ; 4127						dir[DIR_Attr] |= AM
004695 DD31FD              A 12470    	LD	IY,(IX+%FFFFFFFD)
004698 ED230B              A 12471    	LEA	HL,IY+%B
00469B 7E                  A 12472    	LD	A,(HL)
00469C CBEF                A 12473    	SET	%5,A
00469E ED230B              A 12474    	LEA	HL,IY+%B
0046A1 77                  A 12475    	LD	(HL),A
                           A 12476    ; 4128						st_clust(fp->obj.fs
0046A2 DD3106              A 12477    	LD	IY,(IX+%6)
0046A5 ED0300              A 12478    	LEA	BC,IY+%0
0046A8 DD0FF3              A 12479    	LD	(IX+%FFFFFFF3),BC
0046AB DD31F3              A 12480    	LD	IY,(IX+%FFFFFFF3)
0046AE FD0707              A 12481    	LD	BC,(IY+%7)
0046B1 FD7E0A              A 12482    	LD	A,(IY+%A)
0046B4 2600                A 12483    	LD	H,%0
0046B6 6F                  A 12484    	LD	L,A
0046B7 E5                  A 12485    	PUSH	HL
0046B8 C5                  A 12486    	PUSH	BC
0046B9 DD07FD              A 12487    	LD	BC,(IX+%FFFFFFFD)
0046BC C5                  A 12488    	PUSH	BC
0046BD FD0700              A 12489    	LD	BC,(IY+%0)
0046C0 C5                  A 12490    	PUSH	BC
0046C1 CD C8 16 00         A 12491    	CALL	_st_clust
0046C5 C1                  A 12492    	POP	BC
0046C6 C1                  A 12493    	POP	BC
0046C7 C1                  A 12494    	POP	BC
0046C8 C1                  A 12495    	POP	BC
                           A 12496    ; 4129						st_dword(dir + DIR_
0046C9 DD31F3              A 12497    	LD	IY,(IX+%FFFFFFF3)
0046CC FD070B              A 12498    	LD	BC,(IY+%B)
0046CF FD7E0E              A 12499    	LD	A,(IY+%E)
0046D2 2600                A 12500    	LD	H,%0
0046D4 6F                  A 12501    	LD	L,A
0046D5 E5                  A 12502    	PUSH	HL
0046D6 C5                  A 12503    	PUSH	BC
0046D7 DD31FD              A 12504    	LD	IY,(IX+%FFFFFFFD)
0046DA ED031C              A 12505    	LEA	BC,IY+%1C
0046DD C5                  A 12506    	PUSH	BC
0046DE CD F5 00 00         A 12507    	CALL	_st_dword
0046E2 C1                  A 12508    	POP	BC
0046E3 C1                  A 12509    	POP	BC
0046E4 C1                  A 12510    	POP	BC
                           A 12511    ; 4130						st_dword(dir + DIR_
0046E5 01500000            A 12512    	LD	BC,80
0046E9 C5                  A 12513    	PUSH	BC
0046EA 01000021            A 12514    	LD	BC,2162688
0046EE C5                  A 12515    	PUSH	BC
0046EF DD31FD              A 12516    	LD	IY,(IX+%FFFFFFFD)
0046F2 ED0316              A 12517    	LEA	BC,IY+%16
0046F5 C5                  A 12518    	PUSH	BC
0046F6 CD F5 00 00         A 12519    	CALL	_st_dword
0046FA C1                  A 12520    	POP	BC
0046FB C1                  A 12521    	POP	BC
0046FC C1                  A 12522    	POP	BC
                           A 12523    ; 4131						st_word(dir + DIR_L
0046FD 01000000            A 12524    	LD	BC,0
004701 C5                  A 12525    	PUSH	BC
004702 DD31FD              A 12526    	LD	IY,(IX+%FFFFFFFD)
004705 ED0312              A 12527    	LEA	BC,IY+%12
004708 C5                  A 12528    	PUSH	BC
004709 CD C4 00 00         A 12529    	CALL	_st_word
00470D C1                  A 12530    	POP	BC
00470E C1                  A 12531    	POP	BC
                           A 12532    ; 4132						fs->wflag = 1;
00470F DD31F7              A 12533    	LD	IY,(IX+%FFFFFFF7)
004712 FD360301            A 12534    	LD	(IY+%3),%1
                           A 12535    ; 4133						res = sync_fs(fs);	
004716 DD07F7              A 12536    	LD	BC,(IX+%FFFFFFF7)
004719 C5                  A 12537    	PUSH	BC
00471A CD 30 04 00         A 12538    	CALL	_sync_fs
00471E C1                  A 12539    	POP	BC
00471F DD2FFA              A 12540    	LD	(IX+%FFFFFFFA),HL
                           A 12541    ; 4134						fp->flag &= (BYTE)~
004722 DD3106              A 12542    	LD	IY,(IX+%6)
004725 FD7E0F              A 12543    	LD	A,(IY+%F)
004728 CBB7                A 12544    	RES	%6,A
00472A FD770F              A 12545    	LD	(IY+%F),A
                           A 12546    ; 4135					}
                           A 12547    ; 4136				}
                           A 12548    ; 4137			}
                           A 12549    ; 4138		}
00472D                     A 12550    L_954:
                           A 12551    ; 4139	
                           A 12552    ; 4140		LEAVE_FF(fs, res);
00472D DD27FA              A 12553    	LD	HL,(IX+%FFFFFFFA)
                           A 12554    ; 4141	}
004730                     A 12555    L_955:
004730 DDF9                A 12556    	LD	SP,IX
004732 DDE1                A 12557    	POP	IX
004734 C9                  A 12558    	RET	
                           A 12559    
                           A 12560    
                           A 12561    ;**************************** _f_sync *********
                           A 12562    ;Name                         Addr/Register   S
                           A 12563    ;_disk_write                         IMPORT  --
                           A 12564    ;G_78                                 IX-13    
                           A 12565    ;G_77                                 IX-10    
                           A 12566    ;fs                                    IX-9    
                           A 12567    ;res                                   IX-6    
                           A 12568    ;dir                                   IX-3    
                           A 12569    ;fp                                    IX+6    
                           A 12570    
                           A 12571    
                           A 12572    ; Stack Frame Size: 22 (bytes)
                           A 12573    ;       Spill Code: -1 (instruction)
                           A 12574    
                           A 12575    
                           A 12576    ; 4142	
                           A 12577    ; 4143	#endif /* !FF_FS_READONLY */
                           A 12578    ; 4144	
                           A 12579    ; 4145	
                           A 12580    ; 4146	
                           A 12581    ; 4147	
                           A 12582    ; 4148	/*-------------------------------------
                           A 12583    ; 4149	/* Close File                          
                           A 12584    ; 4150	/*-------------------------------------
                           A 12585    ; 4151	
                           A 12586    ; 4152	FRESULT f_close (
                           A 12587    ; 4153		FIL* fp		/* Open file to be clos
                           A 12588    ; 4154	)
                           A 12589    ; 4155	{
004735                     A 12590    _f_close:
004735 21FAFFFF            A 12591    	LD	HL,-6
004739 CD 00 00 00         A 12592    	CALL	__frameset
                           A 12593    ; 4156		FRESULT res;
                           A 12594    ; 4157		FATFS *fs;
                           A 12595    ; 4158	
                           A 12596    ; 4159	#if !FF_FS_READONLY
                           A 12597    ; 4160		res = f_sync(fp);					
00473D DD0706              A 12598    	LD	BC,(IX+%6)
004740 C5                  A 12599    	PUSH	BC
004741 CD EF 45 00         A 12600    	CALL	_f_sync
004745 C1                  A 12601    	POP	BC
004746 DD2FFD              A 12602    	LD	(IX+%FFFFFFFD),HL
                           A 12603    ; 4161		if (res == FR_OK)
004749 CD 00 00 00         A 12604    	CALL	__icmpzero
00474D 20 22               A 12605    	JR	NZ,L_958
                           A 12606    ; 4162	#endif
                           A 12607    ; 4163		{
                           A 12608    ; 4164			res = validate(&fp->obj, &fs);	
00474F ED65FA              A 12609    	PEA	IX+%FFFFFFFA
004752 DD3106              A 12610    	LD	IY,(IX+%6)
004755 ED6600              A 12611    	PEA	IY+%0
004758 CD F0 36 00         A 12612    	CALL	_validate
00475C C1                  A 12613    	POP	BC
00475D C1                  A 12614    	POP	BC
00475E DD2FFD              A 12615    	LD	(IX+%FFFFFFFD),HL
                           A 12616    ; 4165			if (res == FR_OK) {
004761 CD 00 00 00         A 12617    	CALL	__icmpzero
004765 20 0A               A 12618    	JR	NZ,L_958
                           A 12619    ; 4166	#if FF_FS_LOCK != 0
                           A 12620    ; 4167				res = dec_lock(fp->obj.lock
                           A 12621    ; 4168				if (res == FR_OK) fp->obj.f
                           A 12622    ; 4169	#else
                           A 12623    ; 4170				fp->obj.fs = 0;	/* Invalida
004767 01000000            A 12624    	LD	BC,0
00476B DD3106              A 12625    	LD	IY,(IX+%6)
00476E FD0F00              A 12626    	LD	(IY+%0),BC
                           A 12627    ; 4171	#endif
                           A 12628    ; 4172	#if FF_FS_REENTRANT
                           A 12629    ; 4173				unlock_fs(fs, FR_OK);		
                           A 12630    ; 4174	#endif
                           A 12631    ; 4175			}
                           A 12632    ; 4176		}
004771                     A 12633    L_958:
                           A 12634    ; 4177		return res;
004771 DD27FD              A 12635    	LD	HL,(IX+%FFFFFFFD)
                           A 12636    ; 4178	}
004774 DDF9                A 12637    	LD	SP,IX
004776 DDE1                A 12638    	POP	IX
004778 C9                  A 12639    	RET	
                           A 12640    
                           A 12641    
                           A 12642    ;**************************** _f_close ********
                           A 12643    ;Name                         Addr/Register   S
                           A 12644    ;_f_sync                             IMPORT  --
                           A 12645    ;fs                                    IX-6    
                           A 12646    ;res                                   IX-3    
                           A 12647    ;fp                                    IX+6    
                           A 12648    
                           A 12649    
                           A 12650    ; Stack Frame Size: 15 (bytes)
                           A 12651    ;       Spill Code: -1 (instruction)
                           A 12652    
                           A 12653    
                           A 12654    ; 4179	
                           A 12655    ; 4180	
                           A 12656    ; 4181	
                           A 12657    ; 4182	
                           A 12658    ; 4183	#if FF_FS_RPATH >= 1
                           A 12659    ; 4184	/*-------------------------------------
                           A 12660    ; 4185	/* Change Current Directory or Current 
                           A 12661    ; 4186	/*-------------------------------------
                           A 12662    ; 4187	
                           A 12663    ; 4188	FRESULT f_chdrive (
                           A 12664    ; 4189		const TCHAR* path		/* Drive nu
                           A 12665    ; 4190	)
                           A 12666    ; 4191	{
                           A 12667    ; 4192		int vol;
                           A 12668    ; 4193	
                           A 12669    ; 4194	
                           A 12670    ; 4195		/* Get logical drive number */
                           A 12671    ; 4196		vol = get_ldnumber(&path);
                           A 12672    ; 4197		if (vol < 0) return FR_INVALID_DRIV
                           A 12673    ; 4198		CurrVol = (BYTE)vol;	/* Set it a
                           A 12674    ; 4199	
                           A 12675    ; 4200		return FR_OK;
                           A 12676    ; 4201	}
                           A 12677    ; 4202	
                           A 12678    ; 4203	
                           A 12679    ; 4204	
                           A 12680    ; 4205	FRESULT f_chdir (
                           A 12681    ; 4206		const TCHAR* path	/* Pointer to t
                           A 12682    ; 4207	)
                           A 12683    ; 4208	{
                           A 12684    ; 4209	#if FF_STR_VOLUME_ID == 2
                           A 12685    ; 4210		UINT i;
                           A 12686    ; 4211	#endif
                           A 12687    ; 4212		FRESULT res;
                           A 12688    ; 4213		DIR dj;
                           A 12689    ; 4214		FATFS *fs;
                           A 12690    ; 4215		DEF_NAMBUF
                           A 12691    ; 4216	
                           A 12692    ; 4217	
                           A 12693    ; 4218		/* Get logical drive */
                           A 12694    ; 4219		res = mount_volume(&path, &fs, 0);
                           A 12695    ; 4220		if (res == FR_OK) {
                           A 12696    ; 4221			dj.obj.fs = fs;
                           A 12697    ; 4222			INIT_NAMBUF(fs);
                           A 12698    ; 4223			res = follow_path(&dj, path);	
                           A 12699    ; 4224			if (res == FR_OK) {				
                           A 12700    ; 4225				if (dj.fn[NSFLAG] & NS_NONA
                           A 12701    ; 4226					fs->cdir = dj.obj.sclus
                           A 12702    ; 4227	#if FF_FS_EXFAT
                           A 12703    ; 4228					if (fs->fs_type == FS_E
                           A 12704    ; 4229						fs->cdc_scl = dj.ob
                           A 12705    ; 4230						fs->cdc_size = dj.o
                           A 12706    ; 4231						fs->cdc_ofs = dj.ob
                           A 12707    ; 4232					}
                           A 12708    ; 4233	#endif
                           A 12709    ; 4234				} else {
                           A 12710    ; 4235					if (dj.obj.attr & AM_DI
                           A 12711    ; 4236	#if FF_FS_EXFAT
                           A 12712    ; 4237						if (fs->fs_type == 
                           A 12713    ; 4238							fs->cdir = ld_d
                           A 12714    ; 4239							fs->cdc_scl = d
                           A 12715    ; 4240							fs->cdc_size = 
                           A 12716    ; 4241							fs->cdc_ofs = d
                           A 12717    ; 4242						} else
                           A 12718    ; 4243	#endif
                           A 12719    ; 4244						{
                           A 12720    ; 4245							fs->cdir = ld_c
                           A 12721    ; 4246						}
                           A 12722    ; 4247					} else {
                           A 12723    ; 4248						res = FR_NO_PATH;	
                           A 12724    ; 4249					}
                           A 12725    ; 4250				}
                           A 12726    ; 4251			}
                           A 12727    ; 4252			FREE_NAMBUF();
                           A 12728    ; 4253			if (res == FR_NO_FILE) res = FR
                           A 12729    ; 4254	#if FF_STR_VOLUME_ID == 2	/* Also cur
                           A 12730    ; 4255			if (res == FR_OK) {
                           A 12731    ; 4256				for (i = FF_VOLUMES - 1; i 
                           A 12732    ; 4257				CurrVol = (BYTE)i;
                           A 12733    ; 4258			}
                           A 12734    ; 4259	#endif
                           A 12735    ; 4260		}
                           A 12736    ; 4261	
                           A 12737    ; 4262		LEAVE_FF(fs, res);
                           A 12738    ; 4263	}
                           A 12739    ; 4264	
                           A 12740    ; 4265	
                           A 12741    ; 4266	#if FF_FS_RPATH >= 2
                           A 12742    ; 4267	FRESULT f_getcwd (
                           A 12743    ; 4268		TCHAR* buff,	/* Pointer to the d
                           A 12744    ; 4269		UINT len		/* Size of buff in 
                           A 12745    ; 4270	)
                           A 12746    ; 4271	{
                           A 12747    ; 4272		FRESULT res;
                           A 12748    ; 4273		DIR dj;
                           A 12749    ; 4274		FATFS *fs;
                           A 12750    ; 4275		UINT i, n;
                           A 12751    ; 4276		DWORD ccl;
                           A 12752    ; 4277		TCHAR *tp = buff;
                           A 12753    ; 4278	#if FF_VOLUMES >= 2
                           A 12754    ; 4279		UINT vl;
                           A 12755    ; 4280	#if FF_STR_VOLUME_ID
                           A 12756    ; 4281		const char *vp;
                           A 12757    ; 4282	#endif
                           A 12758    ; 4283	#endif
                           A 12759    ; 4284		FILINFO fno;
                           A 12760    ; 4285		DEF_NAMBUF
                           A 12761    ; 4286	
                           A 12762    ; 4287	
                           A 12763    ; 4288		/* Get logical drive */
                           A 12764    ; 4289		buff[0] = 0;	/* Set null string 
                           A 12765    ; 4290		res = mount_volume((const TCHAR**)&
                           A 12766    ; 4291		if (res == FR_OK) {
                           A 12767    ; 4292			dj.obj.fs = fs;
                           A 12768    ; 4293			INIT_NAMBUF(fs);
                           A 12769    ; 4294	
                           A 12770    ; 4295			/* Follow parent directories an
                           A 12771    ; 4296			i = len;			/* Bottom o
                           A 12772    ; 4297			if (!FF_FS_EXFAT || fs->fs_type
                           A 12773    ; 4298				dj.obj.sclust = fs->cdir;	
                           A 12774    ; 4299				while ((ccl = dj.obj.sclust
                           A 12775    ; 4300					res = dir_sdi(&dj, 1 * 
                           A 12776    ; 4301					if (res != FR_OK) break
                           A 12777    ; 4302					res = move_window(fs, d
                           A 12778    ; 4303					if (res != FR_OK) break
                           A 12779    ; 4304					dj.obj.sclust = ld_clus
                           A 12780    ; 4305					res = dir_sdi(&dj, 0);
                           A 12781    ; 4306					if (res != FR_OK) break
                           A 12782    ; 4307					do {					
                           A 12783    ; 4308						res = DIR_READ_FILE
                           A 12784    ; 4309						if (res != FR_OK) b
                           A 12785    ; 4310						if (ccl == ld_clust
                           A 12786    ; 4311						res = dir_next(&dj,
                           A 12787    ; 4312					} while (res == FR_OK);
                           A 12788    ; 4313					if (res == FR_NO_FILE) 
                           A 12789    ; 4314					if (res != FR_OK) break
                           A 12790    ; 4315					get_fileinfo(&dj, &fno)
                           A 12791    ; 4316					for (n = 0; fno.fname[n
                           A 12792    ; 4317					if (i < n + 1) {	/* 
                           A 12793    ; 4318						res = FR_NOT_ENOUGH
                           A 12794    ; 4319					}
                           A 12795    ; 4320					while (n) buff[--i] = f
                           A 12796    ; 4321					buff[--i] = '/';
                           A 12797    ; 4322				}
                           A 12798    ; 4323			}
                           A 12799    ; 4324			if (res == FR_OK) {
                           A 12800    ; 4325				if (i == len) buff[--i] = '
                           A 12801    ; 4326	#if FF_VOLUMES >= 2			/* Put driv
                           A 12802    ; 4327				vl = 0;
                           A 12803    ; 4328	#if FF_STR_VOLUME_ID >= 1	/* String v
                           A 12804    ; 4329				for (n = 0, vp = (const cha
                           A 12805    ; 4330				if (i >= n + 2) {
                           A 12806    ; 4331					if (FF_STR_VOLUME_ID ==
                           A 12807    ; 4332					for (vl = 0; vl < n; *t
                           A 12808    ; 4333					if (FF_STR_VOLUME_ID ==
                           A 12809    ; 4334					vl++;
                           A 12810    ; 4335				}
                           A 12811    ; 4336	#else						/* Numeric 
                           A 12812    ; 4337				if (i >= 3) {
                           A 12813    ; 4338					*tp++ = (TCHAR)'0' + Cu
                           A 12814    ; 4339					*tp++ = (TCHAR)':';
                           A 12815    ; 4340					vl = 2;
                           A 12816    ; 4341				}
                           A 12817    ; 4342	#endif
                           A 12818    ; 4343				if (vl == 0) res = FR_NOT_E
                           A 12819    ; 4344	#endif
                           A 12820    ; 4345				/* Add current directory pa
                           A 12821    ; 4346				if (res == FR_OK) {
                           A 12822    ; 4347					do *tp++ = buff[i++]; w
                           A 12823    ; 4348				}
                           A 12824    ; 4349			}
                           A 12825    ; 4350			FREE_NAMBUF();
                           A 12826    ; 4351		}
                           A 12827    ; 4352	
                           A 12828    ; 4353		*tp = 0;
                           A 12829    ; 4354		LEAVE_FF(fs, res);
                           A 12830    ; 4355	}
                           A 12831    ; 4356	
                           A 12832    ; 4357	#endif /* FF_FS_RPATH >= 2 */
                           A 12833    ; 4358	#endif /* FF_FS_RPATH >= 1 */
                           A 12834    ; 4359	
                           A 12835    ; 4360	
                           A 12836    ; 4361	
                           A 12837    ; 4362	#if FF_FS_MINIMIZE <= 2
                           A 12838    ; 4363	/*-------------------------------------
                           A 12839    ; 4364	/* Seek File Read/Write Pointer        
                           A 12840    ; 4365	/*-------------------------------------
                           A 12841    ; 4366	
                           A 12842    ; 4367	FRESULT f_lseek (
                           A 12843    ; 4368		FIL* fp,		/* Pointer to the f
                           A 12844    ; 4369		FSIZE_t ofs		/* File pointer fro
                           A 12845    ; 4370	)
                           A 12846    ; 4371	{
004779                     A 12847    _f_lseek:
004779 21D4FFFF            A 12848    	LD	HL,-44
00477D CD 00 00 00         A 12849    	CALL	__frameset
                           A 12850    ; 4372		FRESULT res;
                           A 12851    ; 4373		FATFS *fs;
                           A 12852    ; 4374		DWORD clst, bcs;
                           A 12853    ; 4375		LBA_t nsect;
                           A 12854    ; 4376		FSIZE_t ifptr;
                           A 12855    ; 4377	#if FF_USE_FASTSEEK
                           A 12856    ; 4378		DWORD cl, pcl, ncl, tcl, tlen, ulen
                           A 12857    ; 4379		DWORD *tbl;
                           A 12858    ; 4380		LBA_t dsc;
                           A 12859    ; 4381	#endif
                           A 12860    ; 4382	
                           A 12861    ; 4383		res = validate(&fp->obj, &fs);		
004781 ED65EE              A 12862    	PEA	IX+%FFFFFFEE
004784 DD3106              A 12863    	LD	IY,(IX+%6)
004787 ED6600              A 12864    	PEA	IY+%0
00478A CD F0 36 00         A 12865    	CALL	_validate
00478E C1                  A 12866    	POP	BC
00478F C1                  A 12867    	POP	BC
004790 DD2FF5              A 12868    	LD	(IX+%FFFFFFF5),HL
                           A 12869    ; 4384		if (res == FR_OK) res = (FRESULT)fp
004793 CD 00 00 00         A 12870    	CALL	__icmpzero
004797 20 0D               A 12871    	JR	NZ,L_962
004799 DD3106              A 12872    	LD	IY,(IX+%6)
00479C FD7E10              A 12873    	LD	A,(IY+%10)
00479F B7ED62              A 12874    	UEXT	HL
0047A2 6F                  A 12875    	LD	L,A
0047A3 DD2FF5              A 12876    	LD	(IX+%FFFFFFF5),HL
0047A6                     A 12877    L_962:
                           A 12878    ; 4385	#if FF_FS_EXFAT && !FF_FS_READONLY
                           A 12879    ; 4386		if (res == FR_OK && fs->fs_type == 
                           A 12880    ; 4387			res = fill_last_frag(&fp->obj, 
                           A 12881    ; 4388		}
                           A 12882    ; 4389	#endif
                           A 12883    ; 4390		if (res != FR_OK) LEAVE_FF(fs, res)
0047A6 DD27F5              A 12884    	LD	HL,(IX+%FFFFFFF5)
0047A9 CD 00 00 00         A 12885    	CALL	__icmpzero
0047AD 28 07               A 12886    	JR	Z,L_1006
0047AF DD27F5              A 12887    	LD	HL,(IX+%FFFFFFF5)
0047B2 C3 2C 4C 00         A 12888    	JR	L_1008
0047B6                     A 12889    L_1006:
                           A 12890    ; 4391	
                           A 12891    ; 4392	#if FF_USE_FASTSEEK
                           A 12892    ; 4393		if (fp->cltbl) {	/* Fast seek */
                           A 12893    ; 4394			if (ofs == CREATE_LINKMAP) {	
                           A 12894    ; 4395				tbl = fp->cltbl;
                           A 12895    ; 4396				tlen = *tbl++; ulen = 2;	
                           A 12896    ; 4397				cl = fp->obj.sclust;		
                           A 12897    ; 4398				if (cl != 0) {
                           A 12898    ; 4399					do {
                           A 12899    ; 4400						/* Get a fragment *
                           A 12900    ; 4401						tcl = cl; ncl = 0; 
                           A 12901    ; 4402						do {
                           A 12902    ; 4403							pcl = cl; ncl++
                           A 12903    ; 4404							cl = get_fat(&f
                           A 12904    ; 4405							if (cl <= 1) AB
                           A 12905    ; 4406							if (cl == 0xFFF
                           A 12906    ; 4407						} while (cl == pcl 
                           A 12907    ; 4408						if (ulen <= tlen) {
                           A 12908    ; 4409							*tbl++ = ncl; *
                           A 12909    ; 4410						}
                           A 12910    ; 4411					} while (cl < fs->n_fat
                           A 12911    ; 4412				}
                           A 12912    ; 4413				*fp->cltbl = ulen;	/* Numb
                           A 12913    ; 4414				if (ulen <= tlen) {
                           A 12914    ; 4415					*tbl = 0;		/* Term
                           A 12915    ; 4416				} else {
                           A 12916    ; 4417					res = FR_NOT_ENOUGH_COR
                           A 12917    ; 4418				}
                           A 12918    ; 4419			} else {						
                           A 12919    ; 4420				if (ofs > fp->obj.objsize) 
                           A 12920    ; 4421				fp->fptr = ofs;				
                           A 12921    ; 4422				if (ofs > 0) {
                           A 12922    ; 4423					fp->clust = clmt_clust(
                           A 12923    ; 4424					dsc = clst2sect(fs, fp-
                           A 12924    ; 4425					if (dsc == 0) ABORT(fs,
                           A 12925    ; 4426					dsc += (DWORD)((ofs - 1
                           A 12926    ; 4427					if (fp->fptr % SS(fs) &
                           A 12927    ; 4428	#if !FF_FS_TINY
                           A 12928    ; 4429	#if !FF_FS_READONLY
                           A 12929    ; 4430						if (fp->flag & FA_D
                           A 12930    ; 4431							if (disk_write(
                           A 12931    ; 4432							fp->flag &= (BY
                           A 12932    ; 4433						}
                           A 12933    ; 4434	#endif
                           A 12934    ; 4435						if (disk_read(fs->p
                           A 12935    ; 4436	#endif
                           A 12936    ; 4437						fp->sect = dsc;
                           A 12937    ; 4438					}
                           A 12938    ; 4439				}
                           A 12939    ; 4440			}
                           A 12940    ; 4441		} else
                           A 12941    ; 4442	#endif
                           A 12942    ; 4443	
                           A 12943    ; 4444		/* Normal Seek */
                           A 12944    ; 4445		{
                           A 12945    ; 4446	#if FF_FS_EXFAT
                           A 12946    ; 4447			if (fs->fs_type != FS_EXFAT && 
                           A 12947    ; 4448	#endif
                           A 12948    ; 4449			if (ofs > fp->obj.objsize && (F
0047B6 DD3106              A 12949    	LD	IY,(IX+%6)
0047B9 FD270B              A 12950    	LD	HL,(IY+%B)
0047BC FD5E0E              A 12951    	LD	E,(IY+%E)
0047BF DD0709              A 12952    	LD	BC,(IX+%9)
0047C2 DD7E0C              A 12953    	LD	A,(IX+%C)
0047C5 CD 00 00 00         A 12954    	CALL	__lcmpu
0047C9 30 19               A 12955    	JR	NC,L_965
0047CB DD3106              A 12956    	LD	IY,(IX+%6)
0047CE FD7E0F              A 12957    	LD	A,(IY+%F)
0047D1 E602                A 12958    	AND	A,%2
0047D3 20 0F               A 12959    	JR	NZ,L_965
                           A 12960    ; 4450				ofs = fp->obj.objsize;
0047D5 DD3106              A 12961    	LD	IY,(IX+%6)
0047D8 FD070B              A 12962    	LD	BC,(IY+%B)
0047DB FD7E0E              A 12963    	LD	A,(IY+%E)
0047DE DD0F09              A 12964    	LD	(IX+%9),BC
0047E1 DD770C              A 12965    	LD	(IX+%C),A
                           A 12966    ; 4451			}
0047E4                     A 12967    L_965:
                           A 12968    ; 4452			ifptr = fp->fptr;
0047E4 DD3106              A 12969    	LD	IY,(IX+%6)
0047E7 FD0711              A 12970    	LD	BC,(IY+%11)
0047EA FD7E14              A 12971    	LD	A,(IY+%14)
0047ED DD0FE4              A 12972    	LD	(IX+%FFFFFFE4),BC
0047F0 DD77E7              A 12973    	LD	(IX+%FFFFFFE7),A
                           A 12974    ; 4453			fp->fptr = nsect = 0;
0047F3 01000000            A 12975    	LD	BC,0
0047F7 AF                  A 12976    	XOR	A,A
0047F8 DD0FF8              A 12977    	LD	(IX+%FFFFFFF8),BC
0047FB DD77FB              A 12978    	LD	(IX+%FFFFFFFB),A
0047FE FD0F11              A 12979    	LD	(IY+%11),BC
004801 FD361400            A 12980    	LD	(IY+%14),%0
004805 B7                  A 12981    	OR	A,A
                           A 12982    ; 4454			if (ofs > 0) {
004806 ED62                A 12983    	SBC	HL,HL
004808 1E00                A 12984    	LD	E,%0
00480A DD0709              A 12985    	LD	BC,(IX+%9)
00480D DD7E0C              A 12986    	LD	A,(IX+%C)
004810 CD 00 00 00         A 12987    	CALL	__lcmpu
004814 D2 16 4B 00         A 12988    	JR	NC,L_996
                           A 12989    ; 4455				bcs = (DWORD)fs->csize * SS
004818 DD31EE              A 12990    	LD	IY,(IX+%FFFFFFEE)
00481B FD0709              A 12991    	LD	BC,(IY+%9)
00481E CD 00 00 00         A 12992    	CALL	__stoiu
004822 01000200            A 12993    	LD	BC,512
004826 AF                  A 12994    	XOR	A,A
004827 CD 00 00 00         A 12995    	CALL	__lmulu
00482B DD2FF1              A 12996    	LD	(IX+%FFFFFFF1),HL
00482E DD73F4              A 12997    	LD	(IX+%FFFFFFF4),E
004831 B7                  A 12998    	OR	A,A
                           A 12999    ; 4456				if (ifptr > 0 &&
004832 ED62                A 13000    	SBC	HL,HL
004834 1E00                A 13001    	LD	E,%0
004836 DD07E4              A 13002    	LD	BC,(IX+%FFFFFFE4)
004839 DD7EE7              A 13003    	LD	A,(IX+%FFFFFFE7)
00483C CD 00 00 00         A 13004    	CALL	__lcmpu
004840 D2 E3 48 00         A 13005    	JR	NC,L_974
                           A 13006    ; 4457					(ofs - 1) / bcs >= (ifp
004844 DD27E4              A 13007    	LD	HL,(IX+%FFFFFFE4)
004847 DD5EE7              A 13008    	LD	E,(IX+%FFFFFFE7)
00484A 01010000            A 13009    	LD	BC,1
00484E AF                  A 13010    	XOR	A,A
00484F CD 00 00 00         A 13011    	CALL	__lsub
004853 DD2FDC              A 13012    	LD	(IX+%FFFFFFDC),HL
004856 DD73DF              A 13013    	LD	(IX+%FFFFFFDF),E
004859 DD2709              A 13014    	LD	HL,(IX+%9)
00485C DD5E0C              A 13015    	LD	E,(IX+%C)
00485F 01010000            A 13016    	LD	BC,1
004863 AF                  A 13017    	XOR	A,A
004864 CD 00 00 00         A 13018    	CALL	__lsub
004868 DD07F1              A 13019    	LD	BC,(IX+%FFFFFFF1)
00486B DD7EF4              A 13020    	LD	A,(IX+%FFFFFFF4)
00486E CD 00 00 00         A 13021    	CALL	__ldivu
004872 DD73D7              A 13022    	LD	(IX+%FFFFFFD7),E
004875 DD2FD4              A 13023    	LD	(IX+%FFFFFFD4),HL
004878 DD27DC              A 13024    	LD	HL,(IX+%FFFFFFDC)
00487B DD5EDF              A 13025    	LD	E,(IX+%FFFFFFDF)
00487E DD07F1              A 13026    	LD	BC,(IX+%FFFFFFF1)
004881 DD7EF4              A 13027    	LD	A,(IX+%FFFFFFF4)
004884 CD 00 00 00         A 13028    	CALL	__ldivu
004888 7B                  A 13029    	LD	A,E
004889 E5C1                A 13030    	LD	BC,HL
00488B DD5ED7              A 13031    	LD	E,(IX+%FFFFFFD7)
00488E DD27D4              A 13032    	LD	HL,(IX+%FFFFFFD4)
004891 CD 00 00 00         A 13033    	CALL	__lcmpu
004895 38 4C               A 13034    	JR	C,L_974
                           A 13035    ; 4458					fp->fptr = (ifptr - 1) 
004897 DD27F1              A 13036    	LD	HL,(IX+%FFFFFFF1)
00489A DD5EF4              A 13037    	LD	E,(IX+%FFFFFFF4)
00489D 01010000            A 13038    	LD	BC,1
0048A1 AF                  A 13039    	XOR	A,A
0048A2 CD 00 00 00         A 13040    	CALL	__lsub
0048A6 CD 00 00 00         A 13041    	CALL	__lnot
0048AA DD07DC              A 13042    	LD	BC,(IX+%FFFFFFDC)
0048AD DD7EDF              A 13043    	LD	A,(IX+%FFFFFFDF)
0048B0 CD 00 00 00         A 13044    	CALL	__land
0048B4 DD3106              A 13045    	LD	IY,(IX+%6)
0048B7 FD2F11              A 13046    	LD	(IY+%11),HL
0048BA FD7314              A 13047    	LD	(IY+%14),E
                           A 13048    ; 4459					ofs -= fp->fptr;
0048BD DD2709              A 13049    	LD	HL,(IX+%9)
0048C0 DD5E0C              A 13050    	LD	E,(IX+%C)
0048C3 FD0711              A 13051    	LD	BC,(IY+%11)
0048C6 FD7E14              A 13052    	LD	A,(IY+%14)
0048C9 CD 00 00 00         A 13053    	CALL	__lsub
0048CD DD2F09              A 13054    	LD	(IX+%9),HL
0048D0 DD730C              A 13055    	LD	(IX+%C),E
                           A 13056    ; 4460					clst = fp->clust;
0048D3 FD0715              A 13057    	LD	BC,(IY+%15)
0048D6 FD7E18              A 13058    	LD	A,(IY+%18)
0048D9 DD0FFC              A 13059    	LD	(IX+%FFFFFFFC),BC
0048DC DD77FF              A 13060    	LD	(IX+%FFFFFFFF),A
                           A 13061    ; 4461				} else {					
0048DF C3 7C 49 00         A 13062    	JR	L_993
0048E3                     A 13063    L_974:
                           A 13064    ; 4462					clst = fp->obj.sclust;	
0048E3 DD3106              A 13065    	LD	IY,(IX+%6)
0048E6 ED0300              A 13066    	LEA	BC,IY+%0
0048E9 DD0FEB              A 13067    	LD	(IX+%FFFFFFEB),BC
0048EC DD31EB              A 13068    	LD	IY,(IX+%FFFFFFEB)
0048EF FD0707              A 13069    	LD	BC,(IY+%7)
0048F2 FD7E0A              A 13070    	LD	A,(IY+%A)
0048F5 DD0FFC              A 13071    	LD	(IX+%FFFFFFFC),BC
0048F8 DD77FF              A 13072    	LD	(IX+%FFFFFFFF),A
                           A 13073    ; 4463	#if !FF_FS_READONLY
                           A 13074    ; 4464					if (clst == 0) {		
0048FB C5E1                A 13075    	LD	HL,BC
0048FD DD5EFF              A 13076    	LD	E,(IX+%FFFFFFFF)
004900 CD 00 00 00         A 13077    	CALL	__lcmpzero
004904 20 67               A 13078    	JR	NZ,L_972
                           A 13079    ; 4465						clst = create_chain
004906 01000000            A 13080    	LD	BC,0
00490A C5                  A 13081    	PUSH	BC
00490B C5                  A 13082    	PUSH	BC
00490C DD07EB              A 13083    	LD	BC,(IX+%FFFFFFEB)
00490F C5                  A 13084    	PUSH	BC
004910 CD 8A 0C 00         A 13085    	CALL	_create_chain
004914 C1                  A 13086    	POP	BC
004915 C1                  A 13087    	POP	BC
004916 C1                  A 13088    	POP	BC
004917 DD2FFC              A 13089    	LD	(IX+%FFFFFFFC),HL
00491A DD73FF              A 13090    	LD	(IX+%FFFFFFFF),E
                           A 13091    ; 4466						if (clst == 1) ABOR
00491D DD27FC              A 13092    	LD	HL,(IX+%FFFFFFFC)
004920 DD5EFF              A 13093    	LD	E,(IX+%FFFFFFFF)
004923 01010000            A 13094    	LD	BC,1
004927 AF                  A 13095    	XOR	A,A
004928 CD 00 00 00         A 13096    	CALL	__lcmpu
00492C 20 0F               A 13097    	JR	NZ,L_968
00492E DD3106              A 13098    	LD	IY,(IX+%6)
004931 FD361002            A 13099    	LD	(IY+%10),%2
004935 21020000            A 13100    	LD	HL,2
004939 C3 2C 4C 00         A 13101    	JR	L_1008
00493D                     A 13102    L_968:
                           A 13103    ; 4467						if (clst == 0xFFFFF
00493D DD27FC              A 13104    	LD	HL,(IX+%FFFFFFFC)
004940 DD5EFF              A 13105    	LD	E,(IX+%FFFFFFFF)
004943 01FFFFFF            A 13106    	LD	BC,16777215
004947 3EFF                A 13107    	LD	A,%FF
004949 CD 00 00 00         A 13108    	CALL	__lcmpu
00494D 20 0F               A 13109    	JR	NZ,L_970
00494F DD3106              A 13110    	LD	IY,(IX+%6)
004952 FD361001            A 13111    	LD	(IY+%10),%1
004956 21010000            A 13112    	LD	HL,1
00495A C3 2C 4C 00         A 13113    	JR	L_1008
00495E                     A 13114    L_970:
                           A 13115    ; 4468						fp->obj.sclust = cl
00495E DD07FC              A 13116    	LD	BC,(IX+%FFFFFFFC)
004961 DD7EFF              A 13117    	LD	A,(IX+%FFFFFFFF)
004964 DD3106              A 13118    	LD	IY,(IX+%6)
004967 FD0F07              A 13119    	LD	(IY+%7),BC
00496A FD770A              A 13120    	LD	(IY+%A),A
                           A 13121    ; 4469					}
00496D                     A 13122    L_972:
                           A 13123    ; 4470	#endif
                           A 13124    ; 4471					fp->clust = clst;
00496D DD07FC              A 13125    	LD	BC,(IX+%FFFFFFFC)
004970 DD7EFF              A 13126    	LD	A,(IX+%FFFFFFFF)
004973 DD3106              A 13127    	LD	IY,(IX+%6)
004976 FD0F15              A 13128    	LD	(IY+%15),BC
004979 FD7718              A 13129    	LD	(IY+%18),A
                           A 13130    ; 4472				}
00497C                     A 13131    L_993:
                           A 13132    ; 4473				if (clst != 0) {
00497C DD27FC              A 13133    	LD	HL,(IX+%FFFFFFFC)
00497F DD5EFF              A 13134    	LD	E,(IX+%FFFFFFFF)
004982 CD 00 00 00         A 13135    	CALL	__lcmpzero
004986 C2 7F 4A 00         A 13136    	JR	NZ,L_986
00498A C3 16 4B 00         A 13137    	JR	L_996
                           A 13138    ; 4474					while (ofs > bcs) {		
00498E                     A 13139    L_987:
                           A 13140    ; 4475						ofs -= bcs; fp->fpt
00498E DD2709              A 13141    	LD	HL,(IX+%9)
004991 DD5E0C              A 13142    	LD	E,(IX+%C)
004994 DD07F1              A 13143    	LD	BC,(IX+%FFFFFFF1)
004997 DD7EF4              A 13144    	LD	A,(IX+%FFFFFFF4)
00499A CD 00 00 00         A 13145    	CALL	__lsub
00499E DD2F09              A 13146    	LD	(IX+%9),HL
0049A1 DD730C              A 13147    	LD	(IX+%C),E
0049A4 DD3106              A 13148    	LD	IY,(IX+%6)
0049A7 FD2711              A 13149    	LD	HL,(IY+%11)
0049AA FD5E14              A 13150    	LD	E,(IY+%14)
0049AD DD07F1              A 13151    	LD	BC,(IX+%FFFFFFF1)
0049B0 DD7EF4              A 13152    	LD	A,(IX+%FFFFFFF4)
0049B3 CD 00 00 00         A 13153    	CALL	__ladd
0049B7 FD2F11              A 13154    	LD	(IY+%11),HL
0049BA FD7314              A 13155    	LD	(IY+%14),E
                           A 13156    ; 4476	#if !FF_FS_READONLY
                           A 13157    ; 4477						if (fp->flag & FA_W
0049BD FD7E0F              A 13158    	LD	A,(IY+%F)
0049C0 E602                A 13159    	AND	A,%2
0049C2 28 38               A 13160    	JR	Z,L_979
                           A 13161    ; 4478							if (FF_FS_EXFAT
                           A 13162    ; 4479								fp->obj.obj
                           A 13163    ; 4480								fp->flag |=
                           A 13164    ; 4481							}
                           A 13165    ; 4482							clst = create_c
0049C4 DD4EFF              A 13166    	LD	C,(IX+%FFFFFFFF)
0049C7 0600                A 13167    	LD	B,%0
0049C9 C5                  A 13168    	PUSH	BC
0049CA DD07FC              A 13169    	LD	BC,(IX+%FFFFFFFC)
0049CD C5                  A 13170    	PUSH	BC
0049CE DD3106              A 13171    	LD	IY,(IX+%6)
0049D1 ED6600              A 13172    	PEA	IY+%0
0049D4 CD 8A 0C 00         A 13173    	CALL	_create_chain
0049D8 C1                  A 13174    	POP	BC
0049D9 C1                  A 13175    	POP	BC
0049DA C1                  A 13176    	POP	BC
0049DB DD2FFC              A 13177    	LD	(IX+%FFFFFFFC),HL
0049DE DD73FF              A 13178    	LD	(IX+%FFFFFFFF),E
                           A 13179    ; 4483							if (clst == 0) 
0049E1 DD27FC              A 13180    	LD	HL,(IX+%FFFFFFFC)
0049E4 DD5EFF              A 13181    	LD	E,(IX+%FFFFFFFF)
0049E7 CD 00 00 00         A 13182    	CALL	__lcmpzero
0049EB 20 2C               A 13183    	JR	NZ,L_981
                           A 13184    ; 4484								ofs = 0; br
0049ED 01000000            A 13185    	LD	BC,0
0049F1 AF                  A 13186    	XOR	A,A
0049F2 DD0F09              A 13187    	LD	(IX+%9),BC
0049F5 DD770C              A 13188    	LD	(IX+%C),A
0049F8 C3 93 4A 00         A 13189    	JR	L_988
                           A 13190    ; 4485							}
                           A 13191    ; 4486						} else
0049FC                     A 13192    L_979:
                           A 13193    ; 4487	#endif
                           A 13194    ; 4488						{
                           A 13195    ; 4489							clst = get_fat(
0049FC DD4EFF              A 13196    	LD	C,(IX+%FFFFFFFF)
0049FF 0600                A 13197    	LD	B,%0
004A01 C5                  A 13198    	PUSH	BC
004A02 DD07FC              A 13199    	LD	BC,(IX+%FFFFFFFC)
004A05 C5                  A 13200    	PUSH	BC
004A06 DD3106              A 13201    	LD	IY,(IX+%6)
004A09 ED6600              A 13202    	PEA	IY+%0
004A0C CD D1 05 00         A 13203    	CALL	_get_fat
004A10 C1                  A 13204    	POP	BC
004A11 C1                  A 13205    	POP	BC
004A12 C1                  A 13206    	POP	BC
004A13 DD2FFC              A 13207    	LD	(IX+%FFFFFFFC),HL
004A16 DD73FF              A 13208    	LD	(IX+%FFFFFFFF),E
                           A 13209    ; 4490						}
004A19                     A 13210    L_981:
                           A 13211    ; 4491						if (clst == 0xFFFFF
004A19 DD27FC              A 13212    	LD	HL,(IX+%FFFFFFFC)
004A1C DD5EFF              A 13213    	LD	E,(IX+%FFFFFFFF)
004A1F 01FFFFFF            A 13214    	LD	BC,16777215
004A23 3EFF                A 13215    	LD	A,%FF
004A25 CD 00 00 00         A 13216    	CALL	__lcmpu
004A29 20 0F               A 13217    	JR	NZ,L_982
004A2B DD3106              A 13218    	LD	IY,(IX+%6)
004A2E FD361001            A 13219    	LD	(IY+%10),%1
004A32 21010000            A 13220    	LD	HL,1
004A36 C3 2C 4C 00         A 13221    	JR	L_1008
004A3A                     A 13222    L_982:
                           A 13223    ; 4492						if (clst <= 1 || cl
004A3A 21010000            A 13224    	LD	HL,1
004A3E 1E00                A 13225    	LD	E,%0
004A40 DD07FC              A 13226    	LD	BC,(IX+%FFFFFFFC)
004A43 DD7EFF              A 13227    	LD	A,(IX+%FFFFFFFF)
004A46 CD 00 00 00         A 13228    	CALL	__lcmpu
004A4A 30 15               A 13229    	JR	NC,L_984
004A4C DD27FC              A 13230    	LD	HL,(IX+%FFFFFFFC)
004A4F DD5EFF              A 13231    	LD	E,(IX+%FFFFFFFF)
004A52 DD31EE              A 13232    	LD	IY,(IX+%FFFFFFEE)
004A55 FD0716              A 13233    	LD	BC,(IY+%16)
004A58 FD7E19              A 13234    	LD	A,(IY+%19)
004A5B CD 00 00 00         A 13235    	CALL	__lcmpu
004A5F 38 0F               A 13236    	JR	C,L_985
004A61                     A 13237    L_984:
004A61 DD3106              A 13238    	LD	IY,(IX+%6)
004A64 FD361002            A 13239    	LD	(IY+%10),%2
004A68 21020000            A 13240    	LD	HL,2
004A6C C3 2C 4C 00         A 13241    	JR	L_1008
004A70                     A 13242    L_985:
                           A 13243    ; 4493						fp->clust = clst;
004A70 DD07FC              A 13244    	LD	BC,(IX+%FFFFFFFC)
004A73 DD7EFF              A 13245    	LD	A,(IX+%FFFFFFFF)
004A76 DD3106              A 13246    	LD	IY,(IX+%6)
004A79 FD0F15              A 13247    	LD	(IY+%15),BC
004A7C FD7718              A 13248    	LD	(IY+%18),A
                           A 13249    ; 4494					}
004A7F                     A 13250    L_986:
004A7F DD27F1              A 13251    	LD	HL,(IX+%FFFFFFF1)
004A82 DD5EF4              A 13252    	LD	E,(IX+%FFFFFFF4)
004A85 DD0709              A 13253    	LD	BC,(IX+%9)
004A88 DD7E0C              A 13254    	LD	A,(IX+%C)
004A8B CD 00 00 00         A 13255    	CALL	__lcmpu
004A8F DA 8E 49 00         A 13256    	JR	C,L_987
004A93                     A 13257    L_988:
                           A 13258    ; 4495					fp->fptr += ofs;
004A93 DD3106              A 13259    	LD	IY,(IX+%6)
004A96 FD2711              A 13260    	LD	HL,(IY+%11)
004A99 FD5E14              A 13261    	LD	E,(IY+%14)
004A9C DD0709              A 13262    	LD	BC,(IX+%9)
004A9F DD7E0C              A 13263    	LD	A,(IX+%C)
004AA2 CD 00 00 00         A 13264    	CALL	__ladd
004AA6 FD2F11              A 13265    	LD	(IY+%11),HL
004AA9 FD7314              A 13266    	LD	(IY+%14),E
                           A 13267    ; 4496					if (ofs % SS(fs)) {
004AAC DD2709              A 13268    	LD	HL,(IX+%9)
004AAF DD5E0C              A 13269    	LD	E,(IX+%C)
004AB2 01FF0100            A 13270    	LD	BC,511
004AB6 AF                  A 13271    	XOR	A,A
004AB7 CD 00 00 00         A 13272    	CALL	__land
004ABB CD 00 00 00         A 13273    	CALL	__lcmpzero
004ABF 28 55               A 13274    	JR	Z,L_996
                           A 13275    ; 4497						nsect = clst2sect(f
004AC1 DD4EFF              A 13276    	LD	C,(IX+%FFFFFFFF)
004AC4 0600                A 13277    	LD	B,%0
004AC6 C5                  A 13278    	PUSH	BC
004AC7 DD07FC              A 13279    	LD	BC,(IX+%FFFFFFFC)
004ACA C5                  A 13280    	PUSH	BC
004ACB DD07EE              A 13281    	LD	BC,(IX+%FFFFFFEE)
004ACE C5                  A 13282    	PUSH	BC
004ACF CD 6B 05 00         A 13283    	CALL	_clst2sect
004AD3 C1                  A 13284    	POP	BC
004AD4 C1                  A 13285    	POP	BC
004AD5 C1                  A 13286    	POP	BC
004AD6 DD2FF8              A 13287    	LD	(IX+%FFFFFFF8),HL
004AD9 DD73FB              A 13288    	LD	(IX+%FFFFFFFB),E
                           A 13289    ; 4498						if (nsect == 0) ABO
004ADC DD27F8              A 13290    	LD	HL,(IX+%FFFFFFF8)
004ADF DD5EFB              A 13291    	LD	E,(IX+%FFFFFFFB)
004AE2 CD 00 00 00         A 13292    	CALL	__lcmpzero
004AE6 20 0F               A 13293    	JR	NZ,L_990
004AE8 DD3106              A 13294    	LD	IY,(IX+%6)
004AEB FD361002            A 13295    	LD	(IY+%10),%2
004AEF 21020000            A 13296    	LD	HL,2
004AF3 C3 2C 4C 00         A 13297    	JR	L_1008
004AF7                     A 13298    L_990:
                           A 13299    ; 4499						nsect += (DWORD)(of
004AF7 DD0709              A 13300    	LD	BC,(IX+%9)
004AFA DD7E0C              A 13301    	LD	A,(IX+%C)
004AFD 2E09                A 13302    	LD	L,%9
004AFF CD 00 00 00         A 13303    	CALL	__lshru
004B03 5F                  A 13304    	LD	E,A
004B04 C5E1                A 13305    	LD	HL,BC
004B06 DD07F8              A 13306    	LD	BC,(IX+%FFFFFFF8)
004B09 DD7EFB              A 13307    	LD	A,(IX+%FFFFFFFB)
004B0C CD 00 00 00         A 13308    	CALL	__ladd
004B10 DD2FF8              A 13309    	LD	(IX+%FFFFFFF8),HL
004B13 DD73FB              A 13310    	LD	(IX+%FFFFFFFB),E
                           A 13311    ; 4500					}
                           A 13312    ; 4501				}
                           A 13313    ; 4502			}
004B16                     A 13314    L_996:
                           A 13315    ; 4503			if (!FF_FS_READONLY && fp->fptr
004B16 DD3106              A 13316    	LD	IY,(IX+%6)
004B19 ED0300              A 13317    	LEA	BC,IY+%0
004B1C DD0FE8              A 13318    	LD	(IX+%FFFFFFE8),BC
004B1F FD0711              A 13319    	LD	BC,(IY+%11)
004B22 FD7E14              A 13320    	LD	A,(IY+%14)
004B25 DD0FE0              A 13321    	LD	(IX+%FFFFFFE0),BC
004B28 DD77E3              A 13322    	LD	(IX+%FFFFFFE3),A
004B2B DD31E8              A 13323    	LD	IY,(IX+%FFFFFFE8)
004B2E FD270B              A 13324    	LD	HL,(IY+%B)
004B31 FD5E0E              A 13325    	LD	E,(IY+%E)
004B34 DD7EE3              A 13326    	LD	A,(IX+%FFFFFFE3)
004B37 CD 00 00 00         A 13327    	CALL	__lcmpu
004B3B 30 1A               A 13328    	JR	NC,L_1005
                           A 13329    ; 4504				fp->obj.objsize = fp->fptr;
004B3D DD07E0              A 13330    	LD	BC,(IX+%FFFFFFE0)
004B40 DD7EE3              A 13331    	LD	A,(IX+%FFFFFFE3)
004B43 DD31E8              A 13332    	LD	IY,(IX+%FFFFFFE8)
004B46 FD0F0B              A 13333    	LD	(IY+%B),BC
004B49 FD770E              A 13334    	LD	(IY+%E),A
                           A 13335    ; 4505				fp->flag |= FA_MODIFIED;
004B4C DD3106              A 13336    	LD	IY,(IX+%6)
004B4F FD7E0F              A 13337    	LD	A,(IY+%F)
004B52 CBF7                A 13338    	SET	%6,A
004B54 FD770F              A 13339    	LD	(IY+%F),A
                           A 13340    ; 4506			}
004B57                     A 13341    L_1005:
                           A 13342    ; 4507			if (fp->fptr % SS(fs) && nsect 
004B57 DD3106              A 13343    	LD	IY,(IX+%6)
004B5A FD2711              A 13344    	LD	HL,(IY+%11)
004B5D FD5E14              A 13345    	LD	E,(IY+%14)
004B60 01FF0100            A 13346    	LD	BC,511
004B64 AF                  A 13347    	XOR	A,A
004B65 CD 00 00 00         A 13348    	CALL	__land
004B69 CD 00 00 00         A 13349    	CALL	__lcmpzero
004B6D CA 29 4C 00         A 13350    	JR	Z,L_1007
004B71 DD3106              A 13351    	LD	IY,(IX+%6)
004B74 FD0719              A 13352    	LD	BC,(IY+%19)
004B77 FD7E1C              A 13353    	LD	A,(IY+%1C)
004B7A DD0FD8              A 13354    	LD	(IX+%FFFFFFD8),BC
004B7D DD77DB              A 13355    	LD	(IX+%FFFFFFDB),A
004B80 DD27F8              A 13356    	LD	HL,(IX+%FFFFFFF8)
004B83 DD5EFB              A 13357    	LD	E,(IX+%FFFFFFFB)
004B86 DD7EDB              A 13358    	LD	A,(IX+%FFFFFFDB)
004B89 CD 00 00 00         A 13359    	CALL	__lcmpu
004B8D CA 29 4C 00         A 13360    	JR	Z,L_1007
                           A 13361    ; 4508	#if !FF_FS_TINY
                           A 13362    ; 4509	#if !FF_FS_READONLY
                           A 13363    ; 4510				if (fp->flag & FA_DIRTY) {	
004B91 DD3106              A 13364    	LD	IY,(IX+%6)
004B94 FD7E0F              A 13365    	LD	A,(IY+%F)
004B97 E680                A 13366    	AND	A,%80
004B99 28 45               A 13367    	JR	Z,L_1002
                           A 13368    ; 4511					if (disk_write(fs->pdrv
004B9B 01010000            A 13369    	LD	BC,1
004B9F C5                  A 13370    	PUSH	BC
004BA0 DD4EDB              A 13371    	LD	C,(IX+%FFFFFFDB)
004BA3 0600                A 13372    	LD	B,%0
004BA5 C5                  A 13373    	PUSH	BC
004BA6 DD07D8              A 13374    	LD	BC,(IX+%FFFFFFD8)
004BA9 C5                  A 13375    	PUSH	BC
004BAA DD3106              A 13376    	LD	IY,(IX+%6)
004BAD ED6624              A 13377    	PEA	IY+%24
004BB0 DD31EE              A 13378    	LD	IY,(IX+%FFFFFFEE)
004BB3 FD4E01              A 13379    	LD	C,(IY+%1)
004BB6 0600                A 13380    	LD	B,%0
004BB8 C5                  A 13381    	PUSH	BC
004BB9 CD 00 00 00         A 13382    	CALL	_disk_write
004BBD C1                  A 13383    	POP	BC
004BBE C1                  A 13384    	POP	BC
004BBF C1                  A 13385    	POP	BC
004BC0 C1                  A 13386    	POP	BC
004BC1 C1                  A 13387    	POP	BC
004BC2 CD 00 00 00         A 13388    	CALL	__icmpzero
004BC6 28 0D               A 13389    	JR	Z,L_999
004BC8 DD3106              A 13390    	LD	IY,(IX+%6)
004BCB FD361001            A 13391    	LD	(IY+%10),%1
004BCF 21010000            A 13392    	LD	HL,1
004BD3 18 57               A 13393    	JR	L_1008
004BD5                     A 13394    L_999:
                           A 13395    ; 4512					fp->flag &= (BYTE)~FA_D
004BD5 DD3106              A 13396    	LD	IY,(IX+%6)
004BD8 FD7E0F              A 13397    	LD	A,(IY+%F)
004BDB CBBF                A 13398    	RES	%7,A
004BDD FD770F              A 13399    	LD	(IY+%F),A
                           A 13400    ; 4513				}
004BE0                     A 13401    L_1002:
                           A 13402    ; 4514	#endif
                           A 13403    ; 4515				if (disk_read(fs->pdrv, fp-
004BE0 01010000            A 13404    	LD	BC,1
004BE4 C5                  A 13405    	PUSH	BC
004BE5 DD4EFB              A 13406    	LD	C,(IX+%FFFFFFFB)
004BE8 0600                A 13407    	LD	B,%0
004BEA C5                  A 13408    	PUSH	BC
004BEB DD07F8              A 13409    	LD	BC,(IX+%FFFFFFF8)
004BEE C5                  A 13410    	PUSH	BC
004BEF DD3106              A 13411    	LD	IY,(IX+%6)
004BF2 ED6624              A 13412    	PEA	IY+%24
004BF5 DD31EE              A 13413    	LD	IY,(IX+%FFFFFFEE)
004BF8 FD4E01              A 13414    	LD	C,(IY+%1)
004BFB 0600                A 13415    	LD	B,%0
004BFD C5                  A 13416    	PUSH	BC
004BFE CD 00 00 00         A 13417    	CALL	_disk_read
004C02 C1                  A 13418    	POP	BC
004C03 C1                  A 13419    	POP	BC
004C04 C1                  A 13420    	POP	BC
004C05 C1                  A 13421    	POP	BC
004C06 C1                  A 13422    	POP	BC
004C07 CD 00 00 00         A 13423    	CALL	__icmpzero
004C0B 28 0D               A 13424    	JR	Z,L_1003
004C0D DD3106              A 13425    	LD	IY,(IX+%6)
004C10 FD361001            A 13426    	LD	(IY+%10),%1
004C14 21010000            A 13427    	LD	HL,1
004C18 18 12               A 13428    	JR	L_1008
004C1A                     A 13429    L_1003:
                           A 13430    ; 4516	#endif
                           A 13431    ; 4517				fp->sect = nsect;
004C1A DD07F8              A 13432    	LD	BC,(IX+%FFFFFFF8)
004C1D DD7EFB              A 13433    	LD	A,(IX+%FFFFFFFB)
004C20 DD3106              A 13434    	LD	IY,(IX+%6)
004C23 FD0F19              A 13435    	LD	(IY+%19),BC
004C26 FD771C              A 13436    	LD	(IY+%1C),A
                           A 13437    ; 4518			}
                           A 13438    ; 4519		}
004C29                     A 13439    L_1007:
                           A 13440    ; 4520	
                           A 13441    ; 4521		LEAVE_FF(fs, res);
004C29 DD27F5              A 13442    	LD	HL,(IX+%FFFFFFF5)
                           A 13443    ; 4522	}
004C2C                     A 13444    L_1008:
004C2C DDF9                A 13445    	LD	SP,IX
004C2E DDE1                A 13446    	POP	IX
004C30 C9                  A 13447    	RET	
                           A 13448    
                           A 13449    
                           A 13450    ;**************************** _f_lseek ********
                           A 13451    ;Name                         Addr/Register   S
                           A 13452    ;_disk_read                          IMPORT  --
                           A 13453    ;_disk_write                         IMPORT  --
                           A 13454    ;G_84                                 IX-40    
                           A 13455    ;G_80                                 IX-36    
                           A 13456    ;G_83                                 IX-32    
                           A 13457    ;ifptr                                IX-28    
                           A 13458    ;G_82                                 IX-24    
                           A 13459    ;G_81                                 IX-21    
                           A 13460    ;fs                                   IX-18    
                           A 13461    ;bcs                                  IX-15    
                           A 13462    ;res                                  IX-11    
                           A 13463    ;nsect                                 IX-8    
                           A 13464    ;clst                                  IX-4    
                           A 13465    ;ofs                                   IX+9    
                           A 13466    ;fp                                    IX+6    
                           A 13467    
                           A 13468    
                           A 13469    ; Stack Frame Size: 59 (bytes)
                           A 13470    ;       Spill Code: -1 (instruction)
                           A 13471    
                           A 13472    
                           A 13473    ; 4523	
                           A 13474    ; 4524	
                           A 13475    ; 4525	
                           A 13476    ; 4526	#if FF_FS_MINIMIZE <= 1
                           A 13477    ; 4527	/*-------------------------------------
                           A 13478    ; 4528	/* Create a Directory Object           
                           A 13479    ; 4529	/*-------------------------------------
                           A 13480    ; 4530	
                           A 13481    ; 4531	FRESULT f_opendir (
                           A 13482    ; 4532		DIR* dp,			/* Pointer to d
                           A 13483    ; 4533		const TCHAR* path	/* Pointer to t
                           A 13484    ; 4534	)
                           A 13485    ; 4535	{
004C31                     A 13486    _f_opendir:
004C31 21FAFDFF            A 13487    	LD	HL,-518
004C35 CD 00 00 00         A 13488    	CALL	__frameset
                           A 13489    ; 4536		FRESULT res;
                           A 13490    ; 4537		FATFS *fs;
                           A 13491    ; 4538		DEF_NAMBUF
                           A 13492    ; 4539	
                           A 13493    ; 4540	
                           A 13494    ; 4541		if (!dp) return FR_INVALID_OBJECT;
004C39 DD2706              A 13495    	LD	HL,(IX+%6)
004C3C CD 00 00 00         A 13496    	CALL	__icmpzero
004C40 20 08               A 13497    	JR	NZ,L_1010
004C42 21090000            A 13498    	LD	HL,9
004C46 C3 21 4D 00         A 13499    	JR	L_1023
004C4A                     A 13500    L_1010:
                           A 13501    ; 4542	
                           A 13502    ; 4543		/* Get logical drive */
                           A 13503    ; 4544		res = mount_volume(&path, &fs, 0);
004C4A 01000000            A 13504    	LD	BC,0
004C4E C5                  A 13505    	PUSH	BC
004C4F ED65FA              A 13506    	PEA	IX+%FFFFFFFA
004C52 ED6509              A 13507    	PEA	IX+%9
004C55 CD 82 30 00         A 13508    	CALL	_mount_volume
004C59 C1                  A 13509    	POP	BC
004C5A C1                  A 13510    	POP	BC
004C5B C1                  A 13511    	POP	BC
004C5C DD2FFD              A 13512    	LD	(IX+%FFFFFFFD),HL
                           A 13513    ; 4545		if (res == FR_OK) {
004C5F CD 00 00 00         A 13514    	CALL	__icmpzero
004C63 C2 0B 4D 00         A 13515    	JR	NZ,L_1021
                           A 13516    ; 4546			dp->obj.fs = fs;
004C67 DD07FA              A 13517    	LD	BC,(IX+%FFFFFFFA)
004C6A DD3106              A 13518    	LD	IY,(IX+%6)
004C6D FD0F00              A 13519    	LD	(IY+%0),BC
                           A 13520    ; 4547			INIT_NAMBUF(fs);
004C70 DDE5E1              A 13521    	LD	HL,IX
004C73 01FAFDFF            A 13522    	LD	BC,-518
004C77 09                  A 13523    	ADD	HL,BC
004C78 DD31FA              A 13524    	LD	IY,(IX+%FFFFFFFA)
004C7B FD2F0B              A 13525    	LD	(IY+%B),HL
                           A 13526    ; 4548			res = follow_path(dp, path);	
004C7E DD0709              A 13527    	LD	BC,(IX+%9)
004C81 C5                  A 13528    	PUSH	BC
004C82 DD0706              A 13529    	LD	BC,(IX+%6)
004C85 C5                  A 13530    	PUSH	BC
004C86 CD 63 2B 00         A 13531    	CALL	_follow_path
004C8A C1                  A 13532    	POP	BC
004C8B C1                  A 13533    	POP	BC
004C8C DD2FFD              A 13534    	LD	(IX+%FFFFFFFD),HL
                           A 13535    ; 4549			if (res == FR_OK) {				
004C8F CD 00 00 00         A 13536    	CALL	__icmpzero
004C93 20 63               A 13537    	JR	NZ,L_1017
                           A 13538    ; 4550				if (!(dp->fn[NSFLAG] & NS_N
004C95 DD3106              A 13539    	LD	IY,(IX+%6)
004C98 FD7E29              A 13540    	LD	A,(IY+%29)
004C9B E680                A 13541    	AND	A,%80
004C9D 20 2D               A 13542    	JR	NZ,L_1015
                           A 13543    ; 4551					if (dp->obj.attr & AM_D
004C9F DD3106              A 13544    	LD	IY,(IX+%6)
004CA2 FD7E05              A 13545    	LD	A,(IY+%5)
004CA5 E610                A 13546    	AND	A,%10
004CA7 28 1C               A 13547    	JR	Z,L_1012
                           A 13548    ; 4552	#if FF_FS_EXFAT
                           A 13549    ; 4553						if (fs->fs_type == 
                           A 13550    ; 4554							dp->obj.c_scl =
                           A 13551    ; 4555							dp->obj.c_size 
                           A 13552    ; 4556							dp->obj.c_ofs =
                           A 13553    ; 4557							init_alloc_info
                           A 13554    ; 4558						} else
                           A 13555    ; 4559	#endif
                           A 13556    ; 4560						{
                           A 13557    ; 4561							dp->obj.sclust 
004CA9 DD3106              A 13558    	LD	IY,(IX+%6)
004CAC FD071B              A 13559    	LD	BC,(IY+%1B)
004CAF C5                  A 13560    	PUSH	BC
004CB0 DD07FA              A 13561    	LD	BC,(IX+%FFFFFFFA)
004CB3 C5                  A 13562    	PUSH	BC
004CB4 CD 64 16 00         A 13563    	CALL	_ld_clust
004CB8 C1                  A 13564    	POP	BC
004CB9 C1                  A 13565    	POP	BC
004CBA DD3106              A 13566    	LD	IY,(IX+%6)
004CBD FD2F07              A 13567    	LD	(IY+%7),HL
004CC0 FD730A              A 13568    	LD	(IY+%A),E
                           A 13569    ; 4562						}
                           A 13570    ; 4563					} else {				
004CC3 18 07               A 13571    	JR	L_1015
004CC5                     A 13572    L_1012:
                           A 13573    ; 4564						res = FR_NO_PATH;
004CC5 01050000            A 13574    	LD	BC,5
004CC9 DD0FFD              A 13575    	LD	(IX+%FFFFFFFD),BC
                           A 13576    ; 4565					}
                           A 13577    ; 4566				}
004CCC                     A 13578    L_1015:
                           A 13579    ; 4567				if (res == FR_OK) {
004CCC DD27FD              A 13580    	LD	HL,(IX+%FFFFFFFD)
004CCF CD 00 00 00         A 13581    	CALL	__icmpzero
004CD3 20 23               A 13582    	JR	NZ,L_1017
                           A 13583    ; 4568					dp->obj.id = fs->id;
004CD5 DD31FA              A 13584    	LD	IY,(IX+%FFFFFFFA)
004CD8 FD0705              A 13585    	LD	BC,(IY+%5)
004CDB DD3106              A 13586    	LD	IY,(IX+%6)
004CDE FD7103              A 13587    	LD	(IY+%3),C
004CE1 FD7004              A 13588    	LD	(IY+%4),B
                           A 13589    ; 4569					res = dir_sdi(dp, 0);	
004CE4 01000000            A 13590    	LD	BC,0
004CE8 C5                  A 13591    	PUSH	BC
004CE9 C5                  A 13592    	PUSH	BC
004CEA DD0706              A 13593    	LD	BC,(IX+%6)
004CED C5                  A 13594    	PUSH	BC
004CEE CD 18 11 00         A 13595    	CALL	_dir_sdi
004CF2 C1                  A 13596    	POP	BC
004CF3 C1                  A 13597    	POP	BC
004CF4 C1                  A 13598    	POP	BC
004CF5 DD2FFD              A 13599    	LD	(IX+%FFFFFFFD),HL
                           A 13600    ; 4570	#if FF_FS_LOCK != 0
                           A 13601    ; 4571					if (res == FR_OK) {
                           A 13602    ; 4572						if (dp->obj.sclust 
                           A 13603    ; 4573							dp->obj.lockid 
                           A 13604    ; 4574							if (!dp->obj.lo
                           A 13605    ; 4575						} else {
                           A 13606    ; 4576							dp->obj.lockid 
                           A 13607    ; 4577						}
                           A 13608    ; 4578					}
                           A 13609    ; 4579	#endif
                           A 13610    ; 4580				}
                           A 13611    ; 4581			}
004CF8                     A 13612    L_1017:
                           A 13613    ; 4582			FREE_NAMBUF();
                           A 13614    ; 4583			if (res == FR_NO_FILE) res = FR
004CF8 01040000            A 13615    	LD	BC,4
004CFC DD27FD              A 13616    	LD	HL,(IX+%FFFFFFFD)
004CFF B7                  A 13617    	OR	A,A
004D00 ED42                A 13618    	SBC	HL,BC
004D02 20 07               A 13619    	JR	NZ,L_1021
004D04 01050000            A 13620    	LD	BC,5
004D08 DD0FFD              A 13621    	LD	(IX+%FFFFFFFD),BC
                           A 13622    ; 4584		}
004D0B                     A 13623    L_1021:
                           A 13624    ; 4585		if (res != FR_OK) dp->obj.fs = 0;	
004D0B DD27FD              A 13625    	LD	HL,(IX+%FFFFFFFD)
004D0E CD 00 00 00         A 13626    	CALL	__icmpzero
004D12 28 0A               A 13627    	JR	Z,L_1022
004D14 01000000            A 13628    	LD	BC,0
004D18 DD3106              A 13629    	LD	IY,(IX+%6)
004D1B FD0F00              A 13630    	LD	(IY+%0),BC
004D1E                     A 13631    L_1022:
                           A 13632    ; 4586	
                           A 13633    ; 4587		LEAVE_FF(fs, res);
004D1E DD27FD              A 13634    	LD	HL,(IX+%FFFFFFFD)
                           A 13635    ; 4588	}
004D21                     A 13636    L_1023:
004D21 DDF9                A 13637    	LD	SP,IX
004D23 DDE1                A 13638    	POP	IX
004D25 C9                  A 13639    	RET	
                           A 13640    
                           A 13641    
                           A 13642    ;**************************** _f_opendir ******
                           A 13643    ;Name                         Addr/Register   S
                           A 13644    ;lbuf                                IX-518    
                           A 13645    ;fs                                    IX-6    
                           A 13646    ;res                                   IX-3    
                           A 13647    ;path                                  IX+9    
                           A 13648    ;dp                                    IX+6    
                           A 13649    
                           A 13650    
                           A 13651    ; Stack Frame Size: 530 (bytes)
                           A 13652    ;       Spill Code: -1 (instruction)
                           A 13653    
                           A 13654    
                           A 13655    ; 4589	
                           A 13656    ; 4590	
                           A 13657    ; 4591	
                           A 13658    ; 4592	
                           A 13659    ; 4593	/*-------------------------------------
                           A 13660    ; 4594	/* Close Directory                     
                           A 13661    ; 4595	/*-------------------------------------
                           A 13662    ; 4596	
                           A 13663    ; 4597	FRESULT f_closedir (
                           A 13664    ; 4598		DIR *dp		/* Pointer to the direc
                           A 13665    ; 4599	)
                           A 13666    ; 4600	{
004D26                     A 13667    _f_closedir:
004D26 21FAFFFF            A 13668    	LD	HL,-6
004D2A CD 00 00 00         A 13669    	CALL	__frameset
                           A 13670    ; 4601		FRESULT res;
                           A 13671    ; 4602		FATFS *fs;
                           A 13672    ; 4603	
                           A 13673    ; 4604	
                           A 13674    ; 4605		res = validate(&dp->obj, &fs);	/* 
004D2E ED65FA              A 13675    	PEA	IX+%FFFFFFFA
004D31 DD3106              A 13676    	LD	IY,(IX+%6)
004D34 ED6600              A 13677    	PEA	IY+%0
004D37 CD F0 36 00         A 13678    	CALL	_validate
004D3B C1                  A 13679    	POP	BC
004D3C C1                  A 13680    	POP	BC
004D3D DD2FFD              A 13681    	LD	(IX+%FFFFFFFD),HL
                           A 13682    ; 4606		if (res == FR_OK) {
004D40 CD 00 00 00         A 13683    	CALL	__icmpzero
004D44 20 0A               A 13684    	JR	NZ,L_1025
                           A 13685    ; 4607	#if FF_FS_LOCK != 0
                           A 13686    ; 4608			if (dp->obj.lockid) res = dec_l
                           A 13687    ; 4609			if (res == FR_OK) dp->obj.fs = 
                           A 13688    ; 4610	#else
                           A 13689    ; 4611			dp->obj.fs = 0;	/* Invalidate d
004D46 01000000            A 13690    	LD	BC,0
004D4A DD3106              A 13691    	LD	IY,(IX+%6)
004D4D FD0F00              A 13692    	LD	(IY+%0),BC
                           A 13693    ; 4612	#endif
                           A 13694    ; 4613	#if FF_FS_REENTRANT
                           A 13695    ; 4614			unlock_fs(fs, FR_OK);		/* 
                           A 13696    ; 4615	#endif
                           A 13697    ; 4616		}
004D50                     A 13698    L_1025:
                           A 13699    ; 4617		return res;
004D50 DD27FD              A 13700    	LD	HL,(IX+%FFFFFFFD)
                           A 13701    ; 4618	}
004D53 DDF9                A 13702    	LD	SP,IX
004D55 DDE1                A 13703    	POP	IX
004D57 C9                  A 13704    	RET	
                           A 13705    
                           A 13706    
                           A 13707    ;**************************** _f_closedir *****
                           A 13708    ;Name                         Addr/Register   S
                           A 13709    ;fs                                    IX-6    
                           A 13710    ;res                                   IX-3    
                           A 13711    ;dp                                    IX+6    
                           A 13712    
                           A 13713    
                           A 13714    ; Stack Frame Size: 15 (bytes)
                           A 13715    ;       Spill Code: -1 (instruction)
                           A 13716    
                           A 13717    
                           A 13718    ; 4619	
                           A 13719    ; 4620	
                           A 13720    ; 4621	
                           A 13721    ; 4622	
                           A 13722    ; 4623	/*-------------------------------------
                           A 13723    ; 4624	/* Read Directory Entries in Sequence  
                           A 13724    ; 4625	/*-------------------------------------
                           A 13725    ; 4626	
                           A 13726    ; 4627	FRESULT f_readdir (
                           A 13727    ; 4628		DIR* dp,			/* Pointer to t
                           A 13728    ; 4629		FILINFO* fno		/* Pointer to f
                           A 13729    ; 4630	)
                           A 13730    ; 4631	{
004D58                     A 13731    _f_readdir:
004D58 21FAFDFF            A 13732    	LD	HL,-518
004D5C CD 00 00 00         A 13733    	CALL	__frameset
                           A 13734    ; 4632		FRESULT res;
                           A 13735    ; 4633		FATFS *fs;
                           A 13736    ; 4634		DEF_NAMBUF
                           A 13737    ; 4635	
                           A 13738    ; 4636	
                           A 13739    ; 4637		res = validate(&dp->obj, &fs);	/* 
004D60 ED65FA              A 13740    	PEA	IX+%FFFFFFFA
004D63 DD3106              A 13741    	LD	IY,(IX+%6)
004D66 ED6600              A 13742    	PEA	IY+%0
004D69 CD F0 36 00         A 13743    	CALL	_validate
004D6D C1                  A 13744    	POP	BC
004D6E C1                  A 13745    	POP	BC
004D6F DD2FFD              A 13746    	LD	(IX+%FFFFFFFD),HL
                           A 13747    ; 4638		if (res == FR_OK) {
004D72 CD 00 00 00         A 13748    	CALL	__icmpzero
004D76 C2 08 4E 00         A 13749    	JR	NZ,L_1035
                           A 13750    ; 4639			if (!fno) {
004D7A DD2709              A 13751    	LD	HL,(IX+%9)
004D7D CD 00 00 00         A 13752    	CALL	__icmpzero
004D81 20 16               A 13753    	JR	NZ,L_1033
                           A 13754    ; 4640				res = dir_sdi(dp, 0);		
004D83 01000000            A 13755    	LD	BC,0
004D87 C5                  A 13756    	PUSH	BC
004D88 C5                  A 13757    	PUSH	BC
004D89 DD0706              A 13758    	LD	BC,(IX+%6)
004D8C C5                  A 13759    	PUSH	BC
004D8D CD 18 11 00         A 13760    	CALL	_dir_sdi
004D91 C1                  A 13761    	POP	BC
004D92 C1                  A 13762    	POP	BC
004D93 C1                  A 13763    	POP	BC
004D94 DD2FFD              A 13764    	LD	(IX+%FFFFFFFD),HL
                           A 13765    ; 4641			} else {
004D97 18 6F               A 13766    	JR	L_1035
004D99                     A 13767    L_1033:
                           A 13768    ; 4642				INIT_NAMBUF(fs);
004D99 DDE5E1              A 13769    	LD	HL,IX
004D9C 01FAFDFF            A 13770    	LD	BC,-518
004DA0 09                  A 13771    	ADD	HL,BC
004DA1 DD31FA              A 13772    	LD	IY,(IX+%FFFFFFFA)
004DA4 FD2F0B              A 13773    	LD	(IY+%B),HL
                           A 13774    ; 4643				res = DIR_READ_FILE(dp);	
004DA7 01000000            A 13775    	LD	BC,0
004DAB C5                  A 13776    	PUSH	BC
004DAC DD0706              A 13777    	LD	BC,(IX+%6)
004DAF C5                  A 13778    	PUSH	BC
004DB0 CD 5B 1C 00         A 13779    	CALL	_dir_read
004DB4 C1                  A 13780    	POP	BC
004DB5 C1                  A 13781    	POP	BC
004DB6 DD2FFD              A 13782    	LD	(IX+%FFFFFFFD),HL
                           A 13783    ; 4644				if (res == FR_NO_FILE) res 
004DB9 01040000            A 13784    	LD	BC,4
004DBD DD27FD              A 13785    	LD	HL,(IX+%FFFFFFFD)
004DC0 B7                  A 13786    	OR	A,A
004DC1 ED42                A 13787    	SBC	HL,BC
004DC3 20 07               A 13788    	JR	NZ,L_1030
004DC5 01000000            A 13789    	LD	BC,0
004DC9 DD0FFD              A 13790    	LD	(IX+%FFFFFFFD),BC
004DCC                     A 13791    L_1030:
                           A 13792    ; 4645				if (res == FR_OK) {			
004DCC DD27FD              A 13793    	LD	HL,(IX+%FFFFFFFD)
004DCF CD 00 00 00         A 13794    	CALL	__icmpzero
004DD3 20 33               A 13795    	JR	NZ,L_1035
                           A 13796    ; 4646					get_fileinfo(dp, fno);	
004DD5 DD0709              A 13797    	LD	BC,(IX+%9)
004DD8 C5                  A 13798    	PUSH	BC
004DD9 DD0706              A 13799    	LD	BC,(IX+%6)
004DDC C5                  A 13800    	PUSH	BC
004DDD CD 21 23 00         A 13801    	CALL	_get_fileinfo
004DE1 C1                  A 13802    	POP	BC
004DE2 C1                  A 13803    	POP	BC
                           A 13804    ; 4647					res = dir_next(dp, 0);	
004DE3 01000000            A 13805    	LD	BC,0
004DE7 C5                  A 13806    	PUSH	BC
004DE8 DD0706              A 13807    	LD	BC,(IX+%6)
004DEB C5                  A 13808    	PUSH	BC
004DEC CD 19 13 00         A 13809    	CALL	_dir_next
004DF0 C1                  A 13810    	POP	BC
004DF1 C1                  A 13811    	POP	BC
004DF2 DD2FFD              A 13812    	LD	(IX+%FFFFFFFD),HL
                           A 13813    ; 4648					if (res == FR_NO_FILE) 
004DF5 01040000            A 13814    	LD	BC,4
004DF9 DD27FD              A 13815    	LD	HL,(IX+%FFFFFFFD)
004DFC B7                  A 13816    	OR	A,A
004DFD ED42                A 13817    	SBC	HL,BC
004DFF 20 07               A 13818    	JR	NZ,L_1035
004E01 01000000            A 13819    	LD	BC,0
004E05 DD0FFD              A 13820    	LD	(IX+%FFFFFFFD),BC
                           A 13821    ; 4649				}
                           A 13822    ; 4650				FREE_NAMBUF();
                           A 13823    ; 4651			}
                           A 13824    ; 4652		}
004E08                     A 13825    L_1035:
                           A 13826    ; 4653		LEAVE_FF(fs, res);
004E08 DD27FD              A 13827    	LD	HL,(IX+%FFFFFFFD)
                           A 13828    ; 4654	}
004E0B DDF9                A 13829    	LD	SP,IX
004E0D DDE1                A 13830    	POP	IX
004E0F C9                  A 13831    	RET	
                           A 13832    
                           A 13833    
                           A 13834    ;**************************** _f_readdir ******
                           A 13835    ;Name                         Addr/Register   S
                           A 13836    ;lbuf                                IX-518    
                           A 13837    ;fs                                    IX-6    
                           A 13838    ;res                                   IX-3    
                           A 13839    ;fno                                   IX+9    
                           A 13840    ;dp                                    IX+6    
                           A 13841    
                           A 13842    
                           A 13843    ; Stack Frame Size: 530 (bytes)
                           A 13844    ;       Spill Code: -1 (instruction)
                           A 13845    
                           A 13846    
                           A 13847    ; 4655	
                           A 13848    ; 4656	
                           A 13849    ; 4657	
                           A 13850    ; 4658	#if FF_USE_FIND
                           A 13851    ; 4659	/*-------------------------------------
                           A 13852    ; 4660	/* Find Next File                      
                           A 13853    ; 4661	/*-------------------------------------
                           A 13854    ; 4662	
                           A 13855    ; 4663	FRESULT f_findnext (
                           A 13856    ; 4664		DIR* dp,		/* Pointer to the o
                           A 13857    ; 4665		FILINFO* fno	/* Pointer to the f
                           A 13858    ; 4666	)
                           A 13859    ; 4667	{
                           A 13860    ; 4668		FRESULT res;
                           A 13861    ; 4669	
                           A 13862    ; 4670	
                           A 13863    ; 4671		for (;;) {
                           A 13864    ; 4672			res = f_readdir(dp, fno);		
                           A 13865    ; 4673			if (res != FR_OK || !fno || !fn
                           A 13866    ; 4674			if (pattern_match(dp->pat, fno-
                           A 13867    ; 4675	#if FF_USE_LFN && FF_USE_FIND == 2
                           A 13868    ; 4676			if (pattern_match(dp->pat, fno-
                           A 13869    ; 4677	#endif
                           A 13870    ; 4678		}
                           A 13871    ; 4679		return res;
                           A 13872    ; 4680	}
                           A 13873    ; 4681	
                           A 13874    ; 4682	
                           A 13875    ; 4683	
                           A 13876    ; 4684	/*-------------------------------------
                           A 13877    ; 4685	/* Find First File                     
                           A 13878    ; 4686	/*-------------------------------------
                           A 13879    ; 4687	
                           A 13880    ; 4688	FRESULT f_findfirst (
                           A 13881    ; 4689		DIR* dp,				/* Pointer 
                           A 13882    ; 4690		FILINFO* fno,			/* Pointer 
                           A 13883    ; 4691		const TCHAR* path,		/* Pointer 
                           A 13884    ; 4692		const TCHAR* pattern	/* Pointer 
                           A 13885    ; 4693	)
                           A 13886    ; 4694	{
                           A 13887    ; 4695		FRESULT res;
                           A 13888    ; 4696	
                           A 13889    ; 4697	
                           A 13890    ; 4698		dp->pat = pattern;		/* Save poi
                           A 13891    ; 4699		res = f_opendir(dp, path);		/* 
                           A 13892    ; 4700		if (res == FR_OK) {
                           A 13893    ; 4701			res = f_findnext(dp, fno);	/* 
                           A 13894    ; 4702		}
                           A 13895    ; 4703		return res;
                           A 13896    ; 4704	}
                           A 13897    ; 4705	
                           A 13898    ; 4706	#endif	/* FF_USE_FIND */
                           A 13899    ; 4707	
                           A 13900    ; 4708	
                           A 13901    ; 4709	
                           A 13902    ; 4710	#if FF_FS_MINIMIZE == 0
                           A 13903    ; 4711	/*-------------------------------------
                           A 13904    ; 4712	/* Get File Status                     
                           A 13905    ; 4713	/*-------------------------------------
                           A 13906    ; 4714	
                           A 13907    ; 4715	FRESULT f_stat (
                           A 13908    ; 4716		const TCHAR* path,	/* Pointer to t
                           A 13909    ; 4717		FILINFO* fno		/* Pointer to f
                           A 13910    ; 4718	)
                           A 13911    ; 4719	{
004E10                     A 13912    _f_stat:
004E10 21CCFDFF            A 13913    	LD	HL,-564
004E14 CD 00 00 00         A 13914    	CALL	__frameset
                           A 13915    ; 4720		FRESULT res;
                           A 13916    ; 4721		DIR dj;
                           A 13917    ; 4722		DEF_NAMBUF
                           A 13918    ; 4723	
                           A 13919    ; 4724	
                           A 13920    ; 4725		/* Get logical drive */
                           A 13921    ; 4726		res = mount_volume(&path, &dj.obj.f
004E18 ED02CC              A 13922    	LEA	BC,IX+%FFFFFFCC
004E1B DD0FFA              A 13923    	LD	(IX+%FFFFFFFA),BC
004E1E 01000000            A 13924    	LD	BC,0
004E22 C5                  A 13925    	PUSH	BC
004E23 ED65CC              A 13926    	PEA	IX+%FFFFFFCC
004E26 ED6506              A 13927    	PEA	IX+%6
004E29 CD 82 30 00         A 13928    	CALL	_mount_volume
004E2D C1                  A 13929    	POP	BC
004E2E C1                  A 13930    	POP	BC
004E2F C1                  A 13931    	POP	BC
004E30 DD2FFD              A 13932    	LD	(IX+%FFFFFFFD),HL
                           A 13933    ; 4727		if (res == FR_OK) {
004E33 CD 00 00 00         A 13934    	CALL	__icmpzero
004E37 20 50               A 13935    	JR	NZ,L_1043
                           A 13936    ; 4728			INIT_NAMBUF(dj.obj.fs);
004E39 DD31FA              A 13937    	LD	IY,(IX+%FFFFFFFA)
004E3C FD3700              A 13938    	LD	IY,(IY+%0)
004E3F DDE5E1              A 13939    	LD	HL,IX
004E42 01CCFDFF            A 13940    	LD	BC,-564
004E46 09                  A 13941    	ADD	HL,BC
004E47 FD2F0B              A 13942    	LD	(IY+%B),HL
                           A 13943    ; 4729			res = follow_path(&dj, path);	
004E4A DD0706              A 13944    	LD	BC,(IX+%6)
004E4D C5                  A 13945    	PUSH	BC
004E4E ED65CC              A 13946    	PEA	IX+%FFFFFFCC
004E51 CD 63 2B 00         A 13947    	CALL	_follow_path
004E55 C1                  A 13948    	POP	BC
004E56 C1                  A 13949    	POP	BC
004E57 DD2FFD              A 13950    	LD	(IX+%FFFFFFFD),HL
                           A 13951    ; 4730			if (res == FR_OK) {				
004E5A CD 00 00 00         A 13952    	CALL	__icmpzero
004E5E 20 29               A 13953    	JR	NZ,L_1043
                           A 13954    ; 4731				if (dj.fn[NSFLAG] & NS_NONA
004E60 ED55EA              A 13955    	LEA	IY,IX+%FFFFFFEA
004E63 FD7E0B              A 13956    	LD	A,(IY+%B)
004E66 E680                A 13957    	AND	A,%80
004E68 28 09               A 13958    	JR	Z,L_1039
                           A 13959    ; 4732					res = FR_INVALID_NAME;
004E6A 01060000            A 13960    	LD	BC,6
004E6E DD0FFD              A 13961    	LD	(IX+%FFFFFFFD),BC
                           A 13962    ; 4733				} else {					
004E71 18 16               A 13963    	JR	L_1043
004E73                     A 13964    L_1039:
                           A 13965    ; 4734					if (fno) get_fileinfo(&
004E73 DD2709              A 13966    	LD	HL,(IX+%9)
004E76 CD 00 00 00         A 13967    	CALL	__icmpzero
004E7A 28 0D               A 13968    	JR	Z,L_1043
004E7C DD0709              A 13969    	LD	BC,(IX+%9)
004E7F C5                  A 13970    	PUSH	BC
004E80 ED65CC              A 13971    	PEA	IX+%FFFFFFCC
004E83 CD 21 23 00         A 13972    	CALL	_get_fileinfo
004E87 C1                  A 13973    	POP	BC
004E88 C1                  A 13974    	POP	BC
                           A 13975    ; 4735				}
                           A 13976    ; 4736			}
                           A 13977    ; 4737			FREE_NAMBUF();
                           A 13978    ; 4738		}
004E89                     A 13979    L_1043:
                           A 13980    ; 4739	
                           A 13981    ; 4740		LEAVE_FF(dj.obj.fs, res);
004E89 DD27FD              A 13982    	LD	HL,(IX+%FFFFFFFD)
                           A 13983    ; 4741	}
004E8C DDF9                A 13984    	LD	SP,IX
004E8E DDE1                A 13985    	POP	IX
004E90 C9                  A 13986    	RET	
                           A 13987    
                           A 13988    
                           A 13989    ;**************************** _f_stat *********
                           A 13990    ;Name                         Addr/Register   S
                           A 13991    ;lbuf                                IX-564    
                           A 13992    ;dj                                   IX-52    
                           A 13993    ;G_86                                  IX-6    
                           A 13994    ;res                                   IX-3    
                           A 13995    ;fno                                   IX+9    
                           A 13996    ;path                                  IX+6    
                           A 13997    
                           A 13998    
                           A 13999    ; Stack Frame Size: 576 (bytes)
                           A 14000    ;       Spill Code: -1 (instruction)
                           A 14001    
                           A 14002    
                           A 14003    ; 4742	
                           A 14004    ; 4743	
                           A 14005    ; 4744	
                           A 14006    ; 4745	#if !FF_FS_READONLY
                           A 14007    ; 4746	/*-------------------------------------
                           A 14008    ; 4747	/* Get Number of Free Clusters         
                           A 14009    ; 4748	/*-------------------------------------
                           A 14010    ; 4749	
                           A 14011    ; 4750	FRESULT f_getfree (
                           A 14012    ; 4751		const TCHAR* path,	/* Logical driv
                           A 14013    ; 4752		DWORD* nclst,		/* Pointer to a
                           A 14014    ; 4753		FATFS** fatfs		/* Pointer to r
                           A 14015    ; 4754	)
                           A 14016    ; 4755	{
004E91                     A 14017    _f_getfree:
004E91 21D2FFFF            A 14018    	LD	HL,-46
004E95 CD 00 00 00         A 14019    	CALL	__frameset
                           A 14020    ; 4756		FRESULT res;
                           A 14021    ; 4757		FATFS *fs;
                           A 14022    ; 4758		DWORD nfree, clst, stat;
                           A 14023    ; 4759		LBA_t sect;
                           A 14024    ; 4760		UINT i;
                           A 14025    ; 4761		FFOBJID obj;
                           A 14026    ; 4762	
                           A 14027    ; 4763	
                           A 14028    ; 4764		/* Get logical drive */
                           A 14029    ; 4765		res = mount_volume(&path, &fs, 0);
004E99 01000000            A 14030    	LD	BC,0
004E9D C5                  A 14031    	PUSH	BC
004E9E ED65FD              A 14032    	PEA	IX+%FFFFFFFD
004EA1 ED6506              A 14033    	PEA	IX+%6
004EA4 CD 82 30 00         A 14034    	CALL	_mount_volume
004EA8 C1                  A 14035    	POP	BC
004EA9 C1                  A 14036    	POP	BC
004EAA C1                  A 14037    	POP	BC
004EAB DD2FEF              A 14038    	LD	(IX+%FFFFFFEF),HL
                           A 14039    ; 4766		if (res == FR_OK) {
004EAE CD 00 00 00         A 14040    	CALL	__icmpzero
004EB2 C2 F3 50 00         A 14041    	JR	NZ,L_1075
                           A 14042    ; 4767			*fatfs = fs;				/* 
004EB6 DD270C              A 14043    	LD	HL,(IX+%C)
004EB9 DD07FD              A 14044    	LD	BC,(IX+%FFFFFFFD)
004EBC ED0F                A 14045    	LD	(HL),BC
                           A 14046    ; 4768			/* If free_clst is valid, retur
                           A 14047    ; 4769			if (fs->free_clst <= fs->n_fate
004EBE DD31FD              A 14048    	LD	IY,(IX+%FFFFFFFD)
004EC1 FD2716              A 14049    	LD	HL,(IY+%16)
004EC4 FD5E19              A 14050    	LD	E,(IY+%19)
004EC7 01020000            A 14051    	LD	BC,2
004ECB AF                  A 14052    	XOR	A,A
004ECC CD 00 00 00         A 14053    	CALL	__lsub
004ED0 FD0712              A 14054    	LD	BC,(IY+%12)
004ED3 FD7E15              A 14055    	LD	A,(IY+%15)
004ED6 CD 00 00 00         A 14056    	CALL	__lcmpu
004EDA 38 16               A 14057    	JR	C,L_1073
                           A 14058    ; 4770				*nclst = fs->free_clst;
004EDC DD2709              A 14059    	LD	HL,(IX+%9)
004EDF DD31FD              A 14060    	LD	IY,(IX+%FFFFFFFD)
004EE2 FD0712              A 14061    	LD	BC,(IY+%12)
004EE5 FD7E15              A 14062    	LD	A,(IY+%15)
004EE8 ED0F                A 14063    	LD	(HL),BC
004EEA 23                  A 14064    	INC	HL
004EEB 23                  A 14065    	INC	HL
004EEC 23                  A 14066    	INC	HL
004EED 77                  A 14067    	LD	(HL),A
                           A 14068    ; 4771			} else {
004EEE C3 F3 50 00         A 14069    	JR	L_1075
004EF2                     A 14070    L_1073:
                           A 14071    ; 4772				/* Scan FAT to obtain numbe
                           A 14072    ; 4773				nfree = 0;
004EF2 01000000            A 14073    	LD	BC,0
004EF6 AF                  A 14074    	XOR	A,A
004EF7 DD0FF9              A 14075    	LD	(IX+%FFFFFFF9),BC
004EFA DD77FC              A 14076    	LD	(IX+%FFFFFFFC),A
                           A 14077    ; 4774				if (fs->fs_type == FS_FAT12
004EFD DD31FD              A 14078    	LD	IY,(IX+%FFFFFFFD)
004F00 FD7E00              A 14079    	LD	A,(IY+%0)
004F03 FE01                A 14080    	CP	A,%1
004F05 C2 B8 4F 00         A 14081    	JR	NZ,L_1069
                           A 14082    ; 4775					clst = 2; obj.fs = fs;
004F09 01020000            A 14083    	LD	BC,2
004F0D AF                  A 14084    	XOR	A,A
004F0E DD0FF2              A 14085    	LD	(IX+%FFFFFFF2),BC
004F11 DD77F5              A 14086    	LD	(IX+%FFFFFFF5),A
004F14 DD07FD              A 14087    	LD	BC,(IX+%FFFFFFFD)
004F17 DD0FD8              A 14088    	LD	(IX+%FFFFFFD8),BC
                           A 14089    ; 4776					do {
004F1A                     A 14090    L_1051:
                           A 14091    ; 4777						stat = get_fat(&obj
004F1A DD4EF5              A 14092    	LD	C,(IX+%FFFFFFF5)
004F1D 0600                A 14093    	LD	B,%0
004F1F C5                  A 14094    	PUSH	BC
004F20 DD07F2              A 14095    	LD	BC,(IX+%FFFFFFF2)
004F23 C5                  A 14096    	PUSH	BC
004F24 ED65D8              A 14097    	PEA	IX+%FFFFFFD8
004F27 CD D1 05 00         A 14098    	CALL	_get_fat
004F2B C1                  A 14099    	POP	BC
004F2C C1                  A 14100    	POP	BC
004F2D C1                  A 14101    	POP	BC
004F2E DD2FE7              A 14102    	LD	(IX+%FFFFFFE7),HL
004F31 DD73EA              A 14103    	LD	(IX+%FFFFFFEA),E
                           A 14104    ; 4778						if (stat == 0xFFFFF
004F34 DD27E7              A 14105    	LD	HL,(IX+%FFFFFFE7)
004F37 DD5EEA              A 14106    	LD	E,(IX+%FFFFFFEA)
004F3A 01FFFFFF            A 14107    	LD	BC,16777215
004F3E 3EFF                A 14108    	LD	A,%FF
004F40 CD 00 00 00         A 14109    	CALL	__lcmpu
004F44 20 0B               A 14110    	JR	NZ,L_1047
004F46 01010000            A 14111    	LD	BC,1
004F4A DD0FEF              A 14112    	LD	(IX+%FFFFFFEF),BC
004F4D C3 C4 50 00         A 14113    	JR	L_1071
004F51                     A 14114    L_1047:
                           A 14115    ; 4779						if (stat == 1) { re
004F51 DD27E7              A 14116    	LD	HL,(IX+%FFFFFFE7)
004F54 DD5EEA              A 14117    	LD	E,(IX+%FFFFFFEA)
004F57 01010000            A 14118    	LD	BC,1
004F5B AF                  A 14119    	XOR	A,A
004F5C CD 00 00 00         A 14120    	CALL	__lcmpu
004F60 20 0B               A 14121    	JR	NZ,L_1050
004F62 01020000            A 14122    	LD	BC,2
004F66 DD0FEF              A 14123    	LD	(IX+%FFFFFFEF),BC
004F69 C3 C4 50 00         A 14124    	JR	L_1071
004F6D                     A 14125    L_1050:
                           A 14126    ; 4780						if (stat == 0) nfre
004F6D DD27E7              A 14127    	LD	HL,(IX+%FFFFFFE7)
004F70 DD5EEA              A 14128    	LD	E,(IX+%FFFFFFEA)
004F73 CD 00 00 00         A 14129    	CALL	__lcmpzero
004F77 20 12               A 14130    	JR	NZ,L_1052
004F79 DD27F9              A 14131    	LD	HL,(IX+%FFFFFFF9)
004F7C DD5EFC              A 14132    	LD	E,(IX+%FFFFFFFC)
004F7F 3E01                A 14133    	LD	A,%1
004F81 CD 00 00 00         A 14134    	CALL	__ladd_b
004F85 DD2FF9              A 14135    	LD	(IX+%FFFFFFF9),HL
004F88 DD73FC              A 14136    	LD	(IX+%FFFFFFFC),E
                           A 14137    ; 4781					} while (++clst < fs->n
004F8B                     A 14138    L_1052:
004F8B DD27F2              A 14139    	LD	HL,(IX+%FFFFFFF2)
004F8E DD5EF5              A 14140    	LD	E,(IX+%FFFFFFF5)
004F91 3E01                A 14141    	LD	A,%1
004F93 CD 00 00 00         A 14142    	CALL	__ladd_b
004F97 DD2FF2              A 14143    	LD	(IX+%FFFFFFF2),HL
004F9A DD73F5              A 14144    	LD	(IX+%FFFFFFF5),E
004F9D DD27F2              A 14145    	LD	HL,(IX+%FFFFFFF2)
004FA0 DD5EF5              A 14146    	LD	E,(IX+%FFFFFFF5)
004FA3 DD31FD              A 14147    	LD	IY,(IX+%FFFFFFFD)
004FA6 FD0716              A 14148    	LD	BC,(IY+%16)
004FA9 FD7E19              A 14149    	LD	A,(IY+%19)
004FAC CD 00 00 00         A 14150    	CALL	__lcmpu
004FB0 DA 1A 4F 00         A 14151    	JR	C,L_1051
004FB4 C3 C4 50 00         A 14152    	JR	L_1071
                           A 14153    ; 4782				} else {
004FB8                     A 14154    L_1069:
                           A 14155    ; 4783	#if FF_FS_EXFAT
                           A 14156    ; 4784					if (fs->fs_type == FS_E
                           A 14157    ; 4785						BYTE bm;
                           A 14158    ; 4786						UINT b;
                           A 14159    ; 4787	
                           A 14160    ; 4788						clst = fs->n_fatent
                           A 14161    ; 4789						sect = fs->bitbase;
                           A 14162    ; 4790						i = 0;				
                           A 14163    ; 4791						do {	/* Counts n
                           A 14164    ; 4792							if (i == 0) {
                           A 14165    ; 4793								res = move_
                           A 14166    ; 4794								if (res != 
                           A 14167    ; 4795							}
                           A 14168    ; 4796							for (b = 8, bm 
                           A 14169    ; 4797								if (!(bm & 
                           A 14170    ; 4798								bm >>= 1;
                           A 14171    ; 4799							}
                           A 14172    ; 4800							i = (i + 1) % S
                           A 14173    ; 4801						} while (clst);
                           A 14174    ; 4802					} else
                           A 14175    ; 4803	#endif
                           A 14176    ; 4804					{	/* FAT16/32: Scan W
                           A 14177    ; 4805						clst = fs->n_fatent
004FB8 DD31FD              A 14178    	LD	IY,(IX+%FFFFFFFD)
004FBB FD0716              A 14179    	LD	BC,(IY+%16)
004FBE FD7E19              A 14180    	LD	A,(IY+%19)
004FC1 DD0FF2              A 14181    	LD	(IX+%FFFFFFF2),BC
004FC4 DD77F5              A 14182    	LD	(IX+%FFFFFFF5),A
                           A 14183    ; 4806						sect = fs->fatbase;
004FC7 FD0722              A 14184    	LD	BC,(IY+%22)
004FCA FD7E25              A 14185    	LD	A,(IY+%25)
004FCD DD0FEB              A 14186    	LD	(IX+%FFFFFFEB),BC
004FD0 DD77EE              A 14187    	LD	(IX+%FFFFFFEE),A
                           A 14188    ; 4807						i = 0;				
004FD3 01000000            A 14189    	LD	BC,0
004FD7 DD0FF6              A 14190    	LD	(IX+%FFFFFFF6),BC
                           A 14191    ; 4808						do {	/* Counts n
004FDA                     A 14192    L_1066:
                           A 14193    ; 4809							if (i == 0) {
004FDA DD27F6              A 14194    	LD	HL,(IX+%FFFFFFF6)
004FDD CD 00 00 00         A 14195    	CALL	__icmpzero
004FE1 20 38               A 14196    	JR	NZ,L_1064
                           A 14197    ; 4810								res = move_
004FE3 DD27EB              A 14198    	LD	HL,(IX+%FFFFFFEB)
004FE6 DD2FD2              A 14199    	LD	(IX+%FFFFFFD2),HL	; spill
004FE9 DD4EEE              A 14200    	LD	C,(IX+%FFFFFFEE)
004FEC DD27EB              A 14201    	LD	HL,(IX+%FFFFFFEB)
004FEF DD5EEE              A 14202    	LD	E,(IX+%FFFFFFEE)
004FF2 3E01                A 14203    	LD	A,%1
004FF4 CD 00 00 00         A 14204    	CALL	__ladd_b
004FF8 DD2FEB              A 14205    	LD	(IX+%FFFFFFEB),HL
004FFB DD73EE              A 14206    	LD	(IX+%FFFFFFEE),E
004FFE 0600                A 14207    	LD	B,%0
005000 C5                  A 14208    	PUSH	BC
005001 DD27D2              A 14209    	LD	HL,(IX+%FFFFFFD2)	; unspill
005004 E5                  A 14210    	PUSH	HL
005005 DD07FD              A 14211    	LD	BC,(IX+%FFFFFFFD)
005008 C5                  A 14212    	PUSH	BC
005009 CD A6 03 00         A 14213    	CALL	_move_window
00500D C1                  A 14214    	POP	BC
00500E C1                  A 14215    	POP	BC
00500F C1                  A 14216    	POP	BC
005010 DD2FEF              A 14217    	LD	(IX+%FFFFFFEF),HL
                           A 14218    ; 4811								if (res != 
005013 CD 00 00 00         A 14219    	CALL	__icmpzero
005017 C2 C4 50 00         A 14220    	JR	NZ,L_1071
                           A 14221    ; 4812							}
00501B                     A 14222    L_1064:
                           A 14223    ; 4813							if (fs->fs_type
00501B DD31FD              A 14224    	LD	IY,(IX+%FFFFFFFD)
00501E FD7E00              A 14225    	LD	A,(IY+%0)
005021 FE02                A 14226    	CP	A,%2
005023 20 33               A 14227    	JR	NZ,L_1063
                           A 14228    ; 4814								if (ld_word
005025 DD07F6              A 14229    	LD	BC,(IX+%FFFFFFF6)
005028 DD31FD              A 14230    	LD	IY,(IX+%FFFFFFFD)
00502B ED2332              A 14231    	LEA	HL,IY+%32
00502E 09                  A 14232    	ADD	HL,BC
00502F E5                  A 14233    	PUSH	HL
005030 CD 00 00 00         A 14234    	CALL	_ld_word
005034 C1                  A 14235    	POP	BC
005035 CD 00 00 00         A 14236    	CALL	__scmpzero
005039 20 12               A 14237    	JR	NZ,L_1058
00503B DD27F9              A 14238    	LD	HL,(IX+%FFFFFFF9)
00503E DD5EFC              A 14239    	LD	E,(IX+%FFFFFFFC)
005041 3E01                A 14240    	LD	A,%1
005043 CD 00 00 00         A 14241    	CALL	__ladd_b
005047 DD2FF9              A 14242    	LD	(IX+%FFFFFFF9),HL
00504A DD73FC              A 14243    	LD	(IX+%FFFFFFFC),E
00504D                     A 14244    L_1058:
                           A 14245    ; 4815								i += 2;
00504D DD31F6              A 14246    	LD	IY,(IX+%FFFFFFF6)
005050 ED3302              A 14247    	LEA	IY,IY+%2
005053 DD3EF6              A 14248    	LD	(IX+%FFFFFFF6),IY
                           A 14249    ; 4816							} else {
005056 18 3B               A 14250    	JR	L_1065
005058                     A 14251    L_1063:
                           A 14252    ; 4817								if ((ld_dwo
005058 DD07F6              A 14253    	LD	BC,(IX+%FFFFFFF6)
00505B DD31FD              A 14254    	LD	IY,(IX+%FFFFFFFD)
00505E ED2332              A 14255    	LEA	HL,IY+%32
005061 09                  A 14256    	ADD	HL,BC
005062 E5                  A 14257    	PUSH	HL
005063 CD 39 00 00         A 14258    	CALL	_ld_dword
005067 C1                  A 14259    	POP	BC
005068 01FFFFFF            A 14260    	LD	BC,16777215
00506C 3E0F                A 14261    	LD	A,%F
00506E CD 00 00 00         A 14262    	CALL	__land
005072 CD 00 00 00         A 14263    	CALL	__lcmpzero
005076 20 12               A 14264    	JR	NZ,L_1061
005078 DD27F9              A 14265    	LD	HL,(IX+%FFFFFFF9)
00507B DD5EFC              A 14266    	LD	E,(IX+%FFFFFFFC)
00507E 3E01                A 14267    	LD	A,%1
005080 CD 00 00 00         A 14268    	CALL	__ladd_b
005084 DD2FF9              A 14269    	LD	(IX+%FFFFFFF9),HL
005087 DD73FC              A 14270    	LD	(IX+%FFFFFFFC),E
00508A                     A 14271    L_1061:
                           A 14272    ; 4818								i += 4;
00508A DD31F6              A 14273    	LD	IY,(IX+%FFFFFFF6)
00508D ED3304              A 14274    	LEA	IY,IY+%4
005090 DD3EF6              A 14275    	LD	(IX+%FFFFFFF6),IY
                           A 14276    ; 4819							}
005093                     A 14277    L_1065:
                           A 14278    ; 4820							i %= SS(fs);
005093 01FF0100            A 14279    	LD	BC,511
005097 DD27F6              A 14280    	LD	HL,(IX+%FFFFFFF6)
00509A CD 00 00 00         A 14281    	CALL	__iand
00509E DD2FF6              A 14282    	LD	(IX+%FFFFFFF6),HL
                           A 14283    ; 4821						} while (--clst);
0050A1 DD27F2              A 14284    	LD	HL,(IX+%FFFFFFF2)
0050A4 DD5EF5              A 14285    	LD	E,(IX+%FFFFFFF5)
0050A7 01010000            A 14286    	LD	BC,1
0050AB AF                  A 14287    	XOR	A,A
0050AC CD 00 00 00         A 14288    	CALL	__lsub
0050B0 DD2FF2              A 14289    	LD	(IX+%FFFFFFF2),HL
0050B3 DD73F5              A 14290    	LD	(IX+%FFFFFFF5),E
0050B6 DD27F2              A 14291    	LD	HL,(IX+%FFFFFFF2)
0050B9 DD5EF5              A 14292    	LD	E,(IX+%FFFFFFF5)
0050BC CD 00 00 00         A 14293    	CALL	__lcmpzero
0050C0 C2 DA 4F 00         A 14294    	JR	NZ,L_1066
                           A 14295    ; 4822					}
                           A 14296    ; 4823				}
0050C4                     A 14297    L_1071:
                           A 14298    ; 4824				if (res == FR_OK) {		/* 
0050C4 DD27EF              A 14299    	LD	HL,(IX+%FFFFFFEF)
0050C7 CD 00 00 00         A 14300    	CALL	__icmpzero
0050CB 20 26               A 14301    	JR	NZ,L_1075
                           A 14302    ; 4825					*nclst = nfree;			
0050CD DD2709              A 14303    	LD	HL,(IX+%9)
0050D0 DD07F9              A 14304    	LD	BC,(IX+%FFFFFFF9)
0050D3 DD7EFC              A 14305    	LD	A,(IX+%FFFFFFFC)
0050D6 ED0F                A 14306    	LD	(HL),BC
0050D8 23                  A 14307    	INC	HL
0050D9 23                  A 14308    	INC	HL
0050DA 23                  A 14309    	INC	HL
0050DB 77                  A 14310    	LD	(HL),A
                           A 14311    ; 4826					fs->free_clst = nfree;	
0050DC DD07F9              A 14312    	LD	BC,(IX+%FFFFFFF9)
0050DF DD7EFC              A 14313    	LD	A,(IX+%FFFFFFFC)
0050E2 DD31FD              A 14314    	LD	IY,(IX+%FFFFFFFD)
0050E5 FD0F12              A 14315    	LD	(IY+%12),BC
0050E8 FD7715              A 14316    	LD	(IY+%15),A
                           A 14317    ; 4827					fs->fsi_flag |= 1;		
0050EB FD7E04              A 14318    	LD	A,(IY+%4)
0050EE CBC7                A 14319    	SET	%0,A
0050F0 FD7704              A 14320    	LD	(IY+%4),A
                           A 14321    ; 4828				}
                           A 14322    ; 4829			}
                           A 14323    ; 4830		}
0050F3                     A 14324    L_1075:
                           A 14325    ; 4831	
                           A 14326    ; 4832		LEAVE_FF(fs, res);
0050F3 DD27EF              A 14327    	LD	HL,(IX+%FFFFFFEF)
                           A 14328    ; 4833	}
0050F6 DDF9                A 14329    	LD	SP,IX
0050F8 DDE1                A 14330    	POP	IX
0050FA C9                  A 14331    	RET	
                           A 14332    
                           A 14333    
                           A 14334    ;**************************** _f_getfree ******
                           A 14335    ;Name                         Addr/Register   S
                           A 14336    ;obj                                  IX-40    
                           A 14337    ;stat                                 IX-25    
                           A 14338    ;sect                                 IX-21    
                           A 14339    ;res                                  IX-17    
                           A 14340    ;clst                                 IX-14    
                           A 14341    ;i                                    IX-10    
                           A 14342    ;nfree                                 IX-7    
                           A 14343    ;fs                                    IX-3    
                           A 14344    ;fatfs                                IX+12    
                           A 14345    ;nclst                                 IX+9    
                           A 14346    ;path                                  IX+6    
                           A 14347    
                           A 14348    
                           A 14349    ; Stack Frame Size: 61 (bytes)
                           A 14350    ;       Spill Code: -1 (instruction)
                           A 14351    
                           A 14352    
                           A 14353    ; 4834	
                           A 14354    ; 4835	
                           A 14355    ; 4836	
                           A 14356    ; 4837	
                           A 14357    ; 4838	/*-------------------------------------
                           A 14358    ; 4839	/* Truncate File                       
                           A 14359    ; 4840	/*-------------------------------------
                           A 14360    ; 4841	
                           A 14361    ; 4842	FRESULT f_truncate (
                           A 14362    ; 4843		FIL* fp		/* Pointer to the file 
                           A 14363    ; 4844	)
                           A 14364    ; 4845	{
0050FB                     A 14365    _f_truncate:
0050FB 21EFFFFF            A 14366    	LD	HL,-17
0050FF CD 00 00 00         A 14367    	CALL	__frameset
                           A 14368    ; 4846		FRESULT res;
                           A 14369    ; 4847		FATFS *fs;
                           A 14370    ; 4848		DWORD ncl;
                           A 14371    ; 4849	
                           A 14372    ; 4850	
                           A 14373    ; 4851		res = validate(&fp->obj, &fs);	/* 
005103 ED65F6              A 14374    	PEA	IX+%FFFFFFF6
005106 DD3106              A 14375    	LD	IY,(IX+%6)
005109 ED6600              A 14376    	PEA	IY+%0
00510C CD F0 36 00         A 14377    	CALL	_validate
005110 C1                  A 14378    	POP	BC
005111 C1                  A 14379    	POP	BC
005112 DD2FFD              A 14380    	LD	(IX+%FFFFFFFD),HL
                           A 14381    ; 4852		if (res != FR_OK || (res = (FRESULT
005115 CD 00 00 00         A 14382    	CALL	__icmpzero
005119 20 13               A 14383    	JR	NZ,L_1078
00511B DD3106              A 14384    	LD	IY,(IX+%6)
00511E FD7E10              A 14385    	LD	A,(IY+%10)
005121 B7ED62              A 14386    	UEXT	HL
005124 6F                  A 14387    	LD	L,A
005125 DD2FFD              A 14388    	LD	(IX+%FFFFFFFD),HL
005128 CD 00 00 00         A 14389    	CALL	__icmpzero
00512C 28 07               A 14390    	JR	Z,L_1080
00512E                     A 14391    L_1078:
00512E DD27FD              A 14392    	LD	HL,(IX+%FFFFFFFD)
005131 C3 D5 52 00         A 14393    	JR	L_1100
005135                     A 14394    L_1080:
                           A 14395    ; 4853		if (!(fp->flag & FA_WRITE)) LEAVE_F
005135 DD3106              A 14396    	LD	IY,(IX+%6)
005138 FD7E0F              A 14397    	LD	A,(IY+%F)
00513B E602                A 14398    	AND	A,%2
00513D 20 08               A 14399    	JR	NZ,L_1098
00513F 21070000            A 14400    	LD	HL,7
005143 C3 D5 52 00         A 14401    	JR	L_1100
005147                     A 14402    L_1098:
                           A 14403    ; 4854	
                           A 14404    ; 4855		if (fp->fptr < fp->obj.objsize) {	
005147 DD3106              A 14405    	LD	IY,(IX+%6)
00514A FD0711              A 14406    	LD	BC,(IY+%11)
00514D FD7E14              A 14407    	LD	A,(IY+%14)
005150 DD0FF2              A 14408    	LD	(IX+%FFFFFFF2),BC
005153 DD77F5              A 14409    	LD	(IX+%FFFFFFF5),A
005156 C5E1                A 14410    	LD	HL,BC
005158 DD5EF5              A 14411    	LD	E,(IX+%FFFFFFF5)
00515B FD070B              A 14412    	LD	BC,(IY+%B)
00515E FD7E0E              A 14413    	LD	A,(IY+%E)
005161 CD 00 00 00         A 14414    	CALL	__lcmpu
005165 D2 D2 52 00         A 14415    	JR	NC,L_1099
                           A 14416    ; 4856			if (fp->fptr == 0) {	/* When
005169 DD27F2              A 14417    	LD	HL,(IX+%FFFFFFF2)
00516C DD5EF5              A 14418    	LD	E,(IX+%FFFFFFF5)
00516F CD 00 00 00         A 14419    	CALL	__lcmpzero
005173 20 3F               A 14420    	JR	NZ,L_1088
                           A 14421    ; 4857				res = remove_chain(&fp->obj
005175 DD3106              A 14422    	LD	IY,(IX+%6)
005178 ED0300              A 14423    	LEA	BC,IY+%0
00517B DD0FEF              A 14424    	LD	(IX+%FFFFFFEF),BC
00517E 01000000            A 14425    	LD	BC,0
005182 C5                  A 14426    	PUSH	BC
005183 C5                  A 14427    	PUSH	BC
005184 DD31EF              A 14428    	LD	IY,(IX+%FFFFFFEF)
005187 FD0707              A 14429    	LD	BC,(IY+%7)
00518A FD7E0A              A 14430    	LD	A,(IY+%A)
00518D 2600                A 14431    	LD	H,%0
00518F 6F                  A 14432    	LD	L,A
005190 E5                  A 14433    	PUSH	HL
005191 C5                  A 14434    	PUSH	BC
005192 DD07EF              A 14435    	LD	BC,(IX+%FFFFFFEF)
005195 C5                  A 14436    	PUSH	BC
005196 CD 0B 0B 00         A 14437    	CALL	_remove_chain
00519A C1                  A 14438    	POP	BC
00519B C1                  A 14439    	POP	BC
00519C C1                  A 14440    	POP	BC
00519D C1                  A 14441    	POP	BC
00519E C1                  A 14442    	POP	BC
00519F DD2FFD              A 14443    	LD	(IX+%FFFFFFFD),HL
                           A 14444    ; 4858				fp->obj.sclust = 0;
0051A2 01000000            A 14445    	LD	BC,0
0051A6 DD3106              A 14446    	LD	IY,(IX+%6)
0051A9 FD0F07              A 14447    	LD	(IY+%7),BC
0051AC FD360A00            A 14448    	LD	(IY+%A),%0
                           A 14449    ; 4859			} else {				/* When
0051B0 C3 4F 52 00         A 14450    	JR	L_1089
0051B4                     A 14451    L_1088:
                           A 14452    ; 4860				ncl = get_fat(&fp->obj, fp-
0051B4 DD3106              A 14453    	LD	IY,(IX+%6)
0051B7 FD0715              A 14454    	LD	BC,(IY+%15)
0051BA FD7E18              A 14455    	LD	A,(IY+%18)
0051BD 2600                A 14456    	LD	H,%0
0051BF 6F                  A 14457    	LD	L,A
0051C0 E5                  A 14458    	PUSH	HL
0051C1 C5                  A 14459    	PUSH	BC
0051C2 ED6600              A 14460    	PEA	IY+%0
0051C5 CD D1 05 00         A 14461    	CALL	_get_fat
0051C9 C1                  A 14462    	POP	BC
0051CA C1                  A 14463    	POP	BC
0051CB C1                  A 14464    	POP	BC
0051CC DD2FF9              A 14465    	LD	(IX+%FFFFFFF9),HL
0051CF DD73FC              A 14466    	LD	(IX+%FFFFFFFC),E
                           A 14467    ; 4861				res = FR_OK;
0051D2 01000000            A 14468    	LD	BC,0
0051D6 DD0FFD              A 14469    	LD	(IX+%FFFFFFFD),BC
                           A 14470    ; 4862				if (ncl == 0xFFFFFFFF) res 
0051D9 DD27F9              A 14471    	LD	HL,(IX+%FFFFFFF9)
0051DC DD5EFC              A 14472    	LD	E,(IX+%FFFFFFFC)
0051DF 01FFFFFF            A 14473    	LD	BC,16777215
0051E3 3EFF                A 14474    	LD	A,%FF
0051E5 CD 00 00 00         A 14475    	CALL	__lcmpu
0051E9 20 07               A 14476    	JR	NZ,L_1083
0051EB 01010000            A 14477    	LD	BC,1
0051EF DD0FFD              A 14478    	LD	(IX+%FFFFFFFD),BC
0051F2                     A 14479    L_1083:
                           A 14480    ; 4863				if (ncl == 1) res = FR_INT_
0051F2 DD27F9              A 14481    	LD	HL,(IX+%FFFFFFF9)
0051F5 DD5EFC              A 14482    	LD	E,(IX+%FFFFFFFC)
0051F8 01010000            A 14483    	LD	BC,1
0051FC AF                  A 14484    	XOR	A,A
0051FD CD 00 00 00         A 14485    	CALL	__lcmpu
005201 20 07               A 14486    	JR	NZ,L_1086
005203 01020000            A 14487    	LD	BC,2
005207 DD0FFD              A 14488    	LD	(IX+%FFFFFFFD),BC
00520A                     A 14489    L_1086:
                           A 14490    ; 4864				if (res == FR_OK && ncl < f
00520A DD27FD              A 14491    	LD	HL,(IX+%FFFFFFFD)
00520D CD 00 00 00         A 14492    	CALL	__icmpzero
005211 20 3C               A 14493    	JR	NZ,L_1089
005213 DD27F9              A 14494    	LD	HL,(IX+%FFFFFFF9)
005216 DD5EFC              A 14495    	LD	E,(IX+%FFFFFFFC)
005219 DD31F6              A 14496    	LD	IY,(IX+%FFFFFFF6)
00521C FD0716              A 14497    	LD	BC,(IY+%16)
00521F FD7E19              A 14498    	LD	A,(IY+%19)
005222 CD 00 00 00         A 14499    	CALL	__lcmpu
005226 30 27               A 14500    	JR	NC,L_1089
                           A 14501    ; 4865					res = remove_chain(&fp-
005228 DD3106              A 14502    	LD	IY,(IX+%6)
00522B FD0715              A 14503    	LD	BC,(IY+%15)
00522E FD7E18              A 14504    	LD	A,(IY+%18)
005231 2600                A 14505    	LD	H,%0
005233 6F                  A 14506    	LD	L,A
005234 E5                  A 14507    	PUSH	HL
005235 C5                  A 14508    	PUSH	BC
005236 DD4EFC              A 14509    	LD	C,(IX+%FFFFFFFC)
005239 0600                A 14510    	LD	B,%0
00523B C5                  A 14511    	PUSH	BC
00523C DD07F9              A 14512    	LD	BC,(IX+%FFFFFFF9)
00523F C5                  A 14513    	PUSH	BC
005240 ED6600              A 14514    	PEA	IY+%0
005243 CD 0B 0B 00         A 14515    	CALL	_remove_chain
005247 C1                  A 14516    	POP	BC
005248 C1                  A 14517    	POP	BC
005249 C1                  A 14518    	POP	BC
00524A C1                  A 14519    	POP	BC
00524B C1                  A 14520    	POP	BC
00524C DD2FFD              A 14521    	LD	(IX+%FFFFFFFD),HL
                           A 14522    ; 4866				}
                           A 14523    ; 4867			}
00524F                     A 14524    L_1089:
                           A 14525    ; 4868			fp->obj.objsize = fp->fptr;	/* 
00524F DD3106              A 14526    	LD	IY,(IX+%6)
005252 FD0711              A 14527    	LD	BC,(IY+%11)
005255 FD7E14              A 14528    	LD	A,(IY+%14)
005258 FD0F0B              A 14529    	LD	(IY+%B),BC
00525B FD770E              A 14530    	LD	(IY+%E),A
                           A 14531    ; 4869			fp->flag |= FA_MODIFIED;
00525E FD7E0F              A 14532    	LD	A,(IY+%F)
005261 CBF7                A 14533    	SET	%6,A
005263 FD770F              A 14534    	LD	(IY+%F),A
                           A 14535    ; 4870	#if !FF_FS_TINY
                           A 14536    ; 4871			if (res == FR_OK && (fp->flag &
005266 DD27FD              A 14537    	LD	HL,(IX+%FFFFFFFD)
005269 CD 00 00 00         A 14538    	CALL	__icmpzero
00526D 20 4C               A 14539    	JR	NZ,L_1095
00526F DD3106              A 14540    	LD	IY,(IX+%6)
005272 FD7E0F              A 14541    	LD	A,(IY+%F)
005275 E680                A 14542    	AND	A,%80
005277 28 42               A 14543    	JR	Z,L_1095
                           A 14544    ; 4872				if (disk_write(fs->pdrv, fp
005279 01010000            A 14545    	LD	BC,1
00527D C5                  A 14546    	PUSH	BC
00527E DD3106              A 14547    	LD	IY,(IX+%6)
005281 FD0719              A 14548    	LD	BC,(IY+%19)
005284 FD7E1C              A 14549    	LD	A,(IY+%1C)
005287 2600                A 14550    	LD	H,%0
005289 6F                  A 14551    	LD	L,A
00528A E5                  A 14552    	PUSH	HL
00528B C5                  A 14553    	PUSH	BC
00528C ED6624              A 14554    	PEA	IY+%24
00528F DD31F6              A 14555    	LD	IY,(IX+%FFFFFFF6)
005292 FD4E01              A 14556    	LD	C,(IY+%1)
005295 0600                A 14557    	LD	B,%0
005297 C5                  A 14558    	PUSH	BC
005298 CD 00 00 00         A 14559    	CALL	_disk_write
00529C C1                  A 14560    	POP	BC
00529D C1                  A 14561    	POP	BC
00529E C1                  A 14562    	POP	BC
00529F C1                  A 14563    	POP	BC
0052A0 C1                  A 14564    	POP	BC
0052A1 CD 00 00 00         A 14565    	CALL	__icmpzero
0052A5 28 09               A 14566    	JR	Z,L_1092
                           A 14567    ; 4873					res = FR_DISK_ERR;
0052A7 01010000            A 14568    	LD	BC,1
0052AB DD0FFD              A 14569    	LD	(IX+%FFFFFFFD),BC
                           A 14570    ; 4874				} else {
0052AE 18 0B               A 14571    	JR	L_1095
0052B0                     A 14572    L_1092:
                           A 14573    ; 4875					fp->flag &= (BYTE)~FA_D
0052B0 DD3106              A 14574    	LD	IY,(IX+%6)
0052B3 FD7E0F              A 14575    	LD	A,(IY+%F)
0052B6 CBBF                A 14576    	RES	%7,A
0052B8 FD770F              A 14577    	LD	(IY+%F),A
                           A 14578    ; 4876				}
                           A 14579    ; 4877			}
0052BB                     A 14580    L_1095:
                           A 14581    ; 4878	#endif
                           A 14582    ; 4879			if (res != FR_OK) ABORT(fs, res
0052BB DD27FD              A 14583    	LD	HL,(IX+%FFFFFFFD)
0052BE CD 00 00 00         A 14584    	CALL	__icmpzero
0052C2 28 0E               A 14585    	JR	Z,L_1099
0052C4 DD7EFD              A 14586    	LD	A,(IX+%FFFFFFFD)
0052C7 DD3106              A 14587    	LD	IY,(IX+%6)
0052CA FD7710              A 14588    	LD	(IY+%10),A
0052CD DD27FD              A 14589    	LD	HL,(IX+%FFFFFFFD)
0052D0 18 03               A 14590    	JR	L_1100
                           A 14591    ; 4880		}
0052D2                     A 14592    L_1099:
                           A 14593    ; 4881	
                           A 14594    ; 4882		LEAVE_FF(fs, res);
0052D2 DD27FD              A 14595    	LD	HL,(IX+%FFFFFFFD)
                           A 14596    ; 4883	}
0052D5                     A 14597    L_1100:
0052D5 DDF9                A 14598    	LD	SP,IX
0052D7 DDE1                A 14599    	POP	IX
0052D9 C9                  A 14600    	RET	
                           A 14601    
                           A 14602    
                           A 14603    ;**************************** _f_truncate *****
                           A 14604    ;Name                         Addr/Register   S
                           A 14605    ;_disk_write                         IMPORT  --
                           A 14606    ;G_87                                 IX-14    
                           A 14607    ;fs                                   IX-10    
                           A 14608    ;ncl                                   IX-7    
                           A 14609    ;res                                   IX-3    
                           A 14610    ;fp                                    IX+6    
                           A 14611    
                           A 14612    
                           A 14613    ; Stack Frame Size: 26 (bytes)
                           A 14614    ;       Spill Code: -1 (instruction)
                           A 14615    
                           A 14616    
                           A 14617    ; 4884	
                           A 14618    ; 4885	
                           A 14619    ; 4886	
                           A 14620    ; 4887	
                           A 14621    ; 4888	/*-------------------------------------
                           A 14622    ; 4889	/* Delete a File/Directory             
                           A 14623    ; 4890	/*-------------------------------------
                           A 14624    ; 4891	
                           A 14625    ; 4892	FRESULT f_unlink (
                           A 14626    ; 4893		const TCHAR* path		/* Pointer 
                           A 14627    ; 4894	)
                           A 14628    ; 4895	{
0052DA                     A 14629    _f_unlink:
0052DA 2197FDFF            A 14630    	LD	HL,-617
0052DE CD 00 00 00         A 14631    	CALL	__frameset
                           A 14632    ; 4896		FRESULT res;
                           A 14633    ; 4897		DIR dj, sdj;
                           A 14634    ; 4898		DWORD dclst = 0;
0052E2 01000000            A 14635    	LD	BC,0
0052E6 AF                  A 14636    	XOR	A,A
0052E7 DD0FF6              A 14637    	LD	(IX+%FFFFFFF6),BC
0052EA DD77F9              A 14638    	LD	(IX+%FFFFFFF9),A
                           A 14639    ; 4899		FATFS *fs;
                           A 14640    ; 4900	#if FF_FS_EXFAT
                           A 14641    ; 4901		FFOBJID obj;
                           A 14642    ; 4902	#endif
                           A 14643    ; 4903		DEF_NAMBUF
                           A 14644    ; 4904	
                           A 14645    ; 4905	
                           A 14646    ; 4906		/* Get logical drive */
                           A 14647    ; 4907		res = mount_volume(&path, &fs, FA_W
0052ED 01020000            A 14648    	LD	BC,2
0052F1 C5                  A 14649    	PUSH	BC
0052F2 ED65FA              A 14650    	PEA	IX+%FFFFFFFA
0052F5 ED6506              A 14651    	PEA	IX+%6
0052F8 CD 82 30 00         A 14652    	CALL	_mount_volume
0052FC C1                  A 14653    	POP	BC
0052FD C1                  A 14654    	POP	BC
0052FE C1                  A 14655    	POP	BC
0052FF DD2FFD              A 14656    	LD	(IX+%FFFFFFFD),HL
                           A 14657    ; 4908		if (res == FR_OK) {
005302 CD 00 00 00         A 14658    	CALL	__icmpzero
005306 C2 49 54 00         A 14659    	JR	NZ,L_1122
                           A 14660    ; 4909			dj.obj.fs = fs;
00530A DD07FA              A 14661    	LD	BC,(IX+%FFFFFFFA)
00530D DD0FC8              A 14662    	LD	(IX+%FFFFFFC8),BC
                           A 14663    ; 4910			INIT_NAMBUF(fs);
005310 DDE5E1              A 14664    	LD	HL,IX
005313 019AFDFF            A 14665    	LD	BC,-614
005317 09                  A 14666    	ADD	HL,BC
005318 DD31FA              A 14667    	LD	IY,(IX+%FFFFFFFA)
00531B FD2F0B              A 14668    	LD	(IY+%B),HL
                           A 14669    ; 4911			res = follow_path(&dj, path);	
00531E DD0706              A 14670    	LD	BC,(IX+%6)
005321 C5                  A 14671    	PUSH	BC
005322 ED65C8              A 14672    	PEA	IX+%FFFFFFC8
005325 CD 63 2B 00         A 14673    	CALL	_follow_path
005329 C1                  A 14674    	POP	BC
00532A C1                  A 14675    	POP	BC
00532B DD2FFD              A 14676    	LD	(IX+%FFFFFFFD),HL
                           A 14677    ; 4912			if (FF_FS_RPATH && res == FR_OK
                           A 14678    ; 4913				res = FR_INVALID_NAME;		
                           A 14679    ; 4914			}
                           A 14680    ; 4915	#if FF_FS_LOCK != 0
                           A 14681    ; 4916			if (res == FR_OK) res = chk_loc
                           A 14682    ; 4917	#endif
                           A 14683    ; 4918			if (res == FR_OK) {				
00532E CD 00 00 00         A 14684    	CALL	__icmpzero
005332 C2 49 54 00         A 14685    	JR	NZ,L_1122
                           A 14686    ; 4919				if (dj.fn[NSFLAG] & NS_NONA
005336 ED55E6              A 14687    	LEA	IY,IX+%FFFFFFE6
005339 FD7E0B              A 14688    	LD	A,(IY+%B)
00533C E680                A 14689    	AND	A,%80
00533E 28 09               A 14690    	JR	Z,L_1104
                           A 14691    ; 4920					res = FR_INVALID_NAME;	
005340 01060000            A 14692    	LD	BC,6
005344 DD0FFD              A 14693    	LD	(IX+%FFFFFFFD),BC
                           A 14694    ; 4921				} else {
005347 18 0E               A 14695    	JR	L_1111
005349                     A 14696    L_1104:
                           A 14697    ; 4922					if (dj.obj.attr & AM_RD
005349 DD7ECD              A 14698    	LD	A,(IX+%FFFFFFCD)
00534C E601                A 14699    	AND	A,%1
00534E 28 07               A 14700    	JR	Z,L_1111
                           A 14701    ; 4923						res = FR_DENIED;	
005350 01070000            A 14702    	LD	BC,7
005354 DD0FFD              A 14703    	LD	(IX+%FFFFFFFD),BC
                           A 14704    ; 4924					}
                           A 14705    ; 4925				}
005357                     A 14706    L_1111:
                           A 14707    ; 4926				if (res == FR_OK) {
005357 DD27FD              A 14708    	LD	HL,(IX+%FFFFFFFD)
00535A CD 00 00 00         A 14709    	CALL	__icmpzero
00535E C2 EF 53 00         A 14710    	JR	NZ,L_1117
                           A 14711    ; 4927	#if FF_FS_EXFAT
                           A 14712    ; 4928					obj.fs = fs;
                           A 14713    ; 4929					if (fs->fs_type == FS_E
                           A 14714    ; 4930						init_alloc_info(fs,
                           A 14715    ; 4931						dclst = obj.sclust;
                           A 14716    ; 4932					} else
                           A 14717    ; 4933	#endif
                           A 14718    ; 4934					{
                           A 14719    ; 4935						dclst = ld_clust(fs
005362 DD07E3              A 14720    	LD	BC,(IX+%FFFFFFE3)
005365 C5                  A 14721    	PUSH	BC
005366 DD07FA              A 14722    	LD	BC,(IX+%FFFFFFFA)
005369 C5                  A 14723    	PUSH	BC
00536A CD 64 16 00         A 14724    	CALL	_ld_clust
00536E C1                  A 14725    	POP	BC
00536F C1                  A 14726    	POP	BC
005370 DD2FF6              A 14727    	LD	(IX+%FFFFFFF6),HL
005373 DD73F9              A 14728    	LD	(IX+%FFFFFFF9),E
                           A 14729    ; 4936					}
                           A 14730    ; 4937					if (dj.obj.attr & AM_DI
005376 DD7ECD              A 14731    	LD	A,(IX+%FFFFFFCD)
005379 E610                A 14732    	AND	A,%10
00537B 28 72               A 14733    	JR	Z,L_1117
                           A 14734    ; 4938	#if FF_FS_RPATH != 0
                           A 14735    ; 4939						if (dclst == fs->cd
                           A 14736    ; 4940							res = FR_DENIED
                           A 14737    ; 4941						} else
                           A 14738    ; 4942	#endif
                           A 14739    ; 4943						{
                           A 14740    ; 4944							sdj.obj.fs = fs
00537D ED229A              A 14741    	LEA	HL,IX+%FFFFFF9A
005380 0197FDFF            A 14742    	LD	BC,-617
005384 CD 00 00 00         A 14743    	CALL	__istix
005388 DD07FA              A 14744    	LD	BC,(IX+%FFFFFFFA)
00538B DD0F9A              A 14745    	LD	(IX+%FFFFFF9A),BC
                           A 14746    ; 4945							sdj.obj.sclust 
00538E 0197FDFF            A 14747    	LD	BC,-617
005392 CD 00 00 00         A 14748    	CALL	__ildix
005396 DD07F6              A 14749    	LD	BC,(IX+%FFFFFFF6)
005399 DD7EF9              A 14750    	LD	A,(IX+%FFFFFFF9)
00539C E5FDE1              A 14751    	LD	IY,HL
00539F FD0F07              A 14752    	LD	(IY+%7),BC
0053A2 FD770A              A 14753    	LD	(IY+%A),A
                           A 14754    ; 4946	#if FF_FS_EXFAT
                           A 14755    ; 4947							if (fs->fs_type
                           A 14756    ; 4948								sdj.obj.obj
                           A 14757    ; 4949								sdj.obj.sta
                           A 14758    ; 4950							}
                           A 14759    ; 4951	#endif
                           A 14760    ; 4952							res = dir_sdi(&
0053A5 01000000            A 14761    	LD	BC,0
0053A9 C5                  A 14762    	PUSH	BC
0053AA C5                  A 14763    	PUSH	BC
0053AB ED659A              A 14764    	PEA	IX+%FFFFFF9A
0053AE CD 18 11 00         A 14765    	CALL	_dir_sdi
0053B2 C1                  A 14766    	POP	BC
0053B3 C1                  A 14767    	POP	BC
0053B4 C1                  A 14768    	POP	BC
0053B5 DD2FFD              A 14769    	LD	(IX+%FFFFFFFD),HL
                           A 14770    ; 4953							if (res == FR_O
0053B8 CD 00 00 00         A 14771    	CALL	__icmpzero
0053BC 20 31               A 14772    	JR	NZ,L_1117
                           A 14773    ; 4954								res = DIR_R
0053BE 01000000            A 14774    	LD	BC,0
0053C2 C5                  A 14775    	PUSH	BC
0053C3 ED659A              A 14776    	PEA	IX+%FFFFFF9A
0053C6 CD 5B 1C 00         A 14777    	CALL	_dir_read
0053CA C1                  A 14778    	POP	BC
0053CB C1                  A 14779    	POP	BC
0053CC DD2FFD              A 14780    	LD	(IX+%FFFFFFFD),HL
                           A 14781    ; 4955								if (res == 
0053CF CD 00 00 00         A 14782    	CALL	__icmpzero
0053D3 20 07               A 14783    	JR	NZ,L_1107
0053D5 01070000            A 14784    	LD	BC,7
0053D9 DD0FFD              A 14785    	LD	(IX+%FFFFFFFD),BC
0053DC                     A 14786    L_1107:
                           A 14787    ; 4956								if (res == 
0053DC 01040000            A 14788    	LD	BC,4
0053E0 DD27FD              A 14789    	LD	HL,(IX+%FFFFFFFD)
0053E3 B7                  A 14790    	OR	A,A
0053E4 ED42                A 14791    	SBC	HL,BC
0053E6 20 07               A 14792    	JR	NZ,L_1117
0053E8 01000000            A 14793    	LD	BC,0
0053EC DD0FFD              A 14794    	LD	(IX+%FFFFFFFD),BC
                           A 14795    ; 4957							}
                           A 14796    ; 4958						}
                           A 14797    ; 4959					}
                           A 14798    ; 4960				}
0053EF                     A 14799    L_1117:
                           A 14800    ; 4961				if (res == FR_OK) {
0053EF DD27FD              A 14801    	LD	HL,(IX+%FFFFFFFD)
0053F2 CD 00 00 00         A 14802    	CALL	__icmpzero
0053F6 20 51               A 14803    	JR	NZ,L_1122
                           A 14804    ; 4962					res = dir_remove(&dj);	
0053F8 ED65C8              A 14805    	PEA	IX+%FFFFFFC8
0053FB CD 3F 22 00         A 14806    	CALL	_dir_remove
0053FF C1                  A 14807    	POP	BC
005400 DD2FFD              A 14808    	LD	(IX+%FFFFFFFD),HL
                           A 14809    ; 4963					if (res == FR_OK && dcl
005403 CD 00 00 00         A 14810    	CALL	__icmpzero
005407 20 2B               A 14811    	JR	NZ,L_1115
005409 DD27F6              A 14812    	LD	HL,(IX+%FFFFFFF6)
00540C DD5EF9              A 14813    	LD	E,(IX+%FFFFFFF9)
00540F CD 00 00 00         A 14814    	CALL	__lcmpzero
005413 28 1F               A 14815    	JR	Z,L_1115
                           A 14816    ; 4964	#if FF_FS_EXFAT
                           A 14817    ; 4965						res = remove_chain(
                           A 14818    ; 4966	#else
                           A 14819    ; 4967						res = remove_chain(
005415 01000000            A 14820    	LD	BC,0
005419 C5                  A 14821    	PUSH	BC
00541A C5                  A 14822    	PUSH	BC
00541B DD4EF9              A 14823    	LD	C,(IX+%FFFFFFF9)
00541E 0600                A 14824    	LD	B,%0
005420 C5                  A 14825    	PUSH	BC
005421 DD07F6              A 14826    	LD	BC,(IX+%FFFFFFF6)
005424 C5                  A 14827    	PUSH	BC
005425 ED65C8              A 14828    	PEA	IX+%FFFFFFC8
005428 CD 0B 0B 00         A 14829    	CALL	_remove_chain
00542C C1                  A 14830    	POP	BC
00542D C1                  A 14831    	POP	BC
00542E C1                  A 14832    	POP	BC
00542F C1                  A 14833    	POP	BC
005430 C1                  A 14834    	POP	BC
005431 DD2FFD              A 14835    	LD	(IX+%FFFFFFFD),HL
                           A 14836    ; 4968	#endif
                           A 14837    ; 4969					}
005434                     A 14838    L_1115:
                           A 14839    ; 4970					if (res == FR_OK) res =
005434 DD27FD              A 14840    	LD	HL,(IX+%FFFFFFFD)
005437 CD 00 00 00         A 14841    	CALL	__icmpzero
00543B 20 0C               A 14842    	JR	NZ,L_1122
00543D DD07FA              A 14843    	LD	BC,(IX+%FFFFFFFA)
005440 C5                  A 14844    	PUSH	BC
005441 CD 30 04 00         A 14845    	CALL	_sync_fs
005445 C1                  A 14846    	POP	BC
005446 DD2FFD              A 14847    	LD	(IX+%FFFFFFFD),HL
                           A 14848    ; 4971				}
                           A 14849    ; 4972			}
                           A 14850    ; 4973			FREE_NAMBUF();
                           A 14851    ; 4974		}
005449                     A 14852    L_1122:
                           A 14853    ; 4975	
                           A 14854    ; 4976		LEAVE_FF(fs, res);
005449 DD27FD              A 14855    	LD	HL,(IX+%FFFFFFFD)
                           A 14856    ; 4977	}
00544C DDF9                A 14857    	LD	SP,IX
00544E DDE1                A 14858    	POP	IX
005450 C9                  A 14859    	RET	
                           A 14860    
                           A 14861    
                           A 14862    ;**************************** _f_unlink *******
                           A 14863    ;Name                         Addr/Register   S
                           A 14864    ;lbuf                                IX-614    
                           A 14865    ;sdj                                 IX-102    
                           A 14866    ;dj                                   IX-56    
                           A 14867    ;dclst                                IX-10    
                           A 14868    ;fs                                    IX-6    
                           A 14869    ;res                                   IX-3    
                           A 14870    ;path                                  IX+6    
                           A 14871    
                           A 14872    
                           A 14873    ; Stack Frame Size: 626 (bytes)
                           A 14874    ;       Spill Code: -1 (instruction)
                           A 14875    
                           A 14876    
                           A 14877    ; 4978	
                           A 14878    ; 4979	
                           A 14879    ; 4980	
                           A 14880    ; 4981	
                           A 14881    ; 4982	/*-------------------------------------
                           A 14882    ; 4983	/* Create a Directory                  
                           A 14883    ; 4984	/*-------------------------------------
                           A 14884    ; 4985	
                           A 14885    ; 4986	FRESULT f_mkdir (
                           A 14886    ; 4987		const TCHAR* path		/* Pointer 
                           A 14887    ; 4988	)
                           A 14888    ; 4989	{
005451                     A 14889    _f_mkdir:
005451 21B5FDFF            A 14890    	LD	HL,-587
005455 CD 00 00 00         A 14891    	CALL	__frameset
                           A 14892    ; 4990		FRESULT res;
                           A 14893    ; 4991		DIR dj;
                           A 14894    ; 4992		FFOBJID sobj;
                           A 14895    ; 4993		FATFS *fs;
                           A 14896    ; 4994		DWORD dcl, pcl, tm;
                           A 14897    ; 4995		DEF_NAMBUF
                           A 14898    ; 4996	
                           A 14899    ; 4997	
                           A 14900    ; 4998		res = mount_volume(&path, &fs, FA_W
005459 01020000            A 14901    	LD	BC,2
00545D C5                  A 14902    	PUSH	BC
00545E ED65FD              A 14903    	PEA	IX+%FFFFFFFD
005461 ED6506              A 14904    	PEA	IX+%6
005464 CD 82 30 00         A 14905    	CALL	_mount_volume
005468 C1                  A 14906    	POP	BC
005469 C1                  A 14907    	POP	BC
00546A C1                  A 14908    	POP	BC
00546B DD2FFA              A 14909    	LD	(IX+%FFFFFFFA),HL
                           A 14910    ; 4999		if (res == FR_OK) {
00546E CD 00 00 00         A 14911    	CALL	__icmpzero
005472 C2 6E 56 00         A 14912    	JR	NZ,L_1145
                           A 14913    ; 5000			dj.obj.fs = fs;
005476 DD07FD              A 14914    	LD	BC,(IX+%FFFFFFFD)
005479 DD0FB5              A 14915    	LD	(IX+%FFFFFFB5),BC
                           A 14916    ; 5001			INIT_NAMBUF(fs);
00547C DDE5E1              A 14917    	LD	HL,IX
00547F 01B5FDFF            A 14918    	LD	BC,-587
005483 09                  A 14919    	ADD	HL,BC
005484 DD31FD              A 14920    	LD	IY,(IX+%FFFFFFFD)
005487 FD2F0B              A 14921    	LD	(IY+%B),HL
                           A 14922    ; 5002			res = follow_path(&dj, path);	
00548A DD0706              A 14923    	LD	BC,(IX+%6)
00548D C5                  A 14924    	PUSH	BC
00548E ED65B5              A 14925    	PEA	IX+%FFFFFFB5
005491 CD 63 2B 00         A 14926    	CALL	_follow_path
005495 C1                  A 14927    	POP	BC
005496 C1                  A 14928    	POP	BC
005497 DD2FFA              A 14929    	LD	(IX+%FFFFFFFA),HL
                           A 14930    ; 5003			if (res == FR_OK) res = FR_EXIS
00549A CD 00 00 00         A 14931    	CALL	__icmpzero
00549E 20 07               A 14932    	JR	NZ,L_1142
0054A0 01080000            A 14933    	LD	BC,8
0054A4 DD0FFA              A 14934    	LD	(IX+%FFFFFFFA),BC
                           A 14935    ; 5004			if (FF_FS_RPATH && res == FR_NO
                           A 14936    ; 5005				res = FR_INVALID_NAME;
                           A 14937    ; 5006			}
0054A7                     A 14938    L_1142:
                           A 14939    ; 5007			if (res == FR_NO_FILE) {		
0054A7 01040000            A 14940    	LD	BC,4
0054AB DD27FA              A 14941    	LD	HL,(IX+%FFFFFFFA)
0054AE B7                  A 14942    	OR	A,A
0054AF ED42                A 14943    	SBC	HL,BC
0054B1 C2 6E 56 00         A 14944    	JR	NZ,L_1145
                           A 14945    ; 5008				sobj.fs = fs;				
0054B5 DD07FD              A 14946    	LD	BC,(IX+%FFFFFFFD)
0054B8 DD0FE3              A 14947    	LD	(IX+%FFFFFFE3),BC
                           A 14948    ; 5009				dcl = create_chain(&sobj, 0
0054BB 01000000            A 14949    	LD	BC,0
0054BF C5                  A 14950    	PUSH	BC
0054C0 C5                  A 14951    	PUSH	BC
0054C1 ED65E3              A 14952    	PEA	IX+%FFFFFFE3
0054C4 CD 8A 0C 00         A 14953    	CALL	_create_chain
0054C8 C1                  A 14954    	POP	BC
0054C9 C1                  A 14955    	POP	BC
0054CA C1                  A 14956    	POP	BC
0054CB DD2FF6              A 14957    	LD	(IX+%FFFFFFF6),HL
0054CE DD73F9              A 14958    	LD	(IX+%FFFFFFF9),E
                           A 14959    ; 5010				res = FR_OK;
0054D1 01000000            A 14960    	LD	BC,0
0054D5 DD0FFA              A 14961    	LD	(IX+%FFFFFFFA),BC
                           A 14962    ; 5011				if (dcl == 0) res = FR_DENI
0054D8 DD27F6              A 14963    	LD	HL,(IX+%FFFFFFF6)
0054DB DD5EF9              A 14964    	LD	E,(IX+%FFFFFFF9)
0054DE CD 00 00 00         A 14965    	CALL	__lcmpzero
0054E2 20 07               A 14966    	JR	NZ,L_1129
0054E4 01070000            A 14967    	LD	BC,7
0054E8 DD0FFA              A 14968    	LD	(IX+%FFFFFFFA),BC
0054EB                     A 14969    L_1129:
                           A 14970    ; 5012				if (dcl == 1) res = FR_INT_
0054EB DD27F6              A 14971    	LD	HL,(IX+%FFFFFFF6)
0054EE DD5EF9              A 14972    	LD	E,(IX+%FFFFFFF9)
0054F1 01010000            A 14973    	LD	BC,1
0054F5 AF                  A 14974    	XOR	A,A
0054F6 CD 00 00 00         A 14975    	CALL	__lcmpu
0054FA 20 07               A 14976    	JR	NZ,L_1131
0054FC 01020000            A 14977    	LD	BC,2
005500 DD0FFA              A 14978    	LD	(IX+%FFFFFFFA),BC
005503                     A 14979    L_1131:
                           A 14980    ; 5013				if (dcl == 0xFFFFFFFF) res 
005503 DD27F6              A 14981    	LD	HL,(IX+%FFFFFFF6)
005506 DD5EF9              A 14982    	LD	E,(IX+%FFFFFFF9)
005509 01FFFFFF            A 14983    	LD	BC,16777215
00550D 3EFF                A 14984    	LD	A,%FF
00550F CD 00 00 00         A 14985    	CALL	__lcmpu
005513 20 07               A 14986    	JR	NZ,L_1132
005515 01010000            A 14987    	LD	BC,1
005519 DD0FFA              A 14988    	LD	(IX+%FFFFFFFA),BC
00551C                     A 14989    L_1132:
                           A 14990    ; 5014				tm = GET_FATTIME();
                           A 14991    ; 5015				if (res == FR_OK) {
00551C DD27FA              A 14992    	LD	HL,(IX+%FFFFFFFA)
00551F CD 00 00 00         A 14993    	CALL	__icmpzero
005523 C2 F1 55 00         A 14994    	JR	NZ,L_1140
                           A 14995    ; 5016					res = dir_clear(fs, dcl
005527 DD4EF9              A 14996    	LD	C,(IX+%FFFFFFF9)
00552A 0600                A 14997    	LD	B,%0
00552C C5                  A 14998    	PUSH	BC
00552D DD07F6              A 14999    	LD	BC,(IX+%FFFFFFF6)
005530 C5                  A 15000    	PUSH	BC
005531 DD07FD              A 15001    	LD	BC,(IX+%FFFFFFFD)
005534 C5                  A 15002    	PUSH	BC
005535 CD 33 10 00         A 15003    	CALL	_dir_clear
005539 C1                  A 15004    	POP	BC
00553A C1                  A 15005    	POP	BC
00553B C1                  A 15006    	POP	BC
00553C DD2FFA              A 15007    	LD	(IX+%FFFFFFFA),HL
                           A 15008    ; 5017					if (res == FR_OK) {
00553F CD 00 00 00         A 15009    	CALL	__icmpzero
005543 C2 F1 55 00         A 15010    	JR	NZ,L_1140
                           A 15011    ; 5018						if (!FF_FS_EXFAT ||
                           A 15012    ; 5019							memset(fs->win 
005547 010B0000            A 15013    	LD	BC,11
00554B C5                  A 15014    	PUSH	BC
00554C 01200000            A 15015    	LD	BC,32
005550 C5                  A 15016    	PUSH	BC
005551 DD31FD              A 15017    	LD	IY,(IX+%FFFFFFFD)
005554 ED6632              A 15018    	PEA	IY+%32
005557 CD 00 00 00         A 15019    	CALL	_memset
00555B C1                  A 15020    	POP	BC
00555C C1                  A 15021    	POP	BC
00555D C1                  A 15022    	POP	BC
                           A 15023    ; 5020							fs->win[DIR_Nam
00555E DD31FD              A 15024    	LD	IY,(IX+%FFFFFFFD)
005561 FD36322E            A 15025    	LD	(IY+%32),%2E
                           A 15026    ; 5021							fs->win[DIR_Att
005565 ED233D              A 15027    	LEA	HL,IY+%3D
005568 3610                A 15028    	LD	(HL),%10
                           A 15029    ; 5022							st_dword(fs->wi
00556A 01500000            A 15030    	LD	BC,80
00556E C5                  A 15031    	PUSH	BC
00556F 01000021            A 15032    	LD	BC,2162688
005573 C5                  A 15033    	PUSH	BC
005574 ED0348              A 15034    	LEA	BC,IY+%48
005577 C5                  A 15035    	PUSH	BC
005578 CD F5 00 00         A 15036    	CALL	_st_dword
00557C C1                  A 15037    	POP	BC
00557D C1                  A 15038    	POP	BC
00557E C1                  A 15039    	POP	BC
                           A 15040    ; 5023							st_clust(fs, fs
00557F DD4EF9              A 15041    	LD	C,(IX+%FFFFFFF9)
005582 0600                A 15042    	LD	B,%0
005584 C5                  A 15043    	PUSH	BC
005585 DD07F6              A 15044    	LD	BC,(IX+%FFFFFFF6)
005588 C5                  A 15045    	PUSH	BC
005589 DD31FD              A 15046    	LD	IY,(IX+%FFFFFFFD)
00558C ED6632              A 15047    	PEA	IY+%32
00558F DD07FD              A 15048    	LD	BC,(IX+%FFFFFFFD)
005592 C5                  A 15049    	PUSH	BC
005593 CD C8 16 00         A 15050    	CALL	_st_clust
005597 C1                  A 15051    	POP	BC
005598 C1                  A 15052    	POP	BC
005599 C1                  A 15053    	POP	BC
00559A C1                  A 15054    	POP	BC
                           A 15055    ; 5024							memcpy(fs->win 
00559B 01200000            A 15056    	LD	BC,32
00559F C5                  A 15057    	PUSH	BC
0055A0 DD31FD              A 15058    	LD	IY,(IX+%FFFFFFFD)
0055A3 ED6632              A 15059    	PEA	IY+%32
0055A6 ED0352              A 15060    	LEA	BC,IY+%52
0055A9 C5                  A 15061    	PUSH	BC
0055AA CD 00 00 00         A 15062    	CALL	_memcpy
0055AE C1                  A 15063    	POP	BC
0055AF C1                  A 15064    	POP	BC
0055B0 C1                  A 15065    	POP	BC
                           A 15066    ; 5025							fs->win[SZDIRE 
0055B1 DD31FD              A 15067    	LD	IY,(IX+%FFFFFFFD)
0055B4 ED2353              A 15068    	LEA	HL,IY+%53
0055B7 362E                A 15069    	LD	(HL),%2E
0055B9 DD07BC              A 15070    	LD	BC,(IX+%FFFFFFBC)
0055BC DD7EBF              A 15071    	LD	A,(IX+%FFFFFFBF)
0055BF DD0FF2              A 15072    	LD	(IX+%FFFFFFF2),BC
0055C2 DD77F5              A 15073    	LD	(IX+%FFFFFFF5),A
                           A 15074    ; 5026							st_clust(fs, fs
0055C5 DD4EF5              A 15075    	LD	C,(IX+%FFFFFFF5)
0055C8 0600                A 15076    	LD	B,%0
0055CA C5                  A 15077    	PUSH	BC
0055CB DD07F2              A 15078    	LD	BC,(IX+%FFFFFFF2)
0055CE C5                  A 15079    	PUSH	BC
0055CF ED0352              A 15080    	LEA	BC,IY+%52
0055D2 C5                  A 15081    	PUSH	BC
0055D3 DD07FD              A 15082    	LD	BC,(IX+%FFFFFFFD)
0055D6 C5                  A 15083    	PUSH	BC
0055D7 CD C8 16 00         A 15084    	CALL	_st_clust
0055DB C1                  A 15085    	POP	BC
0055DC C1                  A 15086    	POP	BC
0055DD C1                  A 15087    	POP	BC
0055DE C1                  A 15088    	POP	BC
                           A 15089    ; 5027							fs->wflag = 1;
0055DF DD31FD              A 15090    	LD	IY,(IX+%FFFFFFFD)
0055E2 FD360301            A 15091    	LD	(IY+%3),%1
                           A 15092    ; 5028						}
                           A 15093    ; 5029						res = dir_register(
0055E6 ED65B5              A 15094    	PEA	IX+%FFFFFFB5
0055E9 CD CD 1F 00         A 15095    	CALL	_dir_register
0055ED C1                  A 15096    	POP	BC
0055EE DD2FFA              A 15097    	LD	(IX+%FFFFFFFA),HL
                           A 15098    ; 5030					}
                           A 15099    ; 5031				}
0055F1                     A 15100    L_1140:
                           A 15101    ; 5032				if (res == FR_OK) {
0055F1 DD27FA              A 15102    	LD	HL,(IX+%FFFFFFFA)
0055F4 CD 00 00 00         A 15103    	CALL	__icmpzero
0055F8 20 58               A 15104    	JR	NZ,L_1139
                           A 15105    ; 5033	#if FF_FS_EXFAT
                           A 15106    ; 5034					if (fs->fs_type == FS_E
                           A 15107    ; 5035						st_dword(fs->dirbuf
                           A 15108    ; 5036						st_dword(fs->dirbuf
                           A 15109    ; 5037						st_dword(fs->dirbuf
                           A 15110    ; 5038						st_dword(fs->dirbuf
                           A 15111    ; 5039						fs->dirbuf[XDIR_Gen
                           A 15112    ; 5040						fs->dirbuf[XDIR_Att
                           A 15113    ; 5041						res = store_xdir(&d
                           A 15114    ; 5042					} else
                           A 15115    ; 5043	#endif
                           A 15116    ; 5044					{
                           A 15117    ; 5045						st_dword(dj.dir + D
0055FA 01500000            A 15118    	LD	BC,80
0055FE C5                  A 15119    	PUSH	BC
0055FF 01000021            A 15120    	LD	BC,2162688
005603 C5                  A 15121    	PUSH	BC
005604 DD31D0              A 15122    	LD	IY,(IX+%FFFFFFD0)
005607 ED0316              A 15123    	LEA	BC,IY+%16
00560A C5                  A 15124    	PUSH	BC
00560B CD F5 00 00         A 15125    	CALL	_st_dword
00560F C1                  A 15126    	POP	BC
005610 C1                  A 15127    	POP	BC
005611 C1                  A 15128    	POP	BC
                           A 15129    ; 5046						st_clust(fs, dj.dir
005612 DD4EF9              A 15130    	LD	C,(IX+%FFFFFFF9)
005615 0600                A 15131    	LD	B,%0
005617 C5                  A 15132    	PUSH	BC
005618 DD07F6              A 15133    	LD	BC,(IX+%FFFFFFF6)
00561B C5                  A 15134    	PUSH	BC
00561C DD07D0              A 15135    	LD	BC,(IX+%FFFFFFD0)
00561F C5                  A 15136    	PUSH	BC
005620 DD07FD              A 15137    	LD	BC,(IX+%FFFFFFFD)
005623 C5                  A 15138    	PUSH	BC
005624 CD C8 16 00         A 15139    	CALL	_st_clust
005628 C1                  A 15140    	POP	BC
005629 C1                  A 15141    	POP	BC
00562A C1                  A 15142    	POP	BC
00562B C1                  A 15143    	POP	BC
                           A 15144    ; 5047						dj.dir[DIR_Attr] = 
00562C DD31D0              A 15145    	LD	IY,(IX+%FFFFFFD0)
00562F ED230B              A 15146    	LEA	HL,IY+%B
005632 3610                A 15147    	LD	(HL),%10
                           A 15148    ; 5048						fs->wflag = 1;
005634 DD31FD              A 15149    	LD	IY,(IX+%FFFFFFFD)
005637 FD360301            A 15150    	LD	(IY+%3),%1
                           A 15151    ; 5049					}
                           A 15152    ; 5050					if (res == FR_OK) {
00563B DD27FA              A 15153    	LD	HL,(IX+%FFFFFFFA)
00563E CD 00 00 00         A 15154    	CALL	__icmpzero
005642 20 2A               A 15155    	JR	NZ,L_1145
                           A 15156    ; 5051						res = sync_fs(fs);
005644 DD07FD              A 15157    	LD	BC,(IX+%FFFFFFFD)
005647 C5                  A 15158    	PUSH	BC
005648 CD 30 04 00         A 15159    	CALL	_sync_fs
00564C C1                  A 15160    	POP	BC
00564D DD2FFA              A 15161    	LD	(IX+%FFFFFFFA),HL
                           A 15162    ; 5052					}
                           A 15163    ; 5053				} else {
005650 18 1C               A 15164    	JR	L_1145
005652                     A 15165    L_1139:
                           A 15166    ; 5054					remove_chain(&sobj, dcl
005652 01000000            A 15167    	LD	BC,0
005656 C5                  A 15168    	PUSH	BC
005657 C5                  A 15169    	PUSH	BC
005658 DD4EF9              A 15170    	LD	C,(IX+%FFFFFFF9)
00565B 0600                A 15171    	LD	B,%0
00565D C5                  A 15172    	PUSH	BC
00565E DD07F6              A 15173    	LD	BC,(IX+%FFFFFFF6)
005661 C5                  A 15174    	PUSH	BC
005662 ED65E3              A 15175    	PEA	IX+%FFFFFFE3
005665 CD 0B 0B 00         A 15176    	CALL	_remove_chain
005669 C1                  A 15177    	POP	BC
00566A C1                  A 15178    	POP	BC
00566B C1                  A 15179    	POP	BC
00566C C1                  A 15180    	POP	BC
00566D C1                  A 15181    	POP	BC
                           A 15182    ; 5055				}
                           A 15183    ; 5056			}
                           A 15184    ; 5057			FREE_NAMBUF();
                           A 15185    ; 5058		}
00566E                     A 15186    L_1145:
                           A 15187    ; 5059	
                           A 15188    ; 5060		LEAVE_FF(fs, res);
00566E DD27FA              A 15189    	LD	HL,(IX+%FFFFFFFA)
                           A 15190    ; 5061	}
005671 DDF9                A 15191    	LD	SP,IX
005673 DDE1                A 15192    	POP	IX
005675 C9                  A 15193    	RET	
                           A 15194    
                           A 15195    
                           A 15196    ;**************************** _f_mkdir ********
                           A 15197    ;Name                         Addr/Register   S
                           A 15198    ;_memcpy                             IMPORT  --
                           A 15199    ;_memset                             IMPORT  --
                           A 15200    ;lbuf                                IX-587    
                           A 15201    ;dj                                   IX-75    
                           A 15202    ;sobj                                 IX-29    
                           A 15203    ;pcl                                  IX-14    
                           A 15204    ;dcl                                  IX-10    
                           A 15205    ;res                                   IX-6    
                           A 15206    ;fs                                    IX-3    
                           A 15207    ;path                                  IX+6    
                           A 15208    
                           A 15209    
                           A 15210    ; Stack Frame Size: 596 (bytes)
                           A 15211    ;       Spill Code: -1 (instruction)
                           A 15212    
                           A 15213    
                           A 15214    ; 5062	
                           A 15215    ; 5063	
                           A 15216    ; 5064	
                           A 15217    ; 5065	
                           A 15218    ; 5066	/*-------------------------------------
                           A 15219    ; 5067	/* Rename a File/Directory             
                           A 15220    ; 5068	/*-------------------------------------
                           A 15221    ; 5069	
                           A 15222    ; 5070	FRESULT f_rename (
                           A 15223    ; 5071		const TCHAR* path_old,	/* Pointer 
                           A 15224    ; 5072		const TCHAR* path_new	/* Pointer 
                           A 15225    ; 5073	)
                           A 15226    ; 5074	{
005676                     A 15227    _f_rename:
005676 216EFDFF            A 15228    	LD	HL,-658
00567A CD 00 00 00         A 15229    	CALL	__frameset
                           A 15230    ; 5075		FRESULT res;
                           A 15231    ; 5076		DIR djo, djn;
                           A 15232    ; 5077		FATFS *fs;
                           A 15233    ; 5078		BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 :
                           A 15234    ; 5079		LBA_t sect;
                           A 15235    ; 5080		DEF_NAMBUF
                           A 15236    ; 5081	
                           A 15237    ; 5082	
                           A 15238    ; 5083		get_ldnumber(&path_new);			
00567E ED6509              A 15239    	PEA	IX+%9
005681 CD 8F 2C 00         A 15240    	CALL	_get_ldnumber
005685 C1                  A 15241    	POP	BC
                           A 15242    ; 5084		res = mount_volume(&path_old, &fs, 
005686 01020000            A 15243    	LD	BC,2
00568A C5                  A 15244    	PUSH	BC
00568B ED65FA              A 15245    	PEA	IX+%FFFFFFFA
00568E ED6506              A 15246    	PEA	IX+%6
005691 CD 82 30 00         A 15247    	CALL	_mount_volume
005695 C1                  A 15248    	POP	BC
005696 C1                  A 15249    	POP	BC
005697 C1                  A 15250    	POP	BC
005698 DD2FFD              A 15251    	LD	(IX+%FFFFFFFD),HL
                           A 15252    ; 5085		if (res == FR_OK) {
00569B CD 00 00 00         A 15253    	CALL	__icmpzero
00569F C2 E2 58 00         A 15254    	JR	NZ,L_1173
                           A 15255    ; 5086			djo.obj.fs = fs;
0056A3 DD07FA              A 15256    	LD	BC,(IX+%FFFFFFFA)
0056A6 DD0F9F              A 15257    	LD	(IX+%FFFFFF9F),BC
                           A 15258    ; 5087			INIT_NAMBUF(fs);
0056A9 DDE5E1              A 15259    	LD	HL,IX
0056AC 0171FDFF            A 15260    	LD	BC,-655
0056B0 09                  A 15261    	ADD	HL,BC
0056B1 DD31FA              A 15262    	LD	IY,(IX+%FFFFFFFA)
0056B4 FD2F0B              A 15263    	LD	(IY+%B),HL
                           A 15264    ; 5088			res = follow_path(&djo, path_ol
0056B7 DD0706              A 15265    	LD	BC,(IX+%6)
0056BA C5                  A 15266    	PUSH	BC
0056BB ED659F              A 15267    	PEA	IX+%FFFFFF9F
0056BE CD 63 2B 00         A 15268    	CALL	_follow_path
0056C2 C1                  A 15269    	POP	BC
0056C3 C1                  A 15270    	POP	BC
0056C4 DD2FFD              A 15271    	LD	(IX+%FFFFFFFD),HL
                           A 15272    ; 5089			if (res == FR_OK && (djo.fn[NSF
0056C7 CD 00 00 00         A 15273    	CALL	__icmpzero
0056CB 20 11               A 15274    	JR	NZ,L_1170
0056CD ED55BD              A 15275    	LEA	IY,IX+%FFFFFFBD
0056D0 FD7E0B              A 15276    	LD	A,(IY+%B)
0056D3 E6A0                A 15277    	AND	A,%A0
0056D5 28 07               A 15278    	JR	Z,L_1170
0056D7 01060000            A 15279    	LD	BC,6
0056DB DD0FFD              A 15280    	LD	(IX+%FFFFFFFD),BC
0056DE                     A 15281    L_1170:
                           A 15282    ; 5090	#if FF_FS_LOCK != 0
                           A 15283    ; 5091			if (res == FR_OK) {
                           A 15284    ; 5092				res = chk_lock(&djo, 2);
                           A 15285    ; 5093			}
                           A 15286    ; 5094	#endif
                           A 15287    ; 5095			if (res == FR_OK) {				
0056DE DD27FD              A 15288    	LD	HL,(IX+%FFFFFFFD)
0056E1 CD 00 00 00         A 15289    	CALL	__icmpzero
0056E5 C2 E2 58 00         A 15290    	JR	NZ,L_1173
                           A 15291    ; 5096	#if FF_FS_EXFAT
                           A 15292    ; 5097				if (fs->fs_type == FS_EXFAT
                           A 15293    ; 5098					BYTE nf, nn;
                           A 15294    ; 5099					WORD nh;
                           A 15295    ; 5100	
                           A 15296    ; 5101					memcpy(buf, fs->dirbuf,
                           A 15297    ; 5102					memcpy(&djn, &djo, size
                           A 15298    ; 5103					res = follow_path(&djn,
                           A 15299    ; 5104					if (res == FR_OK) {		
                           A 15300    ; 5105						res = (djn.obj.sclu
                           A 15301    ; 5106					}
                           A 15302    ; 5107					if (res == FR_NO_FILE) 
                           A 15303    ; 5108						res = dir_register(
                           A 15304    ; 5109						if (res == FR_OK) {
                           A 15305    ; 5110							nf = fs->dirbuf
                           A 15306    ; 5111							nh = ld_word(fs
                           A 15307    ; 5112							memcpy(fs->dirb
                           A 15308    ; 5113							fs->dirbuf[XDIR
                           A 15309    ; 5114							st_word(fs->dir
                           A 15310    ; 5115							if (!(fs->dirbu
                           A 15311    ; 5116	/* Start of critical section where an i
                           A 15312    ; 5117							res = store_xdi
                           A 15313    ; 5118						}
                           A 15314    ; 5119					}
                           A 15315    ; 5120				} else
                           A 15316    ; 5121	#endif
                           A 15317    ; 5122				{	/* At FAT/FAT32 volume 
                           A 15318    ; 5123					memcpy(buf, djo.dir, SZ
0056E9 01200000            A 15319    	LD	BC,32
0056ED C5                  A 15320    	PUSH	BC
0056EE DD07BA              A 15321    	LD	BC,(IX+%FFFFFFBA)
0056F1 C5                  A 15322    	PUSH	BC
0056F2 ED65CD              A 15323    	PEA	IX+%FFFFFFCD
0056F5 CD 00 00 00         A 15324    	CALL	_memcpy
0056F9 C1                  A 15325    	POP	BC
0056FA C1                  A 15326    	POP	BC
0056FB C1                  A 15327    	POP	BC
                           A 15328    ; 5124					memcpy(&djn, &djo, size
0056FC 012E0000            A 15329    	LD	BC,46
005700 C5                  A 15330    	PUSH	BC
005701 ED659F              A 15331    	PEA	IX+%FFFFFF9F
005704 DDE5E1              A 15332    	LD	HL,IX
005707 0171FFFF            A 15333    	LD	BC,-143
00570B 09                  A 15334    	ADD	HL,BC
00570C E5C1                A 15335    	LD	BC,HL
00570E C5                  A 15336    	PUSH	BC
00570F CD 00 00 00         A 15337    	CALL	_memcpy
005713 C1                  A 15338    	POP	BC
005714 C1                  A 15339    	POP	BC
005715 C1                  A 15340    	POP	BC
                           A 15341    ; 5125					res = follow_path(&djn,
005716 DD0709              A 15342    	LD	BC,(IX+%9)
005719 C5                  A 15343    	PUSH	BC
00571A DDE5E1              A 15344    	LD	HL,IX
00571D 0171FFFF            A 15345    	LD	BC,-143
005721 09                  A 15346    	ADD	HL,BC
005722 E5C1                A 15347    	LD	BC,HL
005724 C5                  A 15348    	PUSH	BC
005725 CD 63 2B 00         A 15349    	CALL	_follow_path
005729 C1                  A 15350    	POP	BC
00572A C1                  A 15351    	POP	BC
00572B DD2FFD              A 15352    	LD	(IX+%FFFFFFFD),HL
                           A 15353    ; 5126					if (res == FR_OK) {		
00572E CD 00 00 00         A 15354    	CALL	__icmpzero
005732 20 3C               A 15355    	JR	NZ,L_1165
                           A 15356    ; 5127						res = (djn.obj.sclu
005734 0178FFFF            A 15357    	LD	BC,-136
005738 CD 00 00 00         A 15358    	CALL	__lldix
00573C DD07A6              A 15359    	LD	BC,(IX+%FFFFFFA6)
00573F DD7EA9              A 15360    	LD	A,(IX+%FFFFFFA9)
005742 CD 00 00 00         A 15361    	CALL	__lcmpu
005746 20 1B               A 15362    	JR	NZ,L_1152
005748 DD2780              A 15363    	LD	HL,(IX+%FFFFFF80)
00574B DD5E83              A 15364    	LD	E,(IX+%FFFFFF83)
00574E DD07AE              A 15365    	LD	BC,(IX+%FFFFFFAE)
005751 DD7EB1              A 15366    	LD	A,(IX+%FFFFFFB1)
005754 CD 00 00 00         A 15367    	CALL	__lcmpu
005758 20 09               A 15368    	JR	NZ,L_1152
00575A 01040000            A 15369    	LD	BC,4
00575E DD0FF4              A 15370    	LD	(IX+%FFFFFFF4),BC
005761 18 07               A 15371    	JR	L_1153
005763                     A 15372    L_1152:
005763 01080000            A 15373    	LD	BC,8
005767 DD0FF4              A 15374    	LD	(IX+%FFFFFFF4),BC
00576A                     A 15375    L_1153:
00576A DD07F4              A 15376    	LD	BC,(IX+%FFFFFFF4)
00576D DD0FFD              A 15377    	LD	(IX+%FFFFFFFD),BC
                           A 15378    ; 5128					}
005770                     A 15379    L_1165:
                           A 15380    ; 5129					if (res == FR_NO_FILE) 
005770 01040000            A 15381    	LD	BC,4
005774 DD27FD              A 15382    	LD	HL,(IX+%FFFFFFFD)
005777 B7                  A 15383    	OR	A,A
005778 ED42                A 15384    	SBC	HL,BC
00577A C2 BC 58 00         A 15385    	JR	NZ,L_1168
                           A 15386    ; 5130						res = dir_register(
00577E DDE5E1              A 15387    	LD	HL,IX
005781 0171FFFF            A 15388    	LD	BC,-143
005785 09                  A 15389    	ADD	HL,BC
005786 E5C1                A 15390    	LD	BC,HL
005788 C5                  A 15391    	PUSH	BC
005789 CD CD 1F 00         A 15392    	CALL	_dir_register
00578D C1                  A 15393    	POP	BC
00578E DD2FFD              A 15394    	LD	(IX+%FFFFFFFD),HL
                           A 15395    ; 5131						if (res == FR_OK) {
005791 CD 00 00 00         A 15396    	CALL	__icmpzero
005795 C2 BC 58 00         A 15397    	JR	NZ,L_1168
                           A 15398    ; 5132							dir = djn.dir;	
005799 DD078C              A 15399    	LD	BC,(IX+%FFFFFF8C)
00579C DD0FF7              A 15400    	LD	(IX+%FFFFFFF7),BC
                           A 15401    ; 5133							memcpy(dir + 13
00579F 01130000            A 15402    	LD	BC,19
0057A3 C5                  A 15403    	PUSH	BC
0057A4 ED02DA              A 15404    	LEA	BC,IX+%FFFFFFDA
0057A7 C5                  A 15405    	PUSH	BC
0057A8 DD31F7              A 15406    	LD	IY,(IX+%FFFFFFF7)
0057AB ED030D              A 15407    	LEA	BC,IY+%D
0057AE C5                  A 15408    	PUSH	BC
0057AF CD 00 00 00         A 15409    	CALL	_memcpy
0057B3 C1                  A 15410    	POP	BC
0057B4 C1                  A 15411    	POP	BC
0057B5 C1                  A 15412    	POP	BC
                           A 15413    ; 5134							dir[DIR_Attr] =
0057B6 DD31F7              A 15414    	LD	IY,(IX+%FFFFFFF7)
0057B9 ED230B              A 15415    	LEA	HL,IY+%B
0057BC 016EFDFF            A 15416    	LD	BC,-658
0057C0 CD 00 00 00         A 15417    	CALL	__istix
0057C4 ED55CD              A 15418    	LEA	IY,IX+%FFFFFFCD
0057C7 016EFDFF            A 15419    	LD	BC,-658
0057CB CD 00 00 00         A 15420    	CALL	__ildix
0057CF FD7E0B              A 15421    	LD	A,(IY+%B)
0057D2 77                  A 15422    	LD	(HL),A
                           A 15423    ; 5135							if (!(dir[DIR_A
0057D3 016EFDFF            A 15424    	LD	BC,-658
0057D7 CD 00 00 00         A 15425    	CALL	__ildix
0057DB 7E                  A 15426    	LD	A,(HL)
0057DC E610                A 15427    	AND	A,%10
0057DE 20 0D               A 15428    	JR	NZ,L_1156
0057E0 DD31F7              A 15429    	LD	IY,(IX+%FFFFFFF7)
0057E3 ED230B              A 15430    	LEA	HL,IY+%B
0057E6 7E                  A 15431    	LD	A,(HL)
0057E7 CBEF                A 15432    	SET	%5,A
0057E9 ED230B              A 15433    	LEA	HL,IY+%B
0057EC 77                  A 15434    	LD	(HL),A
0057ED                     A 15435    L_1156:
                           A 15436    ; 5136							fs->wflag = 1;
0057ED DD31FA              A 15437    	LD	IY,(IX+%FFFFFFFA)
0057F0 FD360301            A 15438    	LD	(IY+%3),%1
                           A 15439    ; 5137							if ((dir[DIR_At
0057F4 DD31F7              A 15440    	LD	IY,(IX+%FFFFFFF7)
0057F7 FD7E0B              A 15441    	LD	A,(IY+%B)
0057FA E610                A 15442    	AND	A,%10
0057FC CA BC 58 00         A 15443    	JR	Z,L_1168
005800 DDE5E1              A 15444    	LD	HL,IX
005803 0171FFFF            A 15445    	LD	BC,-143
005807 09                  A 15446    	ADD	HL,BC
005808 DD2FF1              A 15447    	LD	(IX+%FFFFFFF1),HL
00580B DD27A6              A 15448    	LD	HL,(IX+%FFFFFFA6)
00580E DD5EA9              A 15449    	LD	E,(IX+%FFFFFFA9)
005811 DD31F1              A 15450    	LD	IY,(IX+%FFFFFFF1)
005814 FD0707              A 15451    	LD	BC,(IY+%7)
005817 FD7E0A              A 15452    	LD	A,(IY+%A)
00581A CD 00 00 00         A 15453    	CALL	__lcmpu
00581E CA BC 58 00         A 15454    	JR	Z,L_1168
                           A 15455    ; 5138								sect = clst
005822 DD07F7              A 15456    	LD	BC,(IX+%FFFFFFF7)
005825 C5                  A 15457    	PUSH	BC
005826 DD07FA              A 15458    	LD	BC,(IX+%FFFFFFFA)
005829 C5                  A 15459    	PUSH	BC
00582A CD 64 16 00         A 15460    	CALL	_ld_clust
00582E C1                  A 15461    	POP	BC
00582F C1                  A 15462    	POP	BC
005830 4B                  A 15463    	LD	C,E
005831 0600                A 15464    	LD	B,%0
005833 C5                  A 15465    	PUSH	BC
005834 E5                  A 15466    	PUSH	HL
005835 DD07FA              A 15467    	LD	BC,(IX+%FFFFFFFA)
005838 C5                  A 15468    	PUSH	BC
005839 CD 6B 05 00         A 15469    	CALL	_clst2sect
00583D C1                  A 15470    	POP	BC
00583E C1                  A 15471    	POP	BC
00583F C1                  A 15472    	POP	BC
005840 DD2FED              A 15473    	LD	(IX+%FFFFFFED),HL
005843 DD73F0              A 15474    	LD	(IX+%FFFFFFF0),E
                           A 15475    ; 5139								if (sect ==
005846 DD27ED              A 15476    	LD	HL,(IX+%FFFFFFED)
005849 DD5EF0              A 15477    	LD	E,(IX+%FFFFFFF0)
00584C CD 00 00 00         A 15478    	CALL	__lcmpzero
005850 20 09               A 15479    	JR	NZ,L_1161
                           A 15480    ; 5140									res = F
005852 01020000            A 15481    	LD	BC,2
005856 DD0FFD              A 15482    	LD	(IX+%FFFFFFFD),BC
                           A 15483    ; 5141								} else {
005859 18 61               A 15484    	JR	L_1168
00585B                     A 15485    L_1161:
                           A 15486    ; 5142	/* Start of critical section where an i
                           A 15487    ; 5143									res = m
00585B DD4EF0              A 15488    	LD	C,(IX+%FFFFFFF0)
00585E 0600                A 15489    	LD	B,%0
005860 C5                  A 15490    	PUSH	BC
005861 DD07ED              A 15491    	LD	BC,(IX+%FFFFFFED)
005864 C5                  A 15492    	PUSH	BC
005865 DD07FA              A 15493    	LD	BC,(IX+%FFFFFFFA)
005868 C5                  A 15494    	PUSH	BC
005869 CD A6 03 00         A 15495    	CALL	_move_window
00586D C1                  A 15496    	POP	BC
00586E C1                  A 15497    	POP	BC
00586F C1                  A 15498    	POP	BC
005870 DD2FFD              A 15499    	LD	(IX+%FFFFFFFD),HL
                           A 15500    ; 5144									dir = f
005873 DD31FA              A 15501    	LD	IY,(IX+%FFFFFFFA)
005876 ED3352              A 15502    	LEA	IY,IY+%52
005879 DD3EF7              A 15503    	LD	(IX+%FFFFFFF7),IY
                           A 15504    ; 5145									if (res
00587C DD27FD              A 15505    	LD	HL,(IX+%FFFFFFFD)
00587F CD 00 00 00         A 15506    	CALL	__icmpzero
005883 20 37               A 15507    	JR	NZ,L_1168
005885 DD27F7              A 15508    	LD	HL,(IX+%FFFFFFF7)
005888 23                  A 15509    	INC	HL
005889 7E                  A 15510    	LD	A,(HL)
00588A B7ED62              A 15511    	UEXT	HL
00588D 6F                  A 15512    	LD	L,A
00588E 012E0000            A 15513    	LD	BC,46
005892 B7                  A 15514    	OR	A,A
005893 ED42                A 15515    	SBC	HL,BC
005895 20 25               A 15516    	JR	NZ,L_1168
                           A 15517    ; 5146										st_
005897 DD31F1              A 15518    	LD	IY,(IX+%FFFFFFF1)
00589A FD0707              A 15519    	LD	BC,(IY+%7)
00589D FD7E0A              A 15520    	LD	A,(IY+%A)
0058A0 2600                A 15521    	LD	H,%0
0058A2 6F                  A 15522    	LD	L,A
0058A3 E5                  A 15523    	PUSH	HL
0058A4 C5                  A 15524    	PUSH	BC
0058A5 DD07F7              A 15525    	LD	BC,(IX+%FFFFFFF7)
0058A8 C5                  A 15526    	PUSH	BC
0058A9 DD07FA              A 15527    	LD	BC,(IX+%FFFFFFFA)
0058AC C5                  A 15528    	PUSH	BC
0058AD CD C8 16 00         A 15529    	CALL	_st_clust
0058B1 C1                  A 15530    	POP	BC
0058B2 C1                  A 15531    	POP	BC
0058B3 C1                  A 15532    	POP	BC
0058B4 C1                  A 15533    	POP	BC
                           A 15534    ; 5147										fs-
0058B5 DD31FA              A 15535    	LD	IY,(IX+%FFFFFFFA)
0058B8 FD360301            A 15536    	LD	(IY+%3),%1
                           A 15537    ; 5148									}
                           A 15538    ; 5149								}
                           A 15539    ; 5150							}
                           A 15540    ; 5151						}
                           A 15541    ; 5152					}
                           A 15542    ; 5153				}
0058BC                     A 15543    L_1168:
                           A 15544    ; 5154				if (res == FR_OK) {
0058BC DD27FD              A 15545    	LD	HL,(IX+%FFFFFFFD)
0058BF CD 00 00 00         A 15546    	CALL	__icmpzero
0058C3 20 1D               A 15547    	JR	NZ,L_1173
                           A 15548    ; 5155					res = dir_remove(&djo);
0058C5 ED659F              A 15549    	PEA	IX+%FFFFFF9F
0058C8 CD 3F 22 00         A 15550    	CALL	_dir_remove
0058CC C1                  A 15551    	POP	BC
0058CD DD2FFD              A 15552    	LD	(IX+%FFFFFFFD),HL
                           A 15553    ; 5156					if (res == FR_OK) {
0058D0 CD 00 00 00         A 15554    	CALL	__icmpzero
0058D4 20 0C               A 15555    	JR	NZ,L_1173
                           A 15556    ; 5157						res = sync_fs(fs);
0058D6 DD07FA              A 15557    	LD	BC,(IX+%FFFFFFFA)
0058D9 C5                  A 15558    	PUSH	BC
0058DA CD 30 04 00         A 15559    	CALL	_sync_fs
0058DE C1                  A 15560    	POP	BC
0058DF DD2FFD              A 15561    	LD	(IX+%FFFFFFFD),HL
                           A 15562    ; 5158					}
                           A 15563    ; 5159				}
                           A 15564    ; 5160	/* End of the critical section */
                           A 15565    ; 5161			}
                           A 15566    ; 5162			FREE_NAMBUF();
                           A 15567    ; 5163		}
0058E2                     A 15568    L_1173:
                           A 15569    ; 5164	
                           A 15570    ; 5165		LEAVE_FF(fs, res);
0058E2 DD27FD              A 15571    	LD	HL,(IX+%FFFFFFFD)
                           A 15572    ; 5166	}
0058E5 DDF9                A 15573    	LD	SP,IX
0058E7 DDE1                A 15574    	POP	IX
0058E9 C9                  A 15575    	RET	
                           A 15576    
                           A 15577    
                           A 15578    ;**************************** _f_rename *******
                           A 15579    ;Name                         Addr/Register   S
                           A 15580    ;_memcpy                             IMPORT  --
                           A 15581    ;lbuf                                IX-655    
                           A 15582    ;djn                                 IX-143    
                           A 15583    ;djo                                  IX-97    
                           A 15584    ;buf                                  IX-51    
                           A 15585    ;sect                                 IX-19    
                           A 15586    ;G_91                                 IX-15    
                           A 15587    ;temp1150                             IX-12    
                           A 15588    ;dir                                   IX-9    
                           A 15589    ;fs                                    IX-6    
                           A 15590    ;res                                   IX-3    
                           A 15591    ;path_new                              IX+9    
                           A 15592    ;path_old                              IX+6    
                           A 15593    
                           A 15594    
                           A 15595    ; Stack Frame Size: 670 (bytes)
                           A 15596    ;       Spill Code: -1 (instruction)
                           A 15597    
                           A 15598    
                           A 15599    ; 5167	
                           A 15600    ; 5168	#endif /* !FF_FS_READONLY */
                           A 15601    ; 5169	#endif /* FF_FS_MINIMIZE == 0 */
                           A 15602    ; 5170	#endif /* FF_FS_MINIMIZE <= 1 */
                           A 15603    ; 5171	#endif /* FF_FS_MINIMIZE <= 2 */
                           A 15604    ; 5172	
                           A 15605    ; 5173	
                           A 15606    ; 5174	
                           A 15607    ; 5175	#if FF_USE_CHMOD && !FF_FS_READONLY
                           A 15608    ; 5176	/*-------------------------------------
                           A 15609    ; 5177	/* Change Attribute                    
                           A 15610    ; 5178	/*-------------------------------------
                           A 15611    ; 5179	
                           A 15612    ; 5180	FRESULT f_chmod (
                           A 15613    ; 5181		const TCHAR* path,	/* Pointer to t
                           A 15614    ; 5182		BYTE attr,			/* Attribute bi
                           A 15615    ; 5183		BYTE mask			/* Attribute ma
                           A 15616    ; 5184	)
                           A 15617    ; 5185	{
                           A 15618    ; 5186		FRESULT res;
                           A 15619    ; 5187		DIR dj;
                           A 15620    ; 5188		FATFS *fs;
                           A 15621    ; 5189		DEF_NAMBUF
                           A 15622    ; 5190	
                           A 15623    ; 5191	
                           A 15624    ; 5192		res = mount_volume(&path, &fs, FA_W
                           A 15625    ; 5193		if (res == FR_OK) {
                           A 15626    ; 5194			dj.obj.fs = fs;
                           A 15627    ; 5195			INIT_NAMBUF(fs);
                           A 15628    ; 5196			res = follow_path(&dj, path);	
                           A 15629    ; 5197			if (res == FR_OK && (dj.fn[NSFL
                           A 15630    ; 5198			if (res == FR_OK) {
                           A 15631    ; 5199				mask &= AM_RDO|AM_HID|AM_SY
                           A 15632    ; 5200	#if FF_FS_EXFAT
                           A 15633    ; 5201				if (fs->fs_type == FS_EXFAT
                           A 15634    ; 5202					fs->dirbuf[XDIR_Attr] =
                           A 15635    ; 5203					res = store_xdir(&dj);
                           A 15636    ; 5204				} else
                           A 15637    ; 5205	#endif
                           A 15638    ; 5206				{
                           A 15639    ; 5207					dj.dir[DIR_Attr] = (att
                           A 15640    ; 5208					fs->wflag = 1;
                           A 15641    ; 5209				}
                           A 15642    ; 5210				if (res == FR_OK) {
                           A 15643    ; 5211					res = sync_fs(fs);
                           A 15644    ; 5212				}
                           A 15645    ; 5213			}
                           A 15646    ; 5214			FREE_NAMBUF();
                           A 15647    ; 5215		}
                           A 15648    ; 5216	
                           A 15649    ; 5217		LEAVE_FF(fs, res);
                           A 15650    ; 5218	}
                           A 15651    ; 5219	
                           A 15652    ; 5220	
                           A 15653    ; 5221	
                           A 15654    ; 5222	
                           A 15655    ; 5223	/*-------------------------------------
                           A 15656    ; 5224	/* Change Timestamp                    
                           A 15657    ; 5225	/*-------------------------------------
                           A 15658    ; 5226	
                           A 15659    ; 5227	FRESULT f_utime (
                           A 15660    ; 5228		const TCHAR* path,	/* Pointer to t
                           A 15661    ; 5229		const FILINFO* fno	/* Pointer to t
                           A 15662    ; 5230	)
                           A 15663    ; 5231	{
                           A 15664    ; 5232		FRESULT res;
                           A 15665    ; 5233		DIR dj;
                           A 15666    ; 5234		FATFS *fs;
                           A 15667    ; 5235		DEF_NAMBUF
                           A 15668    ; 5236	
                           A 15669    ; 5237	
                           A 15670    ; 5238		res = mount_volume(&path, &fs, FA_W
                           A 15671    ; 5239		if (res == FR_OK) {
                           A 15672    ; 5240			dj.obj.fs = fs;
                           A 15673    ; 5241			INIT_NAMBUF(fs);
                           A 15674    ; 5242			res = follow_path(&dj, path);	
                           A 15675    ; 5243			if (res == FR_OK && (dj.fn[NSFL
                           A 15676    ; 5244			if (res == FR_OK) {
                           A 15677    ; 5245	#if FF_FS_EXFAT
                           A 15678    ; 5246				if (fs->fs_type == FS_EXFAT
                           A 15679    ; 5247					st_dword(fs->dirbuf + X
                           A 15680    ; 5248					res = store_xdir(&dj);
                           A 15681    ; 5249				} else
                           A 15682    ; 5250	#endif
                           A 15683    ; 5251				{
                           A 15684    ; 5252					st_dword(dj.dir + DIR_M
                           A 15685    ; 5253					fs->wflag = 1;
                           A 15686    ; 5254				}
                           A 15687    ; 5255				if (res == FR_OK) {
                           A 15688    ; 5256					res = sync_fs(fs);
                           A 15689    ; 5257				}
                           A 15690    ; 5258			}
                           A 15691    ; 5259			FREE_NAMBUF();
                           A 15692    ; 5260		}
                           A 15693    ; 5261	
                           A 15694    ; 5262		LEAVE_FF(fs, res);
                           A 15695    ; 5263	}
                           A 15696    ; 5264	
                           A 15697    ; 5265	#endif	/* FF_USE_CHMOD && !FF_FS_READO
                           A 15698    ; 5266	
                           A 15699    ; 5267	
                           A 15700    ; 5268	
                           A 15701    ; 5269	#if FF_USE_LABEL
                           A 15702    ; 5270	/*-------------------------------------
                           A 15703    ; 5271	/* Get Volume Label                    
                           A 15704    ; 5272	/*-------------------------------------
                           A 15705    ; 5273	
                           A 15706    ; 5274	FRESULT f_getlabel (
                           A 15707    ; 5275		const TCHAR* path,	/* Logical driv
                           A 15708    ; 5276		TCHAR* label,		/* Buffer to st
                           A 15709    ; 5277		DWORD* vsn			/* Variable to 
                           A 15710    ; 5278	)
                           A 15711    ; 5279	{
0058EA                     A 15712    _f_getlabel:
0058EA 21C1FFFF            A 15713    	LD	HL,-63
0058EE CD 00 00 00         A 15714    	CALL	__frameset
                           A 15715    ; 5280		FRESULT res;
                           A 15716    ; 5281		DIR dj;
                           A 15717    ; 5282		FATFS *fs;
                           A 15718    ; 5283		UINT si, di;
                           A 15719    ; 5284		WCHAR wc;
                           A 15720    ; 5285	
                           A 15721    ; 5286		/* Get logical drive */
                           A 15722    ; 5287		res = mount_volume(&path, &fs, 0);
0058F2 01000000            A 15723    	LD	BC,0
0058F6 C5                  A 15724    	PUSH	BC
0058F7 ED65F7              A 15725    	PEA	IX+%FFFFFFF7
0058FA ED6506              A 15726    	PEA	IX+%6
0058FD CD 82 30 00         A 15727    	CALL	_mount_volume
005901 C1                  A 15728    	POP	BC
005902 C1                  A 15729    	POP	BC
005903 C1                  A 15730    	POP	BC
005904 DD2FFA              A 15731    	LD	(IX+%FFFFFFFA),HL
                           A 15732    ; 5288	
                           A 15733    ; 5289		/* Get volume label */
                           A 15734    ; 5290		if (res == FR_OK && label) {
005907 CD 00 00 00         A 15735    	CALL	__icmpzero
00590B C2 EE 59 00         A 15736    	JR	NZ,L_1196
00590F DD2709              A 15737    	LD	HL,(IX+%9)
005912 CD 00 00 00         A 15738    	CALL	__icmpzero
005916 CA EE 59 00         A 15739    	JR	Z,L_1196
                           A 15740    ; 5291			dj.obj.fs = fs; dj.obj.sclust =
00591A ED02C4              A 15741    	LEA	BC,IX+%FFFFFFC4
00591D DD0FC1              A 15742    	LD	(IX+%FFFFFFC1),BC
005920 DD07F7              A 15743    	LD	BC,(IX+%FFFFFFF7)
005923 DD0FC4              A 15744    	LD	(IX+%FFFFFFC4),BC
005926 01000000            A 15745    	LD	BC,0
00592A DD31C1              A 15746    	LD	IY,(IX+%FFFFFFC1)
00592D FD0F07              A 15747    	LD	(IY+%7),BC
005930 FD360A00            A 15748    	LD	(IY+%A),%0
                           A 15749    ; 5292			res = dir_sdi(&dj, 0);
005934 C5                  A 15750    	PUSH	BC
005935 C5                  A 15751    	PUSH	BC
005936 ED65C4              A 15752    	PEA	IX+%FFFFFFC4
005939 CD 18 11 00         A 15753    	CALL	_dir_sdi
00593D C1                  A 15754    	POP	BC
00593E C1                  A 15755    	POP	BC
00593F C1                  A 15756    	POP	BC
005940 DD2FFA              A 15757    	LD	(IX+%FFFFFFFA),HL
                           A 15758    ; 5293			if (res == FR_OK) {
005943 CD 00 00 00         A 15759    	CALL	__icmpzero
005947 C2 D6 59 00         A 15760    	JR	NZ,L_1187
                           A 15761    ; 5294			 	res = DIR_READ_LABEL(&dj);	
00594B 01010000            A 15762    	LD	BC,1
00594F C5                  A 15763    	PUSH	BC
005950 ED65C4              A 15764    	PEA	IX+%FFFFFFC4
005953 CD 5B 1C 00         A 15765    	CALL	_dir_read
005957 C1                  A 15766    	POP	BC
005958 C1                  A 15767    	POP	BC
005959 DD2FFA              A 15768    	LD	(IX+%FFFFFFFA),HL
                           A 15769    ; 5295			 	if (res == FR_OK) {
00595C CD 00 00 00         A 15770    	CALL	__icmpzero
005960 20 74               A 15771    	JR	NZ,L_1187
                           A 15772    ; 5296	#if FF_FS_EXFAT
                           A 15773    ; 5297					if (fs->fs_type == FS_E
                           A 15774    ; 5298						WCHAR hs;
                           A 15775    ; 5299						UINT nw;
                           A 15776    ; 5300	
                           A 15777    ; 5301						for (si = di = hs =
                           A 15778    ; 5302							wc = ld_word(dj
                           A 15779    ; 5303							if (hs == 0 && 
                           A 15780    ; 5304								hs = wc; co
                           A 15781    ; 5305							}
                           A 15782    ; 5306							nw = put_utf((D
                           A 15783    ; 5307							if (nw == 0) { 
                           A 15784    ; 5308							di += nw;
                           A 15785    ; 5309							hs = 0;
                           A 15786    ; 5310						}
                           A 15787    ; 5311						if (hs != 0) di = 0
                           A 15788    ; 5312						label[di] = 0;
                           A 15789    ; 5313					} else
                           A 15790    ; 5314	#endif
                           A 15791    ; 5315					{
                           A 15792    ; 5316						si = di = 0;		
005962 01000000            A 15793    	LD	BC,0
005966 DD0FFD              A 15794    	LD	(IX+%FFFFFFFD),BC
005969 DD0FF4              A 15795    	LD	(IX+%FFFFFFF4),BC
                           A 15796    ; 5317						while (si < 11) {
00596C 18 2B               A 15797    	JR	L_1178
00596E                     A 15798    L_1179:
                           A 15799    ; 5318							wc = dj.dir[si+
00596E DD07F4              A 15800    	LD	BC,(IX+%FFFFFFF4)
005971 DD27DF              A 15801    	LD	HL,(IX+%FFFFFFDF)
005974 09                  A 15802    	ADD	HL,BC
005975 4E                  A 15803    	LD	C,(HL)
005976 0600                A 15804    	LD	B,%0
005978 C5E1                A 15805    	LD	HL,BC
00597A DD75F2              A 15806    	LD	(IX+%FFFFFFF2),L
00597D DD74F3              A 15807    	LD	(IX+%FFFFFFF3),H
005980 DD07F4              A 15808    	LD	BC,(IX+%FFFFFFF4)
005983 03                  A 15809    	INC	BC
005984 DD0FF4              A 15810    	LD	(IX+%FFFFFFF4),BC
                           A 15811    ; 5319	#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	
                           A 15812    ; 5320							if (dbc_1st((BY
                           A 15813    ; 5321							wc = ff_oem2uni
                           A 15814    ; 5322							if (wc == 0) { 
                           A 15815    ; 5323							di += put_utf(w
                           A 15816    ; 5324	#else									
                           A 15817    ; 5325							label[di++] = (
005987 DD7EF2              A 15818    	LD	A,(IX+%FFFFFFF2)
00598A DD07FD              A 15819    	LD	BC,(IX+%FFFFFFFD)
00598D DD2709              A 15820    	LD	HL,(IX+%9)
005990 09                  A 15821    	ADD	HL,BC
005991 77                  A 15822    	LD	(HL),A
005992 DD07FD              A 15823    	LD	BC,(IX+%FFFFFFFD)
005995 03                  A 15824    	INC	BC
005996 DD0FFD              A 15825    	LD	(IX+%FFFFFFFD),BC
                           A 15826    ; 5326	#endif
                           A 15827    ; 5327						}
005999                     A 15828    L_1178:
005999 010B0000            A 15829    	LD	BC,11
00599D DD27F4              A 15830    	LD	HL,(IX+%FFFFFFF4)
0059A0 B7                  A 15831    	OR	A,A
0059A1 ED42                A 15832    	SBC	HL,BC
0059A3 38 C9               A 15833    	JR	C,L_1179
                           A 15834    ; 5328						do {				
0059A5                     A 15835    L_1181:
                           A 15836    ; 5329							label[di] = 0;
0059A5 DD07FD              A 15837    	LD	BC,(IX+%FFFFFFFD)
0059A8 DD2709              A 15838    	LD	HL,(IX+%9)
0059AB 09                  A 15839    	ADD	HL,BC
0059AC 3600                A 15840    	LD	(HL),%0
                           A 15841    ; 5330							if (di == 0) br
0059AE DD27FD              A 15842    	LD	HL,(IX+%FFFFFFFD)
0059B1 CD 00 00 00         A 15843    	CALL	__icmpzero
0059B5 28 1F               A 15844    	JR	Z,L_1187
                           A 15845    ; 5331						} while (label[--di
0059B7 DD31FD              A 15846    	LD	IY,(IX+%FFFFFFFD)
0059BA ED33FF              A 15847    	LEA	IY,IY+%FFFFFFFF
0059BD DD3EFD              A 15848    	LD	(IX+%FFFFFFFD),IY
0059C0 FDE5C1              A 15849    	LD	BC,IY
0059C3 DD2709              A 15850    	LD	HL,(IX+%9)
0059C6 09                  A 15851    	ADD	HL,BC
0059C7 7E                  A 15852    	LD	A,(HL)
0059C8 47                  A 15853    	LD	B,A
0059C9 17ED62              A 15854    	SEXT	HL
0059CC 68                  A 15855    	LD	L,B
0059CD 01200000            A 15856    	LD	BC,32
0059D1 B7                  A 15857    	OR	A,A
0059D2 ED42                A 15858    	SBC	HL,BC
0059D4 28 CF               A 15859    	JR	Z,L_1181
                           A 15860    ; 5332					}
                           A 15861    ; 5333				}
                           A 15862    ; 5334			}
0059D6                     A 15863    L_1187:
                           A 15864    ; 5335			if (res == FR_NO_FILE) {	/* 
0059D6 01040000            A 15865    	LD	BC,4
0059DA DD27FA              A 15866    	LD	HL,(IX+%FFFFFFFA)
0059DD B7                  A 15867    	OR	A,A
0059DE ED42                A 15868    	SBC	HL,BC
0059E0 20 0C               A 15869    	JR	NZ,L_1196
                           A 15870    ; 5336				label[0] = 0;
0059E2 DD2709              A 15871    	LD	HL,(IX+%9)
0059E5 3600                A 15872    	LD	(HL),%0
                           A 15873    ; 5337				res = FR_OK;
0059E7 01000000            A 15874    	LD	BC,0
0059EB DD0FFA              A 15875    	LD	(IX+%FFFFFFFA),BC
                           A 15876    ; 5338			}
                           A 15877    ; 5339		}
0059EE                     A 15878    L_1196:
                           A 15879    ; 5340	
                           A 15880    ; 5341		/* Get volume serial number */
                           A 15881    ; 5342		if (res == FR_OK && vsn) {
0059EE DD27FA              A 15882    	LD	HL,(IX+%FFFFFFFA)
0059F1 CD 00 00 00         A 15883    	CALL	__icmpzero
0059F5 20 78               A 15884    	JR	NZ,L_1197
0059F7 DD270C              A 15885    	LD	HL,(IX+%C)
0059FA CD 00 00 00         A 15886    	CALL	__icmpzero
0059FE 28 6F               A 15887    	JR	Z,L_1197
                           A 15888    ; 5343			res = move_window(fs, fs->volba
005A00 DD31F7              A 15889    	LD	IY,(IX+%FFFFFFF7)
005A03 FD071E              A 15890    	LD	BC,(IY+%1E)
005A06 FD7E21              A 15891    	LD	A,(IY+%21)
005A09 2600                A 15892    	LD	H,%0
005A0B 6F                  A 15893    	LD	L,A
005A0C E5                  A 15894    	PUSH	HL
005A0D C5                  A 15895    	PUSH	BC
005A0E DD07F7              A 15896    	LD	BC,(IX+%FFFFFFF7)
005A11 C5                  A 15897    	PUSH	BC
005A12 CD A6 03 00         A 15898    	CALL	_move_window
005A16 C1                  A 15899    	POP	BC
005A17 C1                  A 15900    	POP	BC
005A18 C1                  A 15901    	POP	BC
005A19 DD2FFA              A 15902    	LD	(IX+%FFFFFFFA),HL
                           A 15903    ; 5344			if (res == FR_OK) {
005A1C CD 00 00 00         A 15904    	CALL	__icmpzero
005A20 20 4D               A 15905    	JR	NZ,L_1197
                           A 15906    ; 5345				switch (fs->fs_type) {
005A22 DD31F7              A 15907    	LD	IY,(IX+%FFFFFFF7)
005A25 FD7E00              A 15908    	LD	A,(IY+%0)
005A28 B7ED62              A 15909    	UEXT	HL
005A2B 6F                  A 15910    	LD	L,A
005A2C CD 00 00 00         A 15911    	CALL	__case8
005A30                     A 15912    L__635:
005A30 0200                A 15913    	DW	2
005A32 03                  A 15914    	DB	3
005A33 465A00              A 15915    	DW24	L_1191	
                           A 15916    
005A36 04                  A 15917    	DB	4
005A37 3D5A00              A 15918    	DW24	L_1190	
                           A 15919    
005A3A 4F5A00              A 15920    	DW24	L_1192	
                           A 15921    
                           A 15922    ; 5346				case FS_EXFAT:
005A3D                     A 15923    L_1190:
                           A 15924    ; 5347					di = BPB_VolIDEx;
005A3D 01640000            A 15925    	LD	BC,100
005A41 DD0FFD              A 15926    	LD	(IX+%FFFFFFFD),BC
                           A 15927    ; 5348					break;
005A44 18 10               A 15928    	JR	L_1193
                           A 15929    ; 5349	
                           A 15930    ; 5350				case FS_FAT32:
005A46                     A 15931    L_1191:
                           A 15932    ; 5351					di = BS_VolID32;
005A46 01430000            A 15933    	LD	BC,67
005A4A DD0FFD              A 15934    	LD	(IX+%FFFFFFFD),BC
                           A 15935    ; 5352					break;
005A4D 18 07               A 15936    	JR	L_1193
                           A 15937    ; 5353	
                           A 15938    ; 5354				default:
005A4F                     A 15939    L_1192:
                           A 15940    ; 5355					di = BS_VolID;
005A4F 01270000            A 15941    	LD	BC,39
005A53 DD0FFD              A 15942    	LD	(IX+%FFFFFFFD),BC
                           A 15943    ; 5356				}
005A56                     A 15944    L_1193:
                           A 15945    ; 5357				*vsn = ld_dword(fs->win + d
005A56 DD07FD              A 15946    	LD	BC,(IX+%FFFFFFFD)
005A59 DD31F7              A 15947    	LD	IY,(IX+%FFFFFFF7)
005A5C ED2332              A 15948    	LEA	HL,IY+%32
005A5F 09                  A 15949    	ADD	HL,BC
005A60 E5                  A 15950    	PUSH	HL
005A61 CD 39 00 00         A 15951    	CALL	_ld_dword
005A65 C1                  A 15952    	POP	BC
005A66 DD310C              A 15953    	LD	IY,(IX+%C)
005A69 FD2F00              A 15954    	LD	(IY),HL
005A6C FD7303              A 15955    	LD	(IY+%3),E
                           A 15956    ; 5358			}
                           A 15957    ; 5359		}
005A6F                     A 15958    L_1197:
                           A 15959    ; 5360	
                           A 15960    ; 5361		LEAVE_FF(fs, res);
005A6F DD27FA              A 15961    	LD	HL,(IX+%FFFFFFFA)
                           A 15962    ; 5362	}
005A72 DDF9                A 15963    	LD	SP,IX
005A74 DDE1                A 15964    	POP	IX
005A76 C9                  A 15965    	RET	
                           A 15966    
                           A 15967    
                           A 15968    ;**************************** _f_getlabel *****
                           A 15969    ;Name                         Addr/Register   S
                           A 15970    ;dj                                   IX-60    
                           A 15971    ;wc                                   IX-14    
                           A 15972    ;si                                   IX-12    
                           A 15973    ;fs                                    IX-9    
                           A 15974    ;res                                   IX-6    
                           A 15975    ;di                                    IX-3    
                           A 15976    ;vsn                                  IX+12    
                           A 15977    ;label                                 IX+9    
                           A 15978    ;path                                  IX+6    
                           A 15979    
                           A 15980    
                           A 15981    ; Stack Frame Size: 78 (bytes)
                           A 15982    ;       Spill Code: -1 (instruction)
                           A 15983    
                           A 15984    
                           A 15985    ; 5363	
                           A 15986    ; 5364	
                           A 15987    ; 5365	
                           A 15988    ; 5366	#if !FF_FS_READONLY
                           A 15989    ; 5367	/*-------------------------------------
                           A 15990    ; 5368	/* Set Volume Label                    
                           A 15991    ; 5369	/*-------------------------------------
                           A 15992    ; 5370	
                           A 15993    ; 5371	FRESULT f_setlabel (
                           A 15994    ; 5372		const TCHAR* label	/* Volume label
                           A 15995    ; 5373	)
                           A 15996    ; 5374	{
005A77                     A 15997    _f_setlabel:
005A77 21A3FFFF            A 15998    	LD	HL,-93
005A7B CD 00 00 00         A 15999    	CALL	__frameset
                           A 16000    ; 5375		FRESULT res;
                           A 16001    ; 5376		DIR dj;
                           A 16002    ; 5377		FATFS *fs;
                           A 16003    ; 5378		BYTE dirvn[22];
                           A 16004    ; 5379		UINT di;
                           A 16005    ; 5380		WCHAR wc;
                           A 16006    ; 5381		static const char badchr[18] = "+.,
                           A 16007    ; 5382	#if FF_USE_LFN
                           A 16008    ; 5383		DWORD dc;
                           A 16009    ; 5384	#endif
                           A 16010    ; 5385	
                           A 16011    ; 5386		/* Get logical drive */
                           A 16012    ; 5387		res = mount_volume(&label, &fs, FA_
005A7F 01020000            A 16013    	LD	BC,2
005A83 C5                  A 16014    	PUSH	BC
005A84 ED65F5              A 16015    	PEA	IX+%FFFFFFF5
005A87 ED6506              A 16016    	PEA	IX+%6
005A8A CD 82 30 00         A 16017    	CALL	_mount_volume
005A8E C1                  A 16018    	POP	BC
005A8F C1                  A 16019    	POP	BC
005A90 C1                  A 16020    	POP	BC
005A91 DD2FFA              A 16021    	LD	(IX+%FFFFFFFA),HL
                           A 16022    ; 5388		if (res != FR_OK) LEAVE_FF(fs, res)
005A94 CD 00 00 00         A 16023    	CALL	__icmpzero
005A98 28 07               A 16024    	JR	Z,L_1225
005A9A DD27FA              A 16025    	LD	HL,(IX+%FFFFFFFA)
005A9D C3 FA 5C 00         A 16026    	JR	L_1242
005AA1                     A 16027    L_1225:
                           A 16028    ; 5389	
                           A 16029    ; 5390	#if FF_FS_EXFAT
                           A 16030    ; 5391		if (fs->fs_type == FS_EXFAT) {	/* 
                           A 16031    ; 5392			memset(dirvn, 0, 22);
                           A 16032    ; 5393			di = 0;
                           A 16033    ; 5394			while ((UINT)*label >= ' ') {	
                           A 16034    ; 5395				dc = tchar2uni(&label);	/* 
                           A 16035    ; 5396				if (dc >= 0x10000) {
                           A 16036    ; 5397					if (dc == 0xFFFFFFFF ||
                           A 16037    ; 5398						dc = 0;
                           A 16038    ; 5399					} else {
                           A 16039    ; 5400						st_word(dirvn + di 
                           A 16040    ; 5401					}
                           A 16041    ; 5402				}
                           A 16042    ; 5403				if (dc == 0 || strchr(&badc
                           A 16043    ; 5404					LEAVE_FF(fs, FR_INVALID
                           A 16044    ; 5405				}
                           A 16045    ; 5406				st_word(dirvn + di * 2, (WC
                           A 16046    ; 5407			}
                           A 16047    ; 5408		} else
                           A 16048    ; 5409	#endif
                           A 16049    ; 5410		{	/* On the FAT/FAT32 volume */
                           A 16050    ; 5411			memset(dirvn, ' ', 11);
005AA1 010B0000            A 16051    	LD	BC,11
005AA5 C5                  A 16052    	PUSH	BC
005AA6 01200000            A 16053    	LD	BC,32
005AAA C5                  A 16054    	PUSH	BC
005AAB ED65D4              A 16055    	PEA	IX+%FFFFFFD4
005AAE CD 00 00 00         A 16056    	CALL	_memset
005AB2 C1                  A 16057    	POP	BC
005AB3 C1                  A 16058    	POP	BC
005AB4 C1                  A 16059    	POP	BC
                           A 16060    ; 5412			di = 0;
005AB5 01000000            A 16061    	LD	BC,0
005AB9 DD0FFD              A 16062    	LD	(IX+%FFFFFFFD),BC
                           A 16063    ; 5413			while ((UINT)*label >= ' ') {	
005ABC C3 AD 5B 00         A 16064    	JR	L_1216
005AC0                     A 16065    L_1217:
                           A 16066    ; 5414	#if FF_USE_LFN
                           A 16067    ; 5415				dc = tchar2uni(&label);
005AC0 ED6506              A 16068    	PEA	IX+%6
005AC3 CD 8D 01 00         A 16069    	CALL	_tchar2uni
005AC7 C1                  A 16070    	POP	BC
005AC8 DD2FEA              A 16071    	LD	(IX+%FFFFFFEA),HL
005ACB DD73ED              A 16072    	LD	(IX+%FFFFFFED),E
                           A 16073    ; 5416				wc = (dc < 0x10000) ? ff_un
005ACE DD27EA              A 16074    	LD	HL,(IX+%FFFFFFEA)
005AD1 DD5EED              A 16075    	LD	E,(IX+%FFFFFFED)
005AD4 01000001            A 16076    	LD	BC,65536
005AD8 AF                  A 16077    	XOR	A,A
005AD9 CD 00 00 00         A 16078    	CALL	__lcmpu
005ADD 30 2C               A 16079    	JR	NC,L_1202
005ADF 01B50100            A 16080    	LD	BC,437
005AE3 C5                  A 16081    	PUSH	BC
005AE4 DD4EED              A 16082    	LD	C,(IX+%FFFFFFED)
005AE7 0600                A 16083    	LD	B,%0
005AE9 C5                  A 16084    	PUSH	BC
005AEA DD07EA              A 16085    	LD	BC,(IX+%FFFFFFEA)
005AED C5                  A 16086    	PUSH	BC
005AEE CD 00 00 00         A 16087    	CALL	_ff_wtoupper
005AF2 C1                  A 16088    	POP	BC
005AF3 C1                  A 16089    	POP	BC
005AF4 4B                  A 16090    	LD	C,E
005AF5 0600                A 16091    	LD	B,%0
005AF7 C5                  A 16092    	PUSH	BC
005AF8 E5                  A 16093    	PUSH	HL
005AF9 CD 00 00 00         A 16094    	CALL	_ff_uni2oem
005AFD C1                  A 16095    	POP	BC
005AFE C1                  A 16096    	POP	BC
005AFF C1                  A 16097    	POP	BC
005B00 E5C1                A 16098    	LD	BC,HL
005B02 CD 00 00 00         A 16099    	CALL	__stoiu
005B06 DD2FF1              A 16100    	LD	(IX+%FFFFFFF1),HL
005B09 18 07               A 16101    	JR	L_1203
005B0B                     A 16102    L_1202:
005B0B 01000000            A 16103    	LD	BC,0
005B0F DD0FF1              A 16104    	LD	(IX+%FFFFFFF1),BC
005B12                     A 16105    L_1203:
005B12 DD27F1              A 16106    	LD	HL,(IX+%FFFFFFF1)
005B15 DD75F8              A 16107    	LD	(IX+%FFFFFFF8),L
005B18 DD74F9              A 16108    	LD	(IX+%FFFFFFF9),H
                           A 16109    ; 5417	#else									
                           A 16110    ; 5418				wc = (BYTE)*label++;
                           A 16111    ; 5419				if (dbc_1st((BYTE)wc)) wc =
                           A 16112    ; 5420				if (IsLower(wc)) wc -= 0x20
                           A 16113    ; 5421	#if FF_CODE_PAGE == 0
                           A 16114    ; 5422				if (ExCvt && wc >= 0x80) wc
                           A 16115    ; 5423	#elif FF_CODE_PAGE < 900
                           A 16116    ; 5424				if (wc >= 0x80) wc = ExCvt[
                           A 16117    ; 5425	#endif
                           A 16118    ; 5426	#endif
                           A 16119    ; 5427				if (wc == 0 || strchr(&badc
005B1B DD27F8              A 16120    	LD	HL,(IX+%FFFFFFF8)
005B1E CD 00 00 00         A 16121    	CALL	__scmpzero
005B22 28 4C               A 16122    	JR	Z,L_1210
005B24 DD07F8              A 16123    	LD	BC,(IX+%FFFFFFF8)
005B27 CD 00 00 00         A 16124    	CALL	__stoiu
005B2B E5                  A 16125    	PUSH	HL
005B2C 01 8D 00 00         A 16126    	LD	BC,_0badchr
005B30 C5                  A 16127    	PUSH	BC
005B31 CD 00 00 00         A 16128    	CALL	_strchr
005B35 C1                  A 16129    	POP	BC
005B36 C1                  A 16130    	POP	BC
005B37 CD 00 00 00         A 16131    	CALL	__icmpzero
005B3B 20 33               A 16132    	JR	NZ,L_1210
005B3D 49010001            A 16133    	LD.LIS	BC,256
005B41 DD27F8              A 16134    	LD	HL,(IX+%FFFFFFF8)
005B44 B7                  A 16135    	OR	A,A
005B45 40ED42              A 16136    	SBC.SIS	HL,BC
005B48 30 04               A 16137    	JR	NC,L__642
005B4A 3E01                A 16138    	LD	A,%1
005B4C 18 01               A 16139    	JR	L__643
005B4E                     A 16140    L__642:
005B4E AF                  A 16141    	XOR	A,A
005B4F                     A 16142    L__643:
005B4F DD77F4              A 16143    	LD	(IX+%FFFFFFF4),A
005B52 B7                  A 16144    	OR	A,A
005B53 20 09               A 16145    	JR	NZ,L_1207
005B55 010A0000            A 16146    	LD	BC,10
005B59 DD0FEE              A 16147    	LD	(IX+%FFFFFFEE),BC
005B5C 18 07               A 16148    	JR	L_1208
005B5E                     A 16149    L_1207:
005B5E 010B0000            A 16150    	LD	BC,11
005B62 DD0FEE              A 16151    	LD	(IX+%FFFFFFEE),BC
005B65                     A 16152    L_1208:
005B65 DD07EE              A 16153    	LD	BC,(IX+%FFFFFFEE)
005B68 DD27FD              A 16154    	LD	HL,(IX+%FFFFFFFD)
005B6B B7                  A 16155    	OR	A,A
005B6C ED42                A 16156    	SBC	HL,BC
005B6E 38 08               A 16157    	JR	C,L_1213
005B70                     A 16158    L_1210:
                           A 16159    ; 5428					LEAVE_FF(fs, FR_INVALID
005B70 21060000            A 16160    	LD	HL,6
005B74 C3 FA 5C 00         A 16161    	JR	L_1242
                           A 16162    ; 5429				}
005B78                     A 16163    L_1213:
                           A 16164    ; 5430				if (wc >= 0x100) dirvn[di++
005B78 DD7EF4              A 16165    	LD	A,(IX+%FFFFFFF4)
005B7B B7                  A 16166    	OR	A,A
005B7C 20 1D               A 16167    	JR	NZ,L_1215
005B7E DD07F8              A 16168    	LD	BC,(IX+%FFFFFFF8)
005B81 CD 00 00 00         A 16169    	CALL	__stoiu
005B85 3E08                A 16170    	LD	A,%8
005B87 CD 00 00 00         A 16171    	CALL	__ishrs_b
005B8B 7D                  A 16172    	LD	A,L
005B8C DD07FD              A 16173    	LD	BC,(IX+%FFFFFFFD)
005B8F ED22D4              A 16174    	LEA	HL,IX+%FFFFFFD4
005B92 09                  A 16175    	ADD	HL,BC
005B93 77                  A 16176    	LD	(HL),A
005B94 DD07FD              A 16177    	LD	BC,(IX+%FFFFFFFD)
005B97 03                  A 16178    	INC	BC
005B98 DD0FFD              A 16179    	LD	(IX+%FFFFFFFD),BC
005B9B                     A 16180    L_1215:
                           A 16181    ; 5431				dirvn[di++] = (BYTE)wc;
005B9B DD7EF8              A 16182    	LD	A,(IX+%FFFFFFF8)
005B9E DD07FD              A 16183    	LD	BC,(IX+%FFFFFFFD)
005BA1 ED22D4              A 16184    	LEA	HL,IX+%FFFFFFD4
005BA4 09                  A 16185    	ADD	HL,BC
005BA5 77                  A 16186    	LD	(HL),A
005BA6 DD07FD              A 16187    	LD	BC,(IX+%FFFFFFFD)
005BA9 03                  A 16188    	INC	BC
005BAA DD0FFD              A 16189    	LD	(IX+%FFFFFFFD),BC
                           A 16190    ; 5432			}
005BAD                     A 16191    L_1216:
005BAD DD2706              A 16192    	LD	HL,(IX+%6)
005BB0 7E                  A 16193    	LD	A,(HL)
005BB1 47                  A 16194    	LD	B,A
005BB2 17ED62              A 16195    	SEXT	HL
005BB5 68                  A 16196    	LD	L,B
005BB6 01200000            A 16197    	LD	BC,32
005BBA B7                  A 16198    	OR	A,A
005BBB ED42                A 16199    	SBC	HL,BC
005BBD D2 C0 5A 00         A 16200    	JR	NC,L_1217
                           A 16201    ; 5433			if (dirvn[0] == DDEM) LEAVE_FF(
005BC1 DD7ED4              A 16202    	LD	A,(IX+%FFFFFFD4)
005BC4 B7ED62              A 16203    	UEXT	HL
005BC7 6F                  A 16204    	LD	L,A
005BC8 01E50000            A 16205    	LD	BC,229
005BCC B7                  A 16206    	OR	A,A
005BCD ED42                A 16207    	SBC	HL,BC
005BCF 20 11               A 16208    	JR	NZ,L_1222
005BD1 21060000            A 16209    	LD	HL,6
005BD5 C3 FA 5C 00         A 16210    	JR	L_1242
                           A 16211    ; 5434			while (di && dirvn[di - 1] == '
005BD9                     A 16212    L_1223:
005BD9 DD31FD              A 16213    	LD	IY,(IX+%FFFFFFFD)
005BDC ED33FF              A 16214    	LEA	IY,IY+%FFFFFFFF
005BDF DD3EFD              A 16215    	LD	(IX+%FFFFFFFD),IY
005BE2                     A 16216    L_1222:
005BE2 DD27FD              A 16217    	LD	HL,(IX+%FFFFFFFD)
005BE5 CD 00 00 00         A 16218    	CALL	__icmpzero
005BE9 28 16               A 16219    	JR	Z,L_1226
005BEB DD07FD              A 16220    	LD	BC,(IX+%FFFFFFFD)
005BEE ED22D4              A 16221    	LEA	HL,IX+%FFFFFFD4
005BF1 09                  A 16222    	ADD	HL,BC
005BF2 2B                  A 16223    	DEC	HL
005BF3 7E                  A 16224    	LD	A,(HL)
005BF4 B7ED62              A 16225    	UEXT	HL
005BF7 6F                  A 16226    	LD	L,A
005BF8 01200000            A 16227    	LD	BC,32
005BFC B7                  A 16228    	OR	A,A
005BFD ED42                A 16229    	SBC	HL,BC
005BFF 28 D8               A 16230    	JR	Z,L_1223
                           A 16231    ; 5435		}
005C01                     A 16232    L_1226:
                           A 16233    ; 5436	
                           A 16234    ; 5437		/* Set volume label */
                           A 16235    ; 5438		dj.obj.fs = fs; dj.obj.sclust = 0;	
005C01 ED02A6              A 16236    	LEA	BC,IX+%FFFFFFA6
005C04 DD0FA3              A 16237    	LD	(IX+%FFFFFFA3),BC
005C07 DD07F5              A 16238    	LD	BC,(IX+%FFFFFFF5)
005C0A DD0FA6              A 16239    	LD	(IX+%FFFFFFA6),BC
005C0D 01000000            A 16240    	LD	BC,0
005C11 DD31A3              A 16241    	LD	IY,(IX+%FFFFFFA3)
005C14 FD0F07              A 16242    	LD	(IY+%7),BC
005C17 FD360A00            A 16243    	LD	(IY+%A),%0
                           A 16244    ; 5439		res = dir_sdi(&dj, 0);
005C1B C5                  A 16245    	PUSH	BC
005C1C C5                  A 16246    	PUSH	BC
005C1D ED65A6              A 16247    	PEA	IX+%FFFFFFA6
005C20 CD 18 11 00         A 16248    	CALL	_dir_sdi
005C24 C1                  A 16249    	POP	BC
005C25 C1                  A 16250    	POP	BC
005C26 C1                  A 16251    	POP	BC
005C27 DD2FFA              A 16252    	LD	(IX+%FFFFFFFA),HL
                           A 16253    ; 5440		if (res == FR_OK) {
005C2A CD 00 00 00         A 16254    	CALL	__icmpzero
005C2E C2 F7 5C 00         A 16255    	JR	NZ,L_1241
                           A 16256    ; 5441			res = DIR_READ_LABEL(&dj);	/* 
005C32 01010000            A 16257    	LD	BC,1
005C36 C5                  A 16258    	PUSH	BC
005C37 ED65A6              A 16259    	PEA	IX+%FFFFFFA6
005C3A CD 5B 1C 00         A 16260    	CALL	_dir_read
005C3E C1                  A 16261    	POP	BC
005C3F C1                  A 16262    	POP	BC
005C40 DD2FFA              A 16263    	LD	(IX+%FFFFFFFA),HL
                           A 16264    ; 5442			if (res == FR_OK) {
005C43 CD 00 00 00         A 16265    	CALL	__icmpzero
005C47 20 38               A 16266    	JR	NZ,L_1239
                           A 16267    ; 5443				if (FF_FS_EXFAT && fs->fs_t
                           A 16268    ; 5444					dj.dir[XDIR_NumLabel] =
                           A 16269    ; 5445					memcpy(dj.dir + XDIR_La
                           A 16270    ; 5446				} else {
                           A 16271    ; 5447					if (di != 0) {
005C49 DD27FD              A 16272    	LD	HL,(IX+%FFFFFFFD)
005C4C CD 00 00 00         A 16273    	CALL	__icmpzero
005C50 28 15               A 16274    	JR	Z,L_1228
                           A 16275    ; 5448						memcpy(dj.dir, dirv
005C52 010B0000            A 16276    	LD	BC,11
005C56 C5                  A 16277    	PUSH	BC
005C57 ED65D4              A 16278    	PEA	IX+%FFFFFFD4
005C5A DD07C1              A 16279    	LD	BC,(IX+%FFFFFFC1)
005C5D C5                  A 16280    	PUSH	BC
005C5E CD 00 00 00         A 16281    	CALL	_memcpy
005C62 C1                  A 16282    	POP	BC
005C63 C1                  A 16283    	POP	BC
005C64 C1                  A 16284    	POP	BC
                           A 16285    ; 5449					} else {
005C65 18 05               A 16286    	JR	L_1231
005C67                     A 16287    L_1228:
                           A 16288    ; 5450						dj.dir[DIR_Name] = 
005C67 DD27C1              A 16289    	LD	HL,(IX+%FFFFFFC1)
005C6A 36E5                A 16290    	LD	(HL),%E5
                           A 16291    ; 5451					}
                           A 16292    ; 5452				}
005C6C                     A 16293    L_1231:
                           A 16294    ; 5453				fs->wflag = 1;
005C6C DD31F5              A 16295    	LD	IY,(IX+%FFFFFFF5)
005C6F FD360301            A 16296    	LD	(IY+%3),%1
                           A 16297    ; 5454				res = sync_fs(fs);
005C73 DD07F5              A 16298    	LD	BC,(IX+%FFFFFFF5)
005C76 C5                  A 16299    	PUSH	BC
005C77 CD 30 04 00         A 16300    	CALL	_sync_fs
005C7B C1                  A 16301    	POP	BC
005C7C DD2FFA              A 16302    	LD	(IX+%FFFFFFFA),HL
                           A 16303    ; 5455			} else {			/* No volum
005C7F 18 76               A 16304    	JR	L_1241
005C81                     A 16305    L_1239:
                           A 16306    ; 5456				if (res == FR_NO_FILE) {
005C81 01040000            A 16307    	LD	BC,4
005C85 DD27FA              A 16308    	LD	HL,(IX+%FFFFFFFA)
005C88 B7                  A 16309    	OR	A,A
005C89 ED42                A 16310    	SBC	HL,BC
005C8B 20 6A               A 16311    	JR	NZ,L_1241
                           A 16312    ; 5457					res = FR_OK;
005C8D 01000000            A 16313    	LD	BC,0
005C91 DD0FFA              A 16314    	LD	(IX+%FFFFFFFA),BC
                           A 16315    ; 5458					if (di != 0) {	/* Crea
005C94 DD27FD              A 16316    	LD	HL,(IX+%FFFFFFFD)
005C97 CD 00 00 00         A 16317    	CALL	__icmpzero
005C9B 28 5A               A 16318    	JR	Z,L_1241
                           A 16319    ; 5459						res = dir_alloc(&dj
005C9D 01010000            A 16320    	LD	BC,1
005CA1 C5                  A 16321    	PUSH	BC
005CA2 ED65A6              A 16322    	PEA	IX+%FFFFFFA6
005CA5 CD A2 15 00         A 16323    	CALL	_dir_alloc
005CA9 C1                  A 16324    	POP	BC
005CAA C1                  A 16325    	POP	BC
005CAB DD2FFA              A 16326    	LD	(IX+%FFFFFFFA),HL
                           A 16327    ; 5460						if (res == FR_OK) {
005CAE CD 00 00 00         A 16328    	CALL	__icmpzero
005CB2 20 43               A 16329    	JR	NZ,L_1241
                           A 16330    ; 5461							memset(dj.dir, 
005CB4 01200000            A 16331    	LD	BC,32
005CB8 C5                  A 16332    	PUSH	BC
005CB9 01000000            A 16333    	LD	BC,0
005CBD C5                  A 16334    	PUSH	BC
005CBE DD07C1              A 16335    	LD	BC,(IX+%FFFFFFC1)
005CC1 C5                  A 16336    	PUSH	BC
005CC2 CD 00 00 00         A 16337    	CALL	_memset
005CC6 C1                  A 16338    	POP	BC
005CC7 C1                  A 16339    	POP	BC
005CC8 C1                  A 16340    	POP	BC
                           A 16341    ; 5462							if (FF_FS_EXFAT
                           A 16342    ; 5463								dj.dir[XDIR
                           A 16343    ; 5464								dj.dir[XDIR
                           A 16344    ; 5465								memcpy(dj.d
                           A 16345    ; 5466							} else {
                           A 16346    ; 5467								dj.dir[DIR_
005CC9 DD31C1              A 16347    	LD	IY,(IX+%FFFFFFC1)
005CCC ED230B              A 16348    	LEA	HL,IY+%B
005CCF 3608                A 16349    	LD	(HL),%8
                           A 16350    ; 5468								memcpy(dj.d
005CD1 010B0000            A 16351    	LD	BC,11
005CD5 C5                  A 16352    	PUSH	BC
005CD6 ED65D4              A 16353    	PEA	IX+%FFFFFFD4
005CD9 DD07C1              A 16354    	LD	BC,(IX+%FFFFFFC1)
005CDC C5                  A 16355    	PUSH	BC
005CDD CD 00 00 00         A 16356    	CALL	_memcpy
005CE1 C1                  A 16357    	POP	BC
005CE2 C1                  A 16358    	POP	BC
005CE3 C1                  A 16359    	POP	BC
                           A 16360    ; 5469							}
                           A 16361    ; 5470							fs->wflag = 1;
005CE4 DD31F5              A 16362    	LD	IY,(IX+%FFFFFFF5)
005CE7 FD360301            A 16363    	LD	(IY+%3),%1
                           A 16364    ; 5471							res = sync_fs(f
005CEB DD07F5              A 16365    	LD	BC,(IX+%FFFFFFF5)
005CEE C5                  A 16366    	PUSH	BC
005CEF CD 30 04 00         A 16367    	CALL	_sync_fs
005CF3 C1                  A 16368    	POP	BC
005CF4 DD2FFA              A 16369    	LD	(IX+%FFFFFFFA),HL
                           A 16370    ; 5472						}
                           A 16371    ; 5473					}
                           A 16372    ; 5474				}
                           A 16373    ; 5475			}
                           A 16374    ; 5476		}
005CF7                     A 16375    L_1241:
                           A 16376    ; 5477	
                           A 16377    ; 5478		LEAVE_FF(fs, res);
005CF7 DD27FA              A 16378    	LD	HL,(IX+%FFFFFFFA)
                           A 16379    ; 5479	}
005CFA                     A 16380    L_1242:
005CFA DDF9                A 16381    	LD	SP,IX
005CFC DDE1                A 16382    	POP	IX
005CFE C9                  A 16383    	RET	
                           A 16384    
                           A 16385    
                           A 16386    ;**************************** _f_setlabel *****
                           A 16387    ;Name                         Addr/Register   S
                           A 16388    ;_memcpy                             IMPORT  --
                           A 16389    ;_0badchr                            STATIC    
                           A 16390    ;_strchr                             IMPORT  --
                           A 16391    ;_ff_wtoupper                        IMPORT  --
                           A 16392    ;_ff_uni2oem                         IMPORT  --
                           A 16393    ;_memset                             IMPORT  --
                           A 16394    ;dj                                   IX-90    
                           A 16395    ;dirvn                                IX-44    
                           A 16396    ;dc                                   IX-22    
                           A 16397    ;temp1205                             IX-18    
                           A 16398    ;temp1200                             IX-15    
                           A 16399    ;G_92                                 IX-12    
                           A 16400    ;fs                                   IX-11    
                           A 16401    ;wc                                    IX-8    
                           A 16402    ;res                                   IX-6    
                           A 16403    ;di                                    IX-3    
                           A 16404    ;label                                 IX+6    
                           A 16405    
                           A 16406    
                           A 16407    ; Stack Frame Size: 102 (bytes)
                           A 16408    ;       Spill Code: -1 (instruction)
                           A 16409    
                           A 16410    
                           A 16411    	SEGMENT TEXT
00008D                     A 16412    _0badchr:
00008D 2B                  A 16413    	DB	43
00008E 2E                  A 16414    	DB	46
00008F 2C                  A 16415    	DB	44
000090 3B                  A 16416    	DB	59
000091 3D                  A 16417    	DB	61
000092 5B                  A 16418    	DB	91
000093 5D                  A 16419    	DB	93
000094 2F                  A 16420    	DB	47
000095 2A                  A 16421    	DB	42
000096 3A                  A 16422    	DB	58
000097 3C                  A 16423    	DB	60
000098 3E                  A 16424    	DB	62
000099 7C                  A 16425    	DB	124
00009A 5C                  A 16426    	DB	92
00009B 22                  A 16427    	DB	34
00009C 3F                  A 16428    	DB	63
00009D 7F                  A 16429    	DB	127
00009E 00                  A 16430    	DB	0
                           A 16431    	XREF _disk_ioctl:ROM
                           A 16432    	XREF _disk_write:ROM
                           A 16433    	XREF _disk_read:ROM
                           A 16434    	XREF _disk_status:ROM
                           A 16435    	XREF _disk_initialize:ROM
                           A 16436    	XREF _ff_wtoupper:ROM
                           A 16437    	XREF _ff_uni2oem:ROM
                           A 16438    	XREF _ff_oem2uni:ROM
                           A 16439    	XREF _strchr:ROM
                           A 16440    	XREF _memset:ROM
                           A 16441    	XREF _memcmp:ROM
                           A 16442    	XREF _memcpy:ROM
                           A 16443    	XREF __lcmpu:ROM
                           A 16444    	XREF __ladd:ROM
                           A 16445    	XREF __lsub:ROM
                           A 16446    	XREF __idivu:ROM
                           A 16447    	XREF __ldivu:ROM
                           A 16448    	XREF __lmulu:ROM
                           A 16449    	XREF __lnot:ROM
                           A 16450    	XREF __sor:ROM
                           A 16451    	XREF __ior:ROM
                           A 16452    	XREF __lor:ROM
                           A 16453    	XREF __sand:ROM
                           A 16454    	XREF __iand:ROM
                           A 16455    	XREF __land:ROM
                           A 16456    	XREF __bshl:ROM
                           A 16457    	XREF __lshl:ROM
                           A 16458    	XREF __lxor:ROM
                           A 16459    	XREF __lshru:ROM
                           A 16460    	XREF __stoiu:ROM
                           A 16461    	XREF __itol:ROM
                           A 16462    	XREF __ildix:ROM
                           A 16463    	XREF __istix:ROM
                           A 16464    	XREF __lldix:ROM
                           A 16465    	XREF __frameset0:ROM
                           A 16466    	XREF __frameset:ROM
                           A 16467    	XREF __setflag:ROM
                           A 16468    	XREF __scmpzero:ROM
                           A 16469    	XREF __icmpzero:ROM
                           A 16470    	XREF __lcmpzero:ROM
                           A 16471    	XREF __case8:ROM
                           A 16472    	XREF __seqcase:ROM
                           A 16473    	XREF __imul_b:ROM
                           A 16474    	XREF __ladd_b:ROM
                           A 16475    	XREF __ishl_b:ROM
                           A 16476    	XREF __ishru_b:ROM
                           A 16477    	XREF __ishrs_b:ROM
                           A 16478    	XDEF _f_setlabel
                           A 16479    	XDEF _f_getlabel
                           A 16480    	XDEF _f_rename
                           A 16481    	XDEF _f_mkdir
                           A 16482    	XDEF _f_unlink
                           A 16483    	XDEF _f_truncate
                           A 16484    	XDEF _f_getfree
                           A 16485    	XDEF _f_stat
                           A 16486    	XDEF _f_readdir
                           A 16487    	XDEF _f_closedir
                           A 16488    	XDEF _f_opendir
                           A 16489    	XDEF _f_lseek
                           A 16490    	XDEF _f_close
                           A 16491    	XDEF _f_sync
                           A 16492    	XDEF _f_write
                           A 16493    	XDEF _f_read
                           A 16494    	XDEF _f_open
                           A 16495    	XDEF _f_mount
                           A 16496    	END


Errors: 0
Warnings: 0
Lines Assembled: 16497

Zilog eZ80 Macro Assembler Version 4.3 (19073001)19-Jul-22     21:22:34     page:   1


PC     Object              I  Line    Source 
                           A     1    ; Zilog eZ80 ANSI C Compiler Release 3.4
                           A     2    ; -nomodsect -optsize -noreduceopt -nopadbranch
                           A     3    ; -globalopt -localcse -const=ROM 
                           A     4    	FILE	"..\src\sd.c"
                           A     5    	.assume ADL=1
                           A     6    	SEGMENT CODE
                           A     7    ;    1	/*
                           A     8    ;    2	 * Title:			AGON MOS - Low leve
                           A     9    ;    3	 * Author:			RJH
                           A    10    ;    4	 * Modified by:		Dean Belfield
                           A    11    ;    5	 * Created:			19/06/2022
                           A    12    ;    6	 * Last Updated:	13/07/2022
                           A    13    ;    7	 * 
                           A    14    ;    8	 * Code taken from this article: http:/
                           A    15    ;    9	 *
                           A    16    ;   10	 * Modinfo:
                           A    17    ;   11	 * 11/07/2022:		Now includes define
                           A    18    ;   12	 * 13/07/2022:		Fixed bug in SD_wri
                           A    19    ;   13	 */
                           A    20    ;   14	
                           A    21    ;   15	#include <eZ80.h>
                           A    22    ;   16	#include <defines.h>
                           A    23    ;   17	
                           A    24    ;   18	#include <stdio.h>
                           A    25    ;   19	#include <String.h>
                           A    26    ;   20	
                           A    27    ;   21	#include "spi.h"
                           A    28    ;   22	#include "sd.h"
                           A    29    ;   23	#include "timer.h"
                           A    30    ;   24	
                           A    31    ;   25	void SD_command(BYTE cmd, DWORD arg, BY
000000                     A    32    _SD_command:
000000 CD 00 00 00         A    33    	CALL	__frameset0
                           A    34    ;   26	    spi_transfer(cmd|0x40);
000004 DD7E06              A    35    	LD	A,(IX+%6)
000007 CBF7                A    36    	SET	%6,A
000009 4F                  A    37    	LD	C,A
00000A 0600                A    38    	LD	B,%0
00000C C5                  A    39    	PUSH	BC
00000D CD 00 00 00         A    40    	CALL	_spi_transfer
000011 C1                  A    41    	POP	BC
                           A    42    ;   27	    spi_transfer((BYTE)(arg >> 24));
000012 DD7E0C              A    43    	LD	A,(IX+%C)
000015 B7ED62              A    44    	UEXT	HL
000018 6F                  A    45    	LD	L,A
000019 E5C1                A    46    	LD	BC,HL
00001B 0600                A    47    	LD	B,%0
00001D C5                  A    48    	PUSH	BC
00001E CD 00 00 00         A    49    	CALL	_spi_transfer
000022 C1                  A    50    	POP	BC
                           A    51    ;   28	    spi_transfer((BYTE)(arg >> 16));
000023 DD0709              A    52    	LD	BC,(IX+%9)
000026 DD7E0C              A    53    	LD	A,(IX+%C)
000029 2E10                A    54    	LD	L,%10
00002B CD 00 00 00         A    55    	CALL	__lshru
00002F 0600                A    56    	LD	B,%0
000031 C5                  A    57    	PUSH	BC
000032 CD 00 00 00         A    58    	CALL	_spi_transfer
000036 C1                  A    59    	POP	BC
                           A    60    ;   29	    spi_transfer((BYTE)(arg >> 8));
000037 DD0709              A    61    	LD	BC,(IX+%9)
00003A DD7E0C              A    62    	LD	A,(IX+%C)
00003D 2E08                A    63    	LD	L,%8
00003F CD 00 00 00         A    64    	CALL	__lshru
000043 0600                A    65    	LD	B,%0
000045 C5                  A    66    	PUSH	BC
000046 CD 00 00 00         A    67    	CALL	_spi_transfer
00004A C1                  A    68    	POP	BC
                           A    69    ;   30	    spi_transfer((BYTE)(arg));
00004B DD4E09              A    70    	LD	C,(IX+%9)
00004E 0600                A    71    	LD	B,%0
000050 C5                  A    72    	PUSH	BC
000051 CD 00 00 00         A    73    	CALL	_spi_transfer
000055 C1                  A    74    	POP	BC
                           A    75    ;   31	    spi_transfer(crc|0x01);
000056 DD7E0F              A    76    	LD	A,(IX+%F)
000059 CBC7                A    77    	SET	%0,A
00005B 4F                  A    78    	LD	C,A
00005C 0600                A    79    	LD	B,%0
00005E C5                  A    80    	PUSH	BC
00005F CD 00 00 00         A    81    	CALL	_spi_transfer
000063 C1                  A    82    	POP	BC
                           A    83    ;   32	}
000064 DDF9                A    84    	LD	SP,IX
000066 DDE1                A    85    	POP	IX
000068 C9                  A    86    	RET	
                           A    87    
                           A    88    
                           A    89    ;**************************** _SD_command *****
                           A    90    ;Name                         Addr/Register   S
                           A    91    ;_spi_transfer                       IMPORT  --
                           A    92    ;crc                                  IX+15    
                           A    93    ;arg                                   IX+9    
                           A    94    ;cmd                                   IX+6    
                           A    95    
                           A    96    
                           A    97    ; Stack Frame Size: 18 (bytes)
                           A    98    ;       Spill Code: 0 (instruction)
                           A    99    
                           A   100    
                           A   101    ;   33	
                           A   102    ;   34	BYTE SD_readRes1() {
000069                     A   103    _SD_readRes1:
000069 21FEFFFF            A   104    	LD	HL,-2
00006D CD 00 00 00         A   105    	CALL	__frameset
                           A   106    ;   35	    BYTE i = 0, res1;
000071 DD36FF00            A   107    	LD	(IX+%FFFFFFFF),%0
                           A   108    ;   36	
                           A   109    ;   37	    // keep polling until actual data r
                           A   110    ;   38	    while((res1 = spi_transfer(0xFF)) =
000075 18 0A               A   111    	JR	L_3
000077                     A   112    L_4:
                           A   113    ;   39	        i++;
000077 DD34FF              A   114    	INC	(IX+%FFFFFFFF)
                           A   115    ;   40	        // if no data received for 8 by
                           A   116    ;   41	        if(i > 8) break;
00007A 3E08                A   117    	LD	A,%8
00007C DDBEFF              A   118    	CP	A,(IX+%FFFFFFFF)
00007F 38 11               A   119    	JR	C,L_5
                           A   120    ;   42	    }
000081                     A   121    L_3:
000081 01FF0000            A   122    	LD	BC,255
000085 C5                  A   123    	PUSH	BC
000086 CD 00 00 00         A   124    	CALL	_spi_transfer
00008A C1                  A   125    	POP	BC
00008B DD77FE              A   126    	LD	(IX+%FFFFFFFE),A
00008E FEFF                A   127    	CP	A,%FF
000090 28 E5               A   128    	JR	Z,L_4
000092                     A   129    L_5:
                           A   130    ;   43	    return res1;
000092 DD7EFE              A   131    	LD	A,(IX+%FFFFFFFE)
                           A   132    ;   44	}
000095 DDF9                A   133    	LD	SP,IX
000097 DDE1                A   134    	POP	IX
000099 C9                  A   135    	RET	
                           A   136    
                           A   137    
                           A   138    ;**************************** _SD_readRes1 ****
                           A   139    ;Name                         Addr/Register   S
                           A   140    ;_spi_transfer                       IMPORT  --
                           A   141    ;res1                                  IX-2    
                           A   142    ;i                                     IX-1    
                           A   143    
                           A   144    
                           A   145    ; Stack Frame Size: 8 (bytes)
                           A   146    ;       Spill Code: 0 (instruction)
                           A   147    
                           A   148    
                           A   149    ;   45	
                           A   150    ;   46	void SD_readRes7(BYTE *res) {
00009A                     A   151    _SD_readRes7:
00009A CD 00 00 00         A   152    	CALL	__frameset0
                           A   153    ;   47	    res[0] = SD_readRes1();
00009E CD 69 00 00         A   154    	CALL	_SD_readRes1
0000A2 DD2706              A   155    	LD	HL,(IX+%6)
0000A5 77                  A   156    	LD	(HL),A
                           A   157    ;   48	
                           A   158    ;   49	    // if error reading R1, return
                           A   159    ;   50	    if(res[0] > 1) return;
0000A6 DD2706              A   160    	LD	HL,(IX+%6)
0000A9 7E                  A   161    	LD	A,(HL)
0000AA B7ED62              A   162    	UEXT	HL
0000AD 6F                  A   163    	LD	L,A
0000AE E5C1                A   164    	LD	BC,HL
0000B0 21010000            A   165    	LD	HL,1
0000B4 B7                  A   166    	OR	A,A
0000B5 ED42                A   167    	SBC	HL,BC
0000B7 CD 00 00 00         A   168    	CALL	__setflag
0000BB FA 01 01 00         A   169    	JP	M,L_9
                           A   170    ;   51	
                           A   171    ;   52	    // read remaining bytes
                           A   172    ;   53	    res[1] = spi_transfer(0xFF);
0000BF 01FF0000            A   173    	LD	BC,255
0000C3 C5                  A   174    	PUSH	BC
0000C4 CD 00 00 00         A   175    	CALL	_spi_transfer
0000C8 C1                  A   176    	POP	BC
0000C9 DD2706              A   177    	LD	HL,(IX+%6)
0000CC 23                  A   178    	INC	HL
0000CD 77                  A   179    	LD	(HL),A
                           A   180    ;   54	    res[2] = spi_transfer(0xFF);
0000CE 01FF0000            A   181    	LD	BC,255
0000D2 C5                  A   182    	PUSH	BC
0000D3 CD 00 00 00         A   183    	CALL	_spi_transfer
0000D7 C1                  A   184    	POP	BC
0000D8 DD3106              A   185    	LD	IY,(IX+%6)
0000DB ED2302              A   186    	LEA	HL,IY+%2
0000DE 77                  A   187    	LD	(HL),A
                           A   188    ;   55	    res[3] = spi_transfer(0xFF);
0000DF 01FF0000            A   189    	LD	BC,255
0000E3 C5                  A   190    	PUSH	BC
0000E4 CD 00 00 00         A   191    	CALL	_spi_transfer
0000E8 C1                  A   192    	POP	BC
0000E9 DD3106              A   193    	LD	IY,(IX+%6)
0000EC ED2303              A   194    	LEA	HL,IY+%3
0000EF 77                  A   195    	LD	(HL),A
                           A   196    ;   56	    res[4] = spi_transfer(0xFF);
0000F0 01FF0000            A   197    	LD	BC,255
0000F4 C5                  A   198    	PUSH	BC
0000F5 CD 00 00 00         A   199    	CALL	_spi_transfer
0000F9 C1                  A   200    	POP	BC
0000FA DD3106              A   201    	LD	IY,(IX+%6)
0000FD ED2304              A   202    	LEA	HL,IY+%4
000100 77                  A   203    	LD	(HL),A
                           A   204    ;   57	}
000101                     A   205    L_9:
000101 DDF9                A   206    	LD	SP,IX
000103 DDE1                A   207    	POP	IX
000105 C9                  A   208    	RET	
                           A   209    
                           A   210    
                           A   211    ;**************************** _SD_readRes7 ****
                           A   212    ;Name                         Addr/Register   S
                           A   213    ;_spi_transfer                       IMPORT  --
                           A   214    ;_SD_readRes1                        IMPORT  --
                           A   215    ;res                                   IX+6    
                           A   216    
                           A   217    
                           A   218    ; Stack Frame Size: 9 (bytes)
                           A   219    ;       Spill Code: 0 (instruction)
                           A   220    
                           A   221    
                           A   222    ;   58	
                           A   223    ;   59	BYTE SD_goIdleState() {
000106                     A   224    _SD_goIdleState:
000106 21FFFFFF            A   225    	LD	HL,-1
00010A CD 00 00 00         A   226    	CALL	__frameset
                           A   227    ;   60		BYTE res1;
                           A   228    ;   61	//  printf("SD_goIdleState()\n");
                           A   229    ;   62	    spi_transfer(0xFF);
00010E 01FF0000            A   230    	LD	BC,255
000112 C5                  A   231    	PUSH	BC
000113 CD 00 00 00         A   232    	CALL	_spi_transfer
000117 C1                  A   233    	POP	BC
                           A   234    ;   63	    SD_CS_enable();
000118 CD 00 00 00         A   235    	CALL	_SD_CS_enable
                           A   236    ;   64	    spi_transfer(0xFF);
00011C 01FF0000            A   237    	LD	BC,255
000120 C5                  A   238    	PUSH	BC
000121 CD 00 00 00         A   239    	CALL	_spi_transfer
000125 C1                  A   240    	POP	BC
                           A   241    ;   65	    SD_command(CMD0, CMD0_ARG, CMD0_CRC
000126 01940000            A   242    	LD	BC,148
00012A C5                  A   243    	PUSH	BC
00012B 01000000            A   244    	LD	BC,0
00012F C5                  A   245    	PUSH	BC
000130 C5                  A   246    	PUSH	BC
000131 C5                  A   247    	PUSH	BC
000132 CD 00 00 00         A   248    	CALL	_SD_command
000136 C1                  A   249    	POP	BC
000137 C1                  A   250    	POP	BC
000138 C1                  A   251    	POP	BC
000139 C1                  A   252    	POP	BC
                           A   253    ;   66	    res1 = SD_readRes1();
00013A CD 69 00 00         A   254    	CALL	_SD_readRes1
00013E DD77FF              A   255    	LD	(IX+%FFFFFFFF),A
                           A   256    ;   67	    spi_transfer(0xFF);
000141 01FF0000            A   257    	LD	BC,255
000145 C5                  A   258    	PUSH	BC
000146 CD 00 00 00         A   259    	CALL	_spi_transfer
00014A C1                  A   260    	POP	BC
                           A   261    ;   68	    SD_CS_disable();
00014B CD 00 00 00         A   262    	CALL	_SD_CS_disable
                           A   263    ;   69	    spi_transfer(0xFF);
00014F 01FF0000            A   264    	LD	BC,255
000153 C5                  A   265    	PUSH	BC
000154 CD 00 00 00         A   266    	CALL	_spi_transfer
000158 C1                  A   267    	POP	BC
                           A   268    ;   70	    return res1;
000159 DD7EFF              A   269    	LD	A,(IX+%FFFFFFFF)
                           A   270    ;   71	}
00015C DDF9                A   271    	LD	SP,IX
00015E DDE1                A   272    	POP	IX
000160 C9                  A   273    	RET	
                           A   274    
                           A   275    
                           A   276    ;**************************** _SD_goIdleState *
                           A   277    ;Name                         Addr/Register   S
                           A   278    ;_SD_CS_disable                      IMPORT  --
                           A   279    ;_SD_readRes1                        IMPORT  --
                           A   280    ;_SD_command                         IMPORT  --
                           A   281    ;_SD_CS_enable                       IMPORT  --
                           A   282    ;_spi_transfer                       IMPORT  --
                           A   283    ;res1                                  IX-1    
                           A   284    
                           A   285    
                           A   286    ; Stack Frame Size: 7 (bytes)
                           A   287    ;       Spill Code: 0 (instruction)
                           A   288    
                           A   289    
                           A   290    ;   72	
                           A   291    ;   73	void SD_sendIfCond(BYTE *res) {
000161                     A   292    _SD_sendIfCond:
000161 CD 00 00 00         A   293    	CALL	__frameset0
                           A   294    ;   74	//  printf("SD_sendIfCond()\n");
                           A   295    ;   75	    spi_transfer(0xFF);
000165 01FF0000            A   296    	LD	BC,255
000169 C5                  A   297    	PUSH	BC
00016A CD 00 00 00         A   298    	CALL	_spi_transfer
00016E C1                  A   299    	POP	BC
                           A   300    ;   76	    SD_CS_enable();
00016F CD 00 00 00         A   301    	CALL	_SD_CS_enable
                           A   302    ;   77	    spi_transfer(0xFF);
000173 01FF0000            A   303    	LD	BC,255
000177 C5                  A   304    	PUSH	BC
000178 CD 00 00 00         A   305    	CALL	_spi_transfer
00017C C1                  A   306    	POP	BC
                           A   307    ;   78	    SD_command(CMD8, CMD8_ARG, CMD8_CRC
00017D 01860000            A   308    	LD	BC,134
000181 C5                  A   309    	PUSH	BC
000182 01000000            A   310    	LD	BC,0
000186 C5                  A   311    	PUSH	BC
000187 01AA0100            A   312    	LD	BC,426
00018B C5                  A   313    	PUSH	BC
00018C 01080000            A   314    	LD	BC,8
000190 C5                  A   315    	PUSH	BC
000191 CD 00 00 00         A   316    	CALL	_SD_command
000195 C1                  A   317    	POP	BC
000196 C1                  A   318    	POP	BC
000197 C1                  A   319    	POP	BC
000198 C1                  A   320    	POP	BC
                           A   321    ;   79	    SD_readRes7(res);
000199 DD0706              A   322    	LD	BC,(IX+%6)
00019C C5                  A   323    	PUSH	BC
00019D CD 9A 00 00         A   324    	CALL	_SD_readRes7
0001A1 C1                  A   325    	POP	BC
                           A   326    ;   80	    spi_transfer(0xFF);
0001A2 01FF0000            A   327    	LD	BC,255
0001A6 C5                  A   328    	PUSH	BC
0001A7 CD 00 00 00         A   329    	CALL	_spi_transfer
0001AB C1                  A   330    	POP	BC
                           A   331    ;   81	    SD_CS_disable();
0001AC CD 00 00 00         A   332    	CALL	_SD_CS_disable
                           A   333    ;   82	    spi_transfer(0xFF);
0001B0 01FF0000            A   334    	LD	BC,255
0001B4 C5                  A   335    	PUSH	BC
0001B5 CD 00 00 00         A   336    	CALL	_spi_transfer
0001B9 C1                  A   337    	POP	BC
                           A   338    ;   83	}
0001BA DDF9                A   339    	LD	SP,IX
0001BC DDE1                A   340    	POP	IX
0001BE C9                  A   341    	RET	
                           A   342    
                           A   343    
                           A   344    ;**************************** _SD_sendIfCond **
                           A   345    ;Name                         Addr/Register   S
                           A   346    ;_SD_CS_disable                      IMPORT  --
                           A   347    ;_SD_readRes7                        IMPORT  --
                           A   348    ;_SD_command                         IMPORT  --
                           A   349    ;_SD_CS_enable                       IMPORT  --
                           A   350    ;_spi_transfer                       IMPORT  --
                           A   351    ;res                                   IX+6    
                           A   352    
                           A   353    
                           A   354    ; Stack Frame Size: 9 (bytes)
                           A   355    ;       Spill Code: 0 (instruction)
                           A   356    
                           A   357    
                           A   358    ;   84	
                           A   359    ;   85	UINT8 SD_sendApp() {
0001BF                     A   360    _SD_sendApp:
0001BF 21FFFFFF            A   361    	LD	HL,-1
0001C3 CD 00 00 00         A   362    	CALL	__frameset
                           A   363    ;   86		BYTE res1;
                           A   364    ;   87	//	printf("SD_sendApp()\n");
                           A   365    ;   88	    spi_transfer(0xFF);
0001C7 01FF0000            A   366    	LD	BC,255
0001CB C5                  A   367    	PUSH	BC
0001CC CD 00 00 00         A   368    	CALL	_spi_transfer
0001D0 C1                  A   369    	POP	BC
                           A   370    ;   89	    SD_CS_enable();
0001D1 CD 00 00 00         A   371    	CALL	_SD_CS_enable
                           A   372    ;   90	    spi_transfer(0xFF);
0001D5 01FF0000            A   373    	LD	BC,255
0001D9 C5                  A   374    	PUSH	BC
0001DA CD 00 00 00         A   375    	CALL	_spi_transfer
0001DE C1                  A   376    	POP	BC
                           A   377    ;   91	    SD_command(CMD55, CMD55_ARG, CMD55_
0001DF 01000000            A   378    	LD	BC,0
0001E3 C5                  A   379    	PUSH	BC
0001E4 C5                  A   380    	PUSH	BC
0001E5 C5                  A   381    	PUSH	BC
0001E6 01370000            A   382    	LD	BC,55
0001EA C5                  A   383    	PUSH	BC
0001EB CD 00 00 00         A   384    	CALL	_SD_command
0001EF C1                  A   385    	POP	BC
0001F0 C1                  A   386    	POP	BC
0001F1 C1                  A   387    	POP	BC
0001F2 C1                  A   388    	POP	BC
                           A   389    ;   92	    res1 = SD_readRes1();
0001F3 CD 69 00 00         A   390    	CALL	_SD_readRes1
0001F7 DD77FF              A   391    	LD	(IX+%FFFFFFFF),A
                           A   392    ;   93	    spi_transfer(0xFF);
0001FA 01FF0000            A   393    	LD	BC,255
0001FE C5                  A   394    	PUSH	BC
0001FF CD 00 00 00         A   395    	CALL	_spi_transfer
000203 C1                  A   396    	POP	BC
                           A   397    ;   94	    SD_CS_disable();
000204 CD 00 00 00         A   398    	CALL	_SD_CS_disable
                           A   399    ;   95	    spi_transfer(0xFF);
000208 01FF0000            A   400    	LD	BC,255
00020C C5                  A   401    	PUSH	BC
00020D CD 00 00 00         A   402    	CALL	_spi_transfer
000211 C1                  A   403    	POP	BC
                           A   404    ;   96	    return res1;
000212 DD7EFF              A   405    	LD	A,(IX+%FFFFFFFF)
                           A   406    ;   97	}
000215 DDF9                A   407    	LD	SP,IX
000217 DDE1                A   408    	POP	IX
000219 C9                  A   409    	RET	
                           A   410    
                           A   411    
                           A   412    ;**************************** _SD_sendApp *****
                           A   413    ;Name                         Addr/Register   S
                           A   414    ;_SD_CS_disable                      IMPORT  --
                           A   415    ;_SD_readRes1                        IMPORT  --
                           A   416    ;_SD_command                         IMPORT  --
                           A   417    ;_SD_CS_enable                       IMPORT  --
                           A   418    ;_spi_transfer                       IMPORT  --
                           A   419    ;res1                                  IX-1    
                           A   420    
                           A   421    
                           A   422    ; Stack Frame Size: 7 (bytes)
                           A   423    ;       Spill Code: 0 (instruction)
                           A   424    
                           A   425    
                           A   426    ;   98	
                           A   427    ;   99	UINT8 SD_sendOpCond() {
00021A                     A   428    _SD_sendOpCond:
00021A 21FFFFFF            A   429    	LD	HL,-1
00021E CD 00 00 00         A   430    	CALL	__frameset
                           A   431    ;  100		BYTE res1;
                           A   432    ;  101	//  printf("SD_sendOpCond()\n");
                           A   433    ;  102	    spi_transfer(0xFF);
000222 01FF0000            A   434    	LD	BC,255
000226 C5                  A   435    	PUSH	BC
000227 CD 00 00 00         A   436    	CALL	_spi_transfer
00022B C1                  A   437    	POP	BC
                           A   438    ;  103	    SD_CS_enable();
00022C CD 00 00 00         A   439    	CALL	_SD_CS_enable
                           A   440    ;  104	    spi_transfer(0xFF);
000230 01FF0000            A   441    	LD	BC,255
000234 C5                  A   442    	PUSH	BC
000235 CD 00 00 00         A   443    	CALL	_spi_transfer
000239 C1                  A   444    	POP	BC
                           A   445    ;  105	    SD_command(ACMD41, ACMD41_ARG, ACMD
00023A 01000000            A   446    	LD	BC,0
00023E C5                  A   447    	PUSH	BC
00023F 01400000            A   448    	LD	BC,64
000243 C5                  A   449    	PUSH	BC
000244 01000000            A   450    	LD	BC,0
000248 C5                  A   451    	PUSH	BC
000249 01290000            A   452    	LD	BC,41
00024D C5                  A   453    	PUSH	BC
00024E CD 00 00 00         A   454    	CALL	_SD_command
000252 C1                  A   455    	POP	BC
000253 C1                  A   456    	POP	BC
000254 C1                  A   457    	POP	BC
000255 C1                  A   458    	POP	BC
                           A   459    ;  106	    res1 = SD_readRes1();
000256 CD 69 00 00         A   460    	CALL	_SD_readRes1
00025A DD77FF              A   461    	LD	(IX+%FFFFFFFF),A
                           A   462    ;  107	    spi_transfer(0xFF);
00025D 01FF0000            A   463    	LD	BC,255
000261 C5                  A   464    	PUSH	BC
000262 CD 00 00 00         A   465    	CALL	_spi_transfer
000266 C1                  A   466    	POP	BC
                           A   467    ;  108	    SD_CS_disable();
000267 CD 00 00 00         A   468    	CALL	_SD_CS_disable
                           A   469    ;  109	    spi_transfer(0xFF);
00026B 01FF0000            A   470    	LD	BC,255
00026F C5                  A   471    	PUSH	BC
000270 CD 00 00 00         A   472    	CALL	_spi_transfer
000274 C1                  A   473    	POP	BC
                           A   474    ;  110	    return res1;
000275 DD7EFF              A   475    	LD	A,(IX+%FFFFFFFF)
                           A   476    ;  111	}
000278 DDF9                A   477    	LD	SP,IX
00027A DDE1                A   478    	POP	IX
00027C C9                  A   479    	RET	
                           A   480    
                           A   481    
                           A   482    ;**************************** _SD_sendOpCond **
                           A   483    ;Name                         Addr/Register   S
                           A   484    ;_SD_CS_disable                      IMPORT  --
                           A   485    ;_SD_readRes1                        IMPORT  --
                           A   486    ;_SD_command                         IMPORT  --
                           A   487    ;_SD_CS_enable                       IMPORT  --
                           A   488    ;_spi_transfer                       IMPORT  --
                           A   489    ;res1                                  IX-1    
                           A   490    
                           A   491    
                           A   492    ; Stack Frame Size: 7 (bytes)
                           A   493    ;       Spill Code: 0 (instruction)
                           A   494    
                           A   495    
                           A   496    ;  112	
                           A   497    ;  113	void SD_readOCR(BYTE *res) {
00027D                     A   498    _SD_readOCR:
00027D CD 00 00 00         A   499    	CALL	__frameset0
                           A   500    ;  114	//  printf("SD_readOCR()\n");
                           A   501    ;  115	    spi_transfer(0xFF);
000281 01FF0000            A   502    	LD	BC,255
000285 C5                  A   503    	PUSH	BC
000286 CD 00 00 00         A   504    	CALL	_spi_transfer
00028A C1                  A   505    	POP	BC
                           A   506    ;  116	    SD_CS_enable();
00028B CD 00 00 00         A   507    	CALL	_SD_CS_enable
                           A   508    ;  117	    spi_transfer(0xFF);
00028F 01FF0000            A   509    	LD	BC,255
000293 C5                  A   510    	PUSH	BC
000294 CD 00 00 00         A   511    	CALL	_spi_transfer
000298 C1                  A   512    	POP	BC
                           A   513    ;  118	    SD_command(CMD58, CMD58_ARG, CMD58_
000299 01000000            A   514    	LD	BC,0
00029D C5                  A   515    	PUSH	BC
00029E C5                  A   516    	PUSH	BC
00029F C5                  A   517    	PUSH	BC
0002A0 013A0000            A   518    	LD	BC,58
0002A4 C5                  A   519    	PUSH	BC
0002A5 CD 00 00 00         A   520    	CALL	_SD_command
0002A9 C1                  A   521    	POP	BC
0002AA C1                  A   522    	POP	BC
0002AB C1                  A   523    	POP	BC
0002AC C1                  A   524    	POP	BC
                           A   525    ;  119	    SD_readRes7(res);
0002AD DD0706              A   526    	LD	BC,(IX+%6)
0002B0 C5                  A   527    	PUSH	BC
0002B1 CD 9A 00 00         A   528    	CALL	_SD_readRes7
0002B5 C1                  A   529    	POP	BC
                           A   530    ;  120	    spi_transfer(0xFF);
0002B6 01FF0000            A   531    	LD	BC,255
0002BA C5                  A   532    	PUSH	BC
0002BB CD 00 00 00         A   533    	CALL	_spi_transfer
0002BF C1                  A   534    	POP	BC
                           A   535    ;  121	    SD_CS_disable();
0002C0 CD 00 00 00         A   536    	CALL	_SD_CS_disable
                           A   537    ;  122	    spi_transfer(0xFF);
0002C4 01FF0000            A   538    	LD	BC,255
0002C8 C5                  A   539    	PUSH	BC
0002C9 CD 00 00 00         A   540    	CALL	_spi_transfer
0002CD C1                  A   541    	POP	BC
                           A   542    ;  123	}
0002CE DDF9                A   543    	LD	SP,IX
0002D0 DDE1                A   544    	POP	IX
0002D2 C9                  A   545    	RET	
                           A   546    
                           A   547    
                           A   548    ;**************************** _SD_readOCR *****
                           A   549    ;Name                         Addr/Register   S
                           A   550    ;_SD_CS_disable                      IMPORT  --
                           A   551    ;_SD_readRes7                        IMPORT  --
                           A   552    ;_SD_command                         IMPORT  --
                           A   553    ;_SD_CS_enable                       IMPORT  --
                           A   554    ;_spi_transfer                       IMPORT  --
                           A   555    ;res                                   IX+6    
                           A   556    
                           A   557    
                           A   558    ; Stack Frame Size: 9 (bytes)
                           A   559    ;       Spill Code: 0 (instruction)
                           A   560    
                           A   561    
                           A   562    ;  124	
                           A   563    ;  125	void SD_powerUpSeq() {
0002D3                     A   564    _SD_powerUpSeq:
0002D3 21FDFFFF            A   565    	LD	HL,-3
0002D7 CD 00 00 00         A   566    	CALL	__frameset
                           A   567    ;  126		int i;
                           A   568    ;  127	//  printf("SD_powerUpSeq()\n");
                           A   569    ;  128	    SD_CS_disable();
0002DB CD 00 00 00         A   570    	CALL	_SD_CS_disable
                           A   571    ;  129		delayms(10);
0002DF 010A0000            A   572    	LD	BC,10
0002E3 C5                  A   573    	PUSH	BC
0002E4 CD 00 00 00         A   574    	CALL	_delayms
0002E8 C1                  A   575    	POP	BC
                           A   576    ;  130		spi_transfer(0xFF);
0002E9 01FF0000            A   577    	LD	BC,255
0002ED C5                  A   578    	PUSH	BC
0002EE CD 00 00 00         A   579    	CALL	_spi_transfer
0002F2 C1                  A   580    	POP	BC
                           A   581    ;  131	    SD_CS_disable();
0002F3 CD 00 00 00         A   582    	CALL	_SD_CS_disable
                           A   583    ;  132		for(i = 0; i < SD_INIT_CYCLES; i++)
0002F7 01000000            A   584    	LD	BC,0
0002FB DD0FFD              A   585    	LD	(IX+%FFFFFFFD),BC
0002FE 18 11               A   586    	JR	L_18
000300                     A   587    L_16:
                           A   588    ;  133	        spi_transfer(0xFF);
000300 01FF0000            A   589    	LD	BC,255
000304 C5                  A   590    	PUSH	BC
000305 CD 00 00 00         A   591    	CALL	_spi_transfer
000309 C1                  A   592    	POP	BC
00030A DD07FD              A   593    	LD	BC,(IX+%FFFFFFFD)
00030D 03                  A   594    	INC	BC
00030E DD0FFD              A   595    	LD	(IX+%FFFFFFFD),BC
                           A   596    ;  134		}
000311                     A   597    L_18:
000311 010A0000            A   598    	LD	BC,10
000315 DD27FD              A   599    	LD	HL,(IX+%FFFFFFFD)
000318 B7                  A   600    	OR	A,A
000319 ED42                A   601    	SBC	HL,BC
00031B CD 00 00 00         A   602    	CALL	__setflag
00031F FA 00 03 00         A   603    	JP	M,L_16
                           A   604    ;  135	}
000323 DDF9                A   605    	LD	SP,IX
000325 DDE1                A   606    	POP	IX
000327 C9                  A   607    	RET	
                           A   608    
                           A   609    
                           A   610    ;**************************** _SD_powerUpSeq **
                           A   611    ;Name                         Addr/Register   S
                           A   612    ;_spi_transfer                       IMPORT  --
                           A   613    ;_delayms                            IMPORT  --
                           A   614    ;_SD_CS_disable                      IMPORT  --
                           A   615    ;i                                     IX-3    
                           A   616    
                           A   617    
                           A   618    ; Stack Frame Size: 9 (bytes)
                           A   619    ;       Spill Code: 0 (instruction)
                           A   620    
                           A   621    
                           A   622    ;  136	
                           A   623    ;  137	BYTE SD_readBlocks(DWORD addr, BYTE *bu
000328                     A   624    _SD_readBlocks:
000328 21F4FFFF            A   625    	LD	HL,-12
00032C CD 00 00 00         A   626    	CALL	__frameset
                           A   627    ;  138		DWORD	sector = addr;
000330 DD0706              A   628    	LD	BC,(IX+%6)
000333 DD7E09              A   629    	LD	A,(IX+%9)
000336 DD0FF4              A   630    	LD	(IX+%FFFFFFF4),BC
000339 DD77F7              A   631    	LD	(IX+%FFFFFFF7),A
                           A   632    ;  139		BYTE	res;
                           A   633    ;  140		BYTE	token;
                           A   634    ;  141		BYTE *	ptr = buf;
00033C DD070C              A   635    	LD	BC,(IX+%C)
00033F DD0FF8              A   636    	LD	(IX+%FFFFFFF8),BC
                           A   637    ;  142		UINT	i;
                           A   638    ;  143	
                           A   639    ;  144		for(i = 0; i < count; i++) {
000342 01000000            A   640    	LD	BC,0
000346 DD0FFD              A   641    	LD	(IX+%FFFFFFFD),BC
000349 18 51               A   642    	JR	L_27
00034B                     A   643    L_25:
                           A   644    ;  145			res = SD_readSingleBlock(sector
00034B ED65FB              A   645    	PEA	IX+%FFFFFFFB
00034E DD07F8              A   646    	LD	BC,(IX+%FFFFFFF8)
000351 C5                  A   647    	PUSH	BC
000352 DD4EF7              A   648    	LD	C,(IX+%FFFFFFF7)
000355 0600                A   649    	LD	B,%0
000357 C5                  A   650    	PUSH	BC
000358 DD07F4              A   651    	LD	BC,(IX+%FFFFFFF4)
00035B C5                  A   652    	PUSH	BC
00035C CD 59 05 00         A   653    	CALL	_SD_readSingleBlock
000360 C1                  A   654    	POP	BC
000361 C1                  A   655    	POP	BC
000362 C1                  A   656    	POP	BC
000363 C1                  A   657    	POP	BC
000364 DD77FC              A   658    	LD	(IX+%FFFFFFFC),A
                           A   659    ;  146			if(SD_R1_NO_ERROR(res) && (toke
000367 FE02                A   660    	CP	A,%2
000369 30 26               A   661    	JR	NC,L_24
00036B DD7EFB              A   662    	LD	A,(IX+%FFFFFFFB)
00036E FEFE                A   663    	CP	A,%FE
000370 20 1F               A   664    	JR	NZ,L_24
                           A   665    ;  147				sector++;
000372 DD27F4              A   666    	LD	HL,(IX+%FFFFFFF4)
000375 DD5EF7              A   667    	LD	E,(IX+%FFFFFFF7)
000378 3E01                A   668    	LD	A,%1
00037A CD 00 00 00         A   669    	CALL	__ladd_b
00037E DD2FF4              A   670    	LD	(IX+%FFFFFFF4),HL
000381 DD73F7              A   671    	LD	(IX+%FFFFFFF7),E
                           A   672    ;  148				ptr += SD_BLOCK_LEN;
000384 01000200            A   673    	LD	BC,512
000388 DD27F8              A   674    	LD	HL,(IX+%FFFFFFF8)
00038B 09                  A   675    	ADD	HL,BC
00038C DD2FF8              A   676    	LD	(IX+%FFFFFFF8),HL
                           A   677    ;  149			}
                           A   678    ;  150			else {
00038F 18 04               A   679    	JR	L_26
000391                     A   680    L_24:
                           A   681    ;  151				return SD_ERROR;
000391 3E01                A   682    	LD	A,%1
000393 18 19               A   683    	JR	L_29
                           A   684    ;  152			}
                           A   685    ;  153		}	
000395                     A   686    L_26:
000395 DD07FD              A   687    	LD	BC,(IX+%FFFFFFFD)
000398 03                  A   688    	INC	BC
000399 DD0FFD              A   689    	LD	(IX+%FFFFFFFD),BC
00039C                     A   690    L_27:
00039C DD070F              A   691    	LD	BC,(IX+%F)
00039F CD 00 00 00         A   692    	CALL	__stoiu
0003A3 E5C1                A   693    	LD	BC,HL
0003A5 DD27FD              A   694    	LD	HL,(IX+%FFFFFFFD)
0003A8 B7                  A   695    	OR	A,A
0003A9 ED42                A   696    	SBC	HL,BC
0003AB 38 9E               A   697    	JR	C,L_25
                           A   698    ;  154		return SD_SUCCESS;
0003AD AF                  A   699    	XOR	A,A
                           A   700    ;  155	}
0003AE                     A   701    L_29:
0003AE DDF9                A   702    	LD	SP,IX
0003B0 DDE1                A   703    	POP	IX
0003B2 C9                  A   704    	RET	
                           A   705    
                           A   706    
                           A   707    ;**************************** _SD_readBlocks **
                           A   708    ;Name                         Addr/Register   S
                           A   709    ;_SD_readSingleBlock                 IMPORT  --
                           A   710    ;sector                               IX-12    
                           A   711    ;ptr                                   IX-8    
                           A   712    ;token                                 IX-5    
                           A   713    ;res                                   IX-4    
                           A   714    ;i                                     IX-3    
                           A   715    ;count                                IX+15    
                           A   716    ;buf                                  IX+12    
                           A   717    ;addr                                  IX+6    
                           A   718    
                           A   719    
                           A   720    ; Stack Frame Size: 30 (bytes)
                           A   721    ;       Spill Code: 0 (instruction)
                           A   722    
                           A   723    
                           A   724    ;  156	
                           A   725    ;  157	BYTE SD_writeBlocks(DWORD addr, BYTE *b
0003B3                     A   726    _SD_writeBlocks:
0003B3 21F4FFFF            A   727    	LD	HL,-12
0003B7 CD 00 00 00         A   728    	CALL	__frameset
                           A   729    ;  158		DWORD	sector = addr;
0003BB DD0706              A   730    	LD	BC,(IX+%6)
0003BE DD7E09              A   731    	LD	A,(IX+%9)
0003C1 DD0FF4              A   732    	LD	(IX+%FFFFFFF4),BC
0003C4 DD77F7              A   733    	LD	(IX+%FFFFFFF7),A
                           A   734    ;  159		BYTE	res;
                           A   735    ;  160		BYTE	token;
                           A   736    ;  161		BYTE *	ptr = buf;
0003C7 DD070C              A   737    	LD	BC,(IX+%C)
0003CA DD0FF8              A   738    	LD	(IX+%FFFFFFF8),BC
                           A   739    ;  162		UINT	i;
                           A   740    ;  163	
                           A   741    ;  164		for(i = 0; i < count; i++) {
0003CD 01000000            A   742    	LD	BC,0
0003D1 DD0FFD              A   743    	LD	(IX+%FFFFFFFD),BC
0003D4 18 50               A   744    	JR	L_37
0003D6                     A   745    L_35:
                           A   746    ;  165			res = SD_writeSingleBlock(secto
0003D6 ED65FB              A   747    	PEA	IX+%FFFFFFFB
0003D9 DD07F8              A   748    	LD	BC,(IX+%FFFFFFF8)
0003DC C5                  A   749    	PUSH	BC
0003DD DD4EF7              A   750    	LD	C,(IX+%FFFFFFF7)
0003E0 0600                A   751    	LD	B,%0
0003E2 C5                  A   752    	PUSH	BC
0003E3 DD07F4              A   753    	LD	BC,(IX+%FFFFFFF4)
0003E6 C5                  A   754    	PUSH	BC
0003E7 CD 3D 04 00         A   755    	CALL	_SD_writeSingleBlock
0003EB C1                  A   756    	POP	BC
0003EC C1                  A   757    	POP	BC
0003ED C1                  A   758    	POP	BC
0003EE C1                  A   759    	POP	BC
0003EF DD77FC              A   760    	LD	(IX+%FFFFFFFC),A
                           A   761    ;  166			if(res == 0x00 && token == SD_D
0003F2 B7                  A   762    	OR	A,A
0003F3 20 26               A   763    	JR	NZ,L_34
0003F5 DD7EFB              A   764    	LD	A,(IX+%FFFFFFFB)
0003F8 FE05                A   765    	CP	A,%5
0003FA 20 1F               A   766    	JR	NZ,L_34
                           A   767    ;  167				sector++;
0003FC DD27F4              A   768    	LD	HL,(IX+%FFFFFFF4)
0003FF DD5EF7              A   769    	LD	E,(IX+%FFFFFFF7)
000402 3E01                A   770    	LD	A,%1
000404 CD 00 00 00         A   771    	CALL	__ladd_b
000408 DD2FF4              A   772    	LD	(IX+%FFFFFFF4),HL
00040B DD73F7              A   773    	LD	(IX+%FFFFFFF7),E
                           A   774    ;  168				ptr += SD_BLOCK_LEN;
00040E 01000200            A   775    	LD	BC,512
000412 DD27F8              A   776    	LD	HL,(IX+%FFFFFFF8)
000415 09                  A   777    	ADD	HL,BC
000416 DD2FF8              A   778    	LD	(IX+%FFFFFFF8),HL
                           A   779    ;  169			}
                           A   780    ;  170			else {
000419 18 04               A   781    	JR	L_36
00041B                     A   782    L_34:
                           A   783    ;  171				return SD_ERROR;
00041B 3E01                A   784    	LD	A,%1
00041D 18 19               A   785    	JR	L_39
                           A   786    ;  172			}
                           A   787    ;  173		}	
00041F                     A   788    L_36:
00041F DD07FD              A   789    	LD	BC,(IX+%FFFFFFFD)
000422 03                  A   790    	INC	BC
000423 DD0FFD              A   791    	LD	(IX+%FFFFFFFD),BC
000426                     A   792    L_37:
000426 DD070F              A   793    	LD	BC,(IX+%F)
000429 CD 00 00 00         A   794    	CALL	__stoiu
00042D E5C1                A   795    	LD	BC,HL
00042F DD27FD              A   796    	LD	HL,(IX+%FFFFFFFD)
000432 B7                  A   797    	OR	A,A
000433 ED42                A   798    	SBC	HL,BC
000435 38 9F               A   799    	JR	C,L_35
                           A   800    ;  174		return SD_SUCCESS;	
000437 AF                  A   801    	XOR	A,A
                           A   802    ;  175	}
000438                     A   803    L_39:
000438 DDF9                A   804    	LD	SP,IX
00043A DDE1                A   805    	POP	IX
00043C C9                  A   806    	RET	
                           A   807    
                           A   808    
                           A   809    ;**************************** _SD_writeBlocks *
                           A   810    ;Name                         Addr/Register   S
                           A   811    ;_SD_writeSingleBlock                IMPORT  --
                           A   812    ;sector                               IX-12    
                           A   813    ;ptr                                   IX-8    
                           A   814    ;token                                 IX-5    
                           A   815    ;res                                   IX-4    
                           A   816    ;i                                     IX-3    
                           A   817    ;count                                IX+15    
                           A   818    ;buf                                  IX+12    
                           A   819    ;addr                                  IX+6    
                           A   820    
                           A   821    
                           A   822    ; Stack Frame Size: 30 (bytes)
                           A   823    ;       Spill Code: 0 (instruction)
                           A   824    
                           A   825    
                           A   826    ;  176	
                           A   827    ;  177	BYTE SD_writeSingleBlock(DWORD addr, BY
00043D                     A   828    _SD_writeSingleBlock:
00043D 21FBFFFF            A   829    	LD	HL,-5
000441 CD 00 00 00         A   830    	CALL	__frameset
                           A   831    ;  178	    BYTE	res1;
                           A   832    ;  179		BYTE 	readAttempts;
                           A   833    ;  180		BYTE	read = 0x00;
000445 DD36FC00            A   834    	LD	(IX+%FFFFFFFC),%0
                           A   835    ;  181		WORD	i;
                           A   836    ;  182		//
                           A   837    ;  183	    // Set token to none
                           A   838    ;  184		//
                           A   839    ;  185	    *token = 0xFF;
000449 DD270F              A   840    	LD	HL,(IX+%F)
00044C 36FF                A   841    	LD	(HL),%FF
                           A   842    ;  186		//
                           A   843    ;  187	    // Assert chip select
                           A   844    ;  188		//
                           A   845    ;  189	    spi_transfer(0xFF);
00044E 01FF0000            A   846    	LD	BC,255
000452 C5                  A   847    	PUSH	BC
000453 CD 00 00 00         A   848    	CALL	_spi_transfer
000457 C1                  A   849    	POP	BC
                           A   850    ;  190		SD_CS_enable();
000458 CD 00 00 00         A   851    	CALL	_SD_CS_enable
                           A   852    ;  191	    spi_transfer(0xFF);
00045C 01FF0000            A   853    	LD	BC,255
000460 C5                  A   854    	PUSH	BC
000461 CD 00 00 00         A   855    	CALL	_spi_transfer
000465 C1                  A   856    	POP	BC
                           A   857    ;  192		//
                           A   858    ;  193	    // Send CMD24
                           A   859    ;  194		//
                           A   860    ;  195	    SD_command(CMD24, addr, CMD24_CRC);
000466 01000000            A   861    	LD	BC,0
00046A C5                  A   862    	PUSH	BC
00046B DD4E09              A   863    	LD	C,(IX+%9)
00046E 0600                A   864    	LD	B,%0
000470 C5                  A   865    	PUSH	BC
000471 DD0706              A   866    	LD	BC,(IX+%6)
000474 C5                  A   867    	PUSH	BC
000475 01180000            A   868    	LD	BC,24
000479 C5                  A   869    	PUSH	BC
00047A CD 00 00 00         A   870    	CALL	_SD_command
00047E C1                  A   871    	POP	BC
00047F C1                  A   872    	POP	BC
000480 C1                  A   873    	POP	BC
000481 C1                  A   874    	POP	BC
                           A   875    ;  196		//
                           A   876    ;  197	    // Read response
                           A   877    ;  198		//
                           A   878    ;  199	    res1 = SD_readRes1();
000482 CD 69 00 00         A   879    	CALL	_SD_readRes1
000486 DD77FB              A   880    	LD	(IX+%FFFFFFFB),A
                           A   881    ;  200	
                           A   882    ;  201	    // If no error
                           A   883    ;  202	    if(res1 == SD_READY) {
000489 B7                  A   884    	OR	A,A
00048A C2 39 05 00         A   885    	JR	NZ,L_54
                           A   886    ;  203			//
                           A   887    ;  204	        // Send start token
                           A   888    ;  205			//
                           A   889    ;  206	        spi_transfer(SD_START_TOKEN);
00048E 01FE0000            A   890    	LD	BC,254
000492 C5                  A   891    	PUSH	BC
000493 CD 00 00 00         A   892    	CALL	_spi_transfer
000497 C1                  A   893    	POP	BC
                           A   894    ;  207	
                           A   895    ;  208	        // Write buffer to card
                           A   896    ;  209			//
                           A   897    ;  210	        for(i = 0; i < SD_BLOCK_LEN; i+
000498 DD36FD00            A   898    	LD	(IX+%FFFFFFFD),%0
00049C DD36FE00            A   899    	LD	(IX+%FFFFFFFE),%0
0004A0 18 1E               A   900    	JR	L_43
0004A2                     A   901    L_41:
                           A   902    ;  211				spi_transfer(buf[i]);
0004A2 DD07FD              A   903    	LD	BC,(IX+%FFFFFFFD)
0004A5 CD 00 00 00         A   904    	CALL	__stoiu
0004A9 DD070C              A   905    	LD	BC,(IX+%C)
0004AC 09                  A   906    	ADD	HL,BC
0004AD 4E                  A   907    	LD	C,(HL)
0004AE 0600                A   908    	LD	B,%0
0004B0 C5                  A   909    	PUSH	BC
0004B1 CD 00 00 00         A   910    	CALL	_spi_transfer
0004B5 C1                  A   911    	POP	BC
0004B6 DD27FD              A   912    	LD	HL,(IX+%FFFFFFFD)
0004B9 23                  A   913    	INC	HL
0004BA DD75FD              A   914    	LD	(IX+%FFFFFFFD),L
0004BD DD74FE              A   915    	LD	(IX+%FFFFFFFE),H
                           A   916    ;  212			}
0004C0                     A   917    L_43:
0004C0 49010002            A   918    	LD.LIS	BC,512
0004C4 DD27FD              A   919    	LD	HL,(IX+%FFFFFFFD)
0004C7 B7                  A   920    	OR	A,A
0004C8 40ED42              A   921    	SBC.SIS	HL,BC
0004CB 38 D5               A   922    	JR	C,L_41
                           A   923    ;  213			//
                           A   924    ;  214	        // Wait for a response (timeout
                           A   925    ;  215			//
                           A   926    ;  216	        readAttempts = 0;
0004CD DD36FF00            A   927    	LD	(IX+%FFFFFFFF),%0
                           A   928    ;  217	        while(++readAttempts != SD_MAX_
0004D1 18 18               A   929    	JR	L_46
0004D3                     A   930    L_47:
                           A   931    ;  218	            if((read = spi_transfer(0xF
0004D3 01FF0000            A   932    	LD	BC,255
0004D7 C5                  A   933    	PUSH	BC
0004D8 CD 00 00 00         A   934    	CALL	_spi_transfer
0004DC C1                  A   935    	POP	BC
0004DD DD77FC              A   936    	LD	(IX+%FFFFFFFC),A
0004E0 FEFF                A   937    	CP	A,%FF
0004E2 28 07               A   938    	JR	Z,L_46
                           A   939    ;  219					*token = 0xFF;
0004E4 DD270F              A   940    	LD	HL,(IX+%F)
0004E7 36FF                A   941    	LD	(HL),%FF
                           A   942    ;  220					break;
0004E9 18 13               A   943    	JR	L_52
                           A   944    ;  221				}
0004EB                     A   945    L_46:
0004EB DD34FF              A   946    	INC	(IX+%FFFFFFFF)
0004EE DD7EFF              A   947    	LD	A,(IX+%FFFFFFFF)
0004F1 B7ED62              A   948    	UEXT	HL
0004F4 6F                  A   949    	LD	L,A
0004F5 01430F00            A   950    	LD	BC,3907
0004F9 B7                  A   951    	OR	A,A
0004FA ED42                A   952    	SBC	HL,BC
0004FC 20 D5               A   953    	JR	NZ,L_47
0004FE                     A   954    L_52:
                           A   955    ;  222			//
                           A   956    ;  223	        // If data accepted
                           A   957    ;  224			//
                           A   958    ;  225	        if((read & 0x1F) == 0x05) {
0004FE DD7EFC              A   959    	LD	A,(IX+%FFFFFFFC)
000501 E61F                A   960    	AND	A,%1F
000503 FE05                A   961    	CP	A,%5
000505 20 32               A   962    	JR	NZ,L_54
                           A   963    ;  226				//
                           A   964    ;  227	            // Set token to data accept
                           A   965    ;  228				//
                           A   966    ;  229	            *token = 0x05;
000507 DD270F              A   967    	LD	HL,(IX+%F)
00050A 3605                A   968    	LD	(HL),%5
                           A   969    ;  230				//
                           A   970    ;  231	            // Wait for write to finish
                           A   971    ;  232				//
                           A   972    ;  233	            readAttempts = 0;
00050C DD36FF00            A   973    	LD	(IX+%FFFFFFFF),%0
                           A   974    ;  234	            while(spi_transfer(0xFF) ==
000510 18 1A               A   975    	JR	L_49
000512                     A   976    L_50:
                           A   977    ;  235	                if(++readAttempts == SD
000512 DD34FF              A   978    	INC	(IX+%FFFFFFFF)
000515 DD7EFF              A   979    	LD	A,(IX+%FFFFFFFF)
000518 B7ED62              A   980    	UEXT	HL
00051B 6F                  A   981    	LD	L,A
00051C 01430F00            A   982    	LD	BC,3907
000520 B7                  A   983    	OR	A,A
000521 ED42                A   984    	SBC	HL,BC
000523 20 07               A   985    	JR	NZ,L_49
                           A   986    ;  236						*token = 0x00;
000525 DD270F              A   987    	LD	HL,(IX+%F)
000528 3600                A   988    	LD	(HL),%0
                           A   989    ;  237						break;
00052A 18 0D               A   990    	JR	L_54
                           A   991    ;  238					}
                           A   992    ;  239				}
00052C                     A   993    L_49:
00052C 01FF0000            A   994    	LD	BC,255
000530 C5                  A   995    	PUSH	BC
000531 CD 00 00 00         A   996    	CALL	_spi_transfer
000535 C1                  A   997    	POP	BC
000536 B7                  A   998    	OR	A,A
000537 28 D9               A   999    	JR	Z,L_50
                           A  1000    ;  240	        }
                           A  1001    ;  241	    }
000539                     A  1002    L_54:
                           A  1003    ;  242		//
                           A  1004    ;  243	    // Deassert chip select
                           A  1005    ;  244		//
                           A  1006    ;  245	    spi_transfer(0xFF);
000539 01FF0000            A  1007    	LD	BC,255
00053D C5                  A  1008    	PUSH	BC
00053E CD 00 00 00         A  1009    	CALL	_spi_transfer
000542 C1                  A  1010    	POP	BC
                           A  1011    ;  246	    SD_CS_disable();
000543 CD 00 00 00         A  1012    	CALL	_SD_CS_disable
                           A  1013    ;  247	    spi_transfer(0xFF);
000547 01FF0000            A  1014    	LD	BC,255
00054B C5                  A  1015    	PUSH	BC
00054C CD 00 00 00         A  1016    	CALL	_spi_transfer
000550 C1                  A  1017    	POP	BC
                           A  1018    ;  248	
                           A  1019    ;  249	    return res1;	
000551 DD7EFB              A  1020    	LD	A,(IX+%FFFFFFFB)
                           A  1021    ;  250	}
000554 DDF9                A  1022    	LD	SP,IX
000556 DDE1                A  1023    	POP	IX
000558 C9                  A  1024    	RET	
                           A  1025    
                           A  1026    
                           A  1027    ;**************************** _SD_writeSingleBl
                           A  1028    ;Name                         Addr/Register   S
                           A  1029    ;_SD_CS_disable                      IMPORT  --
                           A  1030    ;_SD_readRes1                        IMPORT  --
                           A  1031    ;_SD_command                         IMPORT  --
                           A  1032    ;_SD_CS_enable                       IMPORT  --
                           A  1033    ;_spi_transfer                       IMPORT  --
                           A  1034    ;res1                                  IX-5    
                           A  1035    ;read                                  IX-4    
                           A  1036    ;i                                     IX-3    
                           A  1037    ;readAttempts                          IX-1    
                           A  1038    ;token                                IX+15    
                           A  1039    ;buf                                  IX+12    
                           A  1040    ;addr                                  IX+6    
                           A  1041    
                           A  1042    
                           A  1043    ; Stack Frame Size: 23 (bytes)
                           A  1044    ;       Spill Code: 0 (instruction)
                           A  1045    
                           A  1046    
                           A  1047    ;  251	
                           A  1048    ;  252	BYTE SD_readSingleBlock(DWORD addr, BYT
                           A  1049    ;  253	{
000559                     A  1050    _SD_readSingleBlock:
000559 21FAFFFF            A  1051    	LD	HL,-6
00055D CD 00 00 00         A  1052    	CALL	__frameset
                           A  1053    ;  254	    BYTE	res1;
                           A  1054    ;  255		BYTE	read = 0x00;
000561 DD36FF00            A  1055    	LD	(IX+%FFFFFFFF),%0
                           A  1056    ;  256	    WORD	readAttempts, i;
                           A  1057    ;  257		//
                           A  1058    ;  258	    // Set token to none
                           A  1059    ;  259		//
                           A  1060    ;  260	    *token = 0xFF;
000565 DD270F              A  1061    	LD	HL,(IX+%F)
000568 36FF                A  1062    	LD	(HL),%FF
                           A  1063    ;  261		//
                           A  1064    ;  262	    // Assert chip select
                           A  1065    ;  263		//
                           A  1066    ;  264	    spi_transfer(0xFF);
00056A 01FF0000            A  1067    	LD	BC,255
00056E C5                  A  1068    	PUSH	BC
00056F CD 00 00 00         A  1069    	CALL	_spi_transfer
000573 C1                  A  1070    	POP	BC
                           A  1071    ;  265	    SD_CS_enable();
000574 CD 00 00 00         A  1072    	CALL	_SD_CS_enable
                           A  1073    ;  266	    spi_transfer(0xFF);
000578 01FF0000            A  1074    	LD	BC,255
00057C C5                  A  1075    	PUSH	BC
00057D CD 00 00 00         A  1076    	CALL	_spi_transfer
000581 C1                  A  1077    	POP	BC
                           A  1078    ;  267		//
                           A  1079    ;  268	    // Send CMD17
                           A  1080    ;  269		//
                           A  1081    ;  270	    SD_command(CMD17, addr, CMD17_CRC);
000582 01000000            A  1082    	LD	BC,0
000586 C5                  A  1083    	PUSH	BC
000587 DD4E09              A  1084    	LD	C,(IX+%9)
00058A 0600                A  1085    	LD	B,%0
00058C C5                  A  1086    	PUSH	BC
00058D DD0706              A  1087    	LD	BC,(IX+%6)
000590 C5                  A  1088    	PUSH	BC
000591 01110000            A  1089    	LD	BC,17
000595 C5                  A  1090    	PUSH	BC
000596 CD 00 00 00         A  1091    	CALL	_SD_command
00059A C1                  A  1092    	POP	BC
00059B C1                  A  1093    	POP	BC
00059C C1                  A  1094    	POP	BC
00059D C1                  A  1095    	POP	BC
                           A  1096    ;  271		//
                           A  1097    ;  272	    // Read R1
                           A  1098    ;  273		//
                           A  1099    ;  274	    res1 = SD_readRes1();
00059E CD 69 00 00         A  1100    	CALL	_SD_readRes1
0005A2 DD77FA              A  1101    	LD	(IX+%FFFFFFFA),A
                           A  1102    ;  275		//
                           A  1103    ;  276	    // If response received from card
                           A  1104    ;  277		//
                           A  1105    ;  278	    if(res1 != 0xFF) {
0005A5 FEFF                A  1106    	CP	A,%FF
0005A7 CA 35 06 00         A  1107    	JR	Z,L_69
                           A  1108    ;  279			//
                           A  1109    ;  280	        // Wait for a response token (t
                           A  1110    ;  281			//
                           A  1111    ;  282	        readAttempts = 0;
0005AB DD36FB00            A  1112    	LD	(IX+%FFFFFFFB),%0
0005AF DD36FC00            A  1113    	LD	(IX+%FFFFFFFC),%0
                           A  1114    ;  283	        while(++readAttempts != SD_MAX_
0005B3 18 11               A  1115    	JR	L_57
0005B5                     A  1116    L_58:
                           A  1117    ;  284	            if((read = spi_transfer(0xF
0005B5 01FF0000            A  1118    	LD	BC,255
0005B9 C5                  A  1119    	PUSH	BC
0005BA CD 00 00 00         A  1120    	CALL	_spi_transfer
0005BE C1                  A  1121    	POP	BC
0005BF DD77FF              A  1122    	LD	(IX+%FFFFFFFF),A
0005C2 FEFF                A  1123    	CP	A,%FF
0005C4 20 17               A  1124    	JR	NZ,L_66
                           A  1125    ;  285					break;
0005C6                     A  1126    L_57:
0005C6 DD27FB              A  1127    	LD	HL,(IX+%FFFFFFFB)
0005C9 23                  A  1128    	INC	HL
0005CA DD75FB              A  1129    	LD	(IX+%FFFFFFFB),L
0005CD DD74FC              A  1130    	LD	(IX+%FFFFFFFC),H
0005D0 49011B06            A  1131    	LD.LIS	BC,1563
0005D4 DD27FB              A  1132    	LD	HL,(IX+%FFFFFFFB)
0005D7 B7                  A  1133    	OR	A,A
0005D8 40ED42              A  1134    	SBC.SIS	HL,BC
0005DB 20 D8               A  1135    	JR	NZ,L_58
0005DD                     A  1136    L_66:
                           A  1137    ;  286			//
                           A  1138    ;  287	        // If response token is 0xFE
                           A  1139    ;  288			//
                           A  1140    ;  289	        if(read == SD_START_TOKEN) {
0005DD DD7EFF              A  1141    	LD	A,(IX+%FFFFFFFF)
0005E0 FEFE                A  1142    	CP	A,%FE
0005E2 20 4A               A  1143    	JR	NZ,L_67
                           A  1144    ;  290				//
                           A  1145    ;  291	            // Read 512 byte block
                           A  1146    ;  292				//
                           A  1147    ;  293	            for(i = 0; i < SD_BLOCK_LEN
0005E4 DD36FD00            A  1148    	LD	(IX+%FFFFFFFD),%0
0005E8 DD36FE00            A  1149    	LD	(IX+%FFFFFFFE),%0
0005EC 18 1F               A  1150    	JR	L_63
0005EE                     A  1151    L_61:
                           A  1152    ;  294					*buf++ = spi_transfer(0
0005EE 01FF0000            A  1153    	LD	BC,255
0005F2 C5                  A  1154    	PUSH	BC
0005F3 CD 00 00 00         A  1155    	CALL	_spi_transfer
0005F7 C1                  A  1156    	POP	BC
0005F8 DD270C              A  1157    	LD	HL,(IX+%C)
0005FB 77                  A  1158    	LD	(HL),A
0005FC DD070C              A  1159    	LD	BC,(IX+%C)
0005FF 03                  A  1160    	INC	BC
000600 DD0F0C              A  1161    	LD	(IX+%C),BC
000603 DD27FD              A  1162    	LD	HL,(IX+%FFFFFFFD)
000606 23                  A  1163    	INC	HL
000607 DD75FD              A  1164    	LD	(IX+%FFFFFFFD),L
00060A DD74FE              A  1165    	LD	(IX+%FFFFFFFE),H
                           A  1166    ;  295				}
00060D                     A  1167    L_63:
00060D 49010002            A  1168    	LD.LIS	BC,512
000611 DD27FD              A  1169    	LD	HL,(IX+%FFFFFFFD)
000614 B7                  A  1170    	OR	A,A
000615 40ED42              A  1171    	SBC.SIS	HL,BC
000618 38 D4               A  1172    	JR	C,L_61
                           A  1173    ;  296				//
                           A  1174    ;  297	            // Read 16-bit CRC
                           A  1175    ;  298				//
                           A  1176    ;  299	            spi_transfer(0xFF);
00061A 01FF0000            A  1177    	LD	BC,255
00061E C5                  A  1178    	PUSH	BC
00061F CD 00 00 00         A  1179    	CALL	_spi_transfer
000623 C1                  A  1180    	POP	BC
                           A  1181    ;  300	            spi_transfer(0xFF);
000624 01FF0000            A  1182    	LD	BC,255
000628 C5                  A  1183    	PUSH	BC
000629 CD 00 00 00         A  1184    	CALL	_spi_transfer
00062D C1                  A  1185    	POP	BC
                           A  1186    ;  301	        }
00062E                     A  1187    L_67:
                           A  1188    ;  302			//
                           A  1189    ;  303	        // Set token to card response
                           A  1190    ;  304			//
                           A  1191    ;  305	        *token = read;
00062E DD270F              A  1192    	LD	HL,(IX+%F)
000631 DD7EFF              A  1193    	LD	A,(IX+%FFFFFFFF)
000634 77                  A  1194    	LD	(HL),A
                           A  1195    ;  306	    }
000635                     A  1196    L_69:
                           A  1197    ;  307		//
                           A  1198    ;  308	    // Deassert chip select
                           A  1199    ;  309		//
                           A  1200    ;  310	    spi_transfer(0xFF);
000635 01FF0000            A  1201    	LD	BC,255
000639 C5                  A  1202    	PUSH	BC
00063A CD 00 00 00         A  1203    	CALL	_spi_transfer
00063E C1                  A  1204    	POP	BC
                           A  1205    ;  311	    SD_CS_disable();
00063F CD 00 00 00         A  1206    	CALL	_SD_CS_disable
                           A  1207    ;  312	    spi_transfer(0xFF);
000643 01FF0000            A  1208    	LD	BC,255
000647 C5                  A  1209    	PUSH	BC
000648 CD 00 00 00         A  1210    	CALL	_spi_transfer
00064C C1                  A  1211    	POP	BC
                           A  1212    ;  313	
                           A  1213    ;  314	    return res1;
00064D DD7EFA              A  1214    	LD	A,(IX+%FFFFFFFA)
                           A  1215    ;  315	}
000650 DDF9                A  1216    	LD	SP,IX
000652 DDE1                A  1217    	POP	IX
000654 C9                  A  1218    	RET	
                           A  1219    
                           A  1220    
                           A  1221    ;**************************** _SD_readSingleBlo
                           A  1222    ;Name                         Addr/Register   S
                           A  1223    ;_SD_CS_disable                      IMPORT  --
                           A  1224    ;_SD_readRes1                        IMPORT  --
                           A  1225    ;_SD_command                         IMPORT  --
                           A  1226    ;_SD_CS_enable                       IMPORT  --
                           A  1227    ;_spi_transfer                       IMPORT  --
                           A  1228    ;res1                                  IX-6    
                           A  1229    ;readAttempts                          IX-5    
                           A  1230    ;i                                     IX-3    
                           A  1231    ;read                                  IX-1    
                           A  1232    ;token                                IX+15    
                           A  1233    ;buf                                  IX+12    
                           A  1234    ;addr                                  IX+6    
                           A  1235    
                           A  1236    
                           A  1237    ; Stack Frame Size: 24 (bytes)
                           A  1238    ;       Spill Code: 0 (instruction)
                           A  1239    
                           A  1240    
                           A  1241    ;  316	
                           A  1242    ;  317	BYTE SD_init(void) {
000655                     A  1243    _SD_init:
000655 21FAFFFF            A  1244    	LD	HL,-6
000659 CD 00 00 00         A  1245    	CALL	__frameset
                           A  1246    ;  318		BYTE res[5], cmdAttempts = 0;
00065D DD36FF00            A  1247    	LD	(IX+%FFFFFFFF),%0
                           A  1248    ;  319		
                           A  1249    ;  320		SD_powerUpSeq();
000661 CD D3 02 00         A  1250    	CALL	_SD_powerUpSeq
                           A  1251    ;  321		//
                           A  1252    ;  322	    // Command card to idle
                           A  1253    ;  323		//
                           A  1254    ;  324	    while((res[0] = SD_goIdleState()) !
000665 18 10               A  1255    	JR	L_73
000667                     A  1256    L_74:
                           A  1257    ;  325	        cmdAttempts++;
000667 DD34FF              A  1258    	INC	(IX+%FFFFFFFF)
                           A  1259    ;  326	        if(cmdAttempts > 10) return SD_
00066A 3E0A                A  1260    	LD	A,%A
00066C DDBEFF              A  1261    	CP	A,(IX+%FFFFFFFF)
00066F 30 06               A  1262    	JR	NC,L_73
000671 3E01                A  1263    	LD	A,%1
000673 C3 11 07 00         A  1264    	JR	L_90
                           A  1265    ;  327	    }
000677                     A  1266    L_73:
000677 CD 06 01 00         A  1267    	CALL	_SD_goIdleState
00067B DD77FA              A  1268    	LD	(IX+%FFFFFFFA),A
00067E B7ED62              A  1269    	UEXT	HL
000681 6F                  A  1270    	LD	L,A
000682 01010000            A  1271    	LD	BC,1
000686 B7                  A  1272    	OR	A,A
000687 ED42                A  1273    	SBC	HL,BC
000689 20 DC               A  1274    	JR	NZ,L_74
                           A  1275    ;  328		//
                           A  1276    ;  329	    // Send interface conditions
                           A  1277    ;  330		//
                           A  1278    ;  331	    SD_sendIfCond(res);
00068B ED65FA              A  1279    	PEA	IX+%FFFFFFFA
00068E CD 61 01 00         A  1280    	CALL	_SD_sendIfCond
000692 C1                  A  1281    	POP	BC
                           A  1282    ;  332	    if(res[0] != 0x01) {
000693 DD7EFA              A  1283    	LD	A,(IX+%FFFFFFFA)
000696 B7ED62              A  1284    	UEXT	HL
000699 6F                  A  1285    	LD	L,A
00069A 01010000            A  1286    	LD	BC,1
00069E B7                  A  1287    	OR	A,A
00069F ED42                A  1288    	SBC	HL,BC
0006A1 28 04               A  1289    	JR	Z,L_78
                           A  1290    ;  333	        return SD_ERROR;
0006A3 3E01                A  1291    	LD	A,%1
0006A5 18 6A               A  1292    	JR	L_90
                           A  1293    ;  334	    }
0006A7                     A  1294    L_78:
                           A  1295    ;  335		//
                           A  1296    ;  336	    // Check echo pattern
                           A  1297    ;  337		//
                           A  1298    ;  338	    if(res[4] != 0xAA) {
0006A7 ED22FE              A  1299    	LEA	HL,IX+%FFFFFFFE
0006AA 7E                  A  1300    	LD	A,(HL)
0006AB B7ED62              A  1301    	UEXT	HL
0006AE 6F                  A  1302    	LD	L,A
0006AF 01AA0000            A  1303    	LD	BC,170
0006B3 B7                  A  1304    	OR	A,A
0006B4 ED42                A  1305    	SBC	HL,BC
0006B6 28 04               A  1306    	JR	Z,L_79
                           A  1307    ;  339	        return SD_ERROR;
0006B8 3E01                A  1308    	LD	A,%1
0006BA 18 55               A  1309    	JR	L_90
                           A  1310    ;  340	    }
0006BC                     A  1311    L_79:
                           A  1312    ;  341		//
                           A  1313    ;  342	    // Attempt to initialize card
                           A  1314    ;  343		//
                           A  1315    ;  344	    cmdAttempts = 0;
0006BC DD36FF00            A  1316    	LD	(IX+%FFFFFFFF),%0
                           A  1317    ;  345	    do {
0006C0                     A  1318    L_85:
                           A  1319    ;  346	        if(cmdAttempts > 100) return SD
0006C0 3E64                A  1320    	LD	A,%64
0006C2 DDBEFF              A  1321    	CP	A,(IX+%FFFFFFFF)
0006C5 30 04               A  1322    	JR	NC,L_81
0006C7 3E01                A  1323    	LD	A,%1
0006C9 18 46               A  1324    	JR	L_90
0006CB                     A  1325    L_81:
                           A  1326    ;  347			//
                           A  1327    ;  348	        // Send app cmd
                           A  1328    ;  349			//
                           A  1329    ;  350	        res[0] = SD_sendApp();
0006CB CD BF 01 00         A  1330    	CALL	_SD_sendApp
0006CF DD77FA              A  1331    	LD	(IX+%FFFFFFFA),A
                           A  1332    ;  351			//
                           A  1333    ;  352	        // If no error in response
                           A  1334    ;  353			//
                           A  1335    ;  354	        if(res[0] < 2) {
0006D2 B7ED62              A  1336    	UEXT	HL
0006D5 6F                  A  1337    	LD	L,A
0006D6 01020000            A  1338    	LD	BC,2
0006DA B7                  A  1339    	OR	A,A
0006DB ED42                A  1340    	SBC	HL,BC
0006DD F2 E8 06 00         A  1341    	JP	P,L_83
                           A  1342    ;  355	            res[0] = SD_sendOpCond();
0006E1 CD 1A 02 00         A  1343    	CALL	_SD_sendOpCond
0006E5 DD77FA              A  1344    	LD	(IX+%FFFFFFFA),A
                           A  1345    ;  356	        }
0006E8                     A  1346    L_83:
                           A  1347    ;  357			//
                           A  1348    ;  358	        // Wait
                           A  1349    ;  359			//
                           A  1350    ;  360	        delayms(10);
0006E8 010A0000            A  1351    	LD	BC,10
0006EC C5                  A  1352    	PUSH	BC
0006ED CD 00 00 00         A  1353    	CALL	_delayms
0006F1 C1                  A  1354    	POP	BC
                           A  1355    ;  361	        cmdAttempts++;
0006F2 DD34FF              A  1356    	INC	(IX+%FFFFFFFF)
                           A  1357    ;  362	    }
                           A  1358    ;  363	    while(res[0] != SD_READY);
0006F5 DD7EFA              A  1359    	LD	A,(IX+%FFFFFFFA)
0006F8 B7                  A  1360    	OR	A,A
0006F9 20 C5               A  1361    	JR	NZ,L_85
                           A  1362    ;  364		//
                           A  1363    ;  365	    // Read OCR
                           A  1364    ;  366		//
                           A  1365    ;  367	    SD_readOCR(res);
0006FB ED65FA              A  1366    	PEA	IX+%FFFFFFFA
0006FE CD 7D 02 00         A  1367    	CALL	_SD_readOCR
000702 C1                  A  1368    	POP	BC
                           A  1369    ;  368		//
                           A  1370    ;  369	    // Check card is ready
                           A  1371    ;  370		//
                           A  1372    ;  371	    if(!(res[1] & 0x80)) return SD_ERRO
000703 ED22FA              A  1373    	LEA	HL,IX+%FFFFFFFA
000706 23                  A  1374    	INC	HL
000707 7E                  A  1375    	LD	A,(HL)
000708 E680                A  1376    	AND	A,%80
00070A 20 04               A  1377    	JR	NZ,L_89
00070C 3E01                A  1378    	LD	A,%1
00070E 18 01               A  1379    	JR	L_90
000710                     A  1380    L_89:
                           A  1381    ;  372	
                           A  1382    ;  373	    return SD_SUCCESS;	
000710 AF                  A  1383    	XOR	A,A
                           A  1384    ;  374	}
000711                     A  1385    L_90:
000711 DDF9                A  1386    	LD	SP,IX
000713 DDE1                A  1387    	POP	IX
000715 C9                  A  1388    	RET	
                           A  1389    
                           A  1390    
                           A  1391    ;**************************** _SD_init ********
                           A  1392    ;Name                         Addr/Register   S
                           A  1393    ;_SD_readOCR                         IMPORT  --
                           A  1394    ;_delayms                            IMPORT  --
                           A  1395    ;_SD_sendOpCond                      IMPORT  --
                           A  1396    ;_SD_sendApp                         IMPORT  --
                           A  1397    ;_SD_sendIfCond                      IMPORT  --
                           A  1398    ;_SD_goIdleState                     IMPORT  --
                           A  1399    ;_SD_powerUpSeq                      IMPORT  --
                           A  1400    ;res                                   IX-6    
                           A  1401    ;cmdAttempts                           IX-1    
                           A  1402    
                           A  1403    
                           A  1404    ; Stack Frame Size: 12 (bytes)
                           A  1405    ;       Spill Code: 0 (instruction)
                           A  1406    
                           A  1407    
                           A  1408    	XREF _delayms:ROM
                           A  1409    	XREF _SD_CS_disable:ROM
                           A  1410    	XREF _SD_CS_enable:ROM
                           A  1411    	XREF _spi_transfer:ROM
                           A  1412    	XREF __lshru:ROM
                           A  1413    	XREF __stoiu:ROM
                           A  1414    	XREF __frameset0:ROM
                           A  1415    	XREF __frameset:ROM
                           A  1416    	XREF __setflag:ROM
                           A  1417    	XREF __ladd_b:ROM
                           A  1418    	XDEF _SD_init
                           A  1419    	XDEF _SD_readSingleBlock
                           A  1420    	XDEF _SD_writeSingleBlock
                           A  1421    	XDEF _SD_writeBlocks
                           A  1422    	XDEF _SD_readBlocks
                           A  1423    	XDEF _SD_powerUpSeq
                           A  1424    	XDEF _SD_readOCR
                           A  1425    	XDEF _SD_sendOpCond
                           A  1426    	XDEF _SD_sendApp
                           A  1427    	XDEF _SD_sendIfCond
                           A  1428    	XDEF _SD_goIdleState
                           A  1429    	XDEF _SD_readRes7
                           A  1430    	XDEF _SD_readRes1
                           A  1431    	XDEF _SD_command
                           A  1432    	END


Errors: 0
Warnings: 0
Lines Assembled: 1433
